{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_houseName",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_housePrivate",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "_gov",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "_govRuleMaxManagerMembers",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_govRuleMaxActiveMembers",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_govRuleApprovPercentage",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_CLCMemberManagement",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_CLCGovernance",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_CLLConstructor",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_ManagerWallets",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newApprovPercentage",
          "type": "uint256"
        }
      ],
      "name": "evtChangeGovRules",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum memberEvent",
          "name": "eventMember",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "walletAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "evtMember",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum proposalEvent",
          "name": "eventProposal",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "propId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum proposalType",
          "name": "typeProposal",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "evtProposal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenOutCLV",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOutCLV",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenInCLV",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "name": "evtSwapERC20",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "walletAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAdd",
          "type": "address"
        }
      ],
      "name": "evtTxERC20",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum assetsEvent",
          "name": "typeEvent",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "walletAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "evtTxEth",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "propId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "position",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "justification",
          "type": "string"
        }
      ],
      "name": "evtVoted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_acceptance",
          "type": "bool"
        }
      ],
      "name": "AcceptRejectInvitation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_propId",
          "type": "uint256"
        }
      ],
      "name": "ExecProp",
      "outputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GetArrMembersLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HOUSE_GOVERNANCE_MODEL",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HOUSE_NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenInCLV",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountOutCLV",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_delayTime",
          "type": "uint256"
        }
      ],
      "name": "PropBuyERC20",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "propId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_newApprovPercentage",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_delayTime",
          "type": "uint256"
        }
      ],
      "name": "PropGovRules",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "propId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_walletAddr",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_isManager",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_delayTime",
          "type": "uint256"
        }
      ],
      "name": "PropInviteMember",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "propId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_walletAddr",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_delayTime",
          "type": "uint256"
        }
      ],
      "name": "PropRemoveMember",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "propId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        }
      ],
      "name": "PropRequestToJoin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenOutCLV",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountOutCLV",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_delayTime",
          "type": "uint256"
        }
      ],
      "name": "PropSellERC20",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "propId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenOutCLV",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenInCLV",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountOutCLV",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_delayTime",
          "type": "uint256"
        }
      ],
      "name": "PropSwapERC20",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "propId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountOutCLV",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenOutCLV",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_delayTime",
          "type": "uint256"
        }
      ],
      "name": "PropTxERC20",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "propId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountOutCLV",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_delayTime",
          "type": "uint256"
        }
      ],
      "name": "PropTxWei",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "propId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_propId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_support",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "_justification",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "signR",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "signS",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "signV",
          "type": "uint8"
        }
      ],
      "name": "VotePropOffChain",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_propId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_support",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "_justification",
          "type": "string"
        }
      ],
      "name": "VoteProposal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "__OFFCHAINVOTE_STRUCT_TYPEHASH__",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "arrDataPropAddMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "walletAddr",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isManager",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "arrDataPropGovRules",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "newApprovPercentage",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "arrDataPropTxAssets",
      "outputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOutCLV",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenOutCLV",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenInCLV",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "arrMembers",
      "outputs": [
        {
          "internalType": "address",
          "name": "walletAddr",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isMember",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isManager",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "arrProposals",
      "outputs": [
        {
          "internalType": "address",
          "name": "proponent",
          "type": "address"
        },
        {
          "internalType": "enum proposalType",
          "name": "typeProposal",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "propDataId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "numVotes",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "againstVotes",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "rejected",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "govRuleApprovPercentage",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "govRuleMaxActiveMembers",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "govRuleMaxManagerMembers",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "housePrivate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mapIdMember",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mapInvitationMember",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mapVotes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "voted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "inSupport",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "justification",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftAdmin",
      "outputs": [
        {
          "internalType": "contract CLHNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftInvitation",
      "outputs": [
        {
          "internalType": "contract CLHNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftMember",
      "outputs": [
        {
          "internalType": "contract CLHNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numActiveMembers",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numManagerMembers",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultCLH",
      "outputs": [
        {
          "internalType": "contract CLVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "35": "contracts/CLHouse/CLHouse.sol",
    "37": "contracts/CLHouse/CLStorage.sol"
  },
  "ast": {
    "absolutePath": "contracts/CLHouse/CLHouse.sol",
    "exportedSymbols": {
      "Address": [
        9134
      ],
      "CLHNFT": [
        4575
      ],
      "CLHouse": [
        1328
      ],
      "CLStorage": [
        1782
      ],
      "CLVault": [
        2232
      ],
      "Context": [
        8678
      ],
      "Counters": [
        6927
      ],
      "DebugDLGTCLL": [
        4146
      ],
      "ERC165": [
        9361
      ],
      "ERC721": [
        6695
      ],
      "ERC721Burnable": [
        6725
      ],
      "ERC721URIStorage": [
        6853
      ],
      "ICLHouse": [
        4463
      ],
      "IERC165": [
        10103
      ],
      "IERC20": [
        5724
      ],
      "IERC721": [
        8794
      ],
      "IERC721Metadata": [
        8839
      ],
      "IERC721Receiver": [
        8812
      ],
      "ISwapRouter": [
        5475
      ],
      "IUniswapV3SwapCallback": [
        8656
      ],
      "InvalidGovernanceType": [
        4140
      ],
      "Ownable": [
        5829
      ],
      "Strings": [
        9337
      ],
      "TransferHelper": [
        5646
      ],
      "__GOV_COMMITTEE__": [
        4131
      ],
      "__GOV_DICTATORSHIP__": [
        4126
      ],
      "__GOV_SIMPLE_MAJORITY__": [
        4136
      ],
      "assetsEvent": [
        4160
      ],
      "memberEvent": [
        4153
      ],
      "proposalEvent": [
        4164
      ],
      "proposalType": [
        4174
      ],
      "strDataAddMember": [
        4219
      ],
      "strDataGovRules": [
        4231
      ],
      "strDataTxAssets": [
        4228
      ],
      "strMember": [
        4185
      ],
      "strOffChainVote": [
        4240
      ],
      "strProposal": [
        4205
      ],
      "strVote": [
        4212
      ]
    },
    "id": 1329,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 669,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".11"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:24:35"
      },
      {
        "absolutePath": "contracts/CLHouse/CLStorage.sol",
        "file": "./CLStorage.sol",
        "id": 670,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1329,
        "sourceUnit": 1783,
        "src": "58:25:35",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 672,
              "name": "CLStorage",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1782,
              "src": "274:9:35"
            },
            "id": 673,
            "nodeType": "InheritanceSpecifier",
            "src": "274:9:35"
          }
        ],
        "canonicalName": "CLHouse",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 671,
          "nodeType": "StructuredDocumentation",
          "src": "85:169:35",
          "text": "@title Contract to implement and test the basic fuctions of CLHouses\n @author Leonardo Urrego\n @notice This contract for test only the most basic interactions"
        },
        "fullyImplemented": true,
        "id": 1328,
        "linearizedBaseContracts": [
          1328,
          1782
        ],
        "name": "CLHouse",
        "nameLocation": "263:7:35",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 727,
              "nodeType": "Block",
              "src": "1435:853:35",
              "statements": [
                {
                  "assignments": [
                    701,
                    703
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 701,
                      "mutability": "mutable",
                      "name": "successDGTCLL",
                      "nameLocation": "1461:13:35",
                      "nodeType": "VariableDeclaration",
                      "scope": 727,
                      "src": "1456:18:35",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 700,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "1456:4:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 703,
                      "mutability": "mutable",
                      "name": "dataDLGTCLL",
                      "nameLocation": "1489:11:35",
                      "nodeType": "VariableDeclaration",
                      "scope": 727,
                      "src": "1476:24:35",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 702,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "1476:5:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 721,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "434c4c434c48436f6e7374727563746f7228616464726573732c737472696e672c626f6f6c2c627974657333322c75696e74382c75696e74382c75696e74382c616464726573732c616464726573732c616464726573735b5d29",
                            "id": 708,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1587:92:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_1c4b558f301f526804439a30dcb1c8c2c55b6421a316324c93e940b254cf6d09",
                              "typeString": "literal_string \"CLLCLHConstructor(address,string,bool,bytes32,uint8,uint8,uint8,address,address,address[])\""
                            },
                            "value": "CLLCLHConstructor(address,string,bool,bytes32,uint8,uint8,uint8,address,address,address[])"
                          },
                          {
                            "id": 709,
                            "name": "_owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 676,
                            "src": "1697:6:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 710,
                            "name": "_houseName",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 678,
                            "src": "1722:10:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          {
                            "id": 711,
                            "name": "_housePrivate",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 680,
                            "src": "1750:13:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "id": 712,
                            "name": "_gov",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 682,
                            "src": "1781:4:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "id": 713,
                            "name": "_govRuleMaxManagerMembers",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 684,
                            "src": "1803:25:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          {
                            "id": 714,
                            "name": "_govRuleMaxActiveMembers",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 686,
                            "src": "1846:24:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          {
                            "id": 715,
                            "name": "_govRuleApprovPercentage",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 688,
                            "src": "1888:24:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          {
                            "id": 716,
                            "name": "_CLCMemberManagement",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 690,
                            "src": "1930:20:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 717,
                            "name": "_CLCGovernance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 692,
                            "src": "1968:14:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 718,
                            "name": "_ManagerWallets",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 697,
                            "src": "2000:15:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                              "typeString": "address[] memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_1c4b558f301f526804439a30dcb1c8c2c55b6421a316324c93e940b254cf6d09",
                              "typeString": "literal_string \"CLLCLHConstructor(address,string,bool,bytes32,uint8,uint8,uint8,address,address,address[])\""
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            },
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                              "typeString": "address[] memory"
                            }
                          ],
                          "expression": {
                            "id": 706,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "1546:3:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 707,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodeWithSignature",
                          "nodeType": "MemberAccess",
                          "src": "1546:23:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (string memory) pure returns (bytes memory)"
                          }
                        },
                        "id": 719,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1546:483:35",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 704,
                        "name": "_CLLConstructor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 694,
                        "src": "1504:15:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 705,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "delegatecall",
                      "nodeType": "MemberAccess",
                      "src": "1504:28:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes memory) returns (bool,bytes memory)"
                      }
                    },
                    "id": 720,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1504:535:35",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1455:584:35"
                },
                {
                  "condition": {
                    "id": 723,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "2054:14:35",
                    "subExpression": {
                      "id": 722,
                      "name": "successDGTCLL",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 701,
                      "src": "2055:13:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 726,
                  "nodeType": "IfStatement",
                  "src": "2050:232:35",
                  "trueBody": {
                    "id": 725,
                    "nodeType": "Block",
                    "src": "2071:211:35",
                    "statements": [
                      {
                        "AST": {
                          "nodeType": "YulBlock",
                          "src": "2094:178:35",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2112:22:35",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2129:4:35",
                                    "type": "",
                                    "value": "0x40"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "2123:5:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2123:11:35"
                              },
                              "variables": [
                                {
                                  "name": "ptr",
                                  "nodeType": "YulTypedName",
                                  "src": "2116:3:35",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2151:28:35",
                              "value": {
                                "arguments": [],
                                "functionName": {
                                  "name": "returndatasize",
                                  "nodeType": "YulIdentifier",
                                  "src": "2163:14:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2163:16:35"
                              },
                              "variables": [
                                {
                                  "name": "size",
                                  "nodeType": "YulTypedName",
                                  "src": "2155:4:35",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "ptr",
                                    "nodeType": "YulIdentifier",
                                    "src": "2211:3:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2216:1:35",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "name": "size",
                                    "nodeType": "YulIdentifier",
                                    "src": "2219:4:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "returndatacopy",
                                  "nodeType": "YulIdentifier",
                                  "src": "2196:14:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2196:28:35"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "2196:28:35"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "ptr",
                                    "nodeType": "YulIdentifier",
                                    "src": "2248:3:35"
                                  },
                                  {
                                    "name": "size",
                                    "nodeType": "YulIdentifier",
                                    "src": "2253:4:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "2241:6:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2241:17:35"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "2241:17:35"
                            }
                          ]
                        },
                        "evmVersion": "istanbul",
                        "externalReferences": [],
                        "id": 724,
                        "nodeType": "InlineAssembly",
                        "src": "2085:187:35"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 674,
              "nodeType": "StructuredDocumentation",
              "src": "291:742:35",
              "text": "@notice Create a new CLH\n @dev Some parameters can be ignored depending on the governance model\n @param _owner The address of the deployed wallet\n @param _houseName Name given by the owner\n @param _housePrivate If is set to 1, the CLH is set to private\n @param _gov keccak256 hash of the governance model, see the __GOV_* constans\n @param _govRuleMaxManagerMembers Max of manager member that CLH can accept (only for COMMITTEE )\n @param _govRuleMaxActiveMembers Max of all members (including managers)\n @param _govRuleApprovPercentage Percentage for approval o reject proposal based on `numManagerMembers`\n @param _ManagerWallets Whitelist of address for invitate as managers"
            },
            "id": 728,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 698,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 676,
                  "mutability": "mutable",
                  "name": "_owner",
                  "nameLocation": "1067:6:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 728,
                  "src": "1059:14:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 675,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1059:7:35",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 678,
                  "mutability": "mutable",
                  "name": "_houseName",
                  "nameLocation": "1098:10:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 728,
                  "src": "1084:24:35",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 677,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1084:6:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 680,
                  "mutability": "mutable",
                  "name": "_housePrivate",
                  "nameLocation": "1123:13:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 728,
                  "src": "1118:18:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 679,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1118:4:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 682,
                  "mutability": "mutable",
                  "name": "_gov",
                  "nameLocation": "1154:4:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 728,
                  "src": "1146:12:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 681,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1146:7:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 684,
                  "mutability": "mutable",
                  "name": "_govRuleMaxManagerMembers",
                  "nameLocation": "1174:25:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 728,
                  "src": "1168:31:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 683,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "1168:5:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 686,
                  "mutability": "mutable",
                  "name": "_govRuleMaxActiveMembers",
                  "nameLocation": "1215:24:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 728,
                  "src": "1209:30:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 685,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "1209:5:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 688,
                  "mutability": "mutable",
                  "name": "_govRuleApprovPercentage",
                  "nameLocation": "1255:24:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 728,
                  "src": "1249:30:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 687,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "1249:5:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 690,
                  "mutability": "mutable",
                  "name": "_CLCMemberManagement",
                  "nameLocation": "1297:20:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 728,
                  "src": "1289:28:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 689,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1289:7:35",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 692,
                  "mutability": "mutable",
                  "name": "_CLCGovernance",
                  "nameLocation": "1335:14:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 728,
                  "src": "1327:22:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 691,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1327:7:35",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 694,
                  "mutability": "mutable",
                  "name": "_CLLConstructor",
                  "nameLocation": "1367:15:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 728,
                  "src": "1359:23:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 693,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1359:7:35",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 697,
                  "mutability": "mutable",
                  "name": "_ManagerWallets",
                  "nameLocation": "1409:15:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 728,
                  "src": "1392:32:35",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 695,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1392:7:35",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 696,
                    "nodeType": "ArrayTypeName",
                    "src": "1392:9:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1049:381:35"
            },
            "returnParameters": {
              "id": 699,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1435:0:35"
            },
            "scope": 1328,
            "src": "1038:1250:35",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 760,
              "nodeType": "Block",
              "src": "2797:514:35",
              "statements": [
                {
                  "assignments": [
                    739,
                    741
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 739,
                      "mutability": "mutable",
                      "name": "successDGTCLL",
                      "nameLocation": "2813:13:35",
                      "nodeType": "VariableDeclaration",
                      "scope": 760,
                      "src": "2808:18:35",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 738,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "2808:4:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 741,
                      "mutability": "mutable",
                      "name": "dataDLGTCLL",
                      "nameLocation": "2841:11:35",
                      "nodeType": "VariableDeclaration",
                      "scope": 760,
                      "src": "2828:24:35",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 740,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "2828:5:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 750,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "5f4578656350726f702875696e7432353629",
                            "id": 746,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2937:20:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_4eeb7b857add57878aabffd3a0fa25ef81d4ec5c9dbab986b196eb787b30e8b1",
                              "typeString": "literal_string \"_ExecProp(uint256)\""
                            },
                            "value": "_ExecProp(uint256)"
                          },
                          {
                            "id": 747,
                            "name": "_propId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 731,
                            "src": "2975:7:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_4eeb7b857add57878aabffd3a0fa25ef81d4ec5c9dbab986b196eb787b30e8b1",
                              "typeString": "literal_string \"_ExecProp(uint256)\""
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 744,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "2896:3:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 745,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodeWithSignature",
                          "nodeType": "MemberAccess",
                          "src": "2896:23:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (string memory) pure returns (bytes memory)"
                          }
                        },
                        "id": 748,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2896:100:35",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 742,
                        "name": "CLCGovernance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1661,
                        "src": "2856:13:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 743,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "delegatecall",
                      "nodeType": "MemberAccess",
                      "src": "2856:26:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes memory) returns (bool,bytes memory)"
                      }
                    },
                    "id": 749,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2856:150:35",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2807:199:35"
                },
                {
                  "condition": {
                    "id": 752,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "3021:14:35",
                    "subExpression": {
                      "id": 751,
                      "name": "successDGTCLL",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 739,
                      "src": "3022:13:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 755,
                  "nodeType": "IfStatement",
                  "src": "3017:232:35",
                  "trueBody": {
                    "id": 754,
                    "nodeType": "Block",
                    "src": "3038:211:35",
                    "statements": [
                      {
                        "AST": {
                          "nodeType": "YulBlock",
                          "src": "3061:178:35",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3079:22:35",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3096:4:35",
                                    "type": "",
                                    "value": "0x40"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "3090:5:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3090:11:35"
                              },
                              "variables": [
                                {
                                  "name": "ptr",
                                  "nodeType": "YulTypedName",
                                  "src": "3083:3:35",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3118:28:35",
                              "value": {
                                "arguments": [],
                                "functionName": {
                                  "name": "returndatasize",
                                  "nodeType": "YulIdentifier",
                                  "src": "3130:14:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3130:16:35"
                              },
                              "variables": [
                                {
                                  "name": "size",
                                  "nodeType": "YulTypedName",
                                  "src": "3122:4:35",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "ptr",
                                    "nodeType": "YulIdentifier",
                                    "src": "3178:3:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3183:1:35",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "name": "size",
                                    "nodeType": "YulIdentifier",
                                    "src": "3186:4:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "returndatacopy",
                                  "nodeType": "YulIdentifier",
                                  "src": "3163:14:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3163:28:35"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3163:28:35"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "ptr",
                                    "nodeType": "YulIdentifier",
                                    "src": "3215:3:35"
                                  },
                                  {
                                    "name": "size",
                                    "nodeType": "YulIdentifier",
                                    "src": "3220:4:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "3208:6:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3208:17:35"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3208:17:35"
                            }
                          ]
                        },
                        "evmVersion": "istanbul",
                        "externalReferences": [],
                        "id": 753,
                        "nodeType": "InlineAssembly",
                        "src": "3052:187:35"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "components": [
                      {
                        "hexValue": "74727565",
                        "id": 756,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3268:4:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      {
                        "hexValue": "537563636573732065786563757465642070726f706f73616c",
                        "id": 757,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3275:27:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_cc5063be902007aa4094c05d7977aa17bd625bcc90d4b58bc658ed91467f2f04",
                          "typeString": "literal_string \"Success executed proposal\""
                        },
                        "value": "Success executed proposal"
                      }
                    ],
                    "id": 758,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "3266:38:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_stringliteral_cc5063be902007aa4094c05d7977aa17bd625bcc90d4b58bc658ed91467f2f04_$",
                      "typeString": "tuple(bool,literal_string \"Success executed proposal\")"
                    }
                  },
                  "functionReturnParameters": 737,
                  "id": 759,
                  "nodeType": "Return",
                  "src": "3259:45:35"
                }
              ]
            },
            "documentation": {
              "id": 729,
              "nodeType": "StructuredDocumentation",
              "src": "2294:344:35",
              "text": "@notice Execute (or reject) a proposal computing the votes and the governance model\n @dev Normally is called internally after each vote\n @param _propId ID of the proposal, based on `arrProposals`\n @return status True if the proposal can be execute, false in other cases\n @return message result of the transaction"
            },
            "functionSelector": "5f3d99b3",
            "id": 761,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "ExecProp",
            "nameLocation": "2652:8:35",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 732,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 731,
                  "mutability": "mutable",
                  "name": "_propId",
                  "nameLocation": "2678:7:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 761,
                  "src": "2670:15:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 730,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2670:7:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2660:31:35"
            },
            "returnParameters": {
              "id": 737,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 734,
                  "mutability": "mutable",
                  "name": "status",
                  "nameLocation": "2741:6:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 761,
                  "src": "2736:11:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 733,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2736:4:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 736,
                  "mutability": "mutable",
                  "name": "message",
                  "nameLocation": "2775:7:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 761,
                  "src": "2761:21:35",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 735,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2761:6:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2722:70:35"
            },
            "scope": 1328,
            "src": "2643:668:35",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 795,
              "nodeType": "Block",
              "src": "3801:556:35",
              "statements": [
                {
                  "assignments": [
                    774,
                    776
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 774,
                      "mutability": "mutable",
                      "name": "successDGTCLL",
                      "nameLocation": "3817:13:35",
                      "nodeType": "VariableDeclaration",
                      "scope": 795,
                      "src": "3812:18:35",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 773,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "3812:4:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 776,
                      "mutability": "mutable",
                      "name": "dataDLGTCLL",
                      "nameLocation": "3845:11:35",
                      "nodeType": "VariableDeclaration",
                      "scope": 795,
                      "src": "3832:24:35",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 775,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "3832:5:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 787,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "5f566f746550726f706f73616c2875696e743235362c626f6f6c2c737472696e6729",
                            "id": 781,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3942:36:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_f40e9b45c8cb3eefe3814bdb43fffcd9c8d68fcf6fe63025b2fdea82dc6c4889",
                              "typeString": "literal_string \"_VoteProposal(uint256,bool,string)\""
                            },
                            "value": "_VoteProposal(uint256,bool,string)"
                          },
                          {
                            "id": 782,
                            "name": "_propId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 764,
                            "src": "3997:7:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 783,
                            "name": "_support",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 766,
                            "src": "4022:8:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "id": 784,
                            "name": "_justification",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 768,
                            "src": "4048:14:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_f40e9b45c8cb3eefe3814bdb43fffcd9c8d68fcf6fe63025b2fdea82dc6c4889",
                              "typeString": "literal_string \"_VoteProposal(uint256,bool,string)\""
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          ],
                          "expression": {
                            "id": 779,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "3900:3:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 780,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodeWithSignature",
                          "nodeType": "MemberAccess",
                          "src": "3900:23:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (string memory) pure returns (bytes memory)"
                          }
                        },
                        "id": 785,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3900:176:35",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 777,
                        "name": "CLCGovernance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1661,
                        "src": "3860:13:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 778,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "delegatecall",
                      "nodeType": "MemberAccess",
                      "src": "3860:26:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes memory) returns (bool,bytes memory)"
                      }
                    },
                    "id": 786,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3860:226:35",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3811:275:35"
                },
                {
                  "condition": {
                    "id": 789,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "4101:14:35",
                    "subExpression": {
                      "id": 788,
                      "name": "successDGTCLL",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 774,
                      "src": "4102:13:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 792,
                  "nodeType": "IfStatement",
                  "src": "4097:232:35",
                  "trueBody": {
                    "id": 791,
                    "nodeType": "Block",
                    "src": "4118:211:35",
                    "statements": [
                      {
                        "AST": {
                          "nodeType": "YulBlock",
                          "src": "4141:178:35",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4159:22:35",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4176:4:35",
                                    "type": "",
                                    "value": "0x40"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "4170:5:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4170:11:35"
                              },
                              "variables": [
                                {
                                  "name": "ptr",
                                  "nodeType": "YulTypedName",
                                  "src": "4163:3:35",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4198:28:35",
                              "value": {
                                "arguments": [],
                                "functionName": {
                                  "name": "returndatasize",
                                  "nodeType": "YulIdentifier",
                                  "src": "4210:14:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4210:16:35"
                              },
                              "variables": [
                                {
                                  "name": "size",
                                  "nodeType": "YulTypedName",
                                  "src": "4202:4:35",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "ptr",
                                    "nodeType": "YulIdentifier",
                                    "src": "4258:3:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4263:1:35",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "name": "size",
                                    "nodeType": "YulIdentifier",
                                    "src": "4266:4:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "returndatacopy",
                                  "nodeType": "YulIdentifier",
                                  "src": "4243:14:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4243:28:35"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4243:28:35"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "ptr",
                                    "nodeType": "YulIdentifier",
                                    "src": "4295:3:35"
                                  },
                                  {
                                    "name": "size",
                                    "nodeType": "YulIdentifier",
                                    "src": "4300:4:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "4288:6:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4288:17:35"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4288:17:35"
                            }
                          ]
                        },
                        "evmVersion": "istanbul",
                        "externalReferences": [],
                        "id": 790,
                        "nodeType": "InlineAssembly",
                        "src": "4132:187:35"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 793,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "4346:4:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 772,
                  "id": 794,
                  "nodeType": "Return",
                  "src": "4339:11:35"
                }
              ]
            },
            "documentation": {
              "id": 762,
              "nodeType": "StructuredDocumentation",
              "src": "3317:322:35",
              "text": "@notice Used to vote a proposal\n @dev After vote the proposal automatically try to be executed\n @param _propId ID of the proposal, based on `arrProposals`\n @param _support True for accept, false to reject\n @param _justification About your vote\n @return true is the vote can be stored"
            },
            "functionSelector": "a5ac0f31",
            "id": 796,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "VoteProposal",
            "nameLocation": "3653:12:35",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 769,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 764,
                  "mutability": "mutable",
                  "name": "_propId",
                  "nameLocation": "3683:7:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 796,
                  "src": "3675:15:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 763,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3675:7:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 766,
                  "mutability": "mutable",
                  "name": "_support",
                  "nameLocation": "3705:8:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 796,
                  "src": "3700:13:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 765,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3700:4:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 768,
                  "mutability": "mutable",
                  "name": "_justification",
                  "nameLocation": "3737:14:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 796,
                  "src": "3723:28:35",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 767,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3723:6:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3665:92:35"
            },
            "returnParameters": {
              "id": 772,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 771,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 796,
                  "src": "3790:4:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 770,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3790:4:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3788:8:35"
            },
            "scope": 1328,
            "src": "3644:713:35",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1010,
              "nodeType": "Block",
              "src": "4618:2593:35",
              "statements": [
                {
                  "assignments": [
                    816
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 816,
                      "mutability": "mutable",
                      "name": "chainId",
                      "nameLocation": "4636:7:35",
                      "nodeType": "VariableDeclaration",
                      "scope": 1010,
                      "src": "4628:15:35",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 815,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4628:7:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 819,
                  "initialValue": {
                    "expression": {
                      "id": 817,
                      "name": "block",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -4,
                      "src": "4646:5:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_block",
                        "typeString": "block"
                      }
                    },
                    "id": 818,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "chainid",
                    "nodeType": "MemberAccess",
                    "src": "4646:13:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4628:31:35"
                },
                {
                  "assignments": [
                    821
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 821,
                      "mutability": "mutable",
                      "name": "eip712DomainHash",
                      "nameLocation": "4678:16:35",
                      "nodeType": "VariableDeclaration",
                      "scope": 1010,
                      "src": "4670:24:35",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 820,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "4670:7:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 844,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "hexValue": "454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429",
                                    "id": 828,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "4796:84:35",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
                                      "typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
                                    },
                                    "value": "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
                                      "typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
                                    }
                                  ],
                                  "expression": {
                                    "id": 826,
                                    "name": "abi",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -1,
                                    "src": "4758:3:35",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_abi",
                                      "typeString": "abi"
                                    }
                                  },
                                  "id": 827,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "memberName": "encodePacked",
                                  "nodeType": "MemberAccess",
                                  "src": "4758:16:35",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                    "typeString": "function () pure returns (bytes memory)"
                                  }
                                },
                                "id": 829,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "4758:140:35",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              ],
                              "id": 825,
                              "name": "keccak256",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -8,
                              "src": "4748:9:35",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                "typeString": "function (bytes memory) pure returns (bytes32)"
                              }
                            },
                            "id": 830,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4748:151:35",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "hexValue": "434c486f757365",
                                "id": 832,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "string",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "4927:9:35",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_stringliteral_01318895af1f6db161b2ba745b8e57a6b46efad77d736630379ec69c3cd4c875",
                                  "typeString": "literal_string \"CLHouse\""
                                },
                                "value": "CLHouse"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_01318895af1f6db161b2ba745b8e57a6b46efad77d736630379ec69c3cd4c875",
                                  "typeString": "literal_string \"CLHouse\""
                                }
                              ],
                              "id": 831,
                              "name": "keccak256",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -8,
                              "src": "4917:9:35",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                "typeString": "function (bytes memory) pure returns (bytes32)"
                              }
                            },
                            "id": 833,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4917:20:35",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "hexValue": "302e302e3130",
                                "id": 835,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "string",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "4965:8:35",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_stringliteral_07ef8ec374e43c85c540da8f69de7866f66e96deb3aa6b597df20e0ff3ce0c64",
                                  "typeString": "literal_string \"0.0.10\""
                                },
                                "value": "0.0.10"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_07ef8ec374e43c85c540da8f69de7866f66e96deb3aa6b597df20e0ff3ce0c64",
                                  "typeString": "literal_string \"0.0.10\""
                                }
                              ],
                              "id": 834,
                              "name": "keccak256",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -8,
                              "src": "4955:9:35",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                "typeString": "function (bytes memory) pure returns (bytes32)"
                              }
                            },
                            "id": 836,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4955:19:35",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "id": 837,
                            "name": "chainId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 816,
                            "src": "4992:7:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "id": 840,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "5025:4:35",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_CLHouse_$1328",
                                  "typeString": "contract CLHouse"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_CLHouse_$1328",
                                  "typeString": "contract CLHouse"
                                }
                              ],
                              "id": 839,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "5017:7:35",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 838,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "5017:7:35",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 841,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5017:13:35",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "id": 823,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "4720:3:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 824,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encode",
                          "nodeType": "MemberAccess",
                          "src": "4720:10:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 842,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4720:324:35",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 822,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "4697:9:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 843,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4697:357:35",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4670:384:35"
                },
                {
                  "assignments": [
                    846
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 846,
                      "mutability": "mutable",
                      "name": "hashStruct",
                      "nameLocation": "5073:10:35",
                      "nodeType": "VariableDeclaration",
                      "scope": 1010,
                      "src": "5065:18:35",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 845,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "5065:7:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 867,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "hexValue": "7374724f6666436861696e566f7465286164647265737320766f7465722c75696e743235362070726f7049642c626f6f6c20737570706f72742c737472696e67206a757374696669636174696f6e29",
                                    "id": 853,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "5185:81:35",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_29db90f499fc17d858adf930fec9986f376f0ba9b76d35b25f1db7afb7f4b60c",
                                      "typeString": "literal_string \"strOffChainVote(address voter,uint256 propId,bool support,string justification)\""
                                    },
                                    "value": "strOffChainVote(address voter,uint256 propId,bool support,string justification)"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_stringliteral_29db90f499fc17d858adf930fec9986f376f0ba9b76d35b25f1db7afb7f4b60c",
                                      "typeString": "literal_string \"strOffChainVote(address voter,uint256 propId,bool support,string justification)\""
                                    }
                                  ],
                                  "expression": {
                                    "id": 851,
                                    "name": "abi",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -1,
                                    "src": "5147:3:35",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_abi",
                                      "typeString": "abi"
                                    }
                                  },
                                  "id": 852,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "memberName": "encodePacked",
                                  "nodeType": "MemberAccess",
                                  "src": "5147:16:35",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                    "typeString": "function () pure returns (bytes memory)"
                                  }
                                },
                                "id": 854,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5147:137:35",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              ],
                              "id": 850,
                              "name": "keccak256",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -8,
                              "src": "5137:9:35",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                "typeString": "function (bytes memory) pure returns (bytes32)"
                              }
                            },
                            "id": 855,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5137:148:35",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "id": 856,
                            "name": "_voter",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 798,
                            "src": "5303:6:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 857,
                            "name": "_propId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 800,
                            "src": "5327:7:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 858,
                            "name": "_support",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 802,
                            "src": "5352:8:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "id": 862,
                                    "name": "_justification",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 804,
                                    "src": "5405:14:35",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  ],
                                  "expression": {
                                    "id": 860,
                                    "name": "abi",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -1,
                                    "src": "5388:3:35",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_abi",
                                      "typeString": "abi"
                                    }
                                  },
                                  "id": 861,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "memberName": "encodePacked",
                                  "nodeType": "MemberAccess",
                                  "src": "5388:16:35",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                    "typeString": "function () pure returns (bytes memory)"
                                  }
                                },
                                "id": 863,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5388:32:35",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              ],
                              "id": 859,
                              "name": "keccak256",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -8,
                              "src": "5378:9:35",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                "typeString": "function (bytes memory) pure returns (bytes32)"
                              }
                            },
                            "id": 864,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5378:43:35",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "expression": {
                            "id": 848,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "5109:3:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 849,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encode",
                          "nodeType": "MemberAccess",
                          "src": "5109:10:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 865,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5109:326:35",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 847,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "5086:9:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 866,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5086:359:35",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5065:380:35"
                },
                {
                  "assignments": [
                    869
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 869,
                      "mutability": "mutable",
                      "name": "singhash",
                      "nameLocation": "5472:8:35",
                      "nodeType": "VariableDeclaration",
                      "scope": 1010,
                      "src": "5464:16:35",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 868,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "5464:7:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 878,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "1901",
                            "id": 873,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5510:10:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541",
                              "typeString": "literal_string hex\"1901\""
                            },
                            "value": "\u0019\u0001"
                          },
                          {
                            "id": 874,
                            "name": "eip712DomainHash",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 821,
                            "src": "5522:16:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "id": 875,
                            "name": "hashStruct",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 846,
                            "src": "5540:10:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541",
                              "typeString": "literal_string hex\"1901\""
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "expression": {
                            "id": 871,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "5493:3:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 872,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "src": "5493:16:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 876,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5493:58:35",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 870,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "5483:9:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 877,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5483:69:35",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5464:88:35"
                },
                {
                  "assignments": [
                    880
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 880,
                      "mutability": "mutable",
                      "name": "signer",
                      "nameLocation": "6102:6:35",
                      "nodeType": "VariableDeclaration",
                      "scope": 1010,
                      "src": "6094:14:35",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 879,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "6094:7:35",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 887,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 882,
                        "name": "singhash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 869,
                        "src": "6122:8:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 883,
                        "name": "signV",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 810,
                        "src": "6132:5:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      {
                        "id": 884,
                        "name": "signR",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 806,
                        "src": "6139:5:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 885,
                        "name": "signS",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 808,
                        "src": "6146:5:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 881,
                      "name": "ecrecover",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -6,
                      "src": "6111:9:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
                        "typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
                      }
                    },
                    "id": 886,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6111:42:35",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6094:59:35"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 894,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 889,
                          "name": "signer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 880,
                          "src": "6173:6:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 892,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "6191:1:35",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 891,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "6183:7:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 890,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "6183:7:35",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 893,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6183:10:35",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "6173:20:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45434453413a20696e76616c6964207369676e6174757265",
                        "id": 895,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6195:26:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be",
                          "typeString": "literal_string \"ECDSA: invalid signature\""
                        },
                        "value": "ECDSA: invalid signature"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be",
                          "typeString": "literal_string \"ECDSA: invalid signature\""
                        }
                      ],
                      "id": 888,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6164:7:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 896,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6164:59:35",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 897,
                  "nodeType": "ExpressionStatement",
                  "src": "6164:59:35"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 901,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 899,
                          "name": "signer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 880,
                          "src": "6242:6:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 900,
                          "name": "_voter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 798,
                          "src": "6252:6:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "6242:16:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "566f746550726f704f6666436861696e3a20696e76616c6964207369676e6174757265",
                        "id": 902,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6260:37:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ea21b1301886760274d1fe172a4fb37c1f44eba8aba8ceb5f7c88aeffcf74122",
                          "typeString": "literal_string \"VotePropOffChain: invalid signature\""
                        },
                        "value": "VotePropOffChain: invalid signature"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ea21b1301886760274d1fe172a4fb37c1f44eba8aba8ceb5f7c88aeffcf74122",
                          "typeString": "literal_string \"VotePropOffChain: invalid signature\""
                        }
                      ],
                      "id": 898,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6233:7:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 903,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6233:66:35",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 904,
                  "nodeType": "ExpressionStatement",
                  "src": "6233:66:35"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 909,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 906,
                          "name": "_propId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 800,
                          "src": "6318:7:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "expression": {
                            "id": 907,
                            "name": "arrProposals",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1694,
                            "src": "6328:12:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_strProposal_$4205_storage_$dyn_storage",
                              "typeString": "struct strProposal storage ref[] storage ref"
                            }
                          },
                          "id": 908,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "6328:19:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "6318:29:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "50726f706f73616c20646f6573206e6f74206578697374",
                        "id": 910,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6350:25:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_8e62a544e5aebc4f7865ef71973090f3036faa05a5f7be3ea3605ab15dc232bf",
                          "typeString": "literal_string \"Proposal does not exist\""
                        },
                        "value": "Proposal does not exist"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_8e62a544e5aebc4f7865ef71973090f3036faa05a5f7be3ea3605ab15dc232bf",
                          "typeString": "literal_string \"Proposal does not exist\""
                        }
                      ],
                      "id": 905,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6309:7:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 911,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6309:68:35",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 912,
                  "nodeType": "ExpressionStatement",
                  "src": "6309:68:35"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 919,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "hexValue": "66616c7365",
                          "id": 914,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6396:5:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "expression": {
                            "baseExpression": {
                              "id": 915,
                              "name": "arrProposals",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1694,
                              "src": "6405:12:35",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_strProposal_$4205_storage_$dyn_storage",
                                "typeString": "struct strProposal storage ref[] storage ref"
                              }
                            },
                            "id": 917,
                            "indexExpression": {
                              "id": 916,
                              "name": "_propId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 800,
                              "src": "6419:7:35",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "6405:23:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_strProposal_$4205_storage",
                              "typeString": "struct strProposal storage ref"
                            }
                          },
                          "id": 918,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "executed",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 4200,
                          "src": "6405:32:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "6396:41:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "50726f706f73616c20616c7265616479206578656375746564",
                        "id": 920,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6440:27:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_2707e21e9aae26cb9edbd76c2d262b3de919daea0bd16a10af4500ba819ed5fd",
                          "typeString": "literal_string \"Proposal already executed\""
                        },
                        "value": "Proposal already executed"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_2707e21e9aae26cb9edbd76c2d262b3de919daea0bd16a10af4500ba819ed5fd",
                          "typeString": "literal_string \"Proposal already executed\""
                        }
                      ],
                      "id": 913,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6387:7:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 921,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6387:82:35",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 922,
                  "nodeType": "ExpressionStatement",
                  "src": "6387:82:35"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 929,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "hexValue": "66616c7365",
                          "id": 924,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6488:5:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "expression": {
                            "baseExpression": {
                              "id": 925,
                              "name": "arrProposals",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1694,
                              "src": "6497:12:35",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_strProposal_$4205_storage_$dyn_storage",
                                "typeString": "struct strProposal storage ref[] storage ref"
                              }
                            },
                            "id": 927,
                            "indexExpression": {
                              "id": 926,
                              "name": "_propId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 800,
                              "src": "6511:7:35",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "6497:23:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_strProposal_$4205_storage",
                              "typeString": "struct strProposal storage ref"
                            }
                          },
                          "id": 928,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "rejected",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 4202,
                          "src": "6497:32:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "6488:41:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "50726f706f73616c207761732072656a6563746564",
                        "id": 930,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6532:23:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e7a1af482e802eeeb8181066732509833dee009d3d745e7a86365df02f8e23f2",
                          "typeString": "literal_string \"Proposal was rejected\""
                        },
                        "value": "Proposal was rejected"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_e7a1af482e802eeeb8181066732509833dee009d3d745e7a86365df02f8e23f2",
                          "typeString": "literal_string \"Proposal was rejected\""
                        }
                      ],
                      "id": 923,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6479:7:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 931,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6479:78:35",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 932,
                  "nodeType": "ExpressionStatement",
                  "src": "6479:78:35"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 940,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "6576:36:35",
                        "subExpression": {
                          "expression": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 934,
                                "name": "mapVotes",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1690,
                                "src": "6577:8:35",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_strVote_$4212_storage_$_$",
                                  "typeString": "mapping(uint256 => mapping(address => struct strVote storage ref))"
                                }
                              },
                              "id": 936,
                              "indexExpression": {
                                "id": 935,
                                "name": "_propId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 800,
                                "src": "6587:7:35",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "6577:19:35",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_strVote_$4212_storage_$",
                                "typeString": "mapping(address => struct strVote storage ref)"
                              }
                            },
                            "id": 938,
                            "indexExpression": {
                              "id": 937,
                              "name": "_voter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 798,
                              "src": "6598:6:35",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "6577:29:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_strVote_$4212_storage",
                              "typeString": "struct strVote storage ref"
                            }
                          },
                          "id": 939,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "voted",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 4207,
                          "src": "6577:35:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "557365722068617665206120766f74652072656769737472656420666f7220746869732070726f706f73616c",
                        "id": 941,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6615:46:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_56fe477409b5a2c2162ac21a659357e86bc625f3d283f0a935c34b8d0c1d72bf",
                          "typeString": "literal_string \"User have a vote registred for this proposal\""
                        },
                        "value": "User have a vote registred for this proposal"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_56fe477409b5a2c2162ac21a659357e86bc625f3d283f0a935c34b8d0c1d72bf",
                          "typeString": "literal_string \"User have a vote registred for this proposal\""
                        }
                      ],
                      "id": 933,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6567:7:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 942,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6567:96:35",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 943,
                  "nodeType": "ExpressionStatement",
                  "src": "6567:96:35"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 951,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 945,
                            "name": "block",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -4,
                            "src": "6682:5:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_block",
                              "typeString": "block"
                            }
                          },
                          "id": 946,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "timestamp",
                          "nodeType": "MemberAccess",
                          "src": "6682:15:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "expression": {
                            "baseExpression": {
                              "id": 947,
                              "name": "arrProposals",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1694,
                              "src": "6700:12:35",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_strProposal_$4205_storage_$dyn_storage",
                                "typeString": "struct strProposal storage ref[] storage ref"
                              }
                            },
                            "id": 949,
                            "indexExpression": {
                              "id": 948,
                              "name": "_propId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 800,
                              "src": "6714:7:35",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "6700:23:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_strProposal_$4205_storage",
                              "typeString": "struct strProposal storage ref"
                            }
                          },
                          "id": 950,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "deadline",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 4204,
                          "src": "6700:32:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "6682:50:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "50726f706f73616c20646561646c696e65",
                        "id": 952,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6735:19:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_d346406273abb3cccc98a9f3bee5fcee44b062031fda983a326fe95bad973376",
                          "typeString": "literal_string \"Proposal deadline\""
                        },
                        "value": "Proposal deadline"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_d346406273abb3cccc98a9f3bee5fcee44b062031fda983a326fe95bad973376",
                          "typeString": "literal_string \"Proposal deadline\""
                        }
                      ],
                      "id": 944,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6673:7:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 953,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6673:83:35",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 954,
                  "nodeType": "ExpressionStatement",
                  "src": "6673:83:35"
                },
                {
                  "expression": {
                    "id": 962,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "baseExpression": {
                            "id": 955,
                            "name": "mapVotes",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1690,
                            "src": "6767:8:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_strVote_$4212_storage_$_$",
                              "typeString": "mapping(uint256 => mapping(address => struct strVote storage ref))"
                            }
                          },
                          "id": 958,
                          "indexExpression": {
                            "id": 956,
                            "name": "_propId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 800,
                            "src": "6777:7:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "6767:19:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_strVote_$4212_storage_$",
                            "typeString": "mapping(address => struct strVote storage ref)"
                          }
                        },
                        "id": 959,
                        "indexExpression": {
                          "id": 957,
                          "name": "_voter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 798,
                          "src": "6788:6:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "6767:29:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_strVote_$4212_storage",
                          "typeString": "struct strVote storage ref"
                        }
                      },
                      "id": 960,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "inSupport",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4209,
                      "src": "6767:39:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 961,
                      "name": "_support",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 802,
                      "src": "6809:8:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "6767:50:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 963,
                  "nodeType": "ExpressionStatement",
                  "src": "6767:50:35"
                },
                {
                  "expression": {
                    "id": 971,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "baseExpression": {
                            "id": 964,
                            "name": "mapVotes",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1690,
                            "src": "6827:8:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_strVote_$4212_storage_$_$",
                              "typeString": "mapping(uint256 => mapping(address => struct strVote storage ref))"
                            }
                          },
                          "id": 967,
                          "indexExpression": {
                            "id": 965,
                            "name": "_propId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 800,
                            "src": "6837:7:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "6827:19:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_strVote_$4212_storage_$",
                            "typeString": "mapping(address => struct strVote storage ref)"
                          }
                        },
                        "id": 968,
                        "indexExpression": {
                          "id": 966,
                          "name": "_voter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 798,
                          "src": "6848:6:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "6827:29:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_strVote_$4212_storage",
                          "typeString": "struct strVote storage ref"
                        }
                      },
                      "id": 969,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "justification",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4211,
                      "src": "6827:43:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 970,
                      "name": "_justification",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 804,
                      "src": "6873:14:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "6827:60:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 972,
                  "nodeType": "ExpressionStatement",
                  "src": "6827:60:35"
                },
                {
                  "expression": {
                    "id": 980,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "baseExpression": {
                            "id": 973,
                            "name": "mapVotes",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1690,
                            "src": "6897:8:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_strVote_$4212_storage_$_$",
                              "typeString": "mapping(uint256 => mapping(address => struct strVote storage ref))"
                            }
                          },
                          "id": 976,
                          "indexExpression": {
                            "id": 974,
                            "name": "_propId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 800,
                            "src": "6907:7:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "6897:19:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_strVote_$4212_storage_$",
                            "typeString": "mapping(address => struct strVote storage ref)"
                          }
                        },
                        "id": 977,
                        "indexExpression": {
                          "id": 975,
                          "name": "_voter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 798,
                          "src": "6918:6:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "6897:29:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_strVote_$4212_storage",
                          "typeString": "struct strVote storage ref"
                        }
                      },
                      "id": 978,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "voted",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4207,
                      "src": "6897:35:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 979,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "6935:4:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "6897:42:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 981,
                  "nodeType": "ExpressionStatement",
                  "src": "6897:42:35"
                },
                {
                  "expression": {
                    "id": 986,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "++",
                    "prefix": false,
                    "src": "6950:34:35",
                    "subExpression": {
                      "expression": {
                        "baseExpression": {
                          "id": 982,
                          "name": "arrProposals",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1694,
                          "src": "6950:12:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_strProposal_$4205_storage_$dyn_storage",
                            "typeString": "struct strProposal storage ref[] storage ref"
                          }
                        },
                        "id": 984,
                        "indexExpression": {
                          "id": 983,
                          "name": "_propId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 800,
                          "src": "6964:7:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "6950:23:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_strProposal_$4205_storage",
                          "typeString": "struct strProposal storage ref"
                        }
                      },
                      "id": 985,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "numVotes",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4196,
                      "src": "6950:32:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "id": 987,
                  "nodeType": "ExpressionStatement",
                  "src": "6950:34:35"
                },
                {
                  "condition": {
                    "id": 989,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "6999:9:35",
                    "subExpression": {
                      "id": 988,
                      "name": "_support",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 802,
                      "src": "7000:8:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 996,
                  "nodeType": "IfStatement",
                  "src": "6995:66:35",
                  "trueBody": {
                    "expression": {
                      "id": 994,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "7023:38:35",
                      "subExpression": {
                        "expression": {
                          "baseExpression": {
                            "id": 990,
                            "name": "arrProposals",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1694,
                            "src": "7023:12:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_strProposal_$4205_storage_$dyn_storage",
                              "typeString": "struct strProposal storage ref[] storage ref"
                            }
                          },
                          "id": 992,
                          "indexExpression": {
                            "id": 991,
                            "name": "_propId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 800,
                            "src": "7037:7:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "7023:23:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_strProposal_$4205_storage",
                            "typeString": "struct strProposal storage ref"
                          }
                        },
                        "id": 993,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": true,
                        "memberName": "againstVotes",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 4198,
                        "src": "7023:36:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "id": 995,
                    "nodeType": "ExpressionStatement",
                    "src": "7023:38:35"
                  }
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 998,
                        "name": "_propId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 800,
                        "src": "7087:7:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 999,
                        "name": "_support",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 802,
                        "src": "7097:8:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "id": 1000,
                        "name": "_voter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 798,
                        "src": "7107:6:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1001,
                        "name": "_justification",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 804,
                        "src": "7115:14:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 997,
                      "name": "evtVoted",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1739,
                      "src": "7077:8:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_bool_$_t_address_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,bool,address,string memory)"
                      }
                    },
                    "id": 1002,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7077:54:35",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1003,
                  "nodeType": "EmitStatement",
                  "src": "7072:59:35"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1005,
                        "name": "_propId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 800,
                        "src": "7173:7:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1004,
                      "name": "ExecProp",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 761,
                      "src": "7163:8:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$_t_bool_$_t_string_memory_ptr_$",
                        "typeString": "function (uint256) returns (bool,string memory)"
                      }
                    },
                    "id": 1006,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7163:19:35",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_string_memory_ptr_$",
                      "typeString": "tuple(bool,string memory)"
                    }
                  },
                  "id": 1007,
                  "nodeType": "ExpressionStatement",
                  "src": "7163:19:35"
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 1008,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "7200:4:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 814,
                  "id": 1009,
                  "nodeType": "Return",
                  "src": "7193:11:35"
                }
              ]
            },
            "functionSelector": "61461e2f",
            "id": 1011,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "VotePropOffChain",
            "nameLocation": "4372:16:35",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 811,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 798,
                  "mutability": "mutable",
                  "name": "_voter",
                  "nameLocation": "4406:6:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1011,
                  "src": "4398:14:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 797,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4398:7:35",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 800,
                  "mutability": "mutable",
                  "name": "_propId",
                  "nameLocation": "4430:7:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1011,
                  "src": "4422:15:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 799,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4422:7:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 802,
                  "mutability": "mutable",
                  "name": "_support",
                  "nameLocation": "4452:8:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1011,
                  "src": "4447:13:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 801,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4447:4:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 804,
                  "mutability": "mutable",
                  "name": "_justification",
                  "nameLocation": "4484:14:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1011,
                  "src": "4470:28:35",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 803,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "4470:6:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 806,
                  "mutability": "mutable",
                  "name": "signR",
                  "nameLocation": "4516:5:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1011,
                  "src": "4508:13:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 805,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4508:7:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 808,
                  "mutability": "mutable",
                  "name": "signS",
                  "nameLocation": "4539:5:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1011,
                  "src": "4531:13:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 807,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4531:7:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 810,
                  "mutability": "mutable",
                  "name": "signV",
                  "nameLocation": "4560:5:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1011,
                  "src": "4554:11:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 809,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "4554:5:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4388:184:35"
            },
            "returnParameters": {
              "id": 814,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 813,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1011,
                  "src": "4607:4:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 812,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4607:4:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4605:8:35"
            },
            "scope": 1328,
            "src": "4363:2848:35",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1045,
              "nodeType": "Block",
              "src": "7890:634:35",
              "statements": [
                {
                  "assignments": [
                    1028,
                    1030
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1028,
                      "mutability": "mutable",
                      "name": "successDGTCLL",
                      "nameLocation": "7906:13:35",
                      "nodeType": "VariableDeclaration",
                      "scope": 1045,
                      "src": "7901:18:35",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1027,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "7901:4:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1030,
                      "mutability": "mutable",
                      "name": "dataDLGTCLL",
                      "nameLocation": "7934:11:35",
                      "nodeType": "VariableDeclaration",
                      "scope": 1045,
                      "src": "7921:24:35",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1029,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "7921:5:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1043,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "50726f70496e766974654d656d62657228616464726573732c737472696e672c737472696e672c626f6f6c2c75696e7432353629",
                            "id": 1035,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "8031:54:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_fe6eade62eac18a65f6685b99ae79221311bcdeff65e0a78b8925a18a14fd21f",
                              "typeString": "literal_string \"PropInviteMember(address,string,string,bool,uint256)\""
                            },
                            "value": "PropInviteMember(address,string,string,bool,uint256)"
                          },
                          {
                            "id": 1036,
                            "name": "_walletAddr",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1014,
                            "src": "8104:11:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 1037,
                            "name": "_name",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1016,
                            "src": "8133:5:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          {
                            "id": 1038,
                            "name": "_description",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1018,
                            "src": "8156:12:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          {
                            "id": 1039,
                            "name": "_isManager",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1020,
                            "src": "8186:10:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "id": 1040,
                            "name": "_delayTime",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1022,
                            "src": "8214:10:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_fe6eade62eac18a65f6685b99ae79221311bcdeff65e0a78b8925a18a14fd21f",
                              "typeString": "literal_string \"PropInviteMember(address,string,string,bool,uint256)\""
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            },
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 1033,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "7989:3:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 1034,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodeWithSignature",
                          "nodeType": "MemberAccess",
                          "src": "7989:23:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (string memory) pure returns (bytes memory)"
                          }
                        },
                        "id": 1041,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7989:249:35",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 1031,
                        "name": "CLCGovernance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1661,
                        "src": "7949:13:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 1032,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "delegatecall",
                      "nodeType": "MemberAccess",
                      "src": "7949:26:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes memory) returns (bool,bytes memory)"
                      }
                    },
                    "id": 1042,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7949:299:35",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7900:348:35"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "8268:250:35",
                    "statements": [
                      {
                        "nodeType": "YulVariableDeclaration",
                        "src": "8282:22:35",
                        "value": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "8299:4:35",
                              "type": "",
                              "value": "0x40"
                            }
                          ],
                          "functionName": {
                            "name": "mload",
                            "nodeType": "YulIdentifier",
                            "src": "8293:5:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "8293:11:35"
                        },
                        "variables": [
                          {
                            "name": "ptr",
                            "nodeType": "YulTypedName",
                            "src": "8286:3:35",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "nodeType": "YulVariableDeclaration",
                        "src": "8317:28:35",
                        "value": {
                          "arguments": [],
                          "functionName": {
                            "name": "returndatasize",
                            "nodeType": "YulIdentifier",
                            "src": "8329:14:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "8329:16:35"
                        },
                        "variables": [
                          {
                            "name": "size",
                            "nodeType": "YulTypedName",
                            "src": "8321:4:35",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "ptr",
                              "nodeType": "YulIdentifier",
                              "src": "8373:3:35"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "8378:1:35",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "8381:4:35"
                            }
                          ],
                          "functionName": {
                            "name": "returndatacopy",
                            "nodeType": "YulIdentifier",
                            "src": "8358:14:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "8358:28:35"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "8358:28:35"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "8426:49:35",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "ptr",
                                    "nodeType": "YulIdentifier",
                                    "src": "8451:3:35"
                                  },
                                  {
                                    "name": "size",
                                    "nodeType": "YulIdentifier",
                                    "src": "8456:4:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "8444:6:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8444:17:35"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8444:17:35"
                            }
                          ]
                        },
                        "condition": {
                          "arguments": [
                            {
                              "name": "successDGTCLL",
                              "nodeType": "YulIdentifier",
                              "src": "8410:13:35"
                            }
                          ],
                          "functionName": {
                            "name": "iszero",
                            "nodeType": "YulIdentifier",
                            "src": "8402:6:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "8402:23:35"
                        },
                        "nodeType": "YulIf",
                        "src": "8399:76:35"
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "8488:20:35",
                        "value": {
                          "arguments": [
                            {
                              "name": "ptr",
                              "nodeType": "YulIdentifier",
                              "src": "8504:3:35"
                            }
                          ],
                          "functionName": {
                            "name": "mload",
                            "nodeType": "YulIdentifier",
                            "src": "8498:5:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "8498:10:35"
                        },
                        "variableNames": [
                          {
                            "name": "propId",
                            "nodeType": "YulIdentifier",
                            "src": "8488:6:35"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "istanbul",
                  "externalReferences": [
                    {
                      "declaration": 1025,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "8488:6:35",
                      "valueSize": 1
                    },
                    {
                      "declaration": 1028,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "8410:13:35",
                      "valueSize": 1
                    }
                  ],
                  "id": 1044,
                  "nodeType": "InlineAssembly",
                  "src": "8259:259:35"
                }
              ]
            },
            "documentation": {
              "id": 1012,
              "nodeType": "StructuredDocumentation",
              "src": "7217:434:35",
              "text": "@notice Generate a new proposal to invite a new member\n @dev the execution of this proposal only create an invitation \n @param _walletAddr  Address of the new user\n @param _name Can be the nickname or other reference to the User\n @param _description A text for the proposal\n @param _isManager True if is for a manager member\n @return propId ID of the new proposal, based on `arrProposals`"
            },
            "functionSelector": "fe6eade6",
            "id": 1046,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "PropInviteMember",
            "nameLocation": "7665:16:35",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1023,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1014,
                  "mutability": "mutable",
                  "name": "_walletAddr",
                  "nameLocation": "7699:11:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1046,
                  "src": "7691:19:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1013,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7691:7:35",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1016,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "7734:5:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1046,
                  "src": "7720:19:35",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1015,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "7720:6:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1018,
                  "mutability": "mutable",
                  "name": "_description",
                  "nameLocation": "7763:12:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1046,
                  "src": "7749:26:35",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1017,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "7749:6:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1020,
                  "mutability": "mutable",
                  "name": "_isManager",
                  "nameLocation": "7790:10:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1046,
                  "src": "7785:15:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1019,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "7785:4:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1022,
                  "mutability": "mutable",
                  "name": "_delayTime",
                  "nameLocation": "7818:10:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1046,
                  "src": "7810:18:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1021,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7810:7:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7681:153:35"
            },
            "returnParameters": {
              "id": 1026,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1025,
                  "mutability": "mutable",
                  "name": "propId",
                  "nameLocation": "7877:6:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1046,
                  "src": "7869:14:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1024,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7869:7:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7867:18:35"
            },
            "scope": 1328,
            "src": "7656:868:35",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1074,
              "nodeType": "Block",
              "src": "8986:571:35",
              "statements": [
                {
                  "assignments": [
                    1059,
                    1061
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1059,
                      "mutability": "mutable",
                      "name": "successDGTCLL",
                      "nameLocation": "9002:13:35",
                      "nodeType": "VariableDeclaration",
                      "scope": 1074,
                      "src": "8997:18:35",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1058,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "8997:4:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1061,
                      "mutability": "mutable",
                      "name": "dataDLGTCLL",
                      "nameLocation": "9030:11:35",
                      "nodeType": "VariableDeclaration",
                      "scope": 1074,
                      "src": "9017:24:35",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1060,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "9017:5:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1072,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "50726f7052656d6f76654d656d62657228616464726573732c737472696e672c75696e7432353629",
                            "id": 1066,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9127:42:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_c4caeb63bf1a2fcb0ddd22cc1fc31a5bc803a29a62fb7cffc5d79a464d7d1f77",
                              "typeString": "literal_string \"PropRemoveMember(address,string,uint256)\""
                            },
                            "value": "PropRemoveMember(address,string,uint256)"
                          },
                          {
                            "id": 1067,
                            "name": "_walletAddr",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1049,
                            "src": "9188:11:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 1068,
                            "name": "_description",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1051,
                            "src": "9217:12:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          {
                            "id": 1069,
                            "name": "_delayTime",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1053,
                            "src": "9247:10:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_c4caeb63bf1a2fcb0ddd22cc1fc31a5bc803a29a62fb7cffc5d79a464d7d1f77",
                              "typeString": "literal_string \"PropRemoveMember(address,string,uint256)\""
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 1064,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "9085:3:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 1065,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodeWithSignature",
                          "nodeType": "MemberAccess",
                          "src": "9085:23:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (string memory) pure returns (bytes memory)"
                          }
                        },
                        "id": 1070,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9085:186:35",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 1062,
                        "name": "CLCGovernance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1661,
                        "src": "9045:13:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 1063,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "delegatecall",
                      "nodeType": "MemberAccess",
                      "src": "9045:26:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes memory) returns (bool,bytes memory)"
                      }
                    },
                    "id": 1071,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9045:236:35",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "8996:285:35"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "9301:250:35",
                    "statements": [
                      {
                        "nodeType": "YulVariableDeclaration",
                        "src": "9315:22:35",
                        "value": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "9332:4:35",
                              "type": "",
                              "value": "0x40"
                            }
                          ],
                          "functionName": {
                            "name": "mload",
                            "nodeType": "YulIdentifier",
                            "src": "9326:5:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "9326:11:35"
                        },
                        "variables": [
                          {
                            "name": "ptr",
                            "nodeType": "YulTypedName",
                            "src": "9319:3:35",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "nodeType": "YulVariableDeclaration",
                        "src": "9350:28:35",
                        "value": {
                          "arguments": [],
                          "functionName": {
                            "name": "returndatasize",
                            "nodeType": "YulIdentifier",
                            "src": "9362:14:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "9362:16:35"
                        },
                        "variables": [
                          {
                            "name": "size",
                            "nodeType": "YulTypedName",
                            "src": "9354:4:35",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "ptr",
                              "nodeType": "YulIdentifier",
                              "src": "9406:3:35"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "9411:1:35",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "9414:4:35"
                            }
                          ],
                          "functionName": {
                            "name": "returndatacopy",
                            "nodeType": "YulIdentifier",
                            "src": "9391:14:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "9391:28:35"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "9391:28:35"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "9459:49:35",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "ptr",
                                    "nodeType": "YulIdentifier",
                                    "src": "9484:3:35"
                                  },
                                  {
                                    "name": "size",
                                    "nodeType": "YulIdentifier",
                                    "src": "9489:4:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "9477:6:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9477:17:35"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9477:17:35"
                            }
                          ]
                        },
                        "condition": {
                          "arguments": [
                            {
                              "name": "successDGTCLL",
                              "nodeType": "YulIdentifier",
                              "src": "9443:13:35"
                            }
                          ],
                          "functionName": {
                            "name": "iszero",
                            "nodeType": "YulIdentifier",
                            "src": "9435:6:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "9435:23:35"
                        },
                        "nodeType": "YulIf",
                        "src": "9432:76:35"
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "9521:20:35",
                        "value": {
                          "arguments": [
                            {
                              "name": "ptr",
                              "nodeType": "YulIdentifier",
                              "src": "9537:3:35"
                            }
                          ],
                          "functionName": {
                            "name": "mload",
                            "nodeType": "YulIdentifier",
                            "src": "9531:5:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "9531:10:35"
                        },
                        "variableNames": [
                          {
                            "name": "propId",
                            "nodeType": "YulIdentifier",
                            "src": "9521:6:35"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "istanbul",
                  "externalReferences": [
                    {
                      "declaration": 1056,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "9521:6:35",
                      "valueSize": 1
                    },
                    {
                      "declaration": 1059,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "9443:13:35",
                      "valueSize": 1
                    }
                  ],
                  "id": 1073,
                  "nodeType": "InlineAssembly",
                  "src": "9292:259:35"
                }
              ]
            },
            "documentation": {
              "id": 1047,
              "nodeType": "StructuredDocumentation",
              "src": "8530:271:35",
              "text": "@notice Generate a new proposal for remove a member\n @dev The member can be a managaer\n @param _walletAddr member Address to be removed\n @param _description About the proposal\n @return propId ID of the new proposal, based on `arrProposals`"
            },
            "functionSelector": "c4caeb63",
            "id": 1075,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "PropRemoveMember",
            "nameLocation": "8815:16:35",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1054,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1049,
                  "mutability": "mutable",
                  "name": "_walletAddr",
                  "nameLocation": "8849:11:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1075,
                  "src": "8841:19:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1048,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8841:7:35",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1051,
                  "mutability": "mutable",
                  "name": "_description",
                  "nameLocation": "8884:12:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1075,
                  "src": "8870:26:35",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1050,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "8870:6:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1053,
                  "mutability": "mutable",
                  "name": "_delayTime",
                  "nameLocation": "8914:10:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1075,
                  "src": "8906:18:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1052,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8906:7:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8831:99:35"
            },
            "returnParameters": {
              "id": 1057,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1056,
                  "mutability": "mutable",
                  "name": "propId",
                  "nameLocation": "8973:6:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1075,
                  "src": "8965:14:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1055,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8965:7:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8963:18:35"
            },
            "scope": 1328,
            "src": "8806:751:35",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1106,
              "nodeType": "Block",
              "src": "10098:595:35",
              "statements": [
                {
                  "assignments": [
                    1090,
                    1092
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1090,
                      "mutability": "mutable",
                      "name": "successDGTCLL",
                      "nameLocation": "10114:13:35",
                      "nodeType": "VariableDeclaration",
                      "scope": 1106,
                      "src": "10109:18:35",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1089,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "10109:4:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1092,
                      "mutability": "mutable",
                      "name": "dataDLGTCLL",
                      "nameLocation": "10142:11:35",
                      "nodeType": "VariableDeclaration",
                      "scope": 1106,
                      "src": "10129:24:35",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1091,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "10129:5:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1104,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "50726f70547857656928616464726573732c75696e743235362c737472696e672c75696e7432353629",
                            "id": 1097,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "10239:43:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_7c6385482cc50c34905baf4b5888e8798c5594a0a2bf4d252265bc9209354799",
                              "typeString": "literal_string \"PropTxWei(address,uint256,string,uint256)\""
                            },
                            "value": "PropTxWei(address,uint256,string,uint256)"
                          },
                          {
                            "id": 1098,
                            "name": "_to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1078,
                            "src": "10301:3:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 1099,
                            "name": "_amountOutCLV",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1080,
                            "src": "10322:13:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 1100,
                            "name": "_description",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1082,
                            "src": "10353:12:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          {
                            "id": 1101,
                            "name": "_delayTime",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1084,
                            "src": "10383:10:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_7c6385482cc50c34905baf4b5888e8798c5594a0a2bf4d252265bc9209354799",
                              "typeString": "literal_string \"PropTxWei(address,uint256,string,uint256)\""
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 1095,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "10197:3:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 1096,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodeWithSignature",
                          "nodeType": "MemberAccess",
                          "src": "10197:23:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (string memory) pure returns (bytes memory)"
                          }
                        },
                        "id": 1102,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "10197:210:35",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 1093,
                        "name": "CLCGovernance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1661,
                        "src": "10157:13:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 1094,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "delegatecall",
                      "nodeType": "MemberAccess",
                      "src": "10157:26:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes memory) returns (bool,bytes memory)"
                      }
                    },
                    "id": 1103,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10157:260:35",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "10108:309:35"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "10437:250:35",
                    "statements": [
                      {
                        "nodeType": "YulVariableDeclaration",
                        "src": "10451:22:35",
                        "value": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "10468:4:35",
                              "type": "",
                              "value": "0x40"
                            }
                          ],
                          "functionName": {
                            "name": "mload",
                            "nodeType": "YulIdentifier",
                            "src": "10462:5:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "10462:11:35"
                        },
                        "variables": [
                          {
                            "name": "ptr",
                            "nodeType": "YulTypedName",
                            "src": "10455:3:35",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "nodeType": "YulVariableDeclaration",
                        "src": "10486:28:35",
                        "value": {
                          "arguments": [],
                          "functionName": {
                            "name": "returndatasize",
                            "nodeType": "YulIdentifier",
                            "src": "10498:14:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "10498:16:35"
                        },
                        "variables": [
                          {
                            "name": "size",
                            "nodeType": "YulTypedName",
                            "src": "10490:4:35",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "ptr",
                              "nodeType": "YulIdentifier",
                              "src": "10542:3:35"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "10547:1:35",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "10550:4:35"
                            }
                          ],
                          "functionName": {
                            "name": "returndatacopy",
                            "nodeType": "YulIdentifier",
                            "src": "10527:14:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "10527:28:35"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "10527:28:35"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "10595:49:35",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "ptr",
                                    "nodeType": "YulIdentifier",
                                    "src": "10620:3:35"
                                  },
                                  {
                                    "name": "size",
                                    "nodeType": "YulIdentifier",
                                    "src": "10625:4:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "10613:6:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10613:17:35"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10613:17:35"
                            }
                          ]
                        },
                        "condition": {
                          "arguments": [
                            {
                              "name": "successDGTCLL",
                              "nodeType": "YulIdentifier",
                              "src": "10579:13:35"
                            }
                          ],
                          "functionName": {
                            "name": "iszero",
                            "nodeType": "YulIdentifier",
                            "src": "10571:6:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "10571:23:35"
                        },
                        "nodeType": "YulIf",
                        "src": "10568:76:35"
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "10657:20:35",
                        "value": {
                          "arguments": [
                            {
                              "name": "ptr",
                              "nodeType": "YulIdentifier",
                              "src": "10673:3:35"
                            }
                          ],
                          "functionName": {
                            "name": "mload",
                            "nodeType": "YulIdentifier",
                            "src": "10667:5:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "10667:10:35"
                        },
                        "variableNames": [
                          {
                            "name": "propId",
                            "nodeType": "YulIdentifier",
                            "src": "10657:6:35"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "istanbul",
                  "externalReferences": [
                    {
                      "declaration": 1087,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "10657:6:35",
                      "valueSize": 1
                    },
                    {
                      "declaration": 1090,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "10579:13:35",
                      "valueSize": 1
                    }
                  ],
                  "id": 1105,
                  "nodeType": "InlineAssembly",
                  "src": "10428:259:35"
                }
              ]
            },
            "documentation": {
              "id": 1076,
              "nodeType": "StructuredDocumentation",
              "src": "9563:334:35",
              "text": "@notice generate a new proposal to transfer ETH in weis\n @dev When execute this proposal, the transfer is made\n @param _to Recipient address\n @param _amountOutCLV Amount to transfer (in wei)\n @param _description About this proposal\n @return propId ID of the new proposal, based on `arrProposals`"
            },
            "functionSelector": "7c638548",
            "id": 1107,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "PropTxWei",
            "nameLocation": "9911:9:35",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1085,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1078,
                  "mutability": "mutable",
                  "name": "_to",
                  "nameLocation": "9938:3:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1107,
                  "src": "9930:11:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1077,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9930:7:35",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1080,
                  "mutability": "mutable",
                  "name": "_amountOutCLV",
                  "nameLocation": "9959:13:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1107,
                  "src": "9951:21:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1079,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9951:7:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1082,
                  "mutability": "mutable",
                  "name": "_description",
                  "nameLocation": "9996:12:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1107,
                  "src": "9982:26:35",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1081,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "9982:6:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1084,
                  "mutability": "mutable",
                  "name": "_delayTime",
                  "nameLocation": "10026:10:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1107,
                  "src": "10018:18:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1083,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10018:7:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9920:122:35"
            },
            "returnParameters": {
              "id": 1088,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1087,
                  "mutability": "mutable",
                  "name": "propId",
                  "nameLocation": "10085:6:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1107,
                  "src": "10077:14:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1086,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10077:7:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10075:18:35"
            },
            "scope": 1328,
            "src": "9902:791:35",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1141,
              "nodeType": "Block",
              "src": "11266:635:35",
              "statements": [
                {
                  "assignments": [
                    1124,
                    1126
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1124,
                      "mutability": "mutable",
                      "name": "successDGTCLL",
                      "nameLocation": "11282:13:35",
                      "nodeType": "VariableDeclaration",
                      "scope": 1141,
                      "src": "11277:18:35",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1123,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "11277:4:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1126,
                      "mutability": "mutable",
                      "name": "dataDLGTCLL",
                      "nameLocation": "11310:11:35",
                      "nodeType": "VariableDeclaration",
                      "scope": 1141,
                      "src": "11297:24:35",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1125,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "11297:5:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1139,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "50726f705478455243323028616464726573732c75696e743235362c616464726573732c737472696e672c75696e7432353629",
                            "id": 1131,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "11407:53:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_de5ab14ee76e872eb390c8f0942b0cbe9e6de8609dea31f21b3c6b5cdfc0a34b",
                              "typeString": "literal_string \"PropTxERC20(address,uint256,address,string,uint256)\""
                            },
                            "value": "PropTxERC20(address,uint256,address,string,uint256)"
                          },
                          {
                            "id": 1132,
                            "name": "_to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1110,
                            "src": "11479:3:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 1133,
                            "name": "_amountOutCLV",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1112,
                            "src": "11500:13:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 1134,
                            "name": "_tokenOutCLV",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1114,
                            "src": "11531:12:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 1135,
                            "name": "_description",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1116,
                            "src": "11561:12:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          {
                            "id": 1136,
                            "name": "_delayTime",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1118,
                            "src": "11591:10:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_de5ab14ee76e872eb390c8f0942b0cbe9e6de8609dea31f21b3c6b5cdfc0a34b",
                              "typeString": "literal_string \"PropTxERC20(address,uint256,address,string,uint256)\""
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 1129,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "11365:3:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 1130,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodeWithSignature",
                          "nodeType": "MemberAccess",
                          "src": "11365:23:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (string memory) pure returns (bytes memory)"
                          }
                        },
                        "id": 1137,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "11365:250:35",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 1127,
                        "name": "CLCGovernance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1661,
                        "src": "11325:13:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 1128,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "delegatecall",
                      "nodeType": "MemberAccess",
                      "src": "11325:26:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes memory) returns (bool,bytes memory)"
                      }
                    },
                    "id": 1138,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "11325:300:35",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "11276:349:35"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "11645:250:35",
                    "statements": [
                      {
                        "nodeType": "YulVariableDeclaration",
                        "src": "11659:22:35",
                        "value": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "11676:4:35",
                              "type": "",
                              "value": "0x40"
                            }
                          ],
                          "functionName": {
                            "name": "mload",
                            "nodeType": "YulIdentifier",
                            "src": "11670:5:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "11670:11:35"
                        },
                        "variables": [
                          {
                            "name": "ptr",
                            "nodeType": "YulTypedName",
                            "src": "11663:3:35",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "nodeType": "YulVariableDeclaration",
                        "src": "11694:28:35",
                        "value": {
                          "arguments": [],
                          "functionName": {
                            "name": "returndatasize",
                            "nodeType": "YulIdentifier",
                            "src": "11706:14:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "11706:16:35"
                        },
                        "variables": [
                          {
                            "name": "size",
                            "nodeType": "YulTypedName",
                            "src": "11698:4:35",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "ptr",
                              "nodeType": "YulIdentifier",
                              "src": "11750:3:35"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "11755:1:35",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "11758:4:35"
                            }
                          ],
                          "functionName": {
                            "name": "returndatacopy",
                            "nodeType": "YulIdentifier",
                            "src": "11735:14:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "11735:28:35"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "11735:28:35"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "11803:49:35",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "ptr",
                                    "nodeType": "YulIdentifier",
                                    "src": "11828:3:35"
                                  },
                                  {
                                    "name": "size",
                                    "nodeType": "YulIdentifier",
                                    "src": "11833:4:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "11821:6:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11821:17:35"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11821:17:35"
                            }
                          ]
                        },
                        "condition": {
                          "arguments": [
                            {
                              "name": "successDGTCLL",
                              "nodeType": "YulIdentifier",
                              "src": "11787:13:35"
                            }
                          ],
                          "functionName": {
                            "name": "iszero",
                            "nodeType": "YulIdentifier",
                            "src": "11779:6:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "11779:23:35"
                        },
                        "nodeType": "YulIf",
                        "src": "11776:76:35"
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "11865:20:35",
                        "value": {
                          "arguments": [
                            {
                              "name": "ptr",
                              "nodeType": "YulIdentifier",
                              "src": "11881:3:35"
                            }
                          ],
                          "functionName": {
                            "name": "mload",
                            "nodeType": "YulIdentifier",
                            "src": "11875:5:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "11875:10:35"
                        },
                        "variableNames": [
                          {
                            "name": "propId",
                            "nodeType": "YulIdentifier",
                            "src": "11865:6:35"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "istanbul",
                  "externalReferences": [
                    {
                      "declaration": 1121,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "11865:6:35",
                      "valueSize": 1
                    },
                    {
                      "declaration": 1124,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "11787:13:35",
                      "valueSize": 1
                    }
                  ],
                  "id": 1140,
                  "nodeType": "InlineAssembly",
                  "src": "11636:259:35"
                }
              ]
            },
            "documentation": {
              "id": 1108,
              "nodeType": "StructuredDocumentation",
              "src": "10699:334:35",
              "text": "@notice generate a new proposal to transfer ETH in weis\n @dev When execute this proposal, the transfer is made\n @param _to Recipient address\n @param _amountOutCLV Amount to transfer (in wei)\n @param _description About this proposal\n @return propId ID of the new proposal, based on `arrProposals`"
            },
            "functionSelector": "de5ab14e",
            "id": 1142,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "PropTxERC20",
            "nameLocation": "11047:11:35",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1119,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1110,
                  "mutability": "mutable",
                  "name": "_to",
                  "nameLocation": "11076:3:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1142,
                  "src": "11068:11:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1109,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11068:7:35",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1112,
                  "mutability": "mutable",
                  "name": "_amountOutCLV",
                  "nameLocation": "11097:13:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1142,
                  "src": "11089:21:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1111,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11089:7:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1114,
                  "mutability": "mutable",
                  "name": "_tokenOutCLV",
                  "nameLocation": "11128:12:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1142,
                  "src": "11120:20:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1113,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11120:7:35",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1116,
                  "mutability": "mutable",
                  "name": "_description",
                  "nameLocation": "11164:12:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1142,
                  "src": "11150:26:35",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1115,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "11150:6:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1118,
                  "mutability": "mutable",
                  "name": "_delayTime",
                  "nameLocation": "11194:10:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1142,
                  "src": "11186:18:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1117,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11186:7:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11058:152:35"
            },
            "returnParameters": {
              "id": 1122,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1121,
                  "mutability": "mutable",
                  "name": "propId",
                  "nameLocation": "11253:6:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1142,
                  "src": "11245:14:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1120,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11245:7:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11243:18:35"
            },
            "scope": 1328,
            "src": "11038:863:35",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1170,
              "nodeType": "Block",
              "src": "12445:574:35",
              "statements": [
                {
                  "assignments": [
                    1155,
                    1157
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1155,
                      "mutability": "mutable",
                      "name": "successDGTCLL",
                      "nameLocation": "12461:13:35",
                      "nodeType": "VariableDeclaration",
                      "scope": 1170,
                      "src": "12456:18:35",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1154,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "12456:4:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1157,
                      "mutability": "mutable",
                      "name": "dataDLGTCLL",
                      "nameLocation": "12489:11:35",
                      "nodeType": "VariableDeclaration",
                      "scope": 1170,
                      "src": "12476:24:35",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1156,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "12476:5:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1168,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "50726f70476f7652756c65732875696e74382c737472696e672c75696e7432353629",
                            "id": 1162,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "12586:36:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_70acb761237d5585eadfc2ae41fe8a485128e55ebdae74fa45652b412e62ee83",
                              "typeString": "literal_string \"PropGovRules(uint8,string,uint256)\""
                            },
                            "value": "PropGovRules(uint8,string,uint256)"
                          },
                          {
                            "id": 1163,
                            "name": "_newApprovPercentage",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1145,
                            "src": "12641:20:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          {
                            "id": 1164,
                            "name": "_description",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1147,
                            "src": "12679:12:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          {
                            "id": 1165,
                            "name": "_delayTime",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1149,
                            "src": "12709:10:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_70acb761237d5585eadfc2ae41fe8a485128e55ebdae74fa45652b412e62ee83",
                              "typeString": "literal_string \"PropGovRules(uint8,string,uint256)\""
                            },
                            {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 1160,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "12544:3:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 1161,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodeWithSignature",
                          "nodeType": "MemberAccess",
                          "src": "12544:23:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (string memory) pure returns (bytes memory)"
                          }
                        },
                        "id": 1166,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "12544:189:35",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 1158,
                        "name": "CLCGovernance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1661,
                        "src": "12504:13:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 1159,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "delegatecall",
                      "nodeType": "MemberAccess",
                      "src": "12504:26:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes memory) returns (bool,bytes memory)"
                      }
                    },
                    "id": 1167,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "12504:239:35",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "12455:288:35"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "12763:250:35",
                    "statements": [
                      {
                        "nodeType": "YulVariableDeclaration",
                        "src": "12777:22:35",
                        "value": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "12794:4:35",
                              "type": "",
                              "value": "0x40"
                            }
                          ],
                          "functionName": {
                            "name": "mload",
                            "nodeType": "YulIdentifier",
                            "src": "12788:5:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "12788:11:35"
                        },
                        "variables": [
                          {
                            "name": "ptr",
                            "nodeType": "YulTypedName",
                            "src": "12781:3:35",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "nodeType": "YulVariableDeclaration",
                        "src": "12812:28:35",
                        "value": {
                          "arguments": [],
                          "functionName": {
                            "name": "returndatasize",
                            "nodeType": "YulIdentifier",
                            "src": "12824:14:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "12824:16:35"
                        },
                        "variables": [
                          {
                            "name": "size",
                            "nodeType": "YulTypedName",
                            "src": "12816:4:35",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "ptr",
                              "nodeType": "YulIdentifier",
                              "src": "12868:3:35"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "12873:1:35",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "12876:4:35"
                            }
                          ],
                          "functionName": {
                            "name": "returndatacopy",
                            "nodeType": "YulIdentifier",
                            "src": "12853:14:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "12853:28:35"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "12853:28:35"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "12921:49:35",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "ptr",
                                    "nodeType": "YulIdentifier",
                                    "src": "12946:3:35"
                                  },
                                  {
                                    "name": "size",
                                    "nodeType": "YulIdentifier",
                                    "src": "12951:4:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "12939:6:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12939:17:35"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12939:17:35"
                            }
                          ]
                        },
                        "condition": {
                          "arguments": [
                            {
                              "name": "successDGTCLL",
                              "nodeType": "YulIdentifier",
                              "src": "12905:13:35"
                            }
                          ],
                          "functionName": {
                            "name": "iszero",
                            "nodeType": "YulIdentifier",
                            "src": "12897:6:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "12897:23:35"
                        },
                        "nodeType": "YulIf",
                        "src": "12894:76:35"
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "12983:20:35",
                        "value": {
                          "arguments": [
                            {
                              "name": "ptr",
                              "nodeType": "YulIdentifier",
                              "src": "12999:3:35"
                            }
                          ],
                          "functionName": {
                            "name": "mload",
                            "nodeType": "YulIdentifier",
                            "src": "12993:5:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "12993:10:35"
                        },
                        "variableNames": [
                          {
                            "name": "propId",
                            "nodeType": "YulIdentifier",
                            "src": "12983:6:35"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "istanbul",
                  "externalReferences": [
                    {
                      "declaration": 1152,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "12983:6:35",
                      "valueSize": 1
                    },
                    {
                      "declaration": 1155,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "12905:13:35",
                      "valueSize": 1
                    }
                  ],
                  "id": 1169,
                  "nodeType": "InlineAssembly",
                  "src": "12754:259:35"
                }
              ]
            },
            "documentation": {
              "id": 1143,
              "nodeType": "StructuredDocumentation",
              "src": "11907:350:35",
              "text": "@notice Generate a new proposal for change some governance parameters\n @dev When execute this proposal the new values will be set\n @param _newApprovPercentage The new percentaje for accept or reject a proposal\n @param _description About the new proposal \n @return propId ID of the new proposal, based on `arrProposals`"
            },
            "functionSelector": "70acb761",
            "id": 1171,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "PropGovRules",
            "nameLocation": "12271:12:35",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1150,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1145,
                  "mutability": "mutable",
                  "name": "_newApprovPercentage",
                  "nameLocation": "12299:20:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1171,
                  "src": "12293:26:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 1144,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "12293:5:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1147,
                  "mutability": "mutable",
                  "name": "_description",
                  "nameLocation": "12343:12:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1171,
                  "src": "12329:26:35",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1146,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "12329:6:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1149,
                  "mutability": "mutable",
                  "name": "_delayTime",
                  "nameLocation": "12373:10:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1171,
                  "src": "12365:18:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1148,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12365:7:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12283:106:35"
            },
            "returnParameters": {
              "id": 1153,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1152,
                  "mutability": "mutable",
                  "name": "propId",
                  "nameLocation": "12432:6:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1171,
                  "src": "12424:14:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1151,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12424:7:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12422:18:35"
            },
            "scope": 1328,
            "src": "12262:757:35",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1196,
              "nodeType": "Block",
              "src": "13465:526:35",
              "statements": [
                {
                  "assignments": [
                    1182,
                    1184
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1182,
                      "mutability": "mutable",
                      "name": "successDGTCLL",
                      "nameLocation": "13481:13:35",
                      "nodeType": "VariableDeclaration",
                      "scope": 1196,
                      "src": "13476:18:35",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1181,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "13476:4:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1184,
                      "mutability": "mutable",
                      "name": "dataDLGTCLL",
                      "nameLocation": "13509:11:35",
                      "nodeType": "VariableDeclaration",
                      "scope": 1196,
                      "src": "13496:24:35",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1183,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "13496:5:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1194,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "50726f7052657175657374546f4a6f696e28737472696e672c737472696e6729",
                            "id": 1189,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "13606:34:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_2c26fb6eb51f8cd6e0bd013cccf1abbf9cdc2c1d3376351bf8ee51aed898c807",
                              "typeString": "literal_string \"PropRequestToJoin(string,string)\""
                            },
                            "value": "PropRequestToJoin(string,string)"
                          },
                          {
                            "id": 1190,
                            "name": "_name",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1174,
                            "src": "13659:5:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          {
                            "id": 1191,
                            "name": "_description",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1176,
                            "src": "13682:12:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_2c26fb6eb51f8cd6e0bd013cccf1abbf9cdc2c1d3376351bf8ee51aed898c807",
                              "typeString": "literal_string \"PropRequestToJoin(string,string)\""
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          ],
                          "expression": {
                            "id": 1187,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "13564:3:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 1188,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodeWithSignature",
                          "nodeType": "MemberAccess",
                          "src": "13564:23:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (string memory) pure returns (bytes memory)"
                          }
                        },
                        "id": 1192,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "13564:144:35",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 1185,
                        "name": "CLCGovernance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1661,
                        "src": "13524:13:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 1186,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "delegatecall",
                      "nodeType": "MemberAccess",
                      "src": "13524:26:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes memory) returns (bool,bytes memory)"
                      }
                    },
                    "id": 1193,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "13524:194:35",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "13475:243:35"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "13738:247:35",
                    "statements": [
                      {
                        "nodeType": "YulVariableDeclaration",
                        "src": "13752:22:35",
                        "value": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "13769:4:35",
                              "type": "",
                              "value": "0x40"
                            }
                          ],
                          "functionName": {
                            "name": "mload",
                            "nodeType": "YulIdentifier",
                            "src": "13763:5:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "13763:11:35"
                        },
                        "variables": [
                          {
                            "name": "ptr",
                            "nodeType": "YulTypedName",
                            "src": "13756:3:35",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "nodeType": "YulVariableDeclaration",
                        "src": "13787:28:35",
                        "value": {
                          "arguments": [],
                          "functionName": {
                            "name": "returndatasize",
                            "nodeType": "YulIdentifier",
                            "src": "13799:14:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "13799:16:35"
                        },
                        "variables": [
                          {
                            "name": "size",
                            "nodeType": "YulTypedName",
                            "src": "13791:4:35",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "ptr",
                              "nodeType": "YulIdentifier",
                              "src": "13843:3:35"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "13848:1:35",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "13851:4:35"
                            }
                          ],
                          "functionName": {
                            "name": "returndatacopy",
                            "nodeType": "YulIdentifier",
                            "src": "13828:14:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "13828:28:35"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "13828:28:35"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "13896:49:35",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "ptr",
                                    "nodeType": "YulIdentifier",
                                    "src": "13921:3:35"
                                  },
                                  {
                                    "name": "size",
                                    "nodeType": "YulIdentifier",
                                    "src": "13926:4:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "13914:6:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13914:17:35"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13914:17:35"
                            }
                          ]
                        },
                        "condition": {
                          "arguments": [
                            {
                              "name": "successDGTCLL",
                              "nodeType": "YulIdentifier",
                              "src": "13880:13:35"
                            }
                          ],
                          "functionName": {
                            "name": "iszero",
                            "nodeType": "YulIdentifier",
                            "src": "13872:6:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "13872:23:35"
                        },
                        "nodeType": "YulIf",
                        "src": "13869:76:35"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "ptr",
                              "nodeType": "YulIdentifier",
                              "src": "13965:3:35"
                            },
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "13970:4:35"
                            }
                          ],
                          "functionName": {
                            "name": "return",
                            "nodeType": "YulIdentifier",
                            "src": "13958:6:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "13958:17:35"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "13958:17:35"
                      }
                    ]
                  },
                  "evmVersion": "istanbul",
                  "externalReferences": [
                    {
                      "declaration": 1182,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "13880:13:35",
                      "valueSize": 1
                    }
                  ],
                  "id": 1195,
                  "nodeType": "InlineAssembly",
                  "src": "13729:256:35"
                }
              ]
            },
            "documentation": {
              "id": 1172,
              "nodeType": "StructuredDocumentation",
              "src": "13025:289:35",
              "text": "@notice Generate a proposal from a user that want to join to the CLH\n @dev Only avaiable in public CLH\n @param _name Nickname or other user identification\n @param _description About the request\n @return propId ID of the new proposal, based on `arrProposals`"
            },
            "functionSelector": "2c26fb6e",
            "id": 1197,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "PropRequestToJoin",
            "nameLocation": "13328:17:35",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1177,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1174,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "13369:5:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1197,
                  "src": "13355:19:35",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1173,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "13355:6:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1176,
                  "mutability": "mutable",
                  "name": "_description",
                  "nameLocation": "13398:12:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1197,
                  "src": "13384:26:35",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1175,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "13384:6:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13345:71:35"
            },
            "returnParameters": {
              "id": 1180,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1179,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1197,
                  "src": "13451:7:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1178,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13451:7:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13449:11:35"
            },
            "scope": 1328,
            "src": "13319:672:35",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1221,
              "nodeType": "Block",
              "src": "14214:480:35",
              "statements": [
                {
                  "assignments": [
                    1204,
                    1206
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1204,
                      "mutability": "mutable",
                      "name": "successDGTCLL",
                      "nameLocation": "14230:13:35",
                      "nodeType": "VariableDeclaration",
                      "scope": 1221,
                      "src": "14225:18:35",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1203,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "14225:4:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1206,
                      "mutability": "mutable",
                      "name": "dataDLGTCLL",
                      "nameLocation": "14258:11:35",
                      "nodeType": "VariableDeclaration",
                      "scope": 1221,
                      "src": "14245:24:35",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1205,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "14245:5:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1215,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "41636365707452656a656374496e7669746174696f6e28626f6f6c29",
                            "id": 1211,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "14361:30:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_0feeae4b9c25a13e2dad54c9bae3f1dc72e65da2dfc360e9434de9b0d0976c72",
                              "typeString": "literal_string \"AcceptRejectInvitation(bool)\""
                            },
                            "value": "AcceptRejectInvitation(bool)"
                          },
                          {
                            "id": 1212,
                            "name": "_acceptance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1200,
                            "src": "14410:11:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_0feeae4b9c25a13e2dad54c9bae3f1dc72e65da2dfc360e9434de9b0d0976c72",
                              "typeString": "literal_string \"AcceptRejectInvitation(bool)\""
                            },
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "expression": {
                            "id": 1209,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "14319:3:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 1210,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodeWithSignature",
                          "nodeType": "MemberAccess",
                          "src": "14319:23:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (string memory) pure returns (bytes memory)"
                          }
                        },
                        "id": 1213,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "14319:116:35",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 1207,
                        "name": "CLCMemberManagement",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1659,
                        "src": "14273:19:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 1208,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "delegatecall",
                      "nodeType": "MemberAccess",
                      "src": "14273:32:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes memory) returns (bool,bytes memory)"
                      }
                    },
                    "id": 1214,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "14273:172:35",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "14224:221:35"
                },
                {
                  "condition": {
                    "id": 1217,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "14460:14:35",
                    "subExpression": {
                      "id": 1216,
                      "name": "successDGTCLL",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1204,
                      "src": "14461:13:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1220,
                  "nodeType": "IfStatement",
                  "src": "14456:232:35",
                  "trueBody": {
                    "id": 1219,
                    "nodeType": "Block",
                    "src": "14477:211:35",
                    "statements": [
                      {
                        "AST": {
                          "nodeType": "YulBlock",
                          "src": "14500:178:35",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "14518:22:35",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14535:4:35",
                                    "type": "",
                                    "value": "0x40"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "14529:5:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14529:11:35"
                              },
                              "variables": [
                                {
                                  "name": "ptr",
                                  "nodeType": "YulTypedName",
                                  "src": "14522:3:35",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "14557:28:35",
                              "value": {
                                "arguments": [],
                                "functionName": {
                                  "name": "returndatasize",
                                  "nodeType": "YulIdentifier",
                                  "src": "14569:14:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14569:16:35"
                              },
                              "variables": [
                                {
                                  "name": "size",
                                  "nodeType": "YulTypedName",
                                  "src": "14561:4:35",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "ptr",
                                    "nodeType": "YulIdentifier",
                                    "src": "14617:3:35"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14622:1:35",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "name": "size",
                                    "nodeType": "YulIdentifier",
                                    "src": "14625:4:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "returndatacopy",
                                  "nodeType": "YulIdentifier",
                                  "src": "14602:14:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14602:28:35"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14602:28:35"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "ptr",
                                    "nodeType": "YulIdentifier",
                                    "src": "14654:3:35"
                                  },
                                  {
                                    "name": "size",
                                    "nodeType": "YulIdentifier",
                                    "src": "14659:4:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "14647:6:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14647:17:35"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14647:17:35"
                            }
                          ]
                        },
                        "evmVersion": "istanbul",
                        "externalReferences": [],
                        "id": 1218,
                        "nodeType": "InlineAssembly",
                        "src": "14491:187:35"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 1198,
              "nodeType": "StructuredDocumentation",
              "src": "13997:127:35",
              "text": "@notice For an user that have an invitation pending\n @dev \n @param _acceptance True for accept the invitation"
            },
            "functionSelector": "0feeae4b",
            "id": 1222,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "AcceptRejectInvitation",
            "nameLocation": "14138:22:35",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1201,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1200,
                  "mutability": "mutable",
                  "name": "_acceptance",
                  "nameLocation": "14175:11:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1222,
                  "src": "14170:16:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1199,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "14170:4:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14160:32:35"
            },
            "returnParameters": {
              "id": 1202,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "14214:0:35"
            },
            "scope": 1328,
            "src": "14129:565:35",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1255,
              "nodeType": "Block",
              "src": "14938:647:35",
              "statements": [
                {
                  "assignments": [
                    1238,
                    1240
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1238,
                      "mutability": "mutable",
                      "name": "successDGTCLL",
                      "nameLocation": "14954:13:35",
                      "nodeType": "VariableDeclaration",
                      "scope": 1255,
                      "src": "14949:18:35",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1237,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "14949:4:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1240,
                      "mutability": "mutable",
                      "name": "dataDLGTCLL",
                      "nameLocation": "14982:11:35",
                      "nodeType": "VariableDeclaration",
                      "scope": 1255,
                      "src": "14969:24:35",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1239,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "14969:5:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1253,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "50726f7053776170455243323028616464726573732c616464726573732c75696e743235362c737472696e672c75696e7432353629",
                            "id": 1245,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "15079:55:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_152de3b98ea86d627e1f008ef402ac90ecf10b8b7150905cf13cb40560733610",
                              "typeString": "literal_string \"PropSwapERC20(address,address,uint256,string,uint256)\""
                            },
                            "value": "PropSwapERC20(address,address,uint256,string,uint256)"
                          },
                          {
                            "id": 1246,
                            "name": "_tokenOutCLV",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1224,
                            "src": "15154:12:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 1247,
                            "name": "_tokenInCLV",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1226,
                            "src": "15185:11:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 1248,
                            "name": "_amountOutCLV",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1228,
                            "src": "15215:13:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 1249,
                            "name": "_description",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1230,
                            "src": "15247:12:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          {
                            "id": 1250,
                            "name": "_delayTime",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1232,
                            "src": "15278:10:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_152de3b98ea86d627e1f008ef402ac90ecf10b8b7150905cf13cb40560733610",
                              "typeString": "literal_string \"PropSwapERC20(address,address,uint256,string,uint256)\""
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 1243,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "15037:3:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 1244,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodeWithSignature",
                          "nodeType": "MemberAccess",
                          "src": "15037:23:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (string memory) pure returns (bytes memory)"
                          }
                        },
                        "id": 1251,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "15037:265:35",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 1241,
                        "name": "CLCGovernance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1661,
                        "src": "14997:13:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 1242,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "delegatecall",
                      "nodeType": "MemberAccess",
                      "src": "14997:26:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes memory) returns (bool,bytes memory)"
                      }
                    },
                    "id": 1252,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "14997:315:35",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "14948:364:35"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "15332:247:35",
                    "statements": [
                      {
                        "nodeType": "YulVariableDeclaration",
                        "src": "15346:22:35",
                        "value": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "15363:4:35",
                              "type": "",
                              "value": "0x40"
                            }
                          ],
                          "functionName": {
                            "name": "mload",
                            "nodeType": "YulIdentifier",
                            "src": "15357:5:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "15357:11:35"
                        },
                        "variables": [
                          {
                            "name": "ptr",
                            "nodeType": "YulTypedName",
                            "src": "15350:3:35",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "nodeType": "YulVariableDeclaration",
                        "src": "15381:28:35",
                        "value": {
                          "arguments": [],
                          "functionName": {
                            "name": "returndatasize",
                            "nodeType": "YulIdentifier",
                            "src": "15393:14:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "15393:16:35"
                        },
                        "variables": [
                          {
                            "name": "size",
                            "nodeType": "YulTypedName",
                            "src": "15385:4:35",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "ptr",
                              "nodeType": "YulIdentifier",
                              "src": "15437:3:35"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "15442:1:35",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "15445:4:35"
                            }
                          ],
                          "functionName": {
                            "name": "returndatacopy",
                            "nodeType": "YulIdentifier",
                            "src": "15422:14:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "15422:28:35"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "15422:28:35"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "15490:49:35",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "ptr",
                                    "nodeType": "YulIdentifier",
                                    "src": "15515:3:35"
                                  },
                                  {
                                    "name": "size",
                                    "nodeType": "YulIdentifier",
                                    "src": "15520:4:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "15508:6:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15508:17:35"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "15508:17:35"
                            }
                          ]
                        },
                        "condition": {
                          "arguments": [
                            {
                              "name": "successDGTCLL",
                              "nodeType": "YulIdentifier",
                              "src": "15474:13:35"
                            }
                          ],
                          "functionName": {
                            "name": "iszero",
                            "nodeType": "YulIdentifier",
                            "src": "15466:6:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "15466:23:35"
                        },
                        "nodeType": "YulIf",
                        "src": "15463:76:35"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "ptr",
                              "nodeType": "YulIdentifier",
                              "src": "15559:3:35"
                            },
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "15564:4:35"
                            }
                          ],
                          "functionName": {
                            "name": "return",
                            "nodeType": "YulIdentifier",
                            "src": "15552:6:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "15552:17:35"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "15552:17:35"
                      }
                    ]
                  },
                  "evmVersion": "istanbul",
                  "externalReferences": [
                    {
                      "declaration": 1238,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "15474:13:35",
                      "valueSize": 1
                    }
                  ],
                  "id": 1254,
                  "nodeType": "InlineAssembly",
                  "src": "15323:256:35"
                }
              ]
            },
            "functionSelector": "152de3b9",
            "id": 1256,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "PropSwapERC20",
            "nameLocation": "14709:13:35",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1233,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1224,
                  "mutability": "mutable",
                  "name": "_tokenOutCLV",
                  "nameLocation": "14740:12:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1256,
                  "src": "14732:20:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1223,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "14732:7:35",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1226,
                  "mutability": "mutable",
                  "name": "_tokenInCLV",
                  "nameLocation": "14770:11:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1256,
                  "src": "14762:19:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1225,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "14762:7:35",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1228,
                  "mutability": "mutable",
                  "name": "_amountOutCLV",
                  "nameLocation": "14799:13:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1256,
                  "src": "14791:21:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1227,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14791:7:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1230,
                  "mutability": "mutable",
                  "name": "_description",
                  "nameLocation": "14836:12:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1256,
                  "src": "14822:26:35",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1229,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "14822:6:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1232,
                  "mutability": "mutable",
                  "name": "_delayTime",
                  "nameLocation": "14866:10:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1256,
                  "src": "14858:18:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1231,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14858:7:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14722:160:35"
            },
            "returnParameters": {
              "id": 1236,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1235,
                  "mutability": "mutable",
                  "name": "propId",
                  "nameLocation": "14925:6:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1256,
                  "src": "14917:14:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1234,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14917:7:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14915:18:35"
            },
            "scope": 1328,
            "src": "14700:885:35",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1286,
              "nodeType": "Block",
              "src": "15800:609:35",
              "statements": [
                {
                  "assignments": [
                    1270,
                    1272
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1270,
                      "mutability": "mutable",
                      "name": "successDGTCLL",
                      "nameLocation": "15816:13:35",
                      "nodeType": "VariableDeclaration",
                      "scope": 1286,
                      "src": "15811:18:35",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1269,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "15811:4:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1272,
                      "mutability": "mutable",
                      "name": "dataDLGTCLL",
                      "nameLocation": "15844:11:35",
                      "nodeType": "VariableDeclaration",
                      "scope": 1286,
                      "src": "15831:24:35",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1271,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "15831:5:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1284,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "50726f7053656c6c455243323028616464726573732c75696e743235362c737472696e672c75696e7432353629",
                            "id": 1277,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "15941:47:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_04f17a9bb89b1e450e234a08e9c473746a395c39a699313d8ca6797b97b374af",
                              "typeString": "literal_string \"PropSellERC20(address,uint256,string,uint256)\""
                            },
                            "value": "PropSellERC20(address,uint256,string,uint256)"
                          },
                          {
                            "id": 1278,
                            "name": "_tokenOutCLV",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1258,
                            "src": "16008:12:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 1279,
                            "name": "_amountOutCLV",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1260,
                            "src": "16039:13:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 1280,
                            "name": "_description",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1262,
                            "src": "16071:12:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          {
                            "id": 1281,
                            "name": "_delayTime",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1264,
                            "src": "16102:10:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_04f17a9bb89b1e450e234a08e9c473746a395c39a699313d8ca6797b97b374af",
                              "typeString": "literal_string \"PropSellERC20(address,uint256,string,uint256)\""
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 1275,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "15899:3:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 1276,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodeWithSignature",
                          "nodeType": "MemberAccess",
                          "src": "15899:23:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (string memory) pure returns (bytes memory)"
                          }
                        },
                        "id": 1282,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "15899:227:35",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 1273,
                        "name": "CLCGovernance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1661,
                        "src": "15859:13:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 1274,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "delegatecall",
                      "nodeType": "MemberAccess",
                      "src": "15859:26:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes memory) returns (bool,bytes memory)"
                      }
                    },
                    "id": 1283,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "15859:277:35",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "15810:326:35"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "16156:247:35",
                    "statements": [
                      {
                        "nodeType": "YulVariableDeclaration",
                        "src": "16170:22:35",
                        "value": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "16187:4:35",
                              "type": "",
                              "value": "0x40"
                            }
                          ],
                          "functionName": {
                            "name": "mload",
                            "nodeType": "YulIdentifier",
                            "src": "16181:5:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "16181:11:35"
                        },
                        "variables": [
                          {
                            "name": "ptr",
                            "nodeType": "YulTypedName",
                            "src": "16174:3:35",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "nodeType": "YulVariableDeclaration",
                        "src": "16205:28:35",
                        "value": {
                          "arguments": [],
                          "functionName": {
                            "name": "returndatasize",
                            "nodeType": "YulIdentifier",
                            "src": "16217:14:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "16217:16:35"
                        },
                        "variables": [
                          {
                            "name": "size",
                            "nodeType": "YulTypedName",
                            "src": "16209:4:35",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "ptr",
                              "nodeType": "YulIdentifier",
                              "src": "16261:3:35"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "16266:1:35",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "16269:4:35"
                            }
                          ],
                          "functionName": {
                            "name": "returndatacopy",
                            "nodeType": "YulIdentifier",
                            "src": "16246:14:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "16246:28:35"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "16246:28:35"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "16314:49:35",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "ptr",
                                    "nodeType": "YulIdentifier",
                                    "src": "16339:3:35"
                                  },
                                  {
                                    "name": "size",
                                    "nodeType": "YulIdentifier",
                                    "src": "16344:4:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "16332:6:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16332:17:35"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "16332:17:35"
                            }
                          ]
                        },
                        "condition": {
                          "arguments": [
                            {
                              "name": "successDGTCLL",
                              "nodeType": "YulIdentifier",
                              "src": "16298:13:35"
                            }
                          ],
                          "functionName": {
                            "name": "iszero",
                            "nodeType": "YulIdentifier",
                            "src": "16290:6:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "16290:23:35"
                        },
                        "nodeType": "YulIf",
                        "src": "16287:76:35"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "ptr",
                              "nodeType": "YulIdentifier",
                              "src": "16383:3:35"
                            },
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "16388:4:35"
                            }
                          ],
                          "functionName": {
                            "name": "return",
                            "nodeType": "YulIdentifier",
                            "src": "16376:6:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "16376:17:35"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "16376:17:35"
                      }
                    ]
                  },
                  "evmVersion": "istanbul",
                  "externalReferences": [
                    {
                      "declaration": 1270,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "16298:13:35",
                      "valueSize": 1
                    }
                  ],
                  "id": 1285,
                  "nodeType": "InlineAssembly",
                  "src": "16147:256:35"
                }
              ]
            },
            "functionSelector": "04f17a9b",
            "id": 1287,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "PropSellERC20",
            "nameLocation": "15600:13:35",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1265,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1258,
                  "mutability": "mutable",
                  "name": "_tokenOutCLV",
                  "nameLocation": "15631:12:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1287,
                  "src": "15623:20:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1257,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "15623:7:35",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1260,
                  "mutability": "mutable",
                  "name": "_amountOutCLV",
                  "nameLocation": "15661:13:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1287,
                  "src": "15653:21:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1259,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "15653:7:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1262,
                  "mutability": "mutable",
                  "name": "_description",
                  "nameLocation": "15698:12:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1287,
                  "src": "15684:26:35",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1261,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "15684:6:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1264,
                  "mutability": "mutable",
                  "name": "_delayTime",
                  "nameLocation": "15728:10:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1287,
                  "src": "15720:18:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1263,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "15720:7:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15613:131:35"
            },
            "returnParameters": {
              "id": 1268,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1267,
                  "mutability": "mutable",
                  "name": "propId",
                  "nameLocation": "15787:6:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1287,
                  "src": "15779:14:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1266,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "15779:7:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15777:18:35"
            },
            "scope": 1328,
            "src": "15591:818:35",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1317,
              "nodeType": "Block",
              "src": "16622:607:35",
              "statements": [
                {
                  "assignments": [
                    1301,
                    1303
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1301,
                      "mutability": "mutable",
                      "name": "successDGTCLL",
                      "nameLocation": "16638:13:35",
                      "nodeType": "VariableDeclaration",
                      "scope": 1317,
                      "src": "16633:18:35",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1300,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "16633:4:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1303,
                      "mutability": "mutable",
                      "name": "dataDLGTCLL",
                      "nameLocation": "16666:11:35",
                      "nodeType": "VariableDeclaration",
                      "scope": 1317,
                      "src": "16653:24:35",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1302,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "16653:5:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1315,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "50726f70427579455243323028616464726573732c75696e743235362c737472696e672c75696e7432353629",
                            "id": 1308,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "16763:46:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_2266e1bc09a9739eac0cdf93a2f130fcaf0d67ad5f8d0909c155c6843375d27c",
                              "typeString": "literal_string \"PropBuyERC20(address,uint256,string,uint256)\""
                            },
                            "value": "PropBuyERC20(address,uint256,string,uint256)"
                          },
                          {
                            "id": 1309,
                            "name": "_tokenInCLV",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1289,
                            "src": "16829:11:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 1310,
                            "name": "_amountOutCLV",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1291,
                            "src": "16859:13:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 1311,
                            "name": "_description",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1293,
                            "src": "16891:12:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          {
                            "id": 1312,
                            "name": "_delayTime",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1295,
                            "src": "16922:10:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_2266e1bc09a9739eac0cdf93a2f130fcaf0d67ad5f8d0909c155c6843375d27c",
                              "typeString": "literal_string \"PropBuyERC20(address,uint256,string,uint256)\""
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 1306,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "16721:3:35",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 1307,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodeWithSignature",
                          "nodeType": "MemberAccess",
                          "src": "16721:23:35",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (string memory) pure returns (bytes memory)"
                          }
                        },
                        "id": 1313,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "16721:225:35",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 1304,
                        "name": "CLCGovernance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1661,
                        "src": "16681:13:35",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 1305,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "delegatecall",
                      "nodeType": "MemberAccess",
                      "src": "16681:26:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes memory) returns (bool,bytes memory)"
                      }
                    },
                    "id": 1314,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "16681:275:35",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "16632:324:35"
                },
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "16976:247:35",
                    "statements": [
                      {
                        "nodeType": "YulVariableDeclaration",
                        "src": "16990:22:35",
                        "value": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "17007:4:35",
                              "type": "",
                              "value": "0x40"
                            }
                          ],
                          "functionName": {
                            "name": "mload",
                            "nodeType": "YulIdentifier",
                            "src": "17001:5:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "17001:11:35"
                        },
                        "variables": [
                          {
                            "name": "ptr",
                            "nodeType": "YulTypedName",
                            "src": "16994:3:35",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "nodeType": "YulVariableDeclaration",
                        "src": "17025:28:35",
                        "value": {
                          "arguments": [],
                          "functionName": {
                            "name": "returndatasize",
                            "nodeType": "YulIdentifier",
                            "src": "17037:14:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "17037:16:35"
                        },
                        "variables": [
                          {
                            "name": "size",
                            "nodeType": "YulTypedName",
                            "src": "17029:4:35",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "ptr",
                              "nodeType": "YulIdentifier",
                              "src": "17081:3:35"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "17086:1:35",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "17089:4:35"
                            }
                          ],
                          "functionName": {
                            "name": "returndatacopy",
                            "nodeType": "YulIdentifier",
                            "src": "17066:14:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "17066:28:35"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "17066:28:35"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "17134:49:35",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "ptr",
                                    "nodeType": "YulIdentifier",
                                    "src": "17159:3:35"
                                  },
                                  {
                                    "name": "size",
                                    "nodeType": "YulIdentifier",
                                    "src": "17164:4:35"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "17152:6:35"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17152:17:35"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "17152:17:35"
                            }
                          ]
                        },
                        "condition": {
                          "arguments": [
                            {
                              "name": "successDGTCLL",
                              "nodeType": "YulIdentifier",
                              "src": "17118:13:35"
                            }
                          ],
                          "functionName": {
                            "name": "iszero",
                            "nodeType": "YulIdentifier",
                            "src": "17110:6:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "17110:23:35"
                        },
                        "nodeType": "YulIf",
                        "src": "17107:76:35"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "ptr",
                              "nodeType": "YulIdentifier",
                              "src": "17203:3:35"
                            },
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "17208:4:35"
                            }
                          ],
                          "functionName": {
                            "name": "return",
                            "nodeType": "YulIdentifier",
                            "src": "17196:6:35"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "17196:17:35"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "17196:17:35"
                      }
                    ]
                  },
                  "evmVersion": "istanbul",
                  "externalReferences": [
                    {
                      "declaration": 1301,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "17118:13:35",
                      "valueSize": 1
                    }
                  ],
                  "id": 1316,
                  "nodeType": "InlineAssembly",
                  "src": "16967:256:35"
                }
              ]
            },
            "functionSelector": "2266e1bc",
            "id": 1318,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "PropBuyERC20",
            "nameLocation": "16424:12:35",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1296,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1289,
                  "mutability": "mutable",
                  "name": "_tokenInCLV",
                  "nameLocation": "16454:11:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1318,
                  "src": "16446:19:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1288,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "16446:7:35",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1291,
                  "mutability": "mutable",
                  "name": "_amountOutCLV",
                  "nameLocation": "16483:13:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1318,
                  "src": "16475:21:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1290,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16475:7:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1293,
                  "mutability": "mutable",
                  "name": "_description",
                  "nameLocation": "16520:12:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1318,
                  "src": "16506:26:35",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1292,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "16506:6:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1295,
                  "mutability": "mutable",
                  "name": "_delayTime",
                  "nameLocation": "16550:10:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1318,
                  "src": "16542:18:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1294,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16542:7:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "16436:130:35"
            },
            "returnParameters": {
              "id": 1299,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1298,
                  "mutability": "mutable",
                  "name": "propId",
                  "nameLocation": "16609:6:35",
                  "nodeType": "VariableDeclaration",
                  "scope": 1318,
                  "src": "16601:14:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1297,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "16601:7:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "16599:18:35"
            },
            "scope": 1328,
            "src": "16415:814:35",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1326,
              "nodeType": "Block",
              "src": "17298:41:35",
              "statements": [
                {
                  "expression": {
                    "expression": {
                      "id": 1323,
                      "name": "arrMembers",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1710,
                      "src": "17315:10:35",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_strMember_$4185_storage_$dyn_storage",
                        "typeString": "struct strMember storage ref[] storage ref"
                      }
                    },
                    "id": 1324,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "length",
                    "nodeType": "MemberAccess",
                    "src": "17315:17:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 1322,
                  "id": 1325,
                  "nodeType": "Return",
                  "src": "17308:24:35"
                }
              ]
            },
            "functionSelector": "824c88da",
            "id": 1327,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "GetArrMembersLength",
            "nameLocation": "17244:19:35",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1319,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "17263:2:35"
            },
            "returnParameters": {
              "id": 1322,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1321,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1327,
                  "src": "17289:7:35",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1320,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "17289:7:35",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "17287:11:35"
            },
            "scope": 1328,
            "src": "17235:104:35",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 1329,
        "src": "254:17087:35",
        "usedErrors": []
      }
    ],
    "src": "32:17309:35"
  },
  "bytecode": "",
  "bytecodeSha1": "68ea39555a3792321f7f1a74643a6a1c88414a92",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.12+commit.f00d7308"
  },
  "contractName": "CLHouse",
  "coverageMap": {
    "branches": {
      "35": {
        "CLHouse.AcceptRejectInvitation": {
          "21": [
            14461,
            14474,
            false
          ]
        },
        "CLHouse.ExecProp": {
          "22": [
            3022,
            3035,
            false
          ]
        },
        "CLHouse.VotePropOffChain": {
          "23": [
            6173,
            6193,
            true
          ],
          "24": [
            6242,
            6258,
            true
          ],
          "25": [
            6318,
            6347,
            true
          ],
          "26": [
            6396,
            6437,
            true
          ],
          "27": [
            6488,
            6529,
            true
          ],
          "28": [
            6576,
            6612,
            true
          ],
          "29": [
            6682,
            6732,
            true
          ],
          "30": [
            7000,
            7008,
            false
          ]
        },
        "CLHouse.VoteProposal": {
          "31": [
            4102,
            4115,
            false
          ]
        }
      },
      "37": {}
    },
    "statements": {
      "35": {
        "CLHouse.AcceptRejectInvitation": {
          "1": [
            14456,
            14688
          ]
        },
        "CLHouse.ExecProp": {
          "2": [
            3017,
            3249
          ],
          "3": [
            3259,
            3304
          ]
        },
        "CLHouse.GetArrMembersLength": {
          "0": [
            17308,
            17332
          ]
        },
        "CLHouse.VotePropOffChain": {
          "4": [
            6164,
            6223
          ],
          "5": [
            6233,
            6299
          ],
          "6": [
            6309,
            6377
          ],
          "7": [
            6387,
            6469
          ],
          "8": [
            6479,
            6557
          ],
          "9": [
            6567,
            6663
          ],
          "10": [
            6673,
            6756
          ],
          "11": [
            6767,
            6817
          ],
          "12": [
            6827,
            6887
          ],
          "13": [
            6897,
            6939
          ],
          "14": [
            6950,
            6984
          ],
          "15": [
            7023,
            7061
          ],
          "16": [
            7072,
            7131
          ],
          "17": [
            7163,
            7182
          ],
          "18": [
            7193,
            7204
          ]
        },
        "CLHouse.VoteProposal": {
          "19": [
            4097,
            4329
          ],
          "20": [
            4339,
            4350
          ]
        }
      },
      "37": {}
    }
  },
  "dependencies": [
    "CLStorage"
  ],
  "deployedBytecode": "",
  "deployedSourceMap": "254:17087:35:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15591:818;;;;;;:::i;:::-;;:::i;:::-;;;1732:25:46;;;1720:2;1705:18;15591:818:35;;;;;;;;875:23:37;;;;;-1:-1:-1;;;;;875:23:37;;;;;;-1:-1:-1;;;;;1947:32:46;;;1929:51;;1917:2;1902:18;875:23:37;1768:218:46;615:38:37;;;;;;;;;;;;;;;2163:4:46;2151:17;;;2133:36;;2121:2;2106:18;615:38:37;1991:184:46;1019:48:37;;;;;;:::i;:::-;;;;;;;;;;;;;;14129:565:35;;;;;;:::i;:::-;;:::i;:::-;;14700:885;;;;;;:::i;:::-;;:::i;1490:159:37:-;;1557:92;1490:159;;762:37;;;;;;904:27;;;;;-1:-1:-1;;;;;904:27:37;;;16415:814:35;;;;;;:::i;:::-;;:::i;13319:672::-;;;;;;:::i;:::-;;:::i;1323:44:37:-;;;;;;:::i;:::-;;:::i;320:24::-;;;:::i;:::-;;;;;;;:::i;2643:668:35:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;4363:2848::-;;;;;;:::i;:::-;;:::i;:::-;;;6475:14:46;;6468:22;6450:41;;6438:2;6423:18;4363:2848:35;6310:187:46;818:23:37;;;;;-1:-1:-1;;;;;818:23:37;;;12262:757:35;;;;;;:::i;:::-;;:::i;9902:791::-;;;;;;:::i;:::-;;:::i;17235:104::-;17315:10;:17;17235:104;;1373:29:37;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;:::i;495:30::-;;;;;;;;;;;;847:22;;;;;-1:-1:-1;;;;;847:22:37;;;937:56;;;;;;:::i;:::-;;;;;;;;;;;;;;531:36;;;;;;;;;;;;3644:713:35;;;;;;:::i;:::-;;:::i;573:36:37:-;;;;;;;;;;;;1273:44;;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;8507:15:46;;;8489:34;;8554:2;8539:18;;8532:34;;;;8602:15;;;8582:18;;;8575:43;;;;8654:15;;;8649:2;8634:18;;8627:43;8438:3;8423:19;1273:44:37;8220:456:46;1221:46:37;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;1073:67::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;8806:751:35:-;;;;;;:::i;:::-;;:::i;1182:33:37:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;:::i;460:29::-;;;;;;;;;11038:863:35;;;;;;:::i;:::-;;:::i;672:24:37:-;;;;;;;;;;;;7656:868:35;;;;;;:::i;:::-;;:::i;15591:818::-;15859:13;;15899:227;;15779:14;;;;;;-1:-1:-1;;;;;15859:13:35;;15899:227;;16008:12;;16039:13;;16071:12;;16102:10;;15899:227;;;:::i;:::-;;;;-1:-1:-1;;15899:227:35;;;;;;;;;;;;;;-1:-1:-1;;;;;15899:227:35;-1:-1:-1;;;15899:227:35;;;15859:277;;;15899:227;15859:277;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15810:326;;;;16187:4;16181:11;16217:16;16269:4;16266:1;16261:3;16246:28;16298:13;16287:76;;16344:4;16339:3;16332:17;16287:76;16388:4;16383:3;16376:17;14129:565;14273:19;;14319:116;;6475:14:46;;6468:22;14319:116:35;;;6450:41:46;14225:18:35;;;;14273:19;;;;-1:-1:-1;;;;;14273:19:35;;6423:18:46;;14319:116:35;;;-1:-1:-1;;14319:116:35;;;;;;;;;;;;;;-1:-1:-1;;;;;14319:116:35;-1:-1:-1;;;14319:116:35;;;14273:172;;;14319:116;14273:172;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14224:221;;;;14461:13;14456:232;;14535:4;14529:11;14569:16;14625:4;14622:1;14617:3;14602:28;14659:4;14654:3;14647:17;14456:232;14214:480;;14129:565;:::o;14700:885::-;14997:13;;15037:265;;14917:14;;;;;;-1:-1:-1;;;;;14997:13:35;;15037:265;;15154:12;;15185:11;;15215:13;;15247:12;;15278:10;;15037:265;;;:::i;:::-;;;;-1:-1:-1;;15037:265:35;;;;;;;;;;;;;;-1:-1:-1;;;;;15037:265:35;-1:-1:-1;;;15037:265:35;;;14997:315;;;15037:265;14997:315;:::i;16415:814::-;16681:13;;16721:225;;16601:14;;;;;;-1:-1:-1;;;;;16681:13:35;;16721:225;;16829:11;;16859:13;;16891:12;;16922:10;;16721:225;;;:::i;:::-;;;;-1:-1:-1;;16721:225:35;;;;;;;;;;;;;;-1:-1:-1;;;;;16721:225:35;-1:-1:-1;;;16721:225:35;;;16681:275;;;16721:225;16681:275;:::i;13319:672::-;13524:13;;13564:144;;13451:7;;;;;;-1:-1:-1;;;;;13524:13:35;;13564:144;;13659:5;;13682:12;;13564:144;;;:::i;:::-;;;;-1:-1:-1;;13564:144:35;;;;;;;;;;;;;;-1:-1:-1;;;;;13564:144:35;-1:-1:-1;;;13564:144:35;;;13524:194;;;13564:144;13524:194;:::i;1323:44:37:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1323:44:37;:::o;320:24::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2643:668:35:-;2856:13;;2896:100;;;;;1732:25:46;;;2736:11:35;;2761:21;;2736:11;;;;-1:-1:-1;;;;;2856:13:35;;;;1705:18:46;;2896:100:35;;;-1:-1:-1;;2896:100:35;;;;;;;;;;;;;;-1:-1:-1;;;;;2896:100:35;-1:-1:-1;;;2896:100:35;;;2856:150;;;2896:100;2856:150;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2807:199;;;;3022:13;3017:232;;3096:4;3090:11;3130:16;3186:4;3183:1;3178:3;3163:28;3220:4;3215:3;3208:17;3017:232;3268:4;3259:45;;;;;;;;;;;;;;;;;;;;;;;2643:668;;;:::o;4363:2848::-;4607:4;4628:15;4646:13;4628:31;;4670:24;4758:140;;;;;;14913:34:46;14901:47;;14978:34;14973:2;14964:12;;14957:56;-1:-1:-1;;;15038:2:46;15029:12;;15022:42;15089:2;15080:12;;14699:399;4758:140:35;;;;-1:-1:-1;;4758:140:35;;;;;;;;;4748:151;;4758:140;4748:151;;;;4720:324;;;15362:25:46;4917:20:35;15403:18:46;;;15396:34;4955:19:35;15446:18:46;;;15439:34;15489:18;;;15482:34;;;5025:4:35;15532:19:46;;;15525:61;15334:19;;4720:324:35;;;;;;;;;;;;4697:357;;;;;;4670:384;;5065:18;5147:137;;;;;;15811:34:46;15799:47;;15876:34;15871:2;15862:12;;15855:56;-1:-1:-1;;;15936:2:46;15927:12;;15920:39;15984:2;15975:12;;15597:396;5147:137:35;;;;;;;;;;;;;5137:148;;;;;;5303:6;5327:7;5352:8;5405:14;5388:32;;;;;;;;:::i;:::-;;;;;;;;;;;;;5378:43;;;;;;5109:326;;;;;;;;;;;16532:25:46;;;-1:-1:-1;;;;;16593:32:46;;;;16588:2;16573:18;;16566:60;16657:2;16642:18;;16635:34;;;;16712:14;16705:22;16700:2;16685:18;;16678:50;16759:3;16744:19;;16737:35;16519:3;16504:19;;16279:499;5109:326:35;;;;;;;;;;;;;5086:359;;;;;;5065:380;;5464:16;5522;5540:10;5493:58;;;;;;;;-1:-1:-1;;;17041:27:46;;17093:1;17084:11;;17077:27;;;;17129:2;17120:12;;17113:28;17166:2;17157:12;;16783:392;5493:58:35;;;;-1:-1:-1;;5493:58:35;;;;;;;;;5483:69;;5493:58;5483:69;;;;6094:14;6111:42;;;;;;;;;17407:25:46;;;17480:4;17468:17;;17448:18;;;17441:45;;;;17502:18;;;17495:34;;;17545:18;;;17538:34;;;5483:69:35;;-1:-1:-1;6094:14:35;6111:42;;17379:19:46;;6111:42:35;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6111:42:35;;-1:-1:-1;;6111:42:35;;;-1:-1:-1;;;;;;;6173:20:35;;6164:59;;;;-1:-1:-1;;;6164:59:35;;17785:2:46;6164:59:35;;;17767:21:46;17824:2;17804:18;;;17797:30;17863:26;17843:18;;;17836:54;17907:18;;6164:59:35;;;;;;;;;6252:6;-1:-1:-1;;;;;6242:16:35;:6;-1:-1:-1;;;;;6242:16:35;;6233:66;;;;-1:-1:-1;;;6233:66:35;;18138:2:46;6233:66:35;;;18120:21:46;18177:2;18157:18;;;18150:30;18216:34;18196:18;;;18189:62;-1:-1:-1;;;18267:18:46;;;18260:33;18310:19;;6233:66:35;17936:399:46;6233:66:35;6328:12;:19;6318:29;;6309:68;;;;-1:-1:-1;;;6309:68:35;;18542:2:46;6309:68:35;;;18524:21:46;18581:2;18561:18;;;18554:30;18620:25;18600:18;;;18593:53;18663:18;;6309:68:35;18340:347:46;6309:68:35;6405:12;6419:7;6405:23;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:32;;;;;;;;6396:41;6387:82;;;;-1:-1:-1;;;6387:82:35;;19026:2:46;6387:82:35;;;19008:21:46;19065:2;19045:18;;;19038:30;19104:27;19084:18;;;19077:55;19149:18;;6387:82:35;18824:349:46;6387:82:35;6497:12;6511:7;6497:23;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:32;;;;;;;;6488:41;6479:78;;;;-1:-1:-1;;;6479:78:35;;19380:2:46;6479:78:35;;;19362:21:46;19419:2;19399:18;;;19392:30;-1:-1:-1;;;19438:18:46;;;19431:51;19499:18;;6479:78:35;19178:345:46;6479:78:35;6577:8;:19;6587:7;6577:19;;;;;;;;;;;:29;6598:6;-1:-1:-1;;;;;6577:29:35;-1:-1:-1;;;;;6577:29:35;;;;;;;;;;;;:35;;;;;;;;;;;;6576:36;6567:96;;;;-1:-1:-1;;;6567:96:35;;19730:2:46;6567:96:35;;;19712:21:46;19769:2;19749:18;;;19742:30;19808:34;19788:18;;;19781:62;-1:-1:-1;;;19859:18:46;;;19852:42;19911:19;;6567:96:35;19528:408:46;6567:96:35;6700:12;6714:7;6700:23;;;;;;;;:::i;:::-;;;;;;;;;;;:32;;;6682:15;:50;6673:83;;;;-1:-1:-1;;;6673:83:35;;20143:2:46;6673:83:35;;;20125:21:46;20182:2;20162:18;;;20155:30;-1:-1:-1;;;20201:18:46;;;20194:47;20258:18;;6673:83:35;19941:341:46;6673:83:35;6809:8;6767;:19;6777:7;6767:19;;;;;;;;;;;:29;6788:6;-1:-1:-1;;;;;6767:29:35;-1:-1:-1;;;;;6767:29:35;;;;;;;;;;;;:39;;;:50;;;;;;;;;;;;;;;;;;6873:14;6827:8;:19;6837:7;6827:19;;;;;;;;;;;:29;6848:6;-1:-1:-1;;;;;6827:29:35;-1:-1:-1;;;;;6827:29:35;;;;;;;;;;;;:43;;:60;;;;;;;;;;;;:::i;:::-;;6935:4;6897:8;:19;6907:7;6897:19;;;;;;;;;;;:29;6918:6;-1:-1:-1;;;;;6897:29:35;-1:-1:-1;;;;;6897:29:35;;;;;;;;;;;;:35;;;:42;;;;;;;;;;;;;;;;;;6950:12;6964:7;6950:23;;;;;;;;:::i;:::-;;;;;;;;:32;:23;;;;;:32;:34;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;7000:8;6995:66;;7023:12;7037:7;7023:23;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:36;;:38;;;;;;;;:36;:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;6995:66;7077:54;7087:7;7097:8;7107:6;7115:14;7077:54;;;;;;;;;:::i;:::-;;;;;;;;7163:19;7173:7;7163:8;:19::i;:::-;-1:-1:-1;7200:4:35;;4363:2848;-1:-1:-1;;;;;;;;;;;;;;4363:2848:35:o;12262:757::-;12504:13;;12544:189;;12424:14;;;;;;-1:-1:-1;;;;;12504:13:35;;12544:189;;12641:20;;12679:12;;12709:10;;12544:189;;;:::i;:::-;;;;-1:-1:-1;;12544:189:35;;;;;;;;;;;;;;-1:-1:-1;;;;;12544:189:35;-1:-1:-1;;;12544:189:35;;;12504:239;;;12544:189;12504:239;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12455:288;;;;12794:4;12788:11;12824:16;12876:4;12873:1;12868:3;12853:28;12905:13;12894:76;;12951:4;12946:3;12939:17;12894:76;-1:-1:-1;12993:10:35;;12262:757;-1:-1:-1;;;;;;12262:757:35:o;9902:791::-;10157:13;;10197:210;;10077:14;;;;;;-1:-1:-1;;;;;10157:13:35;;10197:210;;10301:3;;10322:13;;10353:12;;10383:10;;10197:210;;;:::i;:::-;;;;-1:-1:-1;;10197:210:35;;;;;;;;;;;;;;-1:-1:-1;;;;;10197:210:35;-1:-1:-1;;;10197:210:35;;;10157:260;;;10197:210;10157:260;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10108:309;;;;10468:4;10462:11;10498:16;10550:4;10547:1;10542:3;10527:28;10579:13;10568:76;;10625:4;10620:3;10613:17;10568:76;-1:-1:-1;10667:10:35;;9902:791;-1:-1:-1;;;;;;;9902:791:35:o;1373:29:37:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1373:29:37;;;;-1:-1:-1;1373:29:37;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;1373:29:37;;;;;;;;;;;;;;;;;-1:-1:-1;1373:29:37;;;;;;:::o;3644:713:35:-;3860:13;;3900:176;;3790:4;;;;;;-1:-1:-1;;;;;3860:13:35;;3900:176;;3997:7;;4022:8;;4048:14;;3900:176;;;:::i;:::-;;;;-1:-1:-1;;3900:176:35;;;;;;;;;;;;;;-1:-1:-1;;;;;3900:176:35;-1:-1:-1;;;3900:176:35;;;3860:226;;;3900:176;3860:226;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3811:275;;;;4102:13;4097:232;;4176:4;4170:11;4210:16;4266:4;4263:1;4258:3;4243:28;4300:4;4295:3;4288:17;4097:232;-1:-1:-1;4346:4:35;;3644:713;-1:-1:-1;;;;;3644:713:35:o;1273:44:37:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1273:44:37;;;;-1:-1:-1;1273:44:37;;;;;;;:::o;1221:46::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1221:46:37;;;;-1:-1:-1;1221:46:37;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1221:46:37;;;;;;;-1:-1:-1;;1221:46:37;;;:::o;1073:67::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;8806:751:35:-;9045:13;;9085:186;;8965:14;;;;;;-1:-1:-1;;;;;9045:13:35;;9085:186;;9188:11;;9217:12;;9247:10;;9085:186;;;:::i;:::-;;;;-1:-1:-1;;9085:186:35;;;;;;;;;;;;;;-1:-1:-1;;;;;9085:186:35;-1:-1:-1;;;9085:186:35;;;9045:236;;;9085:186;9045:236;:::i;1182:33:37:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1182:33:37;;;-1:-1:-1;;;;1182:33:37;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1182:33:37;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1182:33:37;;;;;;-1:-1:-1;1182:33:37;;;;;;;;;;;;:::o;11038:863:35:-;11325:13;;11365:250;;11245:14;;;;;;-1:-1:-1;;;;;11325:13:35;;11365:250;;11479:3;;11500:13;;11531:12;;11561;;11591:10;;11365:250;;;:::i;:::-;;;;-1:-1:-1;;11365:250:35;;;;;;;;;;;;;;-1:-1:-1;;;;;11365:250:35;-1:-1:-1;;;11365:250:35;;;11325:300;;;11365:250;11325:300;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11276:349;;;;11676:4;11670:11;11706:16;11758:4;11755:1;11750:3;11735:28;11787:13;11776:76;;11833:4;11828:3;11821:17;11776:76;-1:-1:-1;11875:10:35;;11038:863;-1:-1:-1;;;;;;;;11038:863:35:o;7656:868::-;7949:13;;7989:249;;7869:14;;;;;;-1:-1:-1;;;;;7949:13:35;;7989:249;;8104:11;;8133:5;;8156:12;;8186:10;;8214;;7989:249;;;:::i;:::-;;;;-1:-1:-1;;7989:249:35;;;;;;;;;;;;;;-1:-1:-1;;;;;7989:249:35;-1:-1:-1;;;7989:249:35;;;7949:299;;;7989:249;7949:299;:::i;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:173:46;82:20;;-1:-1:-1;;;;;131:31:46;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:127::-;253:10;248:3;244:20;241:1;234:31;284:4;281:1;274:15;308:4;305:1;298:15;324:719;367:5;420:3;413:4;405:6;401:17;397:27;387:55;;438:1;435;428:12;387:55;474:6;461:20;500:18;537:2;533;530:10;527:36;;;543:18;;:::i;:::-;618:2;612:9;586:2;672:13;;-1:-1:-1;;668:22:46;;;692:2;664:31;660:40;648:53;;;716:18;;;736:22;;;713:46;710:72;;;762:18;;:::i;:::-;802:10;798:2;791:22;837:2;829:6;822:18;883:3;876:4;871:2;863:6;859:15;855:26;852:35;849:55;;;900:1;897;890:12;849:55;964:2;957:4;949:6;945:17;938:4;930:6;926:17;913:54;1011:1;1004:4;999:2;991:6;987:15;983:26;976:37;1031:6;1022:15;;;;;;324:719;;;;:::o;1048:533::-;1144:6;1152;1160;1168;1221:3;1209:9;1200:7;1196:23;1192:33;1189:53;;;1238:1;1235;1228:12;1189:53;1261:29;1280:9;1261:29;:::i;:::-;1251:39;;1337:2;1326:9;1322:18;1309:32;1299:42;;1392:2;1381:9;1377:18;1364:32;1419:18;1411:6;1408:30;1405:50;;;1451:1;1448;1441:12;1405:50;1474;1516:7;1507:6;1496:9;1492:22;1474:50;:::i;:::-;1048:533;;;;-1:-1:-1;1464:60:46;;1571:2;1556:18;1543:32;;-1:-1:-1;;;1048:533:46:o;2180:186::-;2239:6;2292:2;2280:9;2271:7;2267:23;2263:32;2260:52;;;2308:1;2305;2298:12;2260:52;2331:29;2350:9;2331:29;:::i;:::-;2321:39;2180:186;-1:-1:-1;;;2180:186:46:o;2371:160::-;2436:20;;2492:13;;2485:21;2475:32;;2465:60;;2521:1;2518;2511:12;2536:180;2592:6;2645:2;2633:9;2624:7;2620:23;2616:32;2613:52;;;2661:1;2658;2651:12;2613:52;2684:26;2700:9;2684:26;:::i;2721:608::-;2826:6;2834;2842;2850;2858;2911:3;2899:9;2890:7;2886:23;2882:33;2879:53;;;2928:1;2925;2918:12;2879:53;2951:29;2970:9;2951:29;:::i;:::-;2941:39;;2999:38;3033:2;3022:9;3018:18;2999:38;:::i;:::-;2989:48;;3084:2;3073:9;3069:18;3056:32;3046:42;;3139:2;3128:9;3124:18;3111:32;3166:18;3158:6;3155:30;3152:50;;;3198:1;3195;3188:12;3152:50;3221;3263:7;3254:6;3243:9;3239:22;3221:50;:::i;:::-;2721:608;;;;-1:-1:-1;2721:608:46;;3318:3;3303:19;3290:33;;2721:608;-1:-1:-1;;;2721:608:46:o;3516:543::-;3604:6;3612;3665:2;3653:9;3644:7;3640:23;3636:32;3633:52;;;3681:1;3678;3671:12;3633:52;3721:9;3708:23;3750:18;3791:2;3783:6;3780:14;3777:34;;;3807:1;3804;3797:12;3777:34;3830:50;3872:7;3863:6;3852:9;3848:22;3830:50;:::i;:::-;3820:60;;3933:2;3922:9;3918:18;3905:32;3889:48;;3962:2;3952:8;3949:16;3946:36;;;3978:1;3975;3968:12;3946:36;;4001:52;4045:7;4034:8;4023:9;4019:24;4001:52;:::i;:::-;3991:62;;;3516:543;;;;;:::o;4064:180::-;4123:6;4176:2;4164:9;4155:7;4151:23;4147:32;4144:52;;;4192:1;4189;4182:12;4144:52;-1:-1:-1;4215:23:46;;4064:180;-1:-1:-1;4064:180:46:o;4249:258::-;4321:1;4331:113;4345:6;4342:1;4339:13;4331:113;;;4421:11;;;4415:18;4402:11;;;4395:39;4367:2;4360:10;4331:113;;;4462:6;4459:1;4456:13;4453:48;;;4497:1;4488:6;4483:3;4479:16;4472:27;4453:48;;4249:258;;;:::o;4512:::-;4554:3;4592:5;4586:12;4619:6;4614:3;4607:19;4635:63;4691:6;4684:4;4679:3;4675:14;4668:4;4661:5;4657:16;4635:63;:::i;:::-;4752:2;4731:15;-1:-1:-1;;4727:29:46;4718:39;;;;4759:4;4714:50;;4512:258;-1:-1:-1;;4512:258:46:o;4775:220::-;4924:2;4913:9;4906:21;4887:4;4944:45;4985:2;4974:9;4970:18;4962:6;4944:45;:::i;5096:301::-;5281:6;5274:14;5267:22;5256:9;5249:41;5326:2;5321;5310:9;5306:18;5299:30;5230:4;5346:45;5387:2;5376:9;5372:18;5364:6;5346:45;:::i;:::-;5338:53;5096:301;-1:-1:-1;;;;5096:301:46:o;5402:156::-;5468:20;;5528:4;5517:16;;5507:27;;5497:55;;5548:1;5545;5538:12;5563:742;5681:6;5689;5697;5705;5713;5721;5729;5782:3;5770:9;5761:7;5757:23;5753:33;5750:53;;;5799:1;5796;5789:12;5750:53;5822:29;5841:9;5822:29;:::i;:::-;5812:39;;5898:2;5887:9;5883:18;5870:32;5860:42;;5921:35;5952:2;5941:9;5937:18;5921:35;:::i;:::-;5911:45;;6007:2;5996:9;5992:18;5979:32;6034:18;6026:6;6023:30;6020:50;;;6066:1;6063;6056:12;6020:50;6089;6131:7;6122:6;6111:9;6107:22;6089:50;:::i;:::-;6079:60;;;6186:3;6175:9;6171:19;6158:33;6148:43;;6238:3;6227:9;6223:19;6210:33;6200:43;;6262:37;6294:3;6283:9;6279:19;6262:37;:::i;:::-;6252:47;;5563:742;;;;;;;;;;:::o;6734:460::-;6819:6;6827;6835;6888:2;6876:9;6867:7;6863:23;6859:32;6856:52;;;6904:1;6901;6894:12;6856:52;6927:27;6944:9;6927:27;:::i;:::-;6917:37;;7005:2;6994:9;6990:18;6977:32;7032:18;7024:6;7021:30;7018:50;;;7064:1;7061;7054:12;7018:50;7087;7129:7;7120:6;7109:9;7105:22;7087:50;:::i;:::-;7077:60;;;7184:2;7173:9;7169:18;7156:32;7146:42;;6734:460;;;;;:::o;7199:553::-;-1:-1:-1;;;;;7448:32:46;;7430:51;;7468:3;7512:2;7497:18;;7490:31;;;-1:-1:-1;;7538:46:46;;7564:19;;7556:6;7538:46;:::i;:::-;7615:2;7600:18;;7593:34;;;;-1:-1:-1;7670:14:46;;7663:22;7658:2;7643:18;;7636:50;7730:14;7723:22;7717:3;7702:19;;;7695:51;7530:54;7199:553;-1:-1:-1;;7199:553:46:o;7757:458::-;7841:6;7849;7857;7910:2;7898:9;7889:7;7885:23;7881:32;7878:52;;;7926:1;7923;7916:12;7878:52;7962:9;7949:23;7939:33;;7991:35;8022:2;8011:9;8007:18;7991:35;:::i;:::-;7981:45;;8077:2;8066:9;8062:18;8049:32;8104:18;8096:6;8093:30;8090:50;;;8136:1;8133;8126:12;8090:50;8159;8201:7;8192:6;8181:9;8177:22;8159:50;:::i;:::-;8149:60;;;7757:458;;;;;:::o;8681:398::-;-1:-1:-1;;;;;8880:32:46;;8862:51;;8949:2;8944;8929:18;;8922:30;;;-1:-1:-1;;8969:45:46;;8995:18;;8987:6;8969:45;:::i;:::-;8961:53;;9064:6;9057:14;9050:22;9045:2;9034:9;9030:18;9023:50;8681:398;;;;;;:::o;9084:254::-;9152:6;9160;9213:2;9201:9;9192:7;9188:23;9184:32;9181:52;;;9229:1;9226;9219:12;9181:52;9265:9;9252:23;9242:33;;9294:38;9328:2;9317:9;9313:18;9294:38;:::i;:::-;9284:48;;9084:254;;;;;:::o;9343:382::-;9550:6;9543:14;9536:22;9525:9;9518:41;9609:6;9602:14;9595:22;9590:2;9579:9;9575:18;9568:50;9654:2;9649;9638:9;9634:18;9627:30;9499:4;9674:45;9715:2;9704:9;9700:18;9692:6;9674:45;:::i;:::-;9666:53;9343:382;-1:-1:-1;;;;;9343:382:46:o;9730:464::-;9817:6;9825;9833;9886:2;9874:9;9865:7;9861:23;9857:32;9854:52;;;9902:1;9899;9892:12;9854:52;9925:29;9944:9;9925:29;:::i;10199:1036::-;-1:-1:-1;;;;;10589:32:46;;10571:51;;10530:4;10559:3;10652:1;10641:13;;10631:144;;10697:10;10692:3;10688:20;10685:1;10678:31;10732:4;10729:1;10722:15;10760:4;10757:1;10750:15;10631:144;10811:6;10806:2;10795:9;10791:18;10784:34;10854:2;10849;10838:9;10834:18;10827:30;10874:45;10915:2;10904:9;10900:18;10892:6;10874:45;:::i;:::-;10866:53;;;10955:6;10950:2;10939:9;10935:18;10928:34;11011:4;11003:6;10999:17;10993:3;10982:9;10978:19;10971:46;11066:4;11058:6;11054:17;11048:3;11037:9;11033:19;11026:46;11123:6;11116:14;11109:22;11103:3;11092:9;11088:19;11081:51;11141:44;11180:3;11169:9;11165:19;11157:6;5070:13;5063:21;5051:34;;5000:91;11141:44;11222:6;11216:3;11205:9;11201:19;11194:35;10199:1036;;;;;;;;;;;;:::o;11240:608::-;11345:6;11353;11361;11369;11377;11430:3;11418:9;11409:7;11405:23;11401:33;11398:53;;;11447:1;11444;11437:12;11398:53;11470:29;11489:9;11470:29;:::i;:::-;11460:39;;11546:2;11535:9;11531:18;11518:32;11508:42;;11569:38;11603:2;11592:9;11588:18;11569:38;:::i;:::-;11559:48;;11658:2;11647:9;11643:18;11630:32;11685:18;11677:6;11674:30;11671:50;;;11717:1;11714;11707:12;11853:755;11965:6;11973;11981;11989;11997;12050:3;12038:9;12029:7;12025:23;12021:33;12018:53;;;12067:1;12064;12057:12;12018:53;12090:29;12109:9;12090:29;:::i;:::-;12080:39;;12170:2;12159:9;12155:18;12142:32;12193:18;12234:2;12226:6;12223:14;12220:34;;;12250:1;12247;12240:12;12220:34;12273:50;12315:7;12306:6;12295:9;12291:22;12273:50;:::i;:::-;12263:60;;12376:2;12365:9;12361:18;12348:32;12332:48;;12405:2;12395:8;12392:16;12389:36;;;12421:1;12418;12411:12;12389:36;;12444:52;12488:7;12477:8;12466:9;12462:24;12444:52;:::i;:::-;12434:62;;;12515:35;12546:2;12535:9;12531:18;12515:35;:::i;:::-;11853:755;;;;-1:-1:-1;11853:755:46;;12597:3;12582:19;12569:33;;11853:755;-1:-1:-1;;11853:755:46:o;12613:461::-;12875:1;12871;12866:3;12862:11;12858:19;12850:6;12846:32;12835:9;12828:51;12915:6;12910:2;12899:9;12895:18;12888:34;12958:3;12953:2;12942:9;12938:18;12931:31;12809:4;12979:46;13020:3;13009:9;13005:19;12997:6;12979:46;:::i;:::-;12971:54;;13061:6;13056:2;13045:9;13041:18;13034:34;12613:461;;;;;;;:::o;13079:274::-;13208:3;13246:6;13240:13;13262:53;13308:6;13303:3;13296:4;13288:6;13284:17;13262:53;:::i;:::-;13331:16;;;;;13079:274;-1:-1:-1;;13079:274:46:o;13358:563::-;-1:-1:-1;;;;;13657:15:46;;;13639:34;;13709:15;;13704:2;13689:18;;13682:43;13756:2;13741:18;;13734:34;;;13619:3;13799:2;13784:18;;13777:31;;;13582:4;;13825:46;;13851:19;;13843:6;13825:46;:::i;:::-;13817:54;;13908:6;13902:3;13891:9;13887:19;13880:35;13358:563;;;;;;;;:::o;13926:383::-;14123:2;14112:9;14105:21;14086:4;14149:45;14190:2;14179:9;14175:18;14167:6;14149:45;:::i;:::-;14242:9;14234:6;14230:22;14225:2;14214:9;14210:18;14203:50;14270:33;14296:6;14288;14270:33;:::i;14314:380::-;14393:1;14389:12;;;;14436;;;14457:61;;14511:4;14503:6;14499:17;14489:27;;14457:61;14564:2;14556:6;14553:14;14533:18;14530:38;14527:161;;;14610:10;14605:3;14601:20;14598:1;14591:31;14645:4;14642:1;14635:15;14673:4;14670:1;14663:15;14527:161;;14314:380;;;:::o;18692:127::-;18753:10;18748:3;18744:20;18741:1;18734:31;18784:4;18781:1;18774:15;18808:4;18805:1;18798:15;20287:272;20324:3;20368:4;20361:5;20357:16;20397:4;20388:7;20385:17;20382:140;;;20444:10;20439:3;20435:20;20432:1;20425:31;20479:4;20476:1;20469:15;20507:4;20504:1;20497:15;20382:140;20551:1;20538:15;;20287:272;-1:-1:-1;;20287:272:46:o;20564:471::-;20773:25;;;20841:14;;20834:22;20829:2;20814:18;;20807:50;-1:-1:-1;;;;;20893:32:46;;20888:2;20873:18;;20866:60;20962:3;20957:2;20942:18;;20935:31;;;-1:-1:-1;;20983:46:46;;21009:19;;21001:6;20983:46;:::i;:::-;20975:54;20564:471;-1:-1:-1;;;;;;20564:471:46:o;21040:369::-;21253:4;21245:6;21241:17;21230:9;21223:36;21295:2;21290;21279:9;21275:18;21268:30;21204:4;21315:45;21356:2;21345:9;21341:18;21333:6;21315:45;:::i;:::-;21307:53;;21396:6;21391:2;21380:9;21376:18;21369:34;21040:369;;;;;;:::o;21414:372::-;21613:6;21602:9;21595:25;21670:6;21663:14;21656:22;21651:2;21640:9;21636:18;21629:50;21715:2;21710;21699:9;21695:18;21688:30;21576:4;21735:45;21776:2;21765:9;21761:18;21753:6;21735:45;:::i;21791:388::-;-1:-1:-1;;;;;21996:32:46;;21978:51;;22065:2;22060;22045:18;;22038:30;;;-1:-1:-1;;22085:45:46;;22111:18;;22103:6;22085:45;:::i;22184:563::-;-1:-1:-1;;;;;22483:15:46;;;22465:34;;22530:2;22515:18;;22508:34;;;22578:15;;22573:2;22558:18;;22551:43;22445:3;22625:2;22610:18;;22603:31;;;22408:4;;22651:46;;22677:19;;22669:6;22651:46;:::i;22752:635::-;-1:-1:-1;;;;;23027:32:46;;23009:51;;23047:3;23091:2;23076:18;;23069:31;;;-1:-1:-1;;23123:46:46;;23149:19;;23141:6;23123:46;:::i;:::-;23217:9;23209:6;23205:22;23200:2;23189:9;23185:18;23178:50;23245:33;23271:6;23263;23245:33;:::i;:::-;23321:14;;23314:22;23309:2;23294:18;;23287:50;-1:-1:-1;;23368:3:46;23353:19;23346:35;23237:41;22752:635;-1:-1:-1;;;22752:635:46:o",
  "language": "Solidity",
  "natspec": {
    "author": "Leonardo Urrego",
    "events": {
      "evtProposal(uint8,uint256,uint8,string)": {
        "notice": "### Contract events ###"
      }
    },
    "kind": "dev",
    "methods": {
      "AcceptRejectInvitation(bool)": {
        "notice": "For an user that have an invitation pending",
        "params": {
          "_acceptance": "True for accept the invitation"
        }
      },
      "ExecProp(uint256)": {
        "details": "Normally is called internally after each vote",
        "notice": "Execute (or reject) a proposal computing the votes and the governance model",
        "params": {
          "_propId": "ID of the proposal, based on `arrProposals`"
        },
        "returns": {
          "message": "result of the transaction",
          "status": "True if the proposal can be execute, false in other cases"
        }
      },
      "HOUSE_NAME()": {
        "notice": "### CLH Public Variables ###"
      },
      "PropGovRules(uint8,string,uint256)": {
        "details": "When execute this proposal the new values will be set",
        "notice": "Generate a new proposal for change some governance parameters",
        "params": {
          "_description": "About the new proposal ",
          "_newApprovPercentage": "The new percentaje for accept or reject a proposal"
        },
        "returns": {
          "propId": "ID of the new proposal, based on `arrProposals`"
        }
      },
      "PropInviteMember(address,string,string,bool,uint256)": {
        "details": "the execution of this proposal only create an invitation ",
        "notice": "Generate a new proposal to invite a new member",
        "params": {
          "_description": "A text for the proposal",
          "_isManager": "True if is for a manager member",
          "_name": "Can be the nickname or other reference to the User",
          "_walletAddr": "Address of the new user"
        },
        "returns": {
          "propId": "ID of the new proposal, based on `arrProposals`"
        }
      },
      "PropRemoveMember(address,string,uint256)": {
        "details": "The member can be a managaer",
        "notice": "Generate a new proposal for remove a member",
        "params": {
          "_description": "About the proposal",
          "_walletAddr": "member Address to be removed"
        },
        "returns": {
          "propId": "ID of the new proposal, based on `arrProposals`"
        }
      },
      "PropRequestToJoin(string,string)": {
        "details": "Only avaiable in public CLH",
        "notice": "Generate a proposal from a user that want to join to the CLH",
        "params": {
          "_description": "About the request",
          "_name": "Nickname or other user identification"
        },
        "returns": {
          "_0": "propId ID of the new proposal, based on `arrProposals`"
        }
      },
      "PropTxERC20(address,uint256,address,string,uint256)": {
        "details": "When execute this proposal, the transfer is made",
        "notice": "generate a new proposal to transfer ETH in weis",
        "params": {
          "_amountOutCLV": "Amount to transfer (in wei)",
          "_description": "About this proposal",
          "_to": "Recipient address"
        },
        "returns": {
          "propId": "ID of the new proposal, based on `arrProposals`"
        }
      },
      "PropTxWei(address,uint256,string,uint256)": {
        "details": "When execute this proposal, the transfer is made",
        "notice": "generate a new proposal to transfer ETH in weis",
        "params": {
          "_amountOutCLV": "Amount to transfer (in wei)",
          "_description": "About this proposal",
          "_to": "Recipient address"
        },
        "returns": {
          "propId": "ID of the new proposal, based on `arrProposals`"
        }
      },
      "VoteProposal(uint256,bool,string)": {
        "details": "After vote the proposal automatically try to be executed",
        "notice": "Used to vote a proposal",
        "params": {
          "_justification": "About your vote",
          "_propId": "ID of the proposal, based on `arrProposals`",
          "_support": "True for accept, false to reject"
        },
        "returns": {
          "_0": "true is the vote can be stored"
        }
      },
      "__OFFCHAINVOTE_STRUCT_TYPEHASH__()": {
        "notice": "The EIP-712 typehash for the offChainVote struct used by the CLH"
      },
      "constructor": {
        "details": "Some parameters can be ignored depending on the governance model",
        "notice": "Create a new CLH",
        "params": {
          "_ManagerWallets": "Whitelist of address for invitate as managers",
          "_gov": "keccak256 hash of the governance model, see the __GOV_* constans",
          "_govRuleApprovPercentage": "Percentage for approval o reject proposal based on `numManagerMembers`",
          "_govRuleMaxActiveMembers": "Max of all members (including managers)",
          "_govRuleMaxManagerMembers": "Max of manager member that CLH can accept (only for COMMITTEE )",
          "_houseName": "Name given by the owner",
          "_housePrivate": "If is set to 1, the CLH is set to private",
          "_owner": "The address of the deployed wallet"
        }
      }
    },
    "notice": "This contract for test only the most basic interactions",
    "title": "Contract to implement and test the basic fuctions of CLHouses",
    "version": 1
  },
  "offset": [
    254,
    17341
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x211 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7C638548 GT PUSH2 0x125 JUMPI DUP1 PUSH4 0xBAA4D5E9 GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xCB85669C GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xCB85669C EQ PUSH2 0x52C JUMPI DUP1 PUSH4 0xDA9BCA21 EQ PUSH2 0x554 JUMPI DUP1 PUSH4 0xDE5AB14E EQ PUSH2 0x561 JUMPI DUP1 PUSH4 0xF00D6274 EQ PUSH2 0x574 JUMPI DUP1 PUSH4 0xFE6EADE6 EQ PUSH2 0x58A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBAA4D5E9 EQ PUSH2 0x48F JUMPI DUP1 PUSH4 0xBB3A9065 EQ PUSH2 0x4D5 JUMPI DUP1 PUSH4 0xC347D2FD EQ PUSH2 0x4F7 JUMPI DUP1 PUSH4 0xC4CAEB63 EQ PUSH2 0x519 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9360BFAD GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0x9360BFAD EQ PUSH2 0x422 JUMPI DUP1 PUSH4 0x99DB7FB3 EQ PUSH2 0x435 JUMPI DUP1 PUSH4 0x9C630A88 EQ PUSH2 0x455 JUMPI DUP1 PUSH4 0xA5AC0F31 EQ PUSH2 0x468 JUMPI DUP1 PUSH4 0xAB44997B EQ PUSH2 0x47B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7C638548 EQ PUSH2 0x3D1 JUMPI DUP1 PUSH4 0x824C88DA EQ PUSH2 0x3E4 JUMPI DUP1 PUSH4 0x8532CBF7 EQ PUSH2 0x3EC JUMPI DUP1 PUSH4 0x8668EAFC EQ PUSH2 0x410 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1F50DD27 GT PUSH2 0x1A8 JUMPI DUP1 PUSH4 0x59CA2D03 GT PUSH2 0x177 JUMPI DUP1 PUSH4 0x59CA2D03 EQ PUSH2 0x352 JUMPI DUP1 PUSH4 0x5F3D99B3 EQ PUSH2 0x367 JUMPI DUP1 PUSH4 0x61461E2F EQ PUSH2 0x388 JUMPI DUP1 PUSH4 0x6C2F34E7 EQ PUSH2 0x3AB JUMPI DUP1 PUSH4 0x70ACB761 EQ PUSH2 0x3BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1F50DD27 EQ PUSH2 0x306 JUMPI DUP1 PUSH4 0x2266E1BC EQ PUSH2 0x319 JUMPI DUP1 PUSH4 0x2C26FB6E EQ PUSH2 0x32C JUMPI DUP1 PUSH4 0x3A70693D EQ PUSH2 0x33F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xFEEAE4B GT PUSH2 0x1E4 JUMPI DUP1 PUSH4 0xFEEAE4B EQ PUSH2 0x2AE JUMPI DUP1 PUSH4 0x152DE3B9 EQ PUSH2 0x2C3 JUMPI DUP1 PUSH4 0x16E58A2F EQ PUSH2 0x2D6 JUMPI DUP1 PUSH4 0x1D5FD3CA EQ PUSH2 0x2FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4F17A9B EQ PUSH2 0x216 JUMPI DUP1 PUSH4 0x52F9B0A EQ PUSH2 0x23C JUMPI DUP1 PUSH4 0x5FE6663 EQ PUSH2 0x267 JUMPI DUP1 PUSH4 0x9C57DF7 EQ PUSH2 0x28E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x229 PUSH2 0x224 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A6E JUMP JUMPDEST PUSH2 0x59D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x24F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x233 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x27C SWAP1 PUSH5 0x100000000 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x233 JUMP JUMPDEST PUSH2 0x229 PUSH2 0x29C CALLDATASIZE PUSH1 0x4 PUSH2 0x1ACD JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2C1 PUSH2 0x2BC CALLDATASIZE PUSH1 0x4 PUSH2 0x1AFF JUMP JUMPDEST PUSH2 0x658 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x229 PUSH2 0x2D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B1A JUMP JUMPDEST PUSH2 0x714 JUMP JUMPDEST PUSH2 0x229 PUSH32 0x29DB90F499FC17D858ADF930FEC9986F376F0BA9B76D35B25F1DB7AFB7F4B60C DUP2 JUMP JUMPDEST PUSH2 0x229 PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH2 0x24F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x229 PUSH2 0x327 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A6E JUMP JUMPDEST PUSH2 0x776 JUMP JUMPDEST PUSH2 0x229 PUSH2 0x33A CALLDATASIZE PUSH1 0x4 PUSH2 0x1B8A JUMP JUMPDEST PUSH2 0x7D6 JUMP JUMPDEST PUSH2 0x27C PUSH2 0x34D CALLDATASIZE PUSH1 0x4 PUSH2 0x1BEE JUMP JUMPDEST PUSH2 0x832 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x856 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x233 SWAP2 SWAP1 PUSH2 0x1C63 JUMP JUMPDEST PUSH2 0x37A PUSH2 0x375 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BEE JUMP JUMPDEST PUSH2 0x8E4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x233 SWAP3 SWAP2 SWAP1 PUSH2 0x1C76 JUMP JUMPDEST PUSH2 0x39B PUSH2 0x396 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CAA JUMP JUMPDEST PUSH2 0x9D9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x233 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x24F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x229 PUSH2 0x3CC CALLDATASIZE PUSH1 0x4 PUSH2 0x1D36 JUMP JUMPDEST PUSH2 0x119F JUMP JUMPDEST PUSH2 0x229 PUSH2 0x3DF CALLDATASIZE PUSH1 0x4 PUSH2 0x1A6E JUMP JUMPDEST PUSH2 0x1260 JUMP JUMPDEST PUSH1 0xF SLOAD PUSH2 0x229 JUMP JUMPDEST PUSH2 0x3FF PUSH2 0x3FA CALLDATASIZE PUSH1 0x4 PUSH2 0x1BEE JUMP JUMPDEST PUSH2 0x1324 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x233 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1D8D JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x27C SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH2 0x24F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x229 PUSH2 0x443 CALLDATASIZE PUSH1 0x4 PUSH2 0x1ACD JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x27C SWAP1 PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x39B PUSH2 0x476 CALLDATASIZE PUSH1 0x4 PUSH2 0x1DD0 JUMP JUMPDEST PUSH2 0x13FF JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x27C SWAP1 PUSH4 0x1000000 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x4A2 PUSH2 0x49D CALLDATASIZE PUSH1 0x4 PUSH2 0x1BEE JUMP JUMPDEST PUSH2 0x14C0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP2 DUP5 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0x233 JUMP JUMPDEST PUSH2 0x4E8 PUSH2 0x4E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BEE JUMP JUMPDEST PUSH2 0x1508 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x233 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E27 JUMP JUMPDEST PUSH2 0x50A PUSH2 0x505 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E5D JUMP JUMPDEST PUSH2 0x15D3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x233 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E89 JUMP JUMPDEST PUSH2 0x229 PUSH2 0x527 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EB5 JUMP JUMPDEST PUSH2 0x1690 JUMP JUMPDEST PUSH2 0x53F PUSH2 0x53A CALLDATASIZE PUSH1 0x4 PUSH2 0x1BEE JUMP JUMPDEST PUSH2 0x16EE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x233 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1ED3 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x27C SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x229 PUSH2 0x56F CALLDATASIZE PUSH1 0x4 PUSH2 0x1F60 JUMP JUMPDEST PUSH2 0x17ED JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x39B SWAP1 PUSH6 0x10000000000 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x229 PUSH2 0x598 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FB2 JUMP JUMPDEST PUSH2 0x18B4 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH1 0x0 SWAP2 DUP3 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH2 0x5C8 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x24 ADD PUSH2 0x203F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x4F17A9B PUSH1 0xE0 SHL OR SWAP1 MSTORE MLOAD PUSH2 0x5FD SWAP2 SWAP1 PUSH2 0x2077 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x638 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x63D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x40 MLOAD RETURNDATASIZE DUP1 PUSH1 0x0 DUP4 RETURNDATACOPY DUP4 PUSH2 0x654 JUMPI DUP1 DUP3 REVERT JUMPDEST DUP1 DUP3 RETURN JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD DUP3 ISZERO ISZERO PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH7 0x1000000000000 SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x44 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xFEEAE4B PUSH1 0xE0 SHL OR SWAP1 MSTORE MLOAD PUSH2 0x6B8 SWAP2 SWAP1 PUSH2 0x2077 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6F3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6F8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x70F JUMPI PUSH1 0x40 MLOAD RETURNDATASIZE DUP1 PUSH1 0x0 DUP4 RETURNDATACOPY DUP1 DUP3 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH1 0x0 SWAP2 DUP3 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH2 0x741 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x24 ADD PUSH2 0x2093 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x152DE3B9 PUSH1 0xE0 SHL OR SWAP1 MSTORE MLOAD PUSH2 0x5FD SWAP2 SWAP1 PUSH2 0x2077 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH1 0x0 SWAP2 DUP3 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH2 0x7A1 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x24 ADD PUSH2 0x203F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x899B86F PUSH1 0xE2 SHL OR SWAP1 MSTORE MLOAD PUSH2 0x5FD SWAP2 SWAP1 PUSH2 0x2077 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH1 0x0 SWAP2 DUP3 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH2 0x7FD SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x24 ADD PUSH2 0x20D8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x16137DB7 PUSH1 0xE1 SHL OR SWAP1 MSTORE MLOAD PUSH2 0x5FD SWAP2 SWAP1 PUSH2 0x2077 JUMP JUMPDEST PUSH1 0xE DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x842 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0xFF AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x863 SWAP1 PUSH2 0x20FD JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x88F SWAP1 PUSH2 0x20FD JUMP JUMPDEST DUP1 ISZERO PUSH2 0x8DC JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x8B1 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x8DC JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x8BF JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x60 SWAP2 DUP4 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH1 0x44 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x4EEB7B85 PUSH1 0xE0 SHL OR SWAP1 MSTORE MLOAD PUSH2 0x93F SWAP2 SWAP1 PUSH2 0x2077 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x97A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x97F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x996 JUMPI PUSH1 0x40 MLOAD RETURNDATASIZE DUP1 PUSH1 0x0 DUP4 RETURNDATACOPY DUP1 DUP3 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x19 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x537563636573732065786563757465642070726F706F73616C00000000000000 DUP2 MSTORE POP SWAP4 POP SWAP4 POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 CHAINID SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xA55 SWAP1 PUSH32 0x454950373132446F6D61696E28737472696E67206E616D652C737472696E6720 DUP2 MSTORE PUSH32 0x76657273696F6E2C75696E7432353620636861696E49642C6164647265737320 PUSH1 0x20 DUP3 ADD MSTORE PUSH18 0x766572696679696E67436F6E747261637429 PUSH1 0x70 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x52 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 SWAP1 DUP4 ADD MSTORE PUSH32 0x1318895AF1F6DB161B2BA745B8E57A6B46EFAD77D736630379EC69C3CD4C875 SWAP1 DUP3 ADD MSTORE PUSH32 0x7EF8EC374E43C85C540DA8F69DE7866F66E96DEB3AA6B597DF20E0FF3CE0C64 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP2 ADD DUP4 SWAP1 MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xB57 SWAP1 PUSH32 0x7374724F6666436861696E566F7465286164647265737320766F7465722C7569 DUP2 MSTORE PUSH32 0x6E743235362070726F7049642C626F6F6C20737570706F72742C737472696E67 PUSH1 0x20 DUP3 ADD MSTORE PUSH15 0x206A757374696669636174696F6E29 PUSH1 0x88 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x4F ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP12 DUP12 DUP12 DUP12 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xB81 SWAP2 SWAP1 PUSH2 0x2077 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xBD4 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 SWAP5 DUP6 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE ISZERO ISZERO PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xC17 SWAP3 SWAP2 SWAP1 PUSH2 0x1901 PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x0 DUP1 DUP6 MSTORE SWAP2 DUP5 ADD DUP1 DUP5 MSTORE DUP2 SWAP1 MSTORE PUSH1 0xFF DUP11 AND SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP4 ADD DUP12 SWAP1 MSTORE PUSH1 0x80 DUP4 ADD DUP11 SWAP1 MSTORE SWAP1 SWAP3 POP SWAP1 PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC82 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xCEA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xD57 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x566F746550726F704F6666436861696E3A20696E76616C6964207369676E6174 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x757265 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xCE1 JUMP JUMPDEST PUSH1 0xB SLOAD DUP13 LT PUSH2 0xDA8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x50726F706F73616C20646F6573206E6F74206578697374000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCE1 JUMP JUMPDEST PUSH1 0xB DUP13 DUP2 SLOAD DUP2 LT PUSH2 0xDBB JUMPI PUSH2 0xDBB PUSH2 0x2138 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x5 SWAP1 SWAP2 MUL ADD PUSH1 0x3 ADD SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xE25 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x50726F706F73616C20616C726561647920657865637574656400000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCE1 JUMP JUMPDEST PUSH1 0xB DUP13 DUP2 SLOAD DUP2 LT PUSH2 0xE38 JUMPI PUSH2 0xE38 PUSH2 0x2138 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x5 SWAP1 SWAP2 MUL ADD PUSH1 0x3 ADD SLOAD PUSH4 0x1000000 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xE9B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x141C9BDC1BDCD85B081DD85CC81C995A9958DD1959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCE1 JUMP JUMPDEST PUSH1 0xA PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP15 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xF44 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x557365722068617665206120766F74652072656769737472656420666F722074 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x1A1A5CC81C1C9BDC1BDCD85B PUSH1 0xA2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xCE1 JUMP JUMPDEST PUSH1 0xB DUP13 DUP2 SLOAD DUP2 LT PUSH2 0xF57 JUMPI PUSH2 0xF57 PUSH2 0x2138 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x4 ADD SLOAD TIMESTAMP LT PUSH2 0xFAB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x50726F706F73616C20646561646C696E65 PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xCE1 JUMP JUMPDEST DUP11 PUSH1 0xA PUSH1 0x0 DUP15 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP16 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP10 PUSH1 0xA PUSH1 0x0 DUP15 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP16 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x1049 SWAP3 SWAP2 SWAP1 PUSH2 0x1916 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xA PUSH1 0x0 DUP15 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP16 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0xB DUP13 DUP2 SLOAD DUP2 LT PUSH2 0x10AF JUMPI PUSH2 0x10AF PUSH2 0x2138 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 KECCAK256 PUSH1 0x3 PUSH1 0x5 SWAP1 SWAP3 MUL ADD ADD DUP1 SLOAD PUSH1 0xFF AND SWAP2 PUSH2 0x10D0 DUP4 PUSH2 0x214E JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP POP DUP11 PUSH2 0x1144 JUMPI PUSH1 0xB DUP13 DUP2 SLOAD DUP2 LT PUSH2 0x1101 JUMPI PUSH2 0x1101 PUSH2 0x2138 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x5 SWAP1 SWAP2 MUL ADD PUSH1 0x3 ADD DUP1 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND SWAP1 PUSH1 0x1 PUSH2 0x112A DUP4 PUSH2 0x214E JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP POP JUMPDEST PUSH32 0xCF689387E0CFBCFE58BEE1B497861A7F47C2DD413053B5D49DF763B7928B254E DUP13 DUP13 DUP16 DUP14 PUSH1 0x40 MLOAD PUSH2 0x1179 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x217C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x118A DUP13 PUSH2 0x8E4 JUMP JUMPDEST POP PUSH1 0x1 SWAP15 SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH1 0x0 SWAP2 DUP3 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH2 0x11C8 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x24 ADD PUSH2 0x21B8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x70ACB761 PUSH1 0xE0 SHL OR SWAP1 MSTORE MLOAD PUSH2 0x11FD SWAP2 SWAP1 PUSH2 0x2077 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1238 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x123D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x40 MLOAD RETURNDATASIZE DUP1 PUSH1 0x0 DUP4 RETURNDATACOPY DUP4 PUSH2 0x1254 JUMPI DUP1 DUP3 REVERT JUMPDEST POP MLOAD SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH1 0x0 SWAP2 DUP3 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH2 0x128B SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x24 ADD PUSH2 0x203F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xF8C70A9 PUSH1 0xE3 SHL OR SWAP1 MSTORE MLOAD PUSH2 0x12C0 SWAP2 SWAP1 PUSH2 0x2077 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x12FB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1300 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x40 MLOAD RETURNDATASIZE DUP1 PUSH1 0x0 DUP4 RETURNDATACOPY DUP4 PUSH2 0x1317 JUMPI DUP1 DUP3 REVERT JUMPDEST POP MLOAD SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xF DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1334 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x4 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP4 POP SWAP1 PUSH2 0x1363 SWAP1 PUSH2 0x20FD JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x138F SWAP1 PUSH2 0x20FD JUMP JUMPDEST DUP1 ISZERO PUSH2 0x13DC JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x13B1 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x13DC JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x13BF JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP3 SWAP2 PUSH1 0xFF DUP1 DUP3 AND SWAP3 POP PUSH2 0x100 SWAP1 SWAP2 DIV AND DUP6 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH1 0x0 SWAP2 DUP3 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH2 0x1428 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x24 ADD PUSH2 0x21E4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xF40E9B45 PUSH1 0xE0 SHL OR SWAP1 MSTORE MLOAD PUSH2 0x145D SWAP2 SWAP1 PUSH2 0x2077 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1498 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x149D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x14B4 JUMPI PUSH1 0x40 MLOAD RETURNDATASIZE DUP1 PUSH1 0x0 DUP4 RETURNDATACOPY DUP1 DUP3 REVERT JUMPDEST POP PUSH1 0x1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0xD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x14D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x4 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 SWAP1 SWAP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP5 POP SWAP1 SWAP3 DUP3 AND SWAP2 AND DUP5 JUMP JUMPDEST PUSH1 0xC DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1518 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x3 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP4 POP SWAP1 PUSH2 0x1547 SWAP1 PUSH2 0x20FD JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1573 SWAP1 PUSH2 0x20FD JUMP JUMPDEST DUP1 ISZERO PUSH2 0x15C0 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1595 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x15C0 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x15A3 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP PUSH1 0x2 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP3 POP POP PUSH1 0xFF AND DUP4 JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH1 0xFF DUP1 DUP5 AND SWAP5 PUSH2 0x100 SWAP1 SWAP5 DIV AND SWAP3 SWAP2 SWAP1 PUSH2 0x160D SWAP1 PUSH2 0x20FD JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1639 SWAP1 PUSH2 0x20FD JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1686 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x165B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1686 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1669 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP DUP4 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH1 0x0 SWAP2 DUP3 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH2 0x16B9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x24 ADD PUSH2 0x2205 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xC4CAEB63 PUSH1 0xE0 SHL OR SWAP1 MSTORE MLOAD PUSH2 0x11FD SWAP2 SWAP1 PUSH2 0x2077 JUMP JUMPDEST PUSH1 0xB DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x16FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x5 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP5 POP PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP3 DIV PUSH1 0xFF AND SWAP3 SWAP2 PUSH2 0x1738 SWAP1 PUSH2 0x20FD JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1764 SWAP1 PUSH2 0x20FD JUMP JUMPDEST DUP1 ISZERO PUSH2 0x17B1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1786 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x17B1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1794 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP PUSH1 0x2 DUP5 ADD SLOAD PUSH1 0x3 DUP6 ADD SLOAD PUSH1 0x4 SWAP1 SWAP6 ADD SLOAD SWAP4 SWAP5 SWAP1 SWAP4 PUSH1 0xFF DUP1 DUP4 AND SWAP5 POP PUSH2 0x100 DUP4 DIV DUP2 AND SWAP4 POP PUSH3 0x10000 DUP4 DIV DUP2 AND SWAP3 PUSH4 0x1000000 SWAP1 DIV AND SWAP1 DUP10 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH1 0x0 SWAP2 DUP3 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH2 0x181A SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x24 ADD PUSH2 0x2229 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x6F2D58A7 PUSH1 0xE1 SHL OR SWAP1 MSTORE MLOAD PUSH2 0x184F SWAP2 SWAP1 PUSH2 0x2077 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x188A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x188F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x40 MLOAD RETURNDATASIZE DUP1 PUSH1 0x0 DUP4 RETURNDATACOPY DUP4 PUSH2 0x18A6 JUMPI DUP1 DUP3 REVERT JUMPDEST POP MLOAD SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH1 0x0 SWAP2 DUP3 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH2 0x18E1 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x24 ADD PUSH2 0x225C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x7F3756F3 PUSH1 0xE1 SHL OR SWAP1 MSTORE MLOAD PUSH2 0x184F SWAP2 SWAP1 PUSH2 0x2077 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x1922 SWAP1 PUSH2 0x20FD JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x1944 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x198A JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x195D JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x198A JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x198A JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x198A JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x196F JUMP JUMPDEST POP PUSH2 0x1996 SWAP3 SWAP2 POP PUSH2 0x199A JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1996 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x199B JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x19C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x19F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1A0D JUMPI PUSH2 0x1A0D PUSH2 0x19CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1A35 JUMPI PUSH2 0x1A35 PUSH2 0x19CB JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0x1A4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1A84 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A8D DUP6 PUSH2 0x19AF JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1AB0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1ABC DUP8 DUP3 DUP9 ADD PUSH2 0x19E1 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1ADF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1AE8 DUP3 PUSH2 0x19AF JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x19C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1AE8 DUP3 PUSH2 0x1AEF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1B32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B3B DUP7 PUSH2 0x19AF JUMP JUMPDEST SWAP5 POP PUSH2 0x1B49 PUSH1 0x20 DUP8 ADD PUSH2 0x19AF JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B78 DUP9 DUP3 DUP10 ADD PUSH2 0x19E1 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 PUSH1 0x80 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1BB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BC1 DUP7 DUP4 DUP8 ADD PUSH2 0x19E1 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1BD7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BE4 DUP6 DUP3 DUP7 ADD PUSH2 0x19E1 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1C22 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1C0A JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1C31 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1C4F DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1C07 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1AE8 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1C37 JUMP JUMPDEST DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1C91 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1C37 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x19C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x1CC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1CCE DUP9 PUSH2 0x19AF JUMP JUMPDEST SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD SWAP6 POP PUSH2 0x1CE3 PUSH1 0x40 DUP10 ADD PUSH2 0x1AEF JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1CFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D0B DUP11 DUP3 DUP12 ADD PUSH2 0x19E1 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD SWAP2 POP PUSH2 0x1D28 PUSH1 0xC0 DUP10 ADD PUSH2 0x1C99 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1D4B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D54 DUP5 PUSH2 0x1C99 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1D70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D7C DUP7 DUP3 DUP8 ADD PUSH2 0x19E1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP2 MSTORE PUSH1 0xA0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1DB1 SWAP1 DUP4 ADD DUP8 PUSH2 0x1C37 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE POP SWAP2 ISZERO ISZERO PUSH1 0x60 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x80 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1DE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH2 0x1DF5 PUSH1 0x20 DUP6 ADD PUSH2 0x1AEF JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1E11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E1D DUP7 DUP3 DUP8 ADD PUSH2 0x19E1 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1E4B SWAP1 DUP4 ADD DUP6 PUSH2 0x1C37 JUMP JUMPDEST SWAP1 POP DUP3 ISZERO ISZERO PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1E70 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1E80 PUSH1 0x20 DUP5 ADD PUSH2 0x19AF JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP4 ISZERO ISZERO DUP2 MSTORE DUP3 ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1EAC PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x1C37 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1ECA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D54 DUP5 PUSH2 0x19AF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP2 MSTORE PUSH1 0x0 PUSH2 0x120 PUSH1 0x9 DUP12 LT PUSH2 0x1F02 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP11 PUSH1 0x20 DUP5 ADD MSTORE DUP1 PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1F1A DUP2 DUP5 ADD DUP12 PUSH2 0x1C37 JUMP JUMPDEST SWAP2 POP POP DUP8 PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0xFF DUP8 AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xFF DUP7 AND PUSH1 0xA0 DUP4 ADD MSTORE DUP5 ISZERO ISZERO PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x1F4B PUSH1 0xE0 DUP4 ADD DUP6 ISZERO ISZERO SWAP1 MSTORE JUMP JUMPDEST DUP3 PUSH2 0x100 DUP4 ADD MSTORE SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1F78 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F81 DUP7 PUSH2 0x19AF JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH2 0x1F96 PUSH1 0x40 DUP8 ADD PUSH2 0x19AF JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1FCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1FD3 DUP7 PUSH2 0x19AF JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1FF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1FFC DUP10 DUP4 DUP11 ADD PUSH2 0x19E1 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2012 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x201F DUP9 DUP3 DUP10 ADD PUSH2 0x19E1 JUMP JUMPDEST SWAP4 POP POP PUSH2 0x202E PUSH1 0x60 DUP8 ADD PUSH2 0x1AEF JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP2 SWAP5 PUSH1 0x80 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE DUP4 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x2066 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x1C37 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x60 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2089 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1C07 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x20C6 SWAP1 DUP4 ADD DUP6 PUSH2 0x1C37 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x80 DUP4 ADD MSTORE SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x20EB PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1C37 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1EAC DUP2 DUP6 PUSH2 0x1C37 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2111 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x2132 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP2 EQ ISZERO PUSH2 0x2173 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP5 DUP2 MSTORE DUP4 ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x21AE SWAP1 DUP4 ADD DUP5 PUSH2 0x1C37 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xFF DUP5 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x21D4 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x1C37 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP4 DUP2 MSTORE DUP3 ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1EAC PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x1C37 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x21D4 SWAP1 DUP4 ADD DUP6 PUSH2 0x1C37 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP7 SWAP1 MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x20C6 SWAP1 DUP4 ADD DUP6 PUSH2 0x1C37 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP2 MSTORE PUSH1 0xA0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x2280 SWAP1 DUP4 ADD DUP8 PUSH2 0x1C37 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x2292 DUP2 DUP8 PUSH2 0x1C37 JUMP JUMPDEST SWAP5 ISZERO ISZERO PUSH1 0x60 DUP5 ADD MSTORE POP POP PUSH1 0x80 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAD SWAP8 SWAP12 0xDB 0x2E PUSH21 0x588E00424D16945EE0A8334CBC829C58FCA9B88CF3 0x4E 0x5D 0xB8 PUSH26 0x6D64736F6C634300080C00330000000000000000000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        254,
        17341
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "5": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "CALLVALUE",
      "path": "35"
    },
    "6": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "7": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "ISZERO",
      "path": "35"
    },
    "8": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "12": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "REVERT",
      "path": "35"
    },
    "16": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "17": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "POP",
      "path": "35"
    },
    "18": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "CALLDATASIZE",
      "path": "35"
    },
    "21": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "LT",
      "path": "35"
    },
    "22": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x211"
    },
    "25": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "26": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "CALLDATALOAD",
      "path": "35"
    },
    "29": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "SHR",
      "path": "35"
    },
    "32": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "33": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0x7C638548"
    },
    "38": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "GT",
      "path": "35"
    },
    "39": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x125"
    },
    "42": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "43": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "44": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0xBAA4D5E9"
    },
    "49": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "GT",
      "path": "35"
    },
    "50": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0xAD"
    },
    "53": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "54": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "55": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0xCB85669C"
    },
    "60": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "GT",
      "path": "35"
    },
    "61": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x7C"
    },
    "64": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "65": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "66": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0xCB85669C"
    },
    "71": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "EQ",
      "path": "35"
    },
    "72": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x52C"
    },
    "75": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "76": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "77": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0xDA9BCA21"
    },
    "82": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "EQ",
      "path": "35"
    },
    "83": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x554"
    },
    "86": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "87": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "88": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0xDE5AB14E"
    },
    "93": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "EQ",
      "path": "35"
    },
    "94": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x561"
    },
    "97": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "98": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "99": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0xF00D6274"
    },
    "104": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "EQ",
      "path": "35"
    },
    "105": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x574"
    },
    "108": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "109": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "110": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0xFE6EADE6"
    },
    "115": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "EQ",
      "path": "35"
    },
    "116": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x58A"
    },
    "119": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "120": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "122": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "123": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "REVERT",
      "path": "35"
    },
    "124": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "125": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "126": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0xBAA4D5E9"
    },
    "131": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "EQ",
      "path": "35"
    },
    "132": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x48F"
    },
    "135": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "136": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "137": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0xBB3A9065"
    },
    "142": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "EQ",
      "path": "35"
    },
    "143": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x4D5"
    },
    "146": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "147": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "148": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0xC347D2FD"
    },
    "153": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "EQ",
      "path": "35"
    },
    "154": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x4F7"
    },
    "157": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "158": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "159": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0xC4CAEB63"
    },
    "164": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "EQ",
      "path": "35"
    },
    "165": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x519"
    },
    "168": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "169": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "171": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "172": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "REVERT",
      "path": "35"
    },
    "173": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "174": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "175": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0x9360BFAD"
    },
    "180": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "GT",
      "path": "35"
    },
    "181": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0xF4"
    },
    "184": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "185": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "186": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0x9360BFAD"
    },
    "191": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "EQ",
      "path": "35"
    },
    "192": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x422"
    },
    "195": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "196": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "197": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0x99DB7FB3"
    },
    "202": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "EQ",
      "path": "35"
    },
    "203": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x435"
    },
    "206": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "207": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "208": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0x9C630A88"
    },
    "213": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "EQ",
      "path": "35"
    },
    "214": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x455"
    },
    "217": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "218": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "219": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0xA5AC0F31"
    },
    "224": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "EQ",
      "path": "35"
    },
    "225": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x468"
    },
    "228": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "229": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "230": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0xAB44997B"
    },
    "235": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "EQ",
      "path": "35"
    },
    "236": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x47B"
    },
    "239": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "240": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "242": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "243": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "REVERT",
      "path": "35"
    },
    "244": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "245": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "246": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0x7C638548"
    },
    "251": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "EQ",
      "path": "35"
    },
    "252": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x3D1"
    },
    "255": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "256": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "257": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0x824C88DA"
    },
    "262": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "EQ",
      "path": "35"
    },
    "263": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x3E4"
    },
    "266": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "267": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "268": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0x8532CBF7"
    },
    "273": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "EQ",
      "path": "35"
    },
    "274": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x3EC"
    },
    "277": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "278": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "279": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0x8668EAFC"
    },
    "284": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "EQ",
      "path": "35"
    },
    "285": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x410"
    },
    "288": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "289": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "291": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "292": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "REVERT",
      "path": "35"
    },
    "293": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "294": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "295": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0x1F50DD27"
    },
    "300": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "GT",
      "path": "35"
    },
    "301": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x1A8"
    },
    "304": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "305": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "306": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0x59CA2D03"
    },
    "311": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "GT",
      "path": "35"
    },
    "312": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x177"
    },
    "315": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "316": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "317": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0x59CA2D03"
    },
    "322": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "EQ",
      "path": "35"
    },
    "323": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x352"
    },
    "326": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "327": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "328": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0x5F3D99B3"
    },
    "333": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "EQ",
      "path": "35"
    },
    "334": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x367"
    },
    "337": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "338": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "339": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0x61461E2F"
    },
    "344": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "EQ",
      "path": "35"
    },
    "345": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x388"
    },
    "348": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "349": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "350": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0x6C2F34E7"
    },
    "355": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "EQ",
      "path": "35"
    },
    "356": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x3AB"
    },
    "359": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "360": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "361": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0x70ACB761"
    },
    "366": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "EQ",
      "path": "35"
    },
    "367": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x3BE"
    },
    "370": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "371": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "373": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "374": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "REVERT",
      "path": "35"
    },
    "375": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "376": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "377": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0x1F50DD27"
    },
    "382": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "EQ",
      "path": "35"
    },
    "383": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x306"
    },
    "386": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "387": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "388": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0x2266E1BC"
    },
    "393": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "EQ",
      "path": "35"
    },
    "394": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x319"
    },
    "397": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "398": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "399": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0x2C26FB6E"
    },
    "404": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "EQ",
      "path": "35"
    },
    "405": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x32C"
    },
    "408": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "409": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "410": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0x3A70693D"
    },
    "415": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "EQ",
      "path": "35"
    },
    "416": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x33F"
    },
    "419": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "420": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "422": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "423": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "REVERT",
      "path": "35"
    },
    "424": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "425": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "426": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0xFEEAE4B"
    },
    "431": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "GT",
      "path": "35"
    },
    "432": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x1E4"
    },
    "435": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "436": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "437": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0xFEEAE4B"
    },
    "442": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "EQ",
      "path": "35"
    },
    "443": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x2AE"
    },
    "446": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "447": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "448": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0x152DE3B9"
    },
    "453": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "EQ",
      "path": "35"
    },
    "454": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x2C3"
    },
    "457": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "458": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "459": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0x16E58A2F"
    },
    "464": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "EQ",
      "path": "35"
    },
    "465": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x2D6"
    },
    "468": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "469": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "470": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0x1D5FD3CA"
    },
    "475": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "EQ",
      "path": "35"
    },
    "476": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x2FD"
    },
    "479": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "480": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "482": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "483": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "REVERT",
      "path": "35"
    },
    "484": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "485": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "486": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0x4F17A9B"
    },
    "491": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "EQ",
      "path": "35"
    },
    "492": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x216"
    },
    "495": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "496": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "497": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0x52F9B0A"
    },
    "502": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "EQ",
      "path": "35"
    },
    "503": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x23C"
    },
    "506": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "507": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "508": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0x5FE6663"
    },
    "513": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "EQ",
      "path": "35"
    },
    "514": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x267"
    },
    "517": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "518": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "519": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0x9C57DF7"
    },
    "524": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "EQ",
      "path": "35"
    },
    "525": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x28E"
    },
    "528": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "529": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "530": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "532": {
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "DUP1",
      "path": "35"
    },
    "533": {
      "first_revert": true,
      "fn": null,
      "offset": [
        254,
        17341
      ],
      "op": "REVERT",
      "path": "35"
    },
    "534": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15591,
        16409
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "535": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15591,
        16409
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x229"
    },
    "538": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15591,
        16409
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x224"
    },
    "541": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15591,
        16409
      ],
      "op": "CALLDATASIZE",
      "path": "35"
    },
    "542": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15591,
        16409
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x4"
    },
    "544": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15591,
        16409
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x1A6E"
    },
    "547": {
      "fn": "CLHouse.PropSellERC20",
      "jump": "i",
      "offset": [
        15591,
        16409
      ],
      "op": "JUMP",
      "path": "35"
    },
    "548": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15591,
        16409
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "549": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15591,
        16409
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x59D"
    },
    "552": {
      "fn": "CLHouse.PropSellERC20",
      "jump": "i",
      "offset": [
        15591,
        16409
      ],
      "op": "JUMP",
      "path": "35"
    },
    "553": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15591,
        16409
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "554": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15591,
        16409
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "556": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15591,
        16409
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "557": {
      "op": "SWAP1"
    },
    "558": {
      "op": "DUP2"
    },
    "559": {
      "op": "MSTORE"
    },
    "560": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "562": {
      "op": "ADD"
    },
    "563": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15591,
        16409
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "564": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15591,
        16409
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "566": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15591,
        16409
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "567": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15591,
        16409
      ],
      "op": "DUP1",
      "path": "35"
    },
    "568": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15591,
        16409
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "569": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15591,
        16409
      ],
      "op": "SUB",
      "path": "35"
    },
    "570": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15591,
        16409
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "571": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15591,
        16409
      ],
      "op": "RETURN",
      "path": "35"
    },
    "572": {
      "offset": [
        875,
        898
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "573": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        875,
        898
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x6"
    },
    "575": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        875,
        898
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "576": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        875,
        898
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x24F"
    },
    "579": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        875,
        898
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "580": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "582": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "584": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "586": {
      "op": "SHL"
    },
    "587": {
      "op": "SUB"
    },
    "588": {
      "offset": [
        875,
        898
      ],
      "op": "AND",
      "path": "37"
    },
    "589": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        875,
        898
      ],
      "op": "DUP2",
      "path": "37"
    },
    "590": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        875,
        898
      ],
      "op": "JUMP",
      "path": "37"
    },
    "591": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        875,
        898
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "592": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        875,
        898
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "594": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        875,
        898
      ],
      "op": "MLOAD",
      "path": "37"
    },
    "595": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "597": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "599": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "601": {
      "op": "SHL"
    },
    "602": {
      "op": "SUB"
    },
    "603": {
      "op": "SWAP1"
    },
    "604": {
      "op": "SWAP2"
    },
    "605": {
      "op": "AND"
    },
    "606": {
      "op": "DUP2"
    },
    "607": {
      "op": "MSTORE"
    },
    "608": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "610": {
      "op": "ADD"
    },
    "611": {
      "offset": [
        875,
        898
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x233"
    },
    "614": {
      "op": "JUMP"
    },
    "615": {
      "offset": [
        615,
        653
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "616": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        615,
        653
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x1"
    },
    "618": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        615,
        653
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "619": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        615,
        653
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x27C"
    },
    "622": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        615,
        653
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "623": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        615,
        653
      ],
      "op": "PUSH5",
      "path": "37",
      "value": "0x100000000"
    },
    "629": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        615,
        653
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "630": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        615,
        653
      ],
      "op": "DIV",
      "path": "37"
    },
    "631": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        615,
        653
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0xFF"
    },
    "633": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        615,
        653
      ],
      "op": "AND",
      "path": "37"
    },
    "634": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        615,
        653
      ],
      "op": "DUP2",
      "path": "37"
    },
    "635": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        615,
        653
      ],
      "op": "JUMP",
      "path": "37"
    },
    "636": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        615,
        653
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "637": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        615,
        653
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "639": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        615,
        653
      ],
      "op": "MLOAD",
      "path": "37"
    },
    "640": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "642": {
      "op": "SWAP1"
    },
    "643": {
      "op": "SWAP2"
    },
    "644": {
      "op": "AND"
    },
    "645": {
      "op": "DUP2"
    },
    "646": {
      "op": "MSTORE"
    },
    "647": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "649": {
      "op": "ADD"
    },
    "650": {
      "offset": [
        615,
        653
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x233"
    },
    "653": {
      "op": "JUMP"
    },
    "654": {
      "offset": [
        1019,
        1067
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "655": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        1019,
        1067
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x229"
    },
    "658": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        1019,
        1067
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x29C"
    },
    "661": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        1019,
        1067
      ],
      "op": "CALLDATASIZE",
      "path": "37"
    },
    "662": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        1019,
        1067
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x4"
    },
    "664": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        1019,
        1067
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x1ACD"
    },
    "667": {
      "fn": "CLHouse.PropSellERC20",
      "jump": "i",
      "offset": [
        1019,
        1067
      ],
      "op": "JUMP",
      "path": "37"
    },
    "668": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        1019,
        1067
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "669": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        1019,
        1067
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x9"
    },
    "671": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        1019,
        1067
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "673": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        1019,
        1067
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "674": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        1019,
        1067
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "676": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        1019,
        1067
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "677": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        1019,
        1067
      ],
      "op": "DUP2",
      "path": "37"
    },
    "678": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        1019,
        1067
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "679": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        1019,
        1067
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "681": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        1019,
        1067
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "682": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        1019,
        1067
      ],
      "op": "KECCAK256",
      "path": "37"
    },
    "683": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        1019,
        1067
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "684": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        1019,
        1067
      ],
      "op": "DUP2",
      "path": "37"
    },
    "685": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        1019,
        1067
      ],
      "op": "JUMP",
      "path": "37"
    },
    "686": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14129,
        14694
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "687": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14129,
        14694
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x2C1"
    },
    "690": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14129,
        14694
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x2BC"
    },
    "693": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14129,
        14694
      ],
      "op": "CALLDATASIZE",
      "path": "35"
    },
    "694": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14129,
        14694
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x4"
    },
    "696": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14129,
        14694
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x1AFF"
    },
    "699": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "jump": "i",
      "offset": [
        14129,
        14694
      ],
      "op": "JUMP",
      "path": "35"
    },
    "700": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14129,
        14694
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "701": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14129,
        14694
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x658"
    },
    "704": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "jump": "i",
      "offset": [
        14129,
        14694
      ],
      "op": "JUMP",
      "path": "35"
    },
    "705": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14129,
        14694
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "706": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14129,
        14694
      ],
      "op": "STOP",
      "path": "35"
    },
    "707": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        14700,
        15585
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "708": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        14700,
        15585
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x229"
    },
    "711": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        14700,
        15585
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x2D1"
    },
    "714": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        14700,
        15585
      ],
      "op": "CALLDATASIZE",
      "path": "35"
    },
    "715": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        14700,
        15585
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x4"
    },
    "717": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        14700,
        15585
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x1B1A"
    },
    "720": {
      "fn": "CLHouse.PropSwapERC20",
      "jump": "i",
      "offset": [
        14700,
        15585
      ],
      "op": "JUMP",
      "path": "35"
    },
    "721": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        14700,
        15585
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "722": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        14700,
        15585
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x714"
    },
    "725": {
      "fn": "CLHouse.PropSwapERC20",
      "jump": "i",
      "offset": [
        14700,
        15585
      ],
      "op": "JUMP",
      "path": "35"
    },
    "726": {
      "offset": [
        1490,
        1649
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "727": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        1490,
        1649
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x229"
    },
    "730": {
      "offset": [
        1557,
        1649
      ],
      "op": "PUSH32",
      "path": "37",
      "value": "0x29DB90F499FC17D858ADF930FEC9986F376F0BA9B76D35B25F1DB7AFB7F4B60C"
    },
    "763": {
      "offset": [
        1490,
        1649
      ],
      "op": "DUP2",
      "path": "37"
    },
    "764": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        1490,
        1649
      ],
      "op": "JUMP",
      "path": "37"
    },
    "765": {
      "offset": [
        762,
        799
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "766": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        762,
        799
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x229"
    },
    "769": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        762,
        799
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x3"
    },
    "771": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        762,
        799
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "772": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        762,
        799
      ],
      "op": "DUP2",
      "path": "37"
    },
    "773": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        762,
        799
      ],
      "op": "JUMP",
      "path": "37"
    },
    "774": {
      "offset": [
        904,
        931
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "775": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        904,
        931
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x7"
    },
    "777": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        904,
        931
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "778": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        904,
        931
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x24F"
    },
    "781": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        904,
        931
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "782": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "784": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "786": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "788": {
      "op": "SHL"
    },
    "789": {
      "op": "SUB"
    },
    "790": {
      "offset": [
        904,
        931
      ],
      "op": "AND",
      "path": "37"
    },
    "791": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        904,
        931
      ],
      "op": "DUP2",
      "path": "37"
    },
    "792": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        904,
        931
      ],
      "op": "JUMP",
      "path": "37"
    },
    "793": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16415,
        17229
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "794": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16415,
        17229
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x229"
    },
    "797": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16415,
        17229
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x327"
    },
    "800": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16415,
        17229
      ],
      "op": "CALLDATASIZE",
      "path": "35"
    },
    "801": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16415,
        17229
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x4"
    },
    "803": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16415,
        17229
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x1A6E"
    },
    "806": {
      "fn": "CLHouse.PropBuyERC20",
      "jump": "i",
      "offset": [
        16415,
        17229
      ],
      "op": "JUMP",
      "path": "35"
    },
    "807": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16415,
        17229
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "808": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16415,
        17229
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x776"
    },
    "811": {
      "fn": "CLHouse.PropBuyERC20",
      "jump": "i",
      "offset": [
        16415,
        17229
      ],
      "op": "JUMP",
      "path": "35"
    },
    "812": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13319,
        13991
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "813": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13319,
        13991
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x229"
    },
    "816": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13319,
        13991
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x33A"
    },
    "819": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13319,
        13991
      ],
      "op": "CALLDATASIZE",
      "path": "35"
    },
    "820": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13319,
        13991
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x4"
    },
    "822": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13319,
        13991
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x1B8A"
    },
    "825": {
      "fn": "CLHouse.PropRequestToJoin",
      "jump": "i",
      "offset": [
        13319,
        13991
      ],
      "op": "JUMP",
      "path": "35"
    },
    "826": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13319,
        13991
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "827": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13319,
        13991
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x7D6"
    },
    "830": {
      "fn": "CLHouse.PropRequestToJoin",
      "jump": "i",
      "offset": [
        13319,
        13991
      ],
      "op": "JUMP",
      "path": "35"
    },
    "831": {
      "offset": [
        1323,
        1367
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "832": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        1323,
        1367
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x27C"
    },
    "835": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        1323,
        1367
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x34D"
    },
    "838": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        1323,
        1367
      ],
      "op": "CALLDATASIZE",
      "path": "37"
    },
    "839": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        1323,
        1367
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x4"
    },
    "841": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        1323,
        1367
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x1BEE"
    },
    "844": {
      "fn": "CLHouse.PropRequestToJoin",
      "jump": "i",
      "offset": [
        1323,
        1367
      ],
      "op": "JUMP",
      "path": "37"
    },
    "845": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        1323,
        1367
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "846": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        1323,
        1367
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x832"
    },
    "849": {
      "fn": "CLHouse.PropRequestToJoin",
      "jump": "i",
      "offset": [
        1323,
        1367
      ],
      "op": "JUMP",
      "path": "37"
    },
    "850": {
      "offset": [
        320,
        344
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "851": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x35A"
    },
    "854": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x856"
    },
    "857": {
      "fn": "CLHouse.PropRequestToJoin",
      "jump": "i",
      "offset": [
        320,
        344
      ],
      "op": "JUMP",
      "path": "37"
    },
    "858": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "859": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "861": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "MLOAD",
      "path": "37"
    },
    "862": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x233"
    },
    "865": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "866": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "867": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x1C63"
    },
    "870": {
      "fn": "CLHouse.PropRequestToJoin",
      "jump": "i",
      "offset": [
        320,
        344
      ],
      "op": "JUMP",
      "path": "37"
    },
    "871": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2643,
        3311
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "872": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2643,
        3311
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x37A"
    },
    "875": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2643,
        3311
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x375"
    },
    "878": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2643,
        3311
      ],
      "op": "CALLDATASIZE",
      "path": "35"
    },
    "879": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2643,
        3311
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x4"
    },
    "881": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2643,
        3311
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x1BEE"
    },
    "884": {
      "fn": "CLHouse.ExecProp",
      "jump": "i",
      "offset": [
        2643,
        3311
      ],
      "op": "JUMP",
      "path": "35"
    },
    "885": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2643,
        3311
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "886": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2643,
        3311
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x8E4"
    },
    "889": {
      "fn": "CLHouse.ExecProp",
      "jump": "i",
      "offset": [
        2643,
        3311
      ],
      "op": "JUMP",
      "path": "35"
    },
    "890": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2643,
        3311
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "891": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2643,
        3311
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "893": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2643,
        3311
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "894": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2643,
        3311
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x233"
    },
    "897": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2643,
        3311
      ],
      "op": "SWAP3",
      "path": "35"
    },
    "898": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2643,
        3311
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "899": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2643,
        3311
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "900": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2643,
        3311
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x1C76"
    },
    "903": {
      "fn": "CLHouse.ExecProp",
      "jump": "i",
      "offset": [
        2643,
        3311
      ],
      "op": "JUMP",
      "path": "35"
    },
    "904": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4363,
        7211
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "905": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4363,
        7211
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x39B"
    },
    "908": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4363,
        7211
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x396"
    },
    "911": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4363,
        7211
      ],
      "op": "CALLDATASIZE",
      "path": "35"
    },
    "912": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4363,
        7211
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x4"
    },
    "914": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4363,
        7211
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x1CAA"
    },
    "917": {
      "fn": "CLHouse.VotePropOffChain",
      "jump": "i",
      "offset": [
        4363,
        7211
      ],
      "op": "JUMP",
      "path": "35"
    },
    "918": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4363,
        7211
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "919": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4363,
        7211
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x9D9"
    },
    "922": {
      "fn": "CLHouse.VotePropOffChain",
      "jump": "i",
      "offset": [
        4363,
        7211
      ],
      "op": "JUMP",
      "path": "35"
    },
    "923": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4363,
        7211
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "924": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4363,
        7211
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "926": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4363,
        7211
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "927": {
      "op": "SWAP1"
    },
    "928": {
      "op": "ISZERO"
    },
    "929": {
      "op": "ISZERO"
    },
    "930": {
      "op": "DUP2"
    },
    "931": {
      "op": "MSTORE"
    },
    "932": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "934": {
      "op": "ADD"
    },
    "935": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4363,
        7211
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x233"
    },
    "938": {
      "op": "JUMP"
    },
    "939": {
      "offset": [
        818,
        841
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "940": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        818,
        841
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x4"
    },
    "942": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        818,
        841
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "943": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        818,
        841
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x24F"
    },
    "946": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        818,
        841
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "947": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "949": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "951": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "953": {
      "op": "SHL"
    },
    "954": {
      "op": "SUB"
    },
    "955": {
      "offset": [
        818,
        841
      ],
      "op": "AND",
      "path": "37"
    },
    "956": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        818,
        841
      ],
      "op": "DUP2",
      "path": "37"
    },
    "957": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        818,
        841
      ],
      "op": "JUMP",
      "path": "37"
    },
    "958": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12262,
        13019
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "959": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12262,
        13019
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x229"
    },
    "962": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12262,
        13019
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x3CC"
    },
    "965": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12262,
        13019
      ],
      "op": "CALLDATASIZE",
      "path": "35"
    },
    "966": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12262,
        13019
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x4"
    },
    "968": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12262,
        13019
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x1D36"
    },
    "971": {
      "fn": "CLHouse.PropGovRules",
      "jump": "i",
      "offset": [
        12262,
        13019
      ],
      "op": "JUMP",
      "path": "35"
    },
    "972": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12262,
        13019
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "973": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12262,
        13019
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x119F"
    },
    "976": {
      "fn": "CLHouse.PropGovRules",
      "jump": "i",
      "offset": [
        12262,
        13019
      ],
      "op": "JUMP",
      "path": "35"
    },
    "977": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        9902,
        10693
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "978": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        9902,
        10693
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x229"
    },
    "981": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        9902,
        10693
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x3DF"
    },
    "984": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        9902,
        10693
      ],
      "op": "CALLDATASIZE",
      "path": "35"
    },
    "985": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        9902,
        10693
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x4"
    },
    "987": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        9902,
        10693
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x1A6E"
    },
    "990": {
      "fn": "CLHouse.PropTxWei",
      "jump": "i",
      "offset": [
        9902,
        10693
      ],
      "op": "JUMP",
      "path": "35"
    },
    "991": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        9902,
        10693
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "992": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        9902,
        10693
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x1260"
    },
    "995": {
      "fn": "CLHouse.PropTxWei",
      "jump": "i",
      "offset": [
        9902,
        10693
      ],
      "op": "JUMP",
      "path": "35"
    },
    "996": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        17235,
        17339
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "997": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        17315,
        17325
      ],
      "op": "PUSH1",
      "path": "35",
      "statement": 0,
      "value": "0xF"
    },
    "999": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        17315,
        17332
      ],
      "op": "SLOAD",
      "path": "35"
    },
    "1000": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        17235,
        17339
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x229"
    },
    "1003": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        17235,
        17339
      ],
      "op": "JUMP",
      "path": "35"
    },
    "1004": {
      "offset": [
        1373,
        1402
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "1005": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x3FF"
    },
    "1008": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x3FA"
    },
    "1011": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        1373,
        1402
      ],
      "op": "CALLDATASIZE",
      "path": "37"
    },
    "1012": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x4"
    },
    "1014": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x1BEE"
    },
    "1017": {
      "fn": "CLHouse.GetArrMembersLength",
      "jump": "i",
      "offset": [
        1373,
        1402
      ],
      "op": "JUMP",
      "path": "37"
    },
    "1018": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        1373,
        1402
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "1019": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x1324"
    },
    "1022": {
      "fn": "CLHouse.GetArrMembersLength",
      "jump": "i",
      "offset": [
        1373,
        1402
      ],
      "op": "JUMP",
      "path": "37"
    },
    "1023": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        1373,
        1402
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "1024": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "1026": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        1373,
        1402
      ],
      "op": "MLOAD",
      "path": "37"
    },
    "1027": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x233"
    },
    "1030": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP6",
      "path": "37"
    },
    "1031": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP5",
      "path": "37"
    },
    "1032": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP4",
      "path": "37"
    },
    "1033": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP3",
      "path": "37"
    },
    "1034": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "1035": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "1036": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x1D8D"
    },
    "1039": {
      "fn": "CLHouse.GetArrMembersLength",
      "jump": "i",
      "offset": [
        1373,
        1402
      ],
      "op": "JUMP",
      "path": "37"
    },
    "1040": {
      "offset": [
        495,
        525
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "1041": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        495,
        525
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x1"
    },
    "1043": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        495,
        525
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "1044": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        495,
        525
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x27C"
    },
    "1047": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        495,
        525
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "1048": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        495,
        525
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x100"
    },
    "1051": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        495,
        525
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "1052": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        495,
        525
      ],
      "op": "DIV",
      "path": "37"
    },
    "1053": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        495,
        525
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0xFF"
    },
    "1055": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        495,
        525
      ],
      "op": "AND",
      "path": "37"
    },
    "1056": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        495,
        525
      ],
      "op": "DUP2",
      "path": "37"
    },
    "1057": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        495,
        525
      ],
      "op": "JUMP",
      "path": "37"
    },
    "1058": {
      "offset": [
        847,
        869
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "1059": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        847,
        869
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x5"
    },
    "1061": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        847,
        869
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "1062": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        847,
        869
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x24F"
    },
    "1065": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        847,
        869
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "1066": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1068": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1070": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1072": {
      "op": "SHL"
    },
    "1073": {
      "op": "SUB"
    },
    "1074": {
      "offset": [
        847,
        869
      ],
      "op": "AND",
      "path": "37"
    },
    "1075": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        847,
        869
      ],
      "op": "DUP2",
      "path": "37"
    },
    "1076": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        847,
        869
      ],
      "op": "JUMP",
      "path": "37"
    },
    "1077": {
      "offset": [
        937,
        993
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "1078": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        937,
        993
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x229"
    },
    "1081": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        937,
        993
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x443"
    },
    "1084": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        937,
        993
      ],
      "op": "CALLDATASIZE",
      "path": "37"
    },
    "1085": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        937,
        993
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x4"
    },
    "1087": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        937,
        993
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x1ACD"
    },
    "1090": {
      "fn": "CLHouse.GetArrMembersLength",
      "jump": "i",
      "offset": [
        937,
        993
      ],
      "op": "JUMP",
      "path": "37"
    },
    "1091": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        937,
        993
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "1092": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        937,
        993
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x8"
    },
    "1094": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        937,
        993
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "1096": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        937,
        993
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "1097": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        937,
        993
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "1099": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        937,
        993
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "1100": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        937,
        993
      ],
      "op": "DUP2",
      "path": "37"
    },
    "1101": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        937,
        993
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "1102": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        937,
        993
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "1104": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        937,
        993
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "1105": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        937,
        993
      ],
      "op": "KECCAK256",
      "path": "37"
    },
    "1106": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        937,
        993
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "1107": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        937,
        993
      ],
      "op": "DUP2",
      "path": "37"
    },
    "1108": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        937,
        993
      ],
      "op": "JUMP",
      "path": "37"
    },
    "1109": {
      "offset": [
        531,
        567
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "1110": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        531,
        567
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x1"
    },
    "1112": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        531,
        567
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "1113": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        531,
        567
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x27C"
    },
    "1116": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        531,
        567
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "1117": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        531,
        567
      ],
      "op": "PUSH3",
      "path": "37",
      "value": "0x10000"
    },
    "1121": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        531,
        567
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "1122": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        531,
        567
      ],
      "op": "DIV",
      "path": "37"
    },
    "1123": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        531,
        567
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0xFF"
    },
    "1125": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        531,
        567
      ],
      "op": "AND",
      "path": "37"
    },
    "1126": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        531,
        567
      ],
      "op": "DUP2",
      "path": "37"
    },
    "1127": {
      "fn": "CLHouse.GetArrMembersLength",
      "offset": [
        531,
        567
      ],
      "op": "JUMP",
      "path": "37"
    },
    "1128": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3644,
        4357
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "1129": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3644,
        4357
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x39B"
    },
    "1132": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3644,
        4357
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x476"
    },
    "1135": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3644,
        4357
      ],
      "op": "CALLDATASIZE",
      "path": "35"
    },
    "1136": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3644,
        4357
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x4"
    },
    "1138": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3644,
        4357
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x1DD0"
    },
    "1141": {
      "fn": "CLHouse.VoteProposal",
      "jump": "i",
      "offset": [
        3644,
        4357
      ],
      "op": "JUMP",
      "path": "35"
    },
    "1142": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3644,
        4357
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "1143": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3644,
        4357
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x13FF"
    },
    "1146": {
      "fn": "CLHouse.VoteProposal",
      "jump": "i",
      "offset": [
        3644,
        4357
      ],
      "op": "JUMP",
      "path": "35"
    },
    "1147": {
      "offset": [
        573,
        609
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "1148": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        573,
        609
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x1"
    },
    "1150": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        573,
        609
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "1151": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        573,
        609
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x27C"
    },
    "1154": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        573,
        609
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "1155": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        573,
        609
      ],
      "op": "PUSH4",
      "path": "37",
      "value": "0x1000000"
    },
    "1160": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        573,
        609
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "1161": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        573,
        609
      ],
      "op": "DIV",
      "path": "37"
    },
    "1162": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        573,
        609
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0xFF"
    },
    "1164": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        573,
        609
      ],
      "op": "AND",
      "path": "37"
    },
    "1165": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        573,
        609
      ],
      "op": "DUP2",
      "path": "37"
    },
    "1166": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        573,
        609
      ],
      "op": "JUMP",
      "path": "37"
    },
    "1167": {
      "offset": [
        1273,
        1317
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "1168": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x4A2"
    },
    "1171": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x49D"
    },
    "1174": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "CALLDATASIZE",
      "path": "37"
    },
    "1175": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x4"
    },
    "1177": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x1BEE"
    },
    "1180": {
      "fn": "CLHouse.VoteProposal",
      "jump": "i",
      "offset": [
        1273,
        1317
      ],
      "op": "JUMP",
      "path": "37"
    },
    "1181": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "1182": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x14C0"
    },
    "1185": {
      "fn": "CLHouse.VoteProposal",
      "jump": "i",
      "offset": [
        1273,
        1317
      ],
      "op": "JUMP",
      "path": "37"
    },
    "1186": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "1187": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "1189": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "DUP1",
      "path": "37"
    },
    "1190": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "MLOAD",
      "path": "37"
    },
    "1191": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1193": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1195": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1197": {
      "op": "SHL"
    },
    "1198": {
      "op": "SUB"
    },
    "1199": {
      "op": "SWAP6"
    },
    "1200": {
      "op": "DUP7"
    },
    "1201": {
      "op": "AND"
    },
    "1202": {
      "op": "DUP2"
    },
    "1203": {
      "op": "MSTORE"
    },
    "1204": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1206": {
      "op": "DUP2"
    },
    "1207": {
      "op": "ADD"
    },
    "1208": {
      "op": "SWAP5"
    },
    "1209": {
      "op": "SWAP1"
    },
    "1210": {
      "op": "SWAP5"
    },
    "1211": {
      "op": "MSTORE"
    },
    "1212": {
      "op": "SWAP2"
    },
    "1213": {
      "op": "DUP5"
    },
    "1214": {
      "op": "AND"
    },
    "1215": {
      "op": "SWAP2"
    },
    "1216": {
      "op": "DUP4"
    },
    "1217": {
      "op": "ADD"
    },
    "1218": {
      "op": "SWAP2"
    },
    "1219": {
      "op": "SWAP1"
    },
    "1220": {
      "op": "SWAP2"
    },
    "1221": {
      "op": "MSTORE"
    },
    "1222": {
      "op": "SWAP1"
    },
    "1223": {
      "op": "SWAP2"
    },
    "1224": {
      "op": "AND"
    },
    "1225": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1227": {
      "op": "DUP3"
    },
    "1228": {
      "op": "ADD"
    },
    "1229": {
      "op": "MSTORE"
    },
    "1230": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "1232": {
      "op": "ADD"
    },
    "1233": {
      "offset": [
        1273,
        1317
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x233"
    },
    "1236": {
      "op": "JUMP"
    },
    "1237": {
      "offset": [
        1221,
        1267
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "1238": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x4E8"
    },
    "1241": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x4E3"
    },
    "1244": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "CALLDATASIZE",
      "path": "37"
    },
    "1245": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x4"
    },
    "1247": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x1BEE"
    },
    "1250": {
      "fn": "CLHouse.VoteProposal",
      "jump": "i",
      "offset": [
        1221,
        1267
      ],
      "op": "JUMP",
      "path": "37"
    },
    "1251": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "1252": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x1508"
    },
    "1255": {
      "fn": "CLHouse.VoteProposal",
      "jump": "i",
      "offset": [
        1221,
        1267
      ],
      "op": "JUMP",
      "path": "37"
    },
    "1256": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "1257": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "1259": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "MLOAD",
      "path": "37"
    },
    "1260": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x233"
    },
    "1263": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SWAP4",
      "path": "37"
    },
    "1264": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SWAP3",
      "path": "37"
    },
    "1265": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "1266": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "1267": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x1E27"
    },
    "1270": {
      "fn": "CLHouse.VoteProposal",
      "jump": "i",
      "offset": [
        1221,
        1267
      ],
      "op": "JUMP",
      "path": "37"
    },
    "1271": {
      "offset": [
        1073,
        1140
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "1272": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x50A"
    },
    "1275": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x505"
    },
    "1278": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "CALLDATASIZE",
      "path": "37"
    },
    "1279": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x4"
    },
    "1281": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x1E5D"
    },
    "1284": {
      "fn": "CLHouse.VoteProposal",
      "jump": "i",
      "offset": [
        1073,
        1140
      ],
      "op": "JUMP",
      "path": "37"
    },
    "1285": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "1286": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x15D3"
    },
    "1289": {
      "fn": "CLHouse.VoteProposal",
      "jump": "i",
      "offset": [
        1073,
        1140
      ],
      "op": "JUMP",
      "path": "37"
    },
    "1290": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "1291": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "1293": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "MLOAD",
      "path": "37"
    },
    "1294": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x233"
    },
    "1297": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SWAP4",
      "path": "37"
    },
    "1298": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SWAP3",
      "path": "37"
    },
    "1299": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "1300": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "1301": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x1E89"
    },
    "1304": {
      "fn": "CLHouse.VoteProposal",
      "jump": "i",
      "offset": [
        1073,
        1140
      ],
      "op": "JUMP",
      "path": "37"
    },
    "1305": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        8806,
        9557
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "1306": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        8806,
        9557
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x229"
    },
    "1309": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        8806,
        9557
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x527"
    },
    "1312": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        8806,
        9557
      ],
      "op": "CALLDATASIZE",
      "path": "35"
    },
    "1313": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        8806,
        9557
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x4"
    },
    "1315": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        8806,
        9557
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x1EB5"
    },
    "1318": {
      "fn": "CLHouse.PropRemoveMember",
      "jump": "i",
      "offset": [
        8806,
        9557
      ],
      "op": "JUMP",
      "path": "35"
    },
    "1319": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        8806,
        9557
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "1320": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        8806,
        9557
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x1690"
    },
    "1323": {
      "fn": "CLHouse.PropRemoveMember",
      "jump": "i",
      "offset": [
        8806,
        9557
      ],
      "op": "JUMP",
      "path": "35"
    },
    "1324": {
      "offset": [
        1182,
        1215
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "1325": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x53F"
    },
    "1328": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x53A"
    },
    "1331": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "CALLDATASIZE",
      "path": "37"
    },
    "1332": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x4"
    },
    "1334": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x1BEE"
    },
    "1337": {
      "fn": "CLHouse.PropRemoveMember",
      "jump": "i",
      "offset": [
        1182,
        1215
      ],
      "op": "JUMP",
      "path": "37"
    },
    "1338": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "1339": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x16EE"
    },
    "1342": {
      "fn": "CLHouse.PropRemoveMember",
      "jump": "i",
      "offset": [
        1182,
        1215
      ],
      "op": "JUMP",
      "path": "37"
    },
    "1343": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "1344": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "1346": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "MLOAD",
      "path": "37"
    },
    "1347": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x233"
    },
    "1350": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP10",
      "path": "37"
    },
    "1351": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP9",
      "path": "37"
    },
    "1352": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP8",
      "path": "37"
    },
    "1353": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP7",
      "path": "37"
    },
    "1354": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP6",
      "path": "37"
    },
    "1355": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP5",
      "path": "37"
    },
    "1356": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP4",
      "path": "37"
    },
    "1357": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP3",
      "path": "37"
    },
    "1358": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "1359": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "1360": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x1ED3"
    },
    "1363": {
      "fn": "CLHouse.PropRemoveMember",
      "jump": "i",
      "offset": [
        1182,
        1215
      ],
      "op": "JUMP",
      "path": "37"
    },
    "1364": {
      "offset": [
        460,
        489
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "1365": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        460,
        489
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x1"
    },
    "1367": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        460,
        489
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "1368": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        460,
        489
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x27C"
    },
    "1371": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        460,
        489
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "1372": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        460,
        489
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0xFF"
    },
    "1374": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        460,
        489
      ],
      "op": "AND",
      "path": "37"
    },
    "1375": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        460,
        489
      ],
      "op": "DUP2",
      "path": "37"
    },
    "1376": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        460,
        489
      ],
      "op": "JUMP",
      "path": "37"
    },
    "1377": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11038,
        11901
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "1378": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11038,
        11901
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x229"
    },
    "1381": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11038,
        11901
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x56F"
    },
    "1384": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11038,
        11901
      ],
      "op": "CALLDATASIZE",
      "path": "35"
    },
    "1385": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11038,
        11901
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x4"
    },
    "1387": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11038,
        11901
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x1F60"
    },
    "1390": {
      "fn": "CLHouse.PropTxERC20",
      "jump": "i",
      "offset": [
        11038,
        11901
      ],
      "op": "JUMP",
      "path": "35"
    },
    "1391": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11038,
        11901
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "1392": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11038,
        11901
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x17ED"
    },
    "1395": {
      "fn": "CLHouse.PropTxERC20",
      "jump": "i",
      "offset": [
        11038,
        11901
      ],
      "op": "JUMP",
      "path": "35"
    },
    "1396": {
      "offset": [
        672,
        696
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "1397": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        672,
        696
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x1"
    },
    "1399": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        672,
        696
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "1400": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        672,
        696
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x39B"
    },
    "1403": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        672,
        696
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "1404": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        672,
        696
      ],
      "op": "PUSH6",
      "path": "37",
      "value": "0x10000000000"
    },
    "1411": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        672,
        696
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "1412": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        672,
        696
      ],
      "op": "DIV",
      "path": "37"
    },
    "1413": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        672,
        696
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0xFF"
    },
    "1415": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        672,
        696
      ],
      "op": "AND",
      "path": "37"
    },
    "1416": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        672,
        696
      ],
      "op": "DUP2",
      "path": "37"
    },
    "1417": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        672,
        696
      ],
      "op": "JUMP",
      "path": "37"
    },
    "1418": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7656,
        8524
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "1419": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7656,
        8524
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x229"
    },
    "1422": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7656,
        8524
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x598"
    },
    "1425": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7656,
        8524
      ],
      "op": "CALLDATASIZE",
      "path": "35"
    },
    "1426": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7656,
        8524
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x4"
    },
    "1428": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7656,
        8524
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x1FB2"
    },
    "1431": {
      "fn": "CLHouse.PropInviteMember",
      "jump": "i",
      "offset": [
        7656,
        8524
      ],
      "op": "JUMP",
      "path": "35"
    },
    "1432": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7656,
        8524
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "1433": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7656,
        8524
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x18B4"
    },
    "1436": {
      "fn": "CLHouse.PropInviteMember",
      "jump": "i",
      "offset": [
        7656,
        8524
      ],
      "op": "JUMP",
      "path": "35"
    },
    "1437": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15591,
        16409
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "1438": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        15872
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x2"
    },
    "1440": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        15872
      ],
      "op": "SLOAD",
      "path": "35"
    },
    "1441": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15899,
        16126
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "1443": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15899,
        16126
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "1444": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15779,
        15793
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "1446": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15779,
        15793
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "1447": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15779,
        15793
      ],
      "op": "DUP3",
      "path": "35"
    },
    "1448": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15779,
        15793
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "1449": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15779,
        15793
      ],
      "op": "DUP3",
      "path": "35"
    },
    "1450": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15779,
        15793
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "1451": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1453": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1455": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1457": {
      "op": "SHL"
    },
    "1458": {
      "op": "SUB"
    },
    "1459": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        15872
      ],
      "op": "AND",
      "path": "35"
    },
    "1460": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        15872
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "1461": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15899,
        16126
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x5C8"
    },
    "1464": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15899,
        16126
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "1465": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        16008,
        16020
      ],
      "op": "DUP10",
      "path": "35"
    },
    "1466": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        16008,
        16020
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "1467": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        16039,
        16052
      ],
      "op": "DUP10",
      "path": "35"
    },
    "1468": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        16039,
        16052
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "1469": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        16071,
        16083
      ],
      "op": "DUP10",
      "path": "35"
    },
    "1470": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        16071,
        16083
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "1471": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        16102,
        16112
      ],
      "op": "DUP10",
      "path": "35"
    },
    "1472": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        16102,
        16112
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "1473": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15899,
        16126
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x24"
    },
    "1475": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15899,
        16126
      ],
      "op": "ADD",
      "path": "35"
    },
    "1476": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15899,
        16126
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x203F"
    },
    "1479": {
      "fn": "CLHouse.PropSellERC20",
      "jump": "i",
      "offset": [
        15899,
        16126
      ],
      "op": "JUMP",
      "path": "35"
    },
    "1480": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15899,
        16126
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "1481": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15899,
        16126
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "1483": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15899,
        16126
      ],
      "op": "DUP1",
      "path": "35"
    },
    "1484": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15899,
        16126
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "1485": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1487": {
      "op": "NOT"
    },
    "1488": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15899,
        16126
      ],
      "op": "DUP2",
      "path": "35"
    },
    "1489": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15899,
        16126
      ],
      "op": "DUP5",
      "path": "35"
    },
    "1490": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15899,
        16126
      ],
      "op": "SUB",
      "path": "35"
    },
    "1491": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15899,
        16126
      ],
      "op": "ADD",
      "path": "35"
    },
    "1492": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15899,
        16126
      ],
      "op": "DUP2",
      "path": "35"
    },
    "1493": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15899,
        16126
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "1494": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15899,
        16126
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "1495": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15899,
        16126
      ],
      "op": "DUP2",
      "path": "35"
    },
    "1496": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15899,
        16126
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "1497": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15899,
        16126
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "1499": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15899,
        16126
      ],
      "op": "DUP3",
      "path": "35"
    },
    "1500": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15899,
        16126
      ],
      "op": "ADD",
      "path": "35"
    },
    "1501": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15899,
        16126
      ],
      "op": "DUP1",
      "path": "35"
    },
    "1502": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15899,
        16126
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "1503": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1505": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1507": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1509": {
      "op": "SHL"
    },
    "1510": {
      "op": "SUB"
    },
    "1511": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15899,
        16126
      ],
      "op": "AND",
      "path": "35"
    },
    "1512": {
      "op": "PUSH4",
      "value": "0x4F17A9B"
    },
    "1517": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1519": {
      "op": "SHL"
    },
    "1520": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15899,
        16126
      ],
      "op": "OR",
      "path": "35"
    },
    "1521": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15899,
        16126
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "1522": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15899,
        16126
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "1523": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "1524": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x5FD"
    },
    "1527": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "1528": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15899,
        16126
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "1529": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x2077"
    },
    "1532": {
      "fn": "CLHouse.PropSellERC20",
      "jump": "i",
      "offset": [
        15859,
        16136
      ],
      "op": "JUMP",
      "path": "35"
    },
    "1533": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "1534": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "1536": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "1538": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "1539": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "DUP1",
      "path": "35"
    },
    "1540": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "DUP4",
      "path": "35"
    },
    "1541": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "SUB",
      "path": "35"
    },
    "1542": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "DUP2",
      "path": "35"
    },
    "1543": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "DUP6",
      "path": "35"
    },
    "1544": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "GAS",
      "path": "35"
    },
    "1545": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "DELEGATECALL",
      "path": "35"
    },
    "1546": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "1547": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "POP",
      "path": "35"
    },
    "1548": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "POP",
      "path": "35"
    },
    "1549": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "1550": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "DUP1",
      "path": "35"
    },
    "1551": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "1553": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "DUP2",
      "path": "35"
    },
    "1554": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "EQ",
      "path": "35"
    },
    "1555": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x638"
    },
    "1558": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "1559": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "1561": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "1562": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "1563": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "POP",
      "path": "35"
    },
    "1564": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x1F"
    },
    "1566": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "NOT",
      "path": "35"
    },
    "1567": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x3F"
    },
    "1569": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "1570": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "ADD",
      "path": "35"
    },
    "1571": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "AND",
      "path": "35"
    },
    "1572": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "DUP3",
      "path": "35"
    },
    "1573": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "ADD",
      "path": "35"
    },
    "1574": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "1576": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "1577": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "1578": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "DUP3",
      "path": "35"
    },
    "1579": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "1580": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "1581": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "1583": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "1585": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "DUP5",
      "path": "35"
    },
    "1586": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "ADD",
      "path": "35"
    },
    "1587": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "RETURNDATACOPY",
      "path": "35"
    },
    "1588": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x63D"
    },
    "1591": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "JUMP",
      "path": "35"
    },
    "1592": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "1593": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x60"
    },
    "1595": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "1596": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "POP",
      "path": "35"
    },
    "1597": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "1598": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15859,
        16136
      ],
      "op": "POP",
      "path": "35"
    },
    "1599": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15810,
        16136
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "1600": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15810,
        16136
      ],
      "op": "POP",
      "path": "35"
    },
    "1601": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15810,
        16136
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "1602": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        15810,
        16136
      ],
      "op": "POP",
      "path": "35"
    },
    "1603": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        16187,
        16191
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "1605": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        16181,
        16192
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "1606": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        16217,
        16233
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "1607": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        16269,
        16273
      ],
      "op": "DUP1",
      "path": "35"
    },
    "1608": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        16266,
        16267
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "1610": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        16261,
        16264
      ],
      "op": "DUP4",
      "path": "35"
    },
    "1611": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        16246,
        16274
      ],
      "op": "RETURNDATACOPY",
      "path": "35"
    },
    "1612": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        16298,
        16311
      ],
      "op": "DUP4",
      "path": "35"
    },
    "1613": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        16287,
        16363
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x654"
    },
    "1616": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        16287,
        16363
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "1617": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        16344,
        16348
      ],
      "op": "DUP1",
      "path": "35"
    },
    "1618": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        16339,
        16342
      ],
      "op": "DUP3",
      "path": "35"
    },
    "1619": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        16332,
        16349
      ],
      "op": "REVERT",
      "path": "35"
    },
    "1620": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        16287,
        16363
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "1621": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        16388,
        16392
      ],
      "op": "DUP1",
      "path": "35"
    },
    "1622": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        16383,
        16386
      ],
      "op": "DUP3",
      "path": "35"
    },
    "1623": {
      "fn": "CLHouse.PropSellERC20",
      "offset": [
        16376,
        16393
      ],
      "op": "RETURN",
      "path": "35"
    },
    "1624": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14129,
        14694
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "1625": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14292
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x1"
    },
    "1627": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14292
      ],
      "op": "SLOAD",
      "path": "35"
    },
    "1628": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14319,
        14435
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "1630": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14319,
        14435
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "1631": {
      "op": "DUP3"
    },
    "1632": {
      "op": "ISZERO"
    },
    "1633": {
      "op": "ISZERO"
    },
    "1634": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14319,
        14435
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x24"
    },
    "1636": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14319,
        14435
      ],
      "op": "DUP3",
      "path": "35"
    },
    "1637": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14319,
        14435
      ],
      "op": "ADD",
      "path": "35"
    },
    "1638": {
      "op": "MSTORE"
    },
    "1639": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14225,
        14243
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "1641": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14225,
        14243
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "1642": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14225,
        14243
      ],
      "op": "DUP3",
      "path": "35"
    },
    "1643": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14225,
        14243
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "1644": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14292
      ],
      "op": "PUSH7",
      "path": "35",
      "value": "0x1000000000000"
    },
    "1652": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14292
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "1653": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14292
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "1654": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14292
      ],
      "op": "DIV",
      "path": "35"
    },
    "1655": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1657": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1659": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1661": {
      "op": "SHL"
    },
    "1662": {
      "op": "SUB"
    },
    "1663": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14292
      ],
      "op": "AND",
      "path": "35"
    },
    "1664": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14292
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "1665": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1667": {
      "op": "ADD"
    },
    "1668": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14319,
        14435
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "1670": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14319,
        14435
      ],
      "op": "DUP1",
      "path": "35"
    },
    "1671": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14319,
        14435
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "1672": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1674": {
      "op": "NOT"
    },
    "1675": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14319,
        14435
      ],
      "op": "DUP2",
      "path": "35"
    },
    "1676": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14319,
        14435
      ],
      "op": "DUP5",
      "path": "35"
    },
    "1677": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14319,
        14435
      ],
      "op": "SUB",
      "path": "35"
    },
    "1678": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14319,
        14435
      ],
      "op": "ADD",
      "path": "35"
    },
    "1679": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14319,
        14435
      ],
      "op": "DUP2",
      "path": "35"
    },
    "1680": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14319,
        14435
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "1681": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14319,
        14435
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "1682": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14319,
        14435
      ],
      "op": "DUP2",
      "path": "35"
    },
    "1683": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14319,
        14435
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "1684": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14319,
        14435
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "1686": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14319,
        14435
      ],
      "op": "DUP3",
      "path": "35"
    },
    "1687": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14319,
        14435
      ],
      "op": "ADD",
      "path": "35"
    },
    "1688": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14319,
        14435
      ],
      "op": "DUP1",
      "path": "35"
    },
    "1689": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14319,
        14435
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "1690": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1692": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1694": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1696": {
      "op": "SHL"
    },
    "1697": {
      "op": "SUB"
    },
    "1698": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14319,
        14435
      ],
      "op": "AND",
      "path": "35"
    },
    "1699": {
      "op": "PUSH4",
      "value": "0xFEEAE4B"
    },
    "1704": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1706": {
      "op": "SHL"
    },
    "1707": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14319,
        14435
      ],
      "op": "OR",
      "path": "35"
    },
    "1708": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14319,
        14435
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "1709": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14319,
        14435
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "1710": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "1711": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x6B8"
    },
    "1714": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "1715": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14319,
        14435
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "1716": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x2077"
    },
    "1719": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "jump": "i",
      "offset": [
        14273,
        14445
      ],
      "op": "JUMP",
      "path": "35"
    },
    "1720": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "1721": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "1723": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "1725": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "1726": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "DUP1",
      "path": "35"
    },
    "1727": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "DUP4",
      "path": "35"
    },
    "1728": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "SUB",
      "path": "35"
    },
    "1729": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "DUP2",
      "path": "35"
    },
    "1730": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "DUP6",
      "path": "35"
    },
    "1731": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "GAS",
      "path": "35"
    },
    "1732": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "DELEGATECALL",
      "path": "35"
    },
    "1733": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "1734": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "POP",
      "path": "35"
    },
    "1735": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "POP",
      "path": "35"
    },
    "1736": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "1737": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "DUP1",
      "path": "35"
    },
    "1738": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "1740": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "DUP2",
      "path": "35"
    },
    "1741": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "EQ",
      "path": "35"
    },
    "1742": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x6F3"
    },
    "1745": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "1746": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "1748": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "1749": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "1750": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "POP",
      "path": "35"
    },
    "1751": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x1F"
    },
    "1753": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "NOT",
      "path": "35"
    },
    "1754": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x3F"
    },
    "1756": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "1757": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "ADD",
      "path": "35"
    },
    "1758": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "AND",
      "path": "35"
    },
    "1759": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "DUP3",
      "path": "35"
    },
    "1760": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "ADD",
      "path": "35"
    },
    "1761": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "1763": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "1764": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "1765": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "DUP3",
      "path": "35"
    },
    "1766": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "1767": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "1768": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "1770": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "1772": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "DUP5",
      "path": "35"
    },
    "1773": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "ADD",
      "path": "35"
    },
    "1774": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "RETURNDATACOPY",
      "path": "35"
    },
    "1775": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x6F8"
    },
    "1778": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "JUMP",
      "path": "35"
    },
    "1779": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "1780": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x60"
    },
    "1782": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "1783": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "POP",
      "path": "35"
    },
    "1784": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "1785": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14273,
        14445
      ],
      "op": "POP",
      "path": "35"
    },
    "1786": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14224,
        14445
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "1787": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14224,
        14445
      ],
      "op": "POP",
      "path": "35"
    },
    "1788": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14224,
        14445
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "1789": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14224,
        14445
      ],
      "op": "POP",
      "path": "35"
    },
    "1790": {
      "branch": 21,
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14461,
        14474
      ],
      "op": "DUP2",
      "path": "35",
      "statement": 1
    },
    "1791": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14456,
        14688
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x70F"
    },
    "1794": {
      "branch": 21,
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14456,
        14688
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "1795": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14535,
        14539
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "1797": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14529,
        14540
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "1798": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14569,
        14585
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "1799": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14625,
        14629
      ],
      "op": "DUP1",
      "path": "35"
    },
    "1800": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14622,
        14623
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "1802": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14617,
        14620
      ],
      "op": "DUP4",
      "path": "35"
    },
    "1803": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14602,
        14630
      ],
      "op": "RETURNDATACOPY",
      "path": "35"
    },
    "1804": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14659,
        14663
      ],
      "op": "DUP1",
      "path": "35"
    },
    "1805": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14654,
        14657
      ],
      "op": "DUP3",
      "path": "35"
    },
    "1806": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14647,
        14664
      ],
      "op": "REVERT",
      "path": "35"
    },
    "1807": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14456,
        14688
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "1808": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14214,
        14694
      ],
      "op": "POP",
      "path": "35"
    },
    "1809": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14214,
        14694
      ],
      "op": "POP",
      "path": "35"
    },
    "1810": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "offset": [
        14129,
        14694
      ],
      "op": "POP",
      "path": "35"
    },
    "1811": {
      "fn": "CLHouse.AcceptRejectInvitation",
      "jump": "o",
      "offset": [
        14129,
        14694
      ],
      "op": "JUMP",
      "path": "35"
    },
    "1812": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        14700,
        15585
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "1813": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        14997,
        15010
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x2"
    },
    "1815": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        14997,
        15010
      ],
      "op": "SLOAD",
      "path": "35"
    },
    "1816": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15037,
        15302
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "1818": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15037,
        15302
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "1819": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        14917,
        14931
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "1821": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        14917,
        14931
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "1822": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        14917,
        14931
      ],
      "op": "DUP3",
      "path": "35"
    },
    "1823": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        14917,
        14931
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "1824": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        14917,
        14931
      ],
      "op": "DUP3",
      "path": "35"
    },
    "1825": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        14917,
        14931
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "1826": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1828": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1830": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1832": {
      "op": "SHL"
    },
    "1833": {
      "op": "SUB"
    },
    "1834": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        14997,
        15010
      ],
      "op": "AND",
      "path": "35"
    },
    "1835": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        14997,
        15010
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "1836": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15037,
        15302
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x741"
    },
    "1839": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15037,
        15302
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "1840": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15154,
        15166
      ],
      "op": "DUP11",
      "path": "35"
    },
    "1841": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15154,
        15166
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "1842": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15185,
        15196
      ],
      "op": "DUP11",
      "path": "35"
    },
    "1843": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15185,
        15196
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "1844": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15215,
        15228
      ],
      "op": "DUP11",
      "path": "35"
    },
    "1845": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15215,
        15228
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "1846": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15247,
        15259
      ],
      "op": "DUP11",
      "path": "35"
    },
    "1847": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15247,
        15259
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "1848": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15278,
        15288
      ],
      "op": "DUP11",
      "path": "35"
    },
    "1849": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15278,
        15288
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "1850": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15037,
        15302
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x24"
    },
    "1852": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15037,
        15302
      ],
      "op": "ADD",
      "path": "35"
    },
    "1853": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15037,
        15302
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x2093"
    },
    "1856": {
      "fn": "CLHouse.PropSwapERC20",
      "jump": "i",
      "offset": [
        15037,
        15302
      ],
      "op": "JUMP",
      "path": "35"
    },
    "1857": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15037,
        15302
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "1858": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15037,
        15302
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "1860": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15037,
        15302
      ],
      "op": "DUP1",
      "path": "35"
    },
    "1861": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15037,
        15302
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "1862": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1864": {
      "op": "NOT"
    },
    "1865": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15037,
        15302
      ],
      "op": "DUP2",
      "path": "35"
    },
    "1866": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15037,
        15302
      ],
      "op": "DUP5",
      "path": "35"
    },
    "1867": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15037,
        15302
      ],
      "op": "SUB",
      "path": "35"
    },
    "1868": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15037,
        15302
      ],
      "op": "ADD",
      "path": "35"
    },
    "1869": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15037,
        15302
      ],
      "op": "DUP2",
      "path": "35"
    },
    "1870": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15037,
        15302
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "1871": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15037,
        15302
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "1872": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15037,
        15302
      ],
      "op": "DUP2",
      "path": "35"
    },
    "1873": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15037,
        15302
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "1874": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15037,
        15302
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "1876": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15037,
        15302
      ],
      "op": "DUP3",
      "path": "35"
    },
    "1877": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15037,
        15302
      ],
      "op": "ADD",
      "path": "35"
    },
    "1878": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15037,
        15302
      ],
      "op": "DUP1",
      "path": "35"
    },
    "1879": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15037,
        15302
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "1880": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1882": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1884": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1886": {
      "op": "SHL"
    },
    "1887": {
      "op": "SUB"
    },
    "1888": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15037,
        15302
      ],
      "op": "AND",
      "path": "35"
    },
    "1889": {
      "op": "PUSH4",
      "value": "0x152DE3B9"
    },
    "1894": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1896": {
      "op": "SHL"
    },
    "1897": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15037,
        15302
      ],
      "op": "OR",
      "path": "35"
    },
    "1898": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15037,
        15302
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "1899": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15037,
        15302
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "1900": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        14997,
        15312
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "1901": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        14997,
        15312
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x5FD"
    },
    "1904": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        14997,
        15312
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "1905": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        15037,
        15302
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "1906": {
      "fn": "CLHouse.PropSwapERC20",
      "offset": [
        14997,
        15312
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x2077"
    },
    "1909": {
      "fn": "CLHouse.PropSwapERC20",
      "jump": "i",
      "offset": [
        14997,
        15312
      ],
      "op": "JUMP",
      "path": "35"
    },
    "1910": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16415,
        17229
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "1911": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16681,
        16694
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x2"
    },
    "1913": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16681,
        16694
      ],
      "op": "SLOAD",
      "path": "35"
    },
    "1914": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16721,
        16946
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "1916": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16721,
        16946
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "1917": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16601,
        16615
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "1919": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16601,
        16615
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "1920": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16601,
        16615
      ],
      "op": "DUP3",
      "path": "35"
    },
    "1921": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16601,
        16615
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "1922": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16601,
        16615
      ],
      "op": "DUP3",
      "path": "35"
    },
    "1923": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16601,
        16615
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "1924": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1926": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1928": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1930": {
      "op": "SHL"
    },
    "1931": {
      "op": "SUB"
    },
    "1932": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16681,
        16694
      ],
      "op": "AND",
      "path": "35"
    },
    "1933": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16681,
        16694
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "1934": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16721,
        16946
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x7A1"
    },
    "1937": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16721,
        16946
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "1938": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16829,
        16840
      ],
      "op": "DUP10",
      "path": "35"
    },
    "1939": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16829,
        16840
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "1940": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16859,
        16872
      ],
      "op": "DUP10",
      "path": "35"
    },
    "1941": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16859,
        16872
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "1942": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16891,
        16903
      ],
      "op": "DUP10",
      "path": "35"
    },
    "1943": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16891,
        16903
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "1944": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16922,
        16932
      ],
      "op": "DUP10",
      "path": "35"
    },
    "1945": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16922,
        16932
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "1946": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16721,
        16946
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x24"
    },
    "1948": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16721,
        16946
      ],
      "op": "ADD",
      "path": "35"
    },
    "1949": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16721,
        16946
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x203F"
    },
    "1952": {
      "fn": "CLHouse.PropBuyERC20",
      "jump": "i",
      "offset": [
        16721,
        16946
      ],
      "op": "JUMP",
      "path": "35"
    },
    "1953": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16721,
        16946
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "1954": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16721,
        16946
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "1956": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16721,
        16946
      ],
      "op": "DUP1",
      "path": "35"
    },
    "1957": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16721,
        16946
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "1958": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1960": {
      "op": "NOT"
    },
    "1961": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16721,
        16946
      ],
      "op": "DUP2",
      "path": "35"
    },
    "1962": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16721,
        16946
      ],
      "op": "DUP5",
      "path": "35"
    },
    "1963": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16721,
        16946
      ],
      "op": "SUB",
      "path": "35"
    },
    "1964": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16721,
        16946
      ],
      "op": "ADD",
      "path": "35"
    },
    "1965": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16721,
        16946
      ],
      "op": "DUP2",
      "path": "35"
    },
    "1966": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16721,
        16946
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "1967": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16721,
        16946
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "1968": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16721,
        16946
      ],
      "op": "DUP2",
      "path": "35"
    },
    "1969": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16721,
        16946
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "1970": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16721,
        16946
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "1972": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16721,
        16946
      ],
      "op": "DUP3",
      "path": "35"
    },
    "1973": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16721,
        16946
      ],
      "op": "ADD",
      "path": "35"
    },
    "1974": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16721,
        16946
      ],
      "op": "DUP1",
      "path": "35"
    },
    "1975": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16721,
        16946
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "1976": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1978": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1980": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1982": {
      "op": "SHL"
    },
    "1983": {
      "op": "SUB"
    },
    "1984": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16721,
        16946
      ],
      "op": "AND",
      "path": "35"
    },
    "1985": {
      "op": "PUSH4",
      "value": "0x899B86F"
    },
    "1990": {
      "op": "PUSH1",
      "value": "0xE2"
    },
    "1992": {
      "op": "SHL"
    },
    "1993": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16721,
        16946
      ],
      "op": "OR",
      "path": "35"
    },
    "1994": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16721,
        16946
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "1995": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16721,
        16946
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "1996": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16681,
        16956
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "1997": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16681,
        16956
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x5FD"
    },
    "2000": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16681,
        16956
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "2001": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16721,
        16946
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "2002": {
      "fn": "CLHouse.PropBuyERC20",
      "offset": [
        16681,
        16956
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x2077"
    },
    "2005": {
      "fn": "CLHouse.PropBuyERC20",
      "jump": "i",
      "offset": [
        16681,
        16956
      ],
      "op": "JUMP",
      "path": "35"
    },
    "2006": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13319,
        13991
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "2007": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13524,
        13537
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x2"
    },
    "2009": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13524,
        13537
      ],
      "op": "SLOAD",
      "path": "35"
    },
    "2010": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13564,
        13708
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "2012": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13564,
        13708
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "2013": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13451,
        13458
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "2015": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13451,
        13458
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "2016": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13451,
        13458
      ],
      "op": "DUP3",
      "path": "35"
    },
    "2017": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13451,
        13458
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "2018": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13451,
        13458
      ],
      "op": "DUP3",
      "path": "35"
    },
    "2019": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13451,
        13458
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "2020": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2022": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2024": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2026": {
      "op": "SHL"
    },
    "2027": {
      "op": "SUB"
    },
    "2028": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13524,
        13537
      ],
      "op": "AND",
      "path": "35"
    },
    "2029": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13524,
        13537
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "2030": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13564,
        13708
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x7FD"
    },
    "2033": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13564,
        13708
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "2034": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13659,
        13664
      ],
      "op": "DUP8",
      "path": "35"
    },
    "2035": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13659,
        13664
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "2036": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13682,
        13694
      ],
      "op": "DUP8",
      "path": "35"
    },
    "2037": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13682,
        13694
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "2038": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13564,
        13708
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x24"
    },
    "2040": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13564,
        13708
      ],
      "op": "ADD",
      "path": "35"
    },
    "2041": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13564,
        13708
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x20D8"
    },
    "2044": {
      "fn": "CLHouse.PropRequestToJoin",
      "jump": "i",
      "offset": [
        13564,
        13708
      ],
      "op": "JUMP",
      "path": "35"
    },
    "2045": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13564,
        13708
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "2046": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13564,
        13708
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "2048": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13564,
        13708
      ],
      "op": "DUP1",
      "path": "35"
    },
    "2049": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13564,
        13708
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "2050": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2052": {
      "op": "NOT"
    },
    "2053": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13564,
        13708
      ],
      "op": "DUP2",
      "path": "35"
    },
    "2054": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13564,
        13708
      ],
      "op": "DUP5",
      "path": "35"
    },
    "2055": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13564,
        13708
      ],
      "op": "SUB",
      "path": "35"
    },
    "2056": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13564,
        13708
      ],
      "op": "ADD",
      "path": "35"
    },
    "2057": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13564,
        13708
      ],
      "op": "DUP2",
      "path": "35"
    },
    "2058": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13564,
        13708
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "2059": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13564,
        13708
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "2060": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13564,
        13708
      ],
      "op": "DUP2",
      "path": "35"
    },
    "2061": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13564,
        13708
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "2062": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13564,
        13708
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "2064": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13564,
        13708
      ],
      "op": "DUP3",
      "path": "35"
    },
    "2065": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13564,
        13708
      ],
      "op": "ADD",
      "path": "35"
    },
    "2066": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13564,
        13708
      ],
      "op": "DUP1",
      "path": "35"
    },
    "2067": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13564,
        13708
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "2068": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2070": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2072": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2074": {
      "op": "SHL"
    },
    "2075": {
      "op": "SUB"
    },
    "2076": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13564,
        13708
      ],
      "op": "AND",
      "path": "35"
    },
    "2077": {
      "op": "PUSH4",
      "value": "0x16137DB7"
    },
    "2082": {
      "op": "PUSH1",
      "value": "0xE1"
    },
    "2084": {
      "op": "SHL"
    },
    "2085": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13564,
        13708
      ],
      "op": "OR",
      "path": "35"
    },
    "2086": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13564,
        13708
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "2087": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13564,
        13708
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "2088": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13524,
        13718
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "2089": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13524,
        13718
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x5FD"
    },
    "2092": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13524,
        13718
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "2093": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13564,
        13708
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "2094": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        13524,
        13718
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x2077"
    },
    "2097": {
      "fn": "CLHouse.PropRequestToJoin",
      "jump": "i",
      "offset": [
        13524,
        13718
      ],
      "op": "JUMP",
      "path": "35"
    },
    "2098": {
      "offset": [
        1323,
        1367
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "2099": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        1323,
        1367
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0xE"
    },
    "2101": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        1323,
        1367
      ],
      "op": "DUP2",
      "path": "37"
    },
    "2102": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        1323,
        1367
      ],
      "op": "DUP2",
      "path": "37"
    },
    "2103": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        1323,
        1367
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "2104": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        1323,
        1367
      ],
      "op": "DUP2",
      "path": "37"
    },
    "2105": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        1323,
        1367
      ],
      "op": "LT",
      "path": "37"
    },
    "2106": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        1323,
        1367
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x842"
    },
    "2109": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        1323,
        1367
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "2110": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        1323,
        1367
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "2112": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        1323,
        1367
      ],
      "op": "DUP1",
      "path": "37"
    },
    "2113": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        1323,
        1367
      ],
      "op": "REVERT",
      "path": "37"
    },
    "2114": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        1323,
        1367
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "2115": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        1323,
        1367
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "2117": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        1323,
        1367
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "2118": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        1323,
        1367
      ],
      "op": "DUP3",
      "path": "37"
    },
    "2119": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        1323,
        1367
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "2120": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        1323,
        1367
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "2122": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        1323,
        1367
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "2123": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        1323,
        1367
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "2124": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        1323,
        1367
      ],
      "op": "KECCAK256",
      "path": "37"
    },
    "2125": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        1323,
        1367
      ],
      "op": "ADD",
      "path": "37"
    },
    "2126": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        1323,
        1367
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "2127": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        1323,
        1367
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0xFF"
    },
    "2129": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        1323,
        1367
      ],
      "op": "AND",
      "path": "37"
    },
    "2130": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        1323,
        1367
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "2131": {
      "op": "POP"
    },
    "2132": {
      "offset": [
        1323,
        1367
      ],
      "op": "DUP2",
      "path": "37"
    },
    "2133": {
      "fn": "CLHouse.PropRequestToJoin",
      "jump": "o",
      "offset": [
        1323,
        1367
      ],
      "op": "JUMP",
      "path": "37"
    },
    "2134": {
      "offset": [
        320,
        344
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "2135": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "2137": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "DUP1",
      "path": "37"
    },
    "2138": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "2139": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x863"
    },
    "2142": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "2143": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x20FD"
    },
    "2146": {
      "fn": "CLHouse.PropRequestToJoin",
      "jump": "i",
      "offset": [
        320,
        344
      ],
      "op": "JUMP",
      "path": "37"
    },
    "2147": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "2148": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "DUP1",
      "path": "37"
    },
    "2149": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x1F"
    },
    "2151": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "ADD",
      "path": "37"
    },
    "2152": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "2154": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "DUP1",
      "path": "37"
    },
    "2155": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "2156": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "DIV",
      "path": "37"
    },
    "2157": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "MUL",
      "path": "37"
    },
    "2158": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "2160": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "ADD",
      "path": "37"
    },
    "2161": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "2163": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "MLOAD",
      "path": "37"
    },
    "2164": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "2165": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "DUP2",
      "path": "37"
    },
    "2166": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "ADD",
      "path": "37"
    },
    "2167": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "2169": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "2170": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "DUP1",
      "path": "37"
    },
    "2171": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "SWAP3",
      "path": "37"
    },
    "2172": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "2173": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "2174": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "DUP2",
      "path": "37"
    },
    "2175": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "DUP2",
      "path": "37"
    },
    "2176": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "2177": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "2179": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "ADD",
      "path": "37"
    },
    "2180": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "DUP3",
      "path": "37"
    },
    "2181": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "DUP1",
      "path": "37"
    },
    "2182": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "2183": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x88F"
    },
    "2186": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "2187": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x20FD"
    },
    "2190": {
      "fn": "CLHouse.PropRequestToJoin",
      "jump": "i",
      "offset": [
        320,
        344
      ],
      "op": "JUMP",
      "path": "37"
    },
    "2191": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "2192": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "DUP1",
      "path": "37"
    },
    "2193": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "ISZERO",
      "path": "37"
    },
    "2194": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x8DC"
    },
    "2197": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "2198": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "DUP1",
      "path": "37"
    },
    "2199": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x1F"
    },
    "2201": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "LT",
      "path": "37"
    },
    "2202": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x8B1"
    },
    "2205": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "2206": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x100"
    },
    "2209": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "DUP1",
      "path": "37"
    },
    "2210": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "DUP4",
      "path": "37"
    },
    "2211": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "2212": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "DIV",
      "path": "37"
    },
    "2213": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "MUL",
      "path": "37"
    },
    "2214": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "DUP4",
      "path": "37"
    },
    "2215": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "2216": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "2217": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "2219": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "ADD",
      "path": "37"
    },
    "2220": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "2221": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x8DC"
    },
    "2224": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "JUMP",
      "path": "37"
    },
    "2225": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "2226": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "DUP3",
      "path": "37"
    },
    "2227": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "ADD",
      "path": "37"
    },
    "2228": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "2229": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "2230": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "2232": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "2233": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "2235": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "2237": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "KECCAK256",
      "path": "37"
    },
    "2238": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "2239": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "2240": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "DUP2",
      "path": "37"
    },
    "2241": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "2242": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "DUP2",
      "path": "37"
    },
    "2243": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "2244": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "2245": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x1"
    },
    "2247": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "ADD",
      "path": "37"
    },
    "2248": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "2249": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "2251": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "ADD",
      "path": "37"
    },
    "2252": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "DUP1",
      "path": "37"
    },
    "2253": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "DUP4",
      "path": "37"
    },
    "2254": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "GT",
      "path": "37"
    },
    "2255": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x8BF"
    },
    "2258": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "2259": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "DUP3",
      "path": "37"
    },
    "2260": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "2261": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "SUB",
      "path": "37"
    },
    "2262": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x1F"
    },
    "2264": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "AND",
      "path": "37"
    },
    "2265": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "DUP3",
      "path": "37"
    },
    "2266": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "ADD",
      "path": "37"
    },
    "2267": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "2268": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "2269": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "POP",
      "path": "37"
    },
    "2270": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "POP",
      "path": "37"
    },
    "2271": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "POP",
      "path": "37"
    },
    "2272": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "POP",
      "path": "37"
    },
    "2273": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "POP",
      "path": "37"
    },
    "2274": {
      "fn": "CLHouse.PropRequestToJoin",
      "offset": [
        320,
        344
      ],
      "op": "DUP2",
      "path": "37"
    },
    "2275": {
      "fn": "CLHouse.PropRequestToJoin",
      "jump": "o",
      "offset": [
        320,
        344
      ],
      "op": "JUMP",
      "path": "37"
    },
    "2276": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2643,
        3311
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "2277": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        2869
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x2"
    },
    "2279": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        2869
      ],
      "op": "SLOAD",
      "path": "35"
    },
    "2280": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2896,
        2996
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "2282": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2896,
        2996
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "2283": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2896,
        2996
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x24"
    },
    "2285": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2896,
        2996
      ],
      "op": "DUP2",
      "path": "35"
    },
    "2286": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2896,
        2996
      ],
      "op": "ADD",
      "path": "35"
    },
    "2287": {
      "op": "DUP4"
    },
    "2288": {
      "op": "SWAP1"
    },
    "2289": {
      "op": "MSTORE"
    },
    "2290": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2736,
        2747
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "2292": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2736,
        2747
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "2293": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2761,
        2782
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x60"
    },
    "2295": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2761,
        2782
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "2296": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2736,
        2747
      ],
      "op": "DUP4",
      "path": "35"
    },
    "2297": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2736,
        2747
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "2298": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2736,
        2747
      ],
      "op": "DUP3",
      "path": "35"
    },
    "2299": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2736,
        2747
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "2300": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2302": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2304": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2306": {
      "op": "SHL"
    },
    "2307": {
      "op": "SUB"
    },
    "2308": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        2869
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "2309": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        2869
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "2310": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        2869
      ],
      "op": "AND",
      "path": "35"
    },
    "2311": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        2869
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "2312": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2314": {
      "op": "ADD"
    },
    "2315": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2896,
        2996
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "2317": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2896,
        2996
      ],
      "op": "DUP1",
      "path": "35"
    },
    "2318": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2896,
        2996
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "2319": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2321": {
      "op": "NOT"
    },
    "2322": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2896,
        2996
      ],
      "op": "DUP2",
      "path": "35"
    },
    "2323": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2896,
        2996
      ],
      "op": "DUP5",
      "path": "35"
    },
    "2324": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2896,
        2996
      ],
      "op": "SUB",
      "path": "35"
    },
    "2325": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2896,
        2996
      ],
      "op": "ADD",
      "path": "35"
    },
    "2326": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2896,
        2996
      ],
      "op": "DUP2",
      "path": "35"
    },
    "2327": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2896,
        2996
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "2328": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2896,
        2996
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "2329": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2896,
        2996
      ],
      "op": "DUP2",
      "path": "35"
    },
    "2330": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2896,
        2996
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "2331": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2896,
        2996
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "2333": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2896,
        2996
      ],
      "op": "DUP3",
      "path": "35"
    },
    "2334": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2896,
        2996
      ],
      "op": "ADD",
      "path": "35"
    },
    "2335": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2896,
        2996
      ],
      "op": "DUP1",
      "path": "35"
    },
    "2336": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2896,
        2996
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "2337": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2339": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2341": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2343": {
      "op": "SHL"
    },
    "2344": {
      "op": "SUB"
    },
    "2345": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2896,
        2996
      ],
      "op": "AND",
      "path": "35"
    },
    "2346": {
      "op": "PUSH4",
      "value": "0x4EEB7B85"
    },
    "2351": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2353": {
      "op": "SHL"
    },
    "2354": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2896,
        2996
      ],
      "op": "OR",
      "path": "35"
    },
    "2355": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2896,
        2996
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "2356": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2896,
        2996
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "2357": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "2358": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x93F"
    },
    "2361": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "2362": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2896,
        2996
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "2363": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x2077"
    },
    "2366": {
      "fn": "CLHouse.ExecProp",
      "jump": "i",
      "offset": [
        2856,
        3006
      ],
      "op": "JUMP",
      "path": "35"
    },
    "2367": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "2368": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "2370": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "2372": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "2373": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "DUP1",
      "path": "35"
    },
    "2374": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "DUP4",
      "path": "35"
    },
    "2375": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "SUB",
      "path": "35"
    },
    "2376": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "DUP2",
      "path": "35"
    },
    "2377": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "DUP6",
      "path": "35"
    },
    "2378": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "GAS",
      "path": "35"
    },
    "2379": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "DELEGATECALL",
      "path": "35"
    },
    "2380": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "2381": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "POP",
      "path": "35"
    },
    "2382": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "POP",
      "path": "35"
    },
    "2383": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "2384": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "DUP1",
      "path": "35"
    },
    "2385": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "2387": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "DUP2",
      "path": "35"
    },
    "2388": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "EQ",
      "path": "35"
    },
    "2389": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x97A"
    },
    "2392": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "2393": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "2395": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "2396": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "2397": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "POP",
      "path": "35"
    },
    "2398": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x1F"
    },
    "2400": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "NOT",
      "path": "35"
    },
    "2401": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x3F"
    },
    "2403": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "2404": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "ADD",
      "path": "35"
    },
    "2405": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "AND",
      "path": "35"
    },
    "2406": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "DUP3",
      "path": "35"
    },
    "2407": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "ADD",
      "path": "35"
    },
    "2408": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "2410": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "2411": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "2412": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "DUP3",
      "path": "35"
    },
    "2413": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "2414": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "2415": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "2417": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "2419": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "DUP5",
      "path": "35"
    },
    "2420": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "ADD",
      "path": "35"
    },
    "2421": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "RETURNDATACOPY",
      "path": "35"
    },
    "2422": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x97F"
    },
    "2425": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "JUMP",
      "path": "35"
    },
    "2426": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "2427": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x60"
    },
    "2429": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "2430": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "POP",
      "path": "35"
    },
    "2431": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "2432": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2856,
        3006
      ],
      "op": "POP",
      "path": "35"
    },
    "2433": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2807,
        3006
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "2434": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2807,
        3006
      ],
      "op": "POP",
      "path": "35"
    },
    "2435": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2807,
        3006
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "2436": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2807,
        3006
      ],
      "op": "POP",
      "path": "35"
    },
    "2437": {
      "branch": 22,
      "fn": "CLHouse.ExecProp",
      "offset": [
        3022,
        3035
      ],
      "op": "DUP2",
      "path": "35",
      "statement": 2
    },
    "2438": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        3017,
        3249
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x996"
    },
    "2441": {
      "branch": 22,
      "fn": "CLHouse.ExecProp",
      "offset": [
        3017,
        3249
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "2442": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        3096,
        3100
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "2444": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        3090,
        3101
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "2445": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        3130,
        3146
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "2446": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        3186,
        3190
      ],
      "op": "DUP1",
      "path": "35"
    },
    "2447": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        3183,
        3184
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "2449": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        3178,
        3181
      ],
      "op": "DUP4",
      "path": "35"
    },
    "2450": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        3163,
        3191
      ],
      "op": "RETURNDATACOPY",
      "path": "35"
    },
    "2451": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        3220,
        3224
      ],
      "op": "DUP1",
      "path": "35"
    },
    "2452": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        3215,
        3218
      ],
      "op": "DUP3",
      "path": "35"
    },
    "2453": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        3208,
        3225
      ],
      "op": "REVERT",
      "path": "35"
    },
    "2454": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        3017,
        3249
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "2455": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        3268,
        3272
      ],
      "op": "PUSH1",
      "path": "35",
      "statement": 3,
      "value": "0x1"
    },
    "2457": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        3259,
        3304
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "2459": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        3259,
        3304
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "2460": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        3259,
        3304
      ],
      "op": "DUP1",
      "path": "35"
    },
    "2461": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        3259,
        3304
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "2463": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        3259,
        3304
      ],
      "op": "ADD",
      "path": "35"
    },
    "2464": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        3259,
        3304
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "2466": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        3259,
        3304
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "2467": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        3259,
        3304
      ],
      "op": "DUP1",
      "path": "35"
    },
    "2468": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        3259,
        3304
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x19"
    },
    "2470": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        3259,
        3304
      ],
      "op": "DUP2",
      "path": "35"
    },
    "2471": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        3259,
        3304
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "2472": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        3259,
        3304
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "2474": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        3259,
        3304
      ],
      "op": "ADD",
      "path": "35"
    },
    "2475": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        3259,
        3304
      ],
      "op": "PUSH32",
      "path": "35",
      "value": "0x537563636573732065786563757465642070726F706F73616C00000000000000"
    },
    "2508": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        3259,
        3304
      ],
      "op": "DUP2",
      "path": "35"
    },
    "2509": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        3259,
        3304
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "2510": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        3259,
        3304
      ],
      "op": "POP",
      "path": "35"
    },
    "2511": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        3259,
        3304
      ],
      "op": "SWAP4",
      "path": "35"
    },
    "2512": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        3259,
        3304
      ],
      "op": "POP",
      "path": "35"
    },
    "2513": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        3259,
        3304
      ],
      "op": "SWAP4",
      "path": "35"
    },
    "2514": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        3259,
        3304
      ],
      "op": "POP",
      "path": "35"
    },
    "2515": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        3259,
        3304
      ],
      "op": "POP",
      "path": "35"
    },
    "2516": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        3259,
        3304
      ],
      "op": "POP",
      "path": "35"
    },
    "2517": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2643,
        3311
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "2518": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2643,
        3311
      ],
      "op": "POP",
      "path": "35"
    },
    "2519": {
      "fn": "CLHouse.ExecProp",
      "offset": [
        2643,
        3311
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "2520": {
      "fn": "CLHouse.ExecProp",
      "jump": "o",
      "offset": [
        2643,
        3311
      ],
      "op": "JUMP",
      "path": "35"
    },
    "2521": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4363,
        7211
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "2522": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4607,
        4611
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "2524": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4628,
        4643
      ],
      "op": "DUP1",
      "path": "35"
    },
    "2525": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4646,
        4659
      ],
      "op": "CHAINID",
      "path": "35"
    },
    "2526": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4628,
        4659
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "2527": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4628,
        4659
      ],
      "op": "POP",
      "path": "35"
    },
    "2528": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4670,
        4694
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "2530": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4758,
        4898
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "2532": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4758,
        4898
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "2533": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4758,
        4898
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "2535": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4758,
        4898
      ],
      "op": "ADD",
      "path": "35"
    },
    "2536": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4758,
        4898
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0xA55"
    },
    "2539": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4758,
        4898
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "2540": {
      "op": "PUSH32",
      "value": "0x454950373132446F6D61696E28737472696E67206E616D652C737472696E6720"
    },
    "2573": {
      "op": "DUP2"
    },
    "2574": {
      "op": "MSTORE"
    },
    "2575": {
      "op": "PUSH32",
      "value": "0x76657273696F6E2C75696E7432353620636861696E49642C6164647265737320"
    },
    "2608": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2610": {
      "op": "DUP3"
    },
    "2611": {
      "op": "ADD"
    },
    "2612": {
      "op": "MSTORE"
    },
    "2613": {
      "op": "PUSH18",
      "value": "0x766572696679696E67436F6E747261637429"
    },
    "2632": {
      "op": "PUSH1",
      "value": "0x70"
    },
    "2634": {
      "op": "SHL"
    },
    "2635": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2637": {
      "op": "DUP3"
    },
    "2638": {
      "op": "ADD"
    },
    "2639": {
      "op": "MSTORE"
    },
    "2640": {
      "op": "PUSH1",
      "value": "0x52"
    },
    "2642": {
      "op": "ADD"
    },
    "2643": {
      "op": "SWAP1"
    },
    "2644": {
      "op": "JUMP"
    },
    "2645": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4758,
        4898
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "2646": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4758,
        4898
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "2648": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4758,
        4898
      ],
      "op": "DUP1",
      "path": "35"
    },
    "2649": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4758,
        4898
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "2650": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2652": {
      "op": "NOT"
    },
    "2653": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4758,
        4898
      ],
      "op": "DUP2",
      "path": "35"
    },
    "2654": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4758,
        4898
      ],
      "op": "DUP5",
      "path": "35"
    },
    "2655": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4758,
        4898
      ],
      "op": "SUB",
      "path": "35"
    },
    "2656": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4758,
        4898
      ],
      "op": "ADD",
      "path": "35"
    },
    "2657": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4758,
        4898
      ],
      "op": "DUP2",
      "path": "35"
    },
    "2658": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4758,
        4898
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "2659": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4758,
        4898
      ],
      "op": "DUP3",
      "path": "35"
    },
    "2660": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4758,
        4898
      ],
      "op": "DUP3",
      "path": "35"
    },
    "2661": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4758,
        4898
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "2662": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4748,
        4899
      ],
      "op": "DUP1",
      "path": "35"
    },
    "2663": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4748,
        4899
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "2664": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4758,
        4898
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "2666": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4748,
        4899
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "2667": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4748,
        4899
      ],
      "op": "DUP3",
      "path": "35"
    },
    "2668": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4748,
        4899
      ],
      "op": "ADD",
      "path": "35"
    },
    "2669": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4748,
        4899
      ],
      "op": "KECCAK256",
      "path": "35"
    },
    "2670": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4720,
        5044
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "2671": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4720,
        5044
      ],
      "op": "DUP4",
      "path": "35"
    },
    "2672": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4720,
        5044
      ],
      "op": "ADD",
      "path": "35"
    },
    "2673": {
      "op": "MSTORE"
    },
    "2674": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4917,
        4937
      ],
      "op": "PUSH32",
      "path": "35",
      "value": "0x1318895AF1F6DB161B2BA745B8E57A6B46EFAD77D736630379EC69C3CD4C875"
    },
    "2707": {
      "op": "SWAP1"
    },
    "2708": {
      "op": "DUP3"
    },
    "2709": {
      "op": "ADD"
    },
    "2710": {
      "op": "MSTORE"
    },
    "2711": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4955,
        4974
      ],
      "op": "PUSH32",
      "path": "35",
      "value": "0x7EF8EC374E43C85C540DA8F69DE7866F66E96DEB3AA6B597DF20E0FF3CE0C64"
    },
    "2744": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2746": {
      "op": "DUP3"
    },
    "2747": {
      "op": "ADD"
    },
    "2748": {
      "op": "MSTORE"
    },
    "2749": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2751": {
      "op": "DUP2"
    },
    "2752": {
      "op": "ADD"
    },
    "2753": {
      "op": "DUP4"
    },
    "2754": {
      "op": "SWAP1"
    },
    "2755": {
      "op": "MSTORE"
    },
    "2756": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5025,
        5029
      ],
      "op": "ADDRESS",
      "path": "35"
    },
    "2757": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2759": {
      "op": "DUP3"
    },
    "2760": {
      "op": "ADD"
    },
    "2761": {
      "op": "MSTORE"
    },
    "2762": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "2764": {
      "op": "ADD"
    },
    "2765": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4720,
        5044
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "2767": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4720,
        5044
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "2768": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4720,
        5044
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "2770": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4720,
        5044
      ],
      "op": "DUP2",
      "path": "35"
    },
    "2771": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4720,
        5044
      ],
      "op": "DUP4",
      "path": "35"
    },
    "2772": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4720,
        5044
      ],
      "op": "SUB",
      "path": "35"
    },
    "2773": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4720,
        5044
      ],
      "op": "SUB",
      "path": "35"
    },
    "2774": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4720,
        5044
      ],
      "op": "DUP2",
      "path": "35"
    },
    "2775": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4720,
        5044
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "2776": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4720,
        5044
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "2777": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4720,
        5044
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "2779": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4720,
        5044
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "2780": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4697,
        5054
      ],
      "op": "DUP1",
      "path": "35"
    },
    "2781": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4697,
        5054
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "2782": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4697,
        5054
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "2783": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4697,
        5054
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "2785": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4697,
        5054
      ],
      "op": "ADD",
      "path": "35"
    },
    "2786": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4697,
        5054
      ],
      "op": "KECCAK256",
      "path": "35"
    },
    "2787": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4670,
        5054
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "2788": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4670,
        5054
      ],
      "op": "POP",
      "path": "35"
    },
    "2789": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5065,
        5083
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "2791": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5147,
        5284
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "2793": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5147,
        5284
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "2794": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5147,
        5284
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "2796": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5147,
        5284
      ],
      "op": "ADD",
      "path": "35"
    },
    "2797": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5147,
        5284
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0xB57"
    },
    "2800": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5147,
        5284
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "2801": {
      "op": "PUSH32",
      "value": "0x7374724F6666436861696E566F7465286164647265737320766F7465722C7569"
    },
    "2834": {
      "op": "DUP2"
    },
    "2835": {
      "op": "MSTORE"
    },
    "2836": {
      "op": "PUSH32",
      "value": "0x6E743235362070726F7049642C626F6F6C20737570706F72742C737472696E67"
    },
    "2869": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2871": {
      "op": "DUP3"
    },
    "2872": {
      "op": "ADD"
    },
    "2873": {
      "op": "MSTORE"
    },
    "2874": {
      "op": "PUSH15",
      "value": "0x206A757374696669636174696F6E29"
    },
    "2890": {
      "op": "PUSH1",
      "value": "0x88"
    },
    "2892": {
      "op": "SHL"
    },
    "2893": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2895": {
      "op": "DUP3"
    },
    "2896": {
      "op": "ADD"
    },
    "2897": {
      "op": "MSTORE"
    },
    "2898": {
      "op": "PUSH1",
      "value": "0x4F"
    },
    "2900": {
      "op": "ADD"
    },
    "2901": {
      "op": "SWAP1"
    },
    "2902": {
      "op": "JUMP"
    },
    "2903": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5147,
        5284
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "2904": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5147,
        5284
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "2906": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5147,
        5284
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "2907": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5147,
        5284
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "2909": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5147,
        5284
      ],
      "op": "DUP2",
      "path": "35"
    },
    "2910": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5147,
        5284
      ],
      "op": "DUP4",
      "path": "35"
    },
    "2911": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5147,
        5284
      ],
      "op": "SUB",
      "path": "35"
    },
    "2912": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5147,
        5284
      ],
      "op": "SUB",
      "path": "35"
    },
    "2913": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5147,
        5284
      ],
      "op": "DUP2",
      "path": "35"
    },
    "2914": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5147,
        5284
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "2915": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5147,
        5284
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "2916": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5147,
        5284
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "2918": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5147,
        5284
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "2919": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5137,
        5285
      ],
      "op": "DUP1",
      "path": "35"
    },
    "2920": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5137,
        5285
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "2921": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5137,
        5285
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "2922": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5137,
        5285
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "2924": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5137,
        5285
      ],
      "op": "ADD",
      "path": "35"
    },
    "2925": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5137,
        5285
      ],
      "op": "KECCAK256",
      "path": "35"
    },
    "2926": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5303,
        5309
      ],
      "op": "DUP12",
      "path": "35"
    },
    "2927": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5327,
        5334
      ],
      "op": "DUP12",
      "path": "35"
    },
    "2928": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5352,
        5360
      ],
      "op": "DUP12",
      "path": "35"
    },
    "2929": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5405,
        5419
      ],
      "op": "DUP12",
      "path": "35"
    },
    "2930": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5388,
        5420
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "2932": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5388,
        5420
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "2933": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5388,
        5420
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "2935": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5388,
        5420
      ],
      "op": "ADD",
      "path": "35"
    },
    "2936": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5388,
        5420
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0xB81"
    },
    "2939": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5388,
        5420
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "2940": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5388,
        5420
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "2941": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5388,
        5420
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x2077"
    },
    "2944": {
      "fn": "CLHouse.VotePropOffChain",
      "jump": "i",
      "offset": [
        5388,
        5420
      ],
      "op": "JUMP",
      "path": "35"
    },
    "2945": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5388,
        5420
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "2946": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5388,
        5420
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "2948": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5388,
        5420
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "2949": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5388,
        5420
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "2951": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5388,
        5420
      ],
      "op": "DUP2",
      "path": "35"
    },
    "2952": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5388,
        5420
      ],
      "op": "DUP4",
      "path": "35"
    },
    "2953": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5388,
        5420
      ],
      "op": "SUB",
      "path": "35"
    },
    "2954": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5388,
        5420
      ],
      "op": "SUB",
      "path": "35"
    },
    "2955": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5388,
        5420
      ],
      "op": "DUP2",
      "path": "35"
    },
    "2956": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5388,
        5420
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "2957": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5388,
        5420
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "2958": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5388,
        5420
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "2960": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5388,
        5420
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "2961": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5378,
        5421
      ],
      "op": "DUP1",
      "path": "35"
    },
    "2962": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5378,
        5421
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "2963": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5378,
        5421
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "2964": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5378,
        5421
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "2966": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5378,
        5421
      ],
      "op": "ADD",
      "path": "35"
    },
    "2967": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5378,
        5421
      ],
      "op": "KECCAK256",
      "path": "35"
    },
    "2968": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5109,
        5435
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "2970": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5109,
        5435
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "2971": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5109,
        5435
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "2973": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5109,
        5435
      ],
      "op": "ADD",
      "path": "35"
    },
    "2974": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5109,
        5435
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0xBD4"
    },
    "2977": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5109,
        5435
      ],
      "op": "SWAP6",
      "path": "35"
    },
    "2978": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5109,
        5435
      ],
      "op": "SWAP5",
      "path": "35"
    },
    "2979": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5109,
        5435
      ],
      "op": "SWAP4",
      "path": "35"
    },
    "2980": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5109,
        5435
      ],
      "op": "SWAP3",
      "path": "35"
    },
    "2981": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5109,
        5435
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "2982": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5109,
        5435
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "2983": {
      "op": "SWAP5"
    },
    "2984": {
      "op": "DUP6"
    },
    "2985": {
      "op": "MSTORE"
    },
    "2986": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2988": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2990": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2992": {
      "op": "SHL"
    },
    "2993": {
      "op": "SUB"
    },
    "2994": {
      "op": "SWAP4"
    },
    "2995": {
      "op": "SWAP1"
    },
    "2996": {
      "op": "SWAP4"
    },
    "2997": {
      "op": "AND"
    },
    "2998": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3000": {
      "op": "DUP6"
    },
    "3001": {
      "op": "ADD"
    },
    "3002": {
      "op": "MSTORE"
    },
    "3003": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3005": {
      "op": "DUP5"
    },
    "3006": {
      "op": "ADD"
    },
    "3007": {
      "op": "SWAP2"
    },
    "3008": {
      "op": "SWAP1"
    },
    "3009": {
      "op": "SWAP2"
    },
    "3010": {
      "op": "MSTORE"
    },
    "3011": {
      "op": "ISZERO"
    },
    "3012": {
      "op": "ISZERO"
    },
    "3013": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3015": {
      "op": "DUP4"
    },
    "3016": {
      "op": "ADD"
    },
    "3017": {
      "op": "MSTORE"
    },
    "3018": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3020": {
      "op": "DUP3"
    },
    "3021": {
      "op": "ADD"
    },
    "3022": {
      "op": "MSTORE"
    },
    "3023": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3025": {
      "op": "ADD"
    },
    "3026": {
      "op": "SWAP1"
    },
    "3027": {
      "op": "JUMP"
    },
    "3028": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5109,
        5435
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "3029": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5109,
        5435
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "3031": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5109,
        5435
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "3032": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5109,
        5435
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "3034": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5109,
        5435
      ],
      "op": "DUP2",
      "path": "35"
    },
    "3035": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5109,
        5435
      ],
      "op": "DUP4",
      "path": "35"
    },
    "3036": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5109,
        5435
      ],
      "op": "SUB",
      "path": "35"
    },
    "3037": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5109,
        5435
      ],
      "op": "SUB",
      "path": "35"
    },
    "3038": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5109,
        5435
      ],
      "op": "DUP2",
      "path": "35"
    },
    "3039": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5109,
        5435
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "3040": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5109,
        5435
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "3041": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5109,
        5435
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "3043": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5109,
        5435
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "3044": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5086,
        5445
      ],
      "op": "DUP1",
      "path": "35"
    },
    "3045": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5086,
        5445
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "3046": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5086,
        5445
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "3047": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5086,
        5445
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "3049": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5086,
        5445
      ],
      "op": "ADD",
      "path": "35"
    },
    "3050": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5086,
        5445
      ],
      "op": "KECCAK256",
      "path": "35"
    },
    "3051": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5065,
        5445
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "3052": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5065,
        5445
      ],
      "op": "POP",
      "path": "35"
    },
    "3053": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5464,
        5480
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "3055": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5522,
        5538
      ],
      "op": "DUP3",
      "path": "35"
    },
    "3056": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5540,
        5550
      ],
      "op": "DUP3",
      "path": "35"
    },
    "3057": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5493,
        5551
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "3059": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5493,
        5551
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "3060": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5493,
        5551
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "3062": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5493,
        5551
      ],
      "op": "ADD",
      "path": "35"
    },
    "3063": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5493,
        5551
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0xC17"
    },
    "3066": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5493,
        5551
      ],
      "op": "SWAP3",
      "path": "35"
    },
    "3067": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5493,
        5551
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "3068": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5493,
        5551
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "3069": {
      "op": "PUSH2",
      "value": "0x1901"
    },
    "3072": {
      "op": "PUSH1",
      "value": "0xF0"
    },
    "3074": {
      "op": "SHL"
    },
    "3075": {
      "op": "DUP2"
    },
    "3076": {
      "op": "MSTORE"
    },
    "3077": {
      "op": "PUSH1",
      "value": "0x2"
    },
    "3079": {
      "op": "DUP2"
    },
    "3080": {
      "op": "ADD"
    },
    "3081": {
      "op": "SWAP3"
    },
    "3082": {
      "op": "SWAP1"
    },
    "3083": {
      "op": "SWAP3"
    },
    "3084": {
      "op": "MSTORE"
    },
    "3085": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "3087": {
      "op": "DUP3"
    },
    "3088": {
      "op": "ADD"
    },
    "3089": {
      "op": "MSTORE"
    },
    "3090": {
      "op": "PUSH1",
      "value": "0x42"
    },
    "3092": {
      "op": "ADD"
    },
    "3093": {
      "op": "SWAP1"
    },
    "3094": {
      "op": "JUMP"
    },
    "3095": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5493,
        5551
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "3096": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5493,
        5551
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "3098": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5493,
        5551
      ],
      "op": "DUP1",
      "path": "35"
    },
    "3099": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5493,
        5551
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "3100": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3102": {
      "op": "NOT"
    },
    "3103": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5493,
        5551
      ],
      "op": "DUP2",
      "path": "35"
    },
    "3104": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5493,
        5551
      ],
      "op": "DUP5",
      "path": "35"
    },
    "3105": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5493,
        5551
      ],
      "op": "SUB",
      "path": "35"
    },
    "3106": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5493,
        5551
      ],
      "op": "ADD",
      "path": "35"
    },
    "3107": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5493,
        5551
      ],
      "op": "DUP2",
      "path": "35"
    },
    "3108": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5493,
        5551
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "3109": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5493,
        5551
      ],
      "op": "DUP3",
      "path": "35"
    },
    "3110": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5493,
        5551
      ],
      "op": "DUP3",
      "path": "35"
    },
    "3111": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5493,
        5551
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "3112": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5483,
        5552
      ],
      "op": "DUP1",
      "path": "35"
    },
    "3113": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5483,
        5552
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "3114": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5493,
        5551
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "3116": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5483,
        5552
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "3117": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5483,
        5552
      ],
      "op": "DUP3",
      "path": "35"
    },
    "3118": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5483,
        5552
      ],
      "op": "ADD",
      "path": "35"
    },
    "3119": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5483,
        5552
      ],
      "op": "KECCAK256",
      "path": "35"
    },
    "3120": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6094,
        6108
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "3122": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "DUP1",
      "path": "35"
    },
    "3123": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "DUP6",
      "path": "35"
    },
    "3124": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "3125": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "3126": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "DUP5",
      "path": "35"
    },
    "3127": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "ADD",
      "path": "35"
    },
    "3128": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "DUP1",
      "path": "35"
    },
    "3129": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "DUP5",
      "path": "35"
    },
    "3130": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "3131": {
      "op": "DUP2"
    },
    "3132": {
      "op": "SWAP1"
    },
    "3133": {
      "op": "MSTORE"
    },
    "3134": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "3136": {
      "op": "DUP11"
    },
    "3137": {
      "op": "AND"
    },
    "3138": {
      "op": "SWAP3"
    },
    "3139": {
      "op": "DUP5"
    },
    "3140": {
      "op": "ADD"
    },
    "3141": {
      "op": "SWAP3"
    },
    "3142": {
      "op": "SWAP1"
    },
    "3143": {
      "op": "SWAP3"
    },
    "3144": {
      "op": "MSTORE"
    },
    "3145": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3147": {
      "op": "DUP4"
    },
    "3148": {
      "op": "ADD"
    },
    "3149": {
      "op": "DUP12"
    },
    "3150": {
      "op": "SWAP1"
    },
    "3151": {
      "op": "MSTORE"
    },
    "3152": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3154": {
      "op": "DUP4"
    },
    "3155": {
      "op": "ADD"
    },
    "3156": {
      "op": "DUP11"
    },
    "3157": {
      "op": "SWAP1"
    },
    "3158": {
      "op": "MSTORE"
    },
    "3159": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5483,
        5552
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "3160": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        5483,
        5552
      ],
      "op": "SWAP3",
      "path": "35"
    },
    "3161": {
      "op": "POP"
    },
    "3162": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6094,
        6108
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "3163": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x1"
    },
    "3165": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "3166": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3168": {
      "op": "ADD"
    },
    "3169": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "3171": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "3173": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "3174": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "3176": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "DUP2",
      "path": "35"
    },
    "3177": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "SUB",
      "path": "35"
    },
    "3178": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "3179": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "DUP1",
      "path": "35"
    },
    "3180": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "DUP5",
      "path": "35"
    },
    "3181": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "SUB",
      "path": "35"
    },
    "3182": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "3183": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "DUP6",
      "path": "35"
    },
    "3184": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "GAS",
      "path": "35"
    },
    "3185": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "STATICCALL",
      "path": "35"
    },
    "3186": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "ISZERO",
      "path": "35"
    },
    "3187": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "DUP1",
      "path": "35"
    },
    "3188": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "ISZERO",
      "path": "35"
    },
    "3189": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0xC82"
    },
    "3192": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "3193": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "3194": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "3196": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "DUP1",
      "path": "35"
    },
    "3197": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "RETURNDATACOPY",
      "path": "35"
    },
    "3198": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "3199": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "3201": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "REVERT",
      "path": "35"
    },
    "3202": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "3203": {
      "op": "POP"
    },
    "3204": {
      "op": "POP"
    },
    "3205": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "3207": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "3208": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3210": {
      "op": "NOT"
    },
    "3211": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "ADD",
      "path": "35"
    },
    "3212": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "3213": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6111,
        6153
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "3214": {
      "op": "POP"
    },
    "3215": {
      "op": "POP"
    },
    "3216": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3218": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3220": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3222": {
      "op": "SHL"
    },
    "3223": {
      "op": "SUB"
    },
    "3224": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6173,
        6193
      ],
      "op": "DUP2",
      "path": "35",
      "statement": 4
    },
    "3225": {
      "branch": 23,
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6173,
        6193
      ],
      "op": "AND",
      "path": "35"
    },
    "3226": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6164,
        6223
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0xCEA"
    },
    "3229": {
      "branch": 23,
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6164,
        6223
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "3230": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6164,
        6223
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "3232": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6164,
        6223
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "3233": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3237": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3239": {
      "op": "SHL"
    },
    "3240": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6164,
        6223
      ],
      "op": "DUP2",
      "path": "35"
    },
    "3241": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6164,
        6223
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "3242": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3244": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6164,
        6223
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x4"
    },
    "3246": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6164,
        6223
      ],
      "op": "DUP3",
      "path": "35"
    },
    "3247": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6164,
        6223
      ],
      "op": "ADD",
      "path": "35"
    },
    "3248": {
      "op": "MSTORE"
    },
    "3249": {
      "op": "PUSH1",
      "value": "0x18"
    },
    "3251": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3253": {
      "op": "DUP3"
    },
    "3254": {
      "op": "ADD"
    },
    "3255": {
      "op": "MSTORE"
    },
    "3256": {
      "op": "PUSH32",
      "value": "0x45434453413A20696E76616C6964207369676E61747572650000000000000000"
    },
    "3289": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3291": {
      "op": "DUP3"
    },
    "3292": {
      "op": "ADD"
    },
    "3293": {
      "op": "MSTORE"
    },
    "3294": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3296": {
      "op": "ADD"
    },
    "3297": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6164,
        6223
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "3298": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6164,
        6223
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "3300": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6164,
        6223
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "3301": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6164,
        6223
      ],
      "op": "DUP1",
      "path": "35"
    },
    "3302": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6164,
        6223
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "3303": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6164,
        6223
      ],
      "op": "SUB",
      "path": "35"
    },
    "3304": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6164,
        6223
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "3305": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6164,
        6223
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "35"
    },
    "3306": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6164,
        6223
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "3307": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6252,
        6258
      ],
      "op": "DUP13",
      "path": "35",
      "statement": 5
    },
    "3308": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3310": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3312": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3314": {
      "op": "SHL"
    },
    "3315": {
      "op": "SUB"
    },
    "3316": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6242,
        6258
      ],
      "op": "AND",
      "path": "35"
    },
    "3317": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6242,
        6248
      ],
      "op": "DUP2",
      "path": "35"
    },
    "3318": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3320": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3322": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3324": {
      "op": "SHL"
    },
    "3325": {
      "op": "SUB"
    },
    "3326": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6242,
        6258
      ],
      "op": "AND",
      "path": "35"
    },
    "3327": {
      "branch": 24,
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6242,
        6258
      ],
      "op": "EQ",
      "path": "35"
    },
    "3328": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6233,
        6299
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0xD57"
    },
    "3331": {
      "branch": 24,
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6233,
        6299
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "3332": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6233,
        6299
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "3334": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6233,
        6299
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "3335": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3339": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3341": {
      "op": "SHL"
    },
    "3342": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6233,
        6299
      ],
      "op": "DUP2",
      "path": "35"
    },
    "3343": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6233,
        6299
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "3344": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3346": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6233,
        6299
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x4"
    },
    "3348": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6233,
        6299
      ],
      "op": "DUP3",
      "path": "35"
    },
    "3349": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6233,
        6299
      ],
      "op": "ADD",
      "path": "35"
    },
    "3350": {
      "op": "MSTORE"
    },
    "3351": {
      "op": "PUSH1",
      "value": "0x23"
    },
    "3353": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3355": {
      "op": "DUP3"
    },
    "3356": {
      "op": "ADD"
    },
    "3357": {
      "op": "MSTORE"
    },
    "3358": {
      "op": "PUSH32",
      "value": "0x566F746550726F704F6666436861696E3A20696E76616C6964207369676E6174"
    },
    "3391": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3393": {
      "op": "DUP3"
    },
    "3394": {
      "op": "ADD"
    },
    "3395": {
      "op": "MSTORE"
    },
    "3396": {
      "op": "PUSH3",
      "value": "0x757265"
    },
    "3400": {
      "op": "PUSH1",
      "value": "0xE8"
    },
    "3402": {
      "op": "SHL"
    },
    "3403": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3405": {
      "op": "DUP3"
    },
    "3406": {
      "op": "ADD"
    },
    "3407": {
      "op": "MSTORE"
    },
    "3408": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "3410": {
      "op": "ADD"
    },
    "3411": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6233,
        6299
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0xCE1"
    },
    "3414": {
      "op": "JUMP"
    },
    "3415": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6233,
        6299
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "3416": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6328,
        6340
      ],
      "op": "PUSH1",
      "path": "35",
      "statement": 6,
      "value": "0xB"
    },
    "3418": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6328,
        6347
      ],
      "op": "SLOAD",
      "path": "35"
    },
    "3419": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6318,
        6347
      ],
      "op": "DUP13",
      "path": "35"
    },
    "3420": {
      "branch": 25,
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6318,
        6347
      ],
      "op": "LT",
      "path": "35"
    },
    "3421": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6309,
        6377
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0xDA8"
    },
    "3424": {
      "branch": 25,
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6309,
        6377
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "3425": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6309,
        6377
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "3427": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6309,
        6377
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "3428": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3432": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3434": {
      "op": "SHL"
    },
    "3435": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6309,
        6377
      ],
      "op": "DUP2",
      "path": "35"
    },
    "3436": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6309,
        6377
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "3437": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3439": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6309,
        6377
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x4"
    },
    "3441": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6309,
        6377
      ],
      "op": "DUP3",
      "path": "35"
    },
    "3442": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6309,
        6377
      ],
      "op": "ADD",
      "path": "35"
    },
    "3443": {
      "op": "MSTORE"
    },
    "3444": {
      "op": "PUSH1",
      "value": "0x17"
    },
    "3446": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3448": {
      "op": "DUP3"
    },
    "3449": {
      "op": "ADD"
    },
    "3450": {
      "op": "MSTORE"
    },
    "3451": {
      "op": "PUSH32",
      "value": "0x50726F706F73616C20646F6573206E6F74206578697374000000000000000000"
    },
    "3484": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3486": {
      "op": "DUP3"
    },
    "3487": {
      "op": "ADD"
    },
    "3488": {
      "op": "MSTORE"
    },
    "3489": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3491": {
      "op": "ADD"
    },
    "3492": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6309,
        6377
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0xCE1"
    },
    "3495": {
      "op": "JUMP"
    },
    "3496": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6309,
        6377
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "3497": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6405,
        6417
      ],
      "op": "PUSH1",
      "path": "35",
      "statement": 7,
      "value": "0xB"
    },
    "3499": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6419,
        6426
      ],
      "op": "DUP13",
      "path": "35"
    },
    "3500": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6405,
        6428
      ],
      "op": "DUP2",
      "path": "35"
    },
    "3501": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6405,
        6428
      ],
      "op": "SLOAD",
      "path": "35"
    },
    "3502": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6405,
        6428
      ],
      "op": "DUP2",
      "path": "35"
    },
    "3503": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6405,
        6428
      ],
      "op": "LT",
      "path": "35"
    },
    "3504": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6405,
        6428
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0xDBB"
    },
    "3507": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6405,
        6428
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "3508": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6405,
        6428
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0xDBB"
    },
    "3511": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6405,
        6428
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x2138"
    },
    "3514": {
      "fn": "CLHouse.VotePropOffChain",
      "jump": "i",
      "offset": [
        6405,
        6428
      ],
      "op": "JUMP",
      "path": "35"
    },
    "3515": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6405,
        6428
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "3516": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6405,
        6428
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "3518": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6405,
        6428
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "3519": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6405,
        6428
      ],
      "op": "DUP3",
      "path": "35"
    },
    "3520": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6405,
        6428
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "3521": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6405,
        6428
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "3523": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6405,
        6428
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "3524": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6405,
        6428
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "3525": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6405,
        6428
      ],
      "op": "KECCAK256",
      "path": "35"
    },
    "3526": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6405,
        6428
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x5"
    },
    "3528": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6405,
        6428
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "3529": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6405,
        6428
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "3530": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6405,
        6428
      ],
      "op": "MUL",
      "path": "35"
    },
    "3531": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6405,
        6428
      ],
      "op": "ADD",
      "path": "35"
    },
    "3532": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6405,
        6437
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x3"
    },
    "3534": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6405,
        6437
      ],
      "op": "ADD",
      "path": "35"
    },
    "3535": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6405,
        6437
      ],
      "op": "SLOAD",
      "path": "35"
    },
    "3536": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6405,
        6437
      ],
      "op": "PUSH3",
      "path": "35",
      "value": "0x10000"
    },
    "3540": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6405,
        6437
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "3541": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6405,
        6437
      ],
      "op": "DIV",
      "path": "35"
    },
    "3542": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6405,
        6437
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0xFF"
    },
    "3544": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6405,
        6437
      ],
      "op": "AND",
      "path": "35"
    },
    "3545": {
      "branch": 26,
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6396,
        6437
      ],
      "op": "ISZERO",
      "path": "35"
    },
    "3546": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6387,
        6469
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0xE25"
    },
    "3549": {
      "branch": 26,
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6387,
        6469
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "3550": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6387,
        6469
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "3552": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6387,
        6469
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "3553": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3557": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3559": {
      "op": "SHL"
    },
    "3560": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6387,
        6469
      ],
      "op": "DUP2",
      "path": "35"
    },
    "3561": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6387,
        6469
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "3562": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3564": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6387,
        6469
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x4"
    },
    "3566": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6387,
        6469
      ],
      "op": "DUP3",
      "path": "35"
    },
    "3567": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6387,
        6469
      ],
      "op": "ADD",
      "path": "35"
    },
    "3568": {
      "op": "MSTORE"
    },
    "3569": {
      "op": "PUSH1",
      "value": "0x19"
    },
    "3571": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3573": {
      "op": "DUP3"
    },
    "3574": {
      "op": "ADD"
    },
    "3575": {
      "op": "MSTORE"
    },
    "3576": {
      "op": "PUSH32",
      "value": "0x50726F706F73616C20616C726561647920657865637574656400000000000000"
    },
    "3609": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3611": {
      "op": "DUP3"
    },
    "3612": {
      "op": "ADD"
    },
    "3613": {
      "op": "MSTORE"
    },
    "3614": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3616": {
      "op": "ADD"
    },
    "3617": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6387,
        6469
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0xCE1"
    },
    "3620": {
      "op": "JUMP"
    },
    "3621": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6387,
        6469
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "3622": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6497,
        6509
      ],
      "op": "PUSH1",
      "path": "35",
      "statement": 8,
      "value": "0xB"
    },
    "3624": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6511,
        6518
      ],
      "op": "DUP13",
      "path": "35"
    },
    "3625": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6497,
        6520
      ],
      "op": "DUP2",
      "path": "35"
    },
    "3626": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6497,
        6520
      ],
      "op": "SLOAD",
      "path": "35"
    },
    "3627": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6497,
        6520
      ],
      "op": "DUP2",
      "path": "35"
    },
    "3628": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6497,
        6520
      ],
      "op": "LT",
      "path": "35"
    },
    "3629": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6497,
        6520
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0xE38"
    },
    "3632": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6497,
        6520
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "3633": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6497,
        6520
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0xE38"
    },
    "3636": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6497,
        6520
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x2138"
    },
    "3639": {
      "fn": "CLHouse.VotePropOffChain",
      "jump": "i",
      "offset": [
        6497,
        6520
      ],
      "op": "JUMP",
      "path": "35"
    },
    "3640": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6497,
        6520
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "3641": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6497,
        6520
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "3643": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6497,
        6520
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "3644": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6497,
        6520
      ],
      "op": "DUP3",
      "path": "35"
    },
    "3645": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6497,
        6520
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "3646": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6497,
        6520
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "3648": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6497,
        6520
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "3649": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6497,
        6520
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "3650": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6497,
        6520
      ],
      "op": "KECCAK256",
      "path": "35"
    },
    "3651": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6497,
        6520
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x5"
    },
    "3653": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6497,
        6520
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "3654": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6497,
        6520
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "3655": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6497,
        6520
      ],
      "op": "MUL",
      "path": "35"
    },
    "3656": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6497,
        6520
      ],
      "op": "ADD",
      "path": "35"
    },
    "3657": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6497,
        6529
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x3"
    },
    "3659": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6497,
        6529
      ],
      "op": "ADD",
      "path": "35"
    },
    "3660": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6497,
        6529
      ],
      "op": "SLOAD",
      "path": "35"
    },
    "3661": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6497,
        6529
      ],
      "op": "PUSH4",
      "path": "35",
      "value": "0x1000000"
    },
    "3666": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6497,
        6529
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "3667": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6497,
        6529
      ],
      "op": "DIV",
      "path": "35"
    },
    "3668": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6497,
        6529
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0xFF"
    },
    "3670": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6497,
        6529
      ],
      "op": "AND",
      "path": "35"
    },
    "3671": {
      "branch": 27,
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6488,
        6529
      ],
      "op": "ISZERO",
      "path": "35"
    },
    "3672": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6479,
        6557
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0xE9B"
    },
    "3675": {
      "branch": 27,
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6479,
        6557
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "3676": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6479,
        6557
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "3678": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6479,
        6557
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "3679": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3683": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3685": {
      "op": "SHL"
    },
    "3686": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6479,
        6557
      ],
      "op": "DUP2",
      "path": "35"
    },
    "3687": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6479,
        6557
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "3688": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3690": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6479,
        6557
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x4"
    },
    "3692": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6479,
        6557
      ],
      "op": "DUP3",
      "path": "35"
    },
    "3693": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6479,
        6557
      ],
      "op": "ADD",
      "path": "35"
    },
    "3694": {
      "op": "MSTORE"
    },
    "3695": {
      "op": "PUSH1",
      "value": "0x15"
    },
    "3697": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3699": {
      "op": "DUP3"
    },
    "3700": {
      "op": "ADD"
    },
    "3701": {
      "op": "MSTORE"
    },
    "3702": {
      "op": "PUSH21",
      "value": "0x141C9BDC1BDCD85B081DD85CC81C995A9958DD1959"
    },
    "3724": {
      "op": "PUSH1",
      "value": "0x5A"
    },
    "3726": {
      "op": "SHL"
    },
    "3727": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3729": {
      "op": "DUP3"
    },
    "3730": {
      "op": "ADD"
    },
    "3731": {
      "op": "MSTORE"
    },
    "3732": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3734": {
      "op": "ADD"
    },
    "3735": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6479,
        6557
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0xCE1"
    },
    "3738": {
      "op": "JUMP"
    },
    "3739": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6479,
        6557
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "3740": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6585
      ],
      "op": "PUSH1",
      "path": "35",
      "statement": 9,
      "value": "0xA"
    },
    "3742": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6596
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "3744": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6587,
        6594
      ],
      "op": "DUP14",
      "path": "35"
    },
    "3745": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6596
      ],
      "op": "DUP2",
      "path": "35"
    },
    "3746": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6596
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "3747": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6596
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "3749": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6596
      ],
      "op": "ADD",
      "path": "35"
    },
    "3750": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6596
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "3751": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6596
      ],
      "op": "DUP2",
      "path": "35"
    },
    "3752": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6596
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "3753": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6596
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "3755": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6596
      ],
      "op": "ADD",
      "path": "35"
    },
    "3756": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6596
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "3758": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6596
      ],
      "op": "KECCAK256",
      "path": "35"
    },
    "3759": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6606
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "3761": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6598,
        6604
      ],
      "op": "DUP15",
      "path": "35"
    },
    "3762": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3764": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3766": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3768": {
      "op": "SHL"
    },
    "3769": {
      "op": "SUB"
    },
    "3770": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6606
      ],
      "op": "AND",
      "path": "35"
    },
    "3771": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3773": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3775": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3777": {
      "op": "SHL"
    },
    "3778": {
      "op": "SUB"
    },
    "3779": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6606
      ],
      "op": "AND",
      "path": "35"
    },
    "3780": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6606
      ],
      "op": "DUP2",
      "path": "35"
    },
    "3781": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6606
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "3782": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6606
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "3784": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6606
      ],
      "op": "ADD",
      "path": "35"
    },
    "3785": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6606
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "3786": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6606
      ],
      "op": "DUP2",
      "path": "35"
    },
    "3787": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6606
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "3788": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6606
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "3790": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6606
      ],
      "op": "ADD",
      "path": "35"
    },
    "3791": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6606
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "3793": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6606
      ],
      "op": "KECCAK256",
      "path": "35"
    },
    "3794": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6612
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "3796": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6612
      ],
      "op": "ADD",
      "path": "35"
    },
    "3797": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6612
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "3799": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6612
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "3800": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6612
      ],
      "op": "SLOAD",
      "path": "35"
    },
    "3801": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6612
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "3802": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6612
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x100"
    },
    "3805": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6612
      ],
      "op": "EXP",
      "path": "35"
    },
    "3806": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6612
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "3807": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6612
      ],
      "op": "DIV",
      "path": "35"
    },
    "3808": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6612
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0xFF"
    },
    "3810": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6577,
        6612
      ],
      "op": "AND",
      "path": "35"
    },
    "3811": {
      "branch": 28,
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6576,
        6612
      ],
      "op": "ISZERO",
      "path": "35"
    },
    "3812": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6567,
        6663
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0xF44"
    },
    "3815": {
      "branch": 28,
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6567,
        6663
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "3816": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6567,
        6663
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "3818": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6567,
        6663
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "3819": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3823": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3825": {
      "op": "SHL"
    },
    "3826": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6567,
        6663
      ],
      "op": "DUP2",
      "path": "35"
    },
    "3827": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6567,
        6663
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "3828": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3830": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6567,
        6663
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x4"
    },
    "3832": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6567,
        6663
      ],
      "op": "DUP3",
      "path": "35"
    },
    "3833": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6567,
        6663
      ],
      "op": "ADD",
      "path": "35"
    },
    "3834": {
      "op": "MSTORE"
    },
    "3835": {
      "op": "PUSH1",
      "value": "0x2C"
    },
    "3837": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3839": {
      "op": "DUP3"
    },
    "3840": {
      "op": "ADD"
    },
    "3841": {
      "op": "MSTORE"
    },
    "3842": {
      "op": "PUSH32",
      "value": "0x557365722068617665206120766F74652072656769737472656420666F722074"
    },
    "3875": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3877": {
      "op": "DUP3"
    },
    "3878": {
      "op": "ADD"
    },
    "3879": {
      "op": "MSTORE"
    },
    "3880": {
      "op": "PUSH12",
      "value": "0x1A1A5CC81C1C9BDC1BDCD85B"
    },
    "3893": {
      "op": "PUSH1",
      "value": "0xA2"
    },
    "3895": {
      "op": "SHL"
    },
    "3896": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3898": {
      "op": "DUP3"
    },
    "3899": {
      "op": "ADD"
    },
    "3900": {
      "op": "MSTORE"
    },
    "3901": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "3903": {
      "op": "ADD"
    },
    "3904": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6567,
        6663
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0xCE1"
    },
    "3907": {
      "op": "JUMP"
    },
    "3908": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6567,
        6663
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "3909": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6700,
        6712
      ],
      "op": "PUSH1",
      "path": "35",
      "statement": 10,
      "value": "0xB"
    },
    "3911": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6714,
        6721
      ],
      "op": "DUP13",
      "path": "35"
    },
    "3912": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6700,
        6723
      ],
      "op": "DUP2",
      "path": "35"
    },
    "3913": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6700,
        6723
      ],
      "op": "SLOAD",
      "path": "35"
    },
    "3914": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6700,
        6723
      ],
      "op": "DUP2",
      "path": "35"
    },
    "3915": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6700,
        6723
      ],
      "op": "LT",
      "path": "35"
    },
    "3916": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6700,
        6723
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0xF57"
    },
    "3919": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6700,
        6723
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "3920": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6700,
        6723
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0xF57"
    },
    "3923": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6700,
        6723
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x2138"
    },
    "3926": {
      "fn": "CLHouse.VotePropOffChain",
      "jump": "i",
      "offset": [
        6700,
        6723
      ],
      "op": "JUMP",
      "path": "35"
    },
    "3927": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6700,
        6723
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "3928": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6700,
        6723
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "3929": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6700,
        6723
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "3931": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6700,
        6723
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "3932": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6700,
        6723
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "3934": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6700,
        6723
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "3936": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6700,
        6723
      ],
      "op": "KECCAK256",
      "path": "35"
    },
    "3937": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6700,
        6723
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "3938": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6700,
        6723
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x5"
    },
    "3940": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6700,
        6723
      ],
      "op": "MUL",
      "path": "35"
    },
    "3941": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6700,
        6723
      ],
      "op": "ADD",
      "path": "35"
    },
    "3942": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6700,
        6732
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x4"
    },
    "3944": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6700,
        6732
      ],
      "op": "ADD",
      "path": "35"
    },
    "3945": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6700,
        6732
      ],
      "op": "SLOAD",
      "path": "35"
    },
    "3946": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6682,
        6697
      ],
      "op": "TIMESTAMP",
      "path": "35"
    },
    "3947": {
      "branch": 29,
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6682,
        6732
      ],
      "op": "LT",
      "path": "35"
    },
    "3948": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6673,
        6756
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0xFAB"
    },
    "3951": {
      "branch": 29,
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6673,
        6756
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "3952": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6673,
        6756
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "3954": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6673,
        6756
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "3955": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3959": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3961": {
      "op": "SHL"
    },
    "3962": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6673,
        6756
      ],
      "op": "DUP2",
      "path": "35"
    },
    "3963": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6673,
        6756
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "3964": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3966": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6673,
        6756
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x4"
    },
    "3968": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6673,
        6756
      ],
      "op": "DUP3",
      "path": "35"
    },
    "3969": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6673,
        6756
      ],
      "op": "ADD",
      "path": "35"
    },
    "3970": {
      "op": "MSTORE"
    },
    "3971": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "3973": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3975": {
      "op": "DUP3"
    },
    "3976": {
      "op": "ADD"
    },
    "3977": {
      "op": "MSTORE"
    },
    "3978": {
      "op": "PUSH17",
      "value": "0x50726F706F73616C20646561646C696E65"
    },
    "3996": {
      "op": "PUSH1",
      "value": "0x78"
    },
    "3998": {
      "op": "SHL"
    },
    "3999": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "4001": {
      "op": "DUP3"
    },
    "4002": {
      "op": "ADD"
    },
    "4003": {
      "op": "MSTORE"
    },
    "4004": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "4006": {
      "op": "ADD"
    },
    "4007": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6673,
        6756
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0xCE1"
    },
    "4010": {
      "op": "JUMP"
    },
    "4011": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6673,
        6756
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "4012": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6809,
        6817
      ],
      "op": "DUP11",
      "path": "35",
      "statement": 11
    },
    "4013": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6775
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0xA"
    },
    "4015": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6786
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "4017": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6777,
        6784
      ],
      "op": "DUP15",
      "path": "35"
    },
    "4018": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6786
      ],
      "op": "DUP2",
      "path": "35"
    },
    "4019": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6786
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "4020": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6786
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "4022": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6786
      ],
      "op": "ADD",
      "path": "35"
    },
    "4023": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6786
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4024": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6786
      ],
      "op": "DUP2",
      "path": "35"
    },
    "4025": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6786
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "4026": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6786
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "4028": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6786
      ],
      "op": "ADD",
      "path": "35"
    },
    "4029": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6786
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "4031": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6786
      ],
      "op": "KECCAK256",
      "path": "35"
    },
    "4032": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6796
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "4034": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6788,
        6794
      ],
      "op": "DUP16",
      "path": "35"
    },
    "4035": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4037": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4039": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4041": {
      "op": "SHL"
    },
    "4042": {
      "op": "SUB"
    },
    "4043": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6796
      ],
      "op": "AND",
      "path": "35"
    },
    "4044": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4046": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4048": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4050": {
      "op": "SHL"
    },
    "4051": {
      "op": "SUB"
    },
    "4052": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6796
      ],
      "op": "AND",
      "path": "35"
    },
    "4053": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6796
      ],
      "op": "DUP2",
      "path": "35"
    },
    "4054": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6796
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "4055": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6796
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "4057": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6796
      ],
      "op": "ADD",
      "path": "35"
    },
    "4058": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6796
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4059": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6796
      ],
      "op": "DUP2",
      "path": "35"
    },
    "4060": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6796
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "4061": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6796
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "4063": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6796
      ],
      "op": "ADD",
      "path": "35"
    },
    "4064": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6796
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "4066": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6796
      ],
      "op": "KECCAK256",
      "path": "35"
    },
    "4067": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6806
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "4069": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6806
      ],
      "op": "ADD",
      "path": "35"
    },
    "4070": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6806
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x1"
    },
    "4072": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6817
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x100"
    },
    "4075": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6817
      ],
      "op": "EXP",
      "path": "35"
    },
    "4076": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6817
      ],
      "op": "DUP2",
      "path": "35"
    },
    "4077": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6817
      ],
      "op": "SLOAD",
      "path": "35"
    },
    "4078": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6817
      ],
      "op": "DUP2",
      "path": "35"
    },
    "4079": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6817
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0xFF"
    },
    "4081": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6817
      ],
      "op": "MUL",
      "path": "35"
    },
    "4082": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6817
      ],
      "op": "NOT",
      "path": "35"
    },
    "4083": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6817
      ],
      "op": "AND",
      "path": "35"
    },
    "4084": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6817
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4085": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6817
      ],
      "op": "DUP4",
      "path": "35"
    },
    "4086": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6817
      ],
      "op": "ISZERO",
      "path": "35"
    },
    "4087": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6817
      ],
      "op": "ISZERO",
      "path": "35"
    },
    "4088": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6817
      ],
      "op": "MUL",
      "path": "35"
    },
    "4089": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6817
      ],
      "op": "OR",
      "path": "35"
    },
    "4090": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6817
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4091": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6817
      ],
      "op": "SSTORE",
      "path": "35"
    },
    "4092": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6767,
        6817
      ],
      "op": "POP",
      "path": "35"
    },
    "4093": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6873,
        6887
      ],
      "op": "DUP10",
      "path": "35",
      "statement": 12
    },
    "4094": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6835
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0xA"
    },
    "4096": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6846
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "4098": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6837,
        6844
      ],
      "op": "DUP15",
      "path": "35"
    },
    "4099": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6846
      ],
      "op": "DUP2",
      "path": "35"
    },
    "4100": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6846
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "4101": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6846
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "4103": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6846
      ],
      "op": "ADD",
      "path": "35"
    },
    "4104": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6846
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4105": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6846
      ],
      "op": "DUP2",
      "path": "35"
    },
    "4106": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6846
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "4107": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6846
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "4109": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6846
      ],
      "op": "ADD",
      "path": "35"
    },
    "4110": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6846
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "4112": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6846
      ],
      "op": "KECCAK256",
      "path": "35"
    },
    "4113": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6856
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "4115": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6848,
        6854
      ],
      "op": "DUP16",
      "path": "35"
    },
    "4116": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4118": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4120": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4122": {
      "op": "SHL"
    },
    "4123": {
      "op": "SUB"
    },
    "4124": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6856
      ],
      "op": "AND",
      "path": "35"
    },
    "4125": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4127": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4129": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4131": {
      "op": "SHL"
    },
    "4132": {
      "op": "SUB"
    },
    "4133": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6856
      ],
      "op": "AND",
      "path": "35"
    },
    "4134": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6856
      ],
      "op": "DUP2",
      "path": "35"
    },
    "4135": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6856
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "4136": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6856
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "4138": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6856
      ],
      "op": "ADD",
      "path": "35"
    },
    "4139": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6856
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4140": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6856
      ],
      "op": "DUP2",
      "path": "35"
    },
    "4141": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6856
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "4142": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6856
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "4144": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6856
      ],
      "op": "ADD",
      "path": "35"
    },
    "4145": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6856
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "4147": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6856
      ],
      "op": "KECCAK256",
      "path": "35"
    },
    "4148": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6870
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x1"
    },
    "4150": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6870
      ],
      "op": "ADD",
      "path": "35"
    },
    "4151": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6887
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4152": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6887
      ],
      "op": "DUP1",
      "path": "35"
    },
    "4153": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6887
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "4154": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6887
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4155": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6887
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "4157": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6887
      ],
      "op": "ADD",
      "path": "35"
    },
    "4158": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6887
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4159": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6887
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x1049"
    },
    "4162": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6887
      ],
      "op": "SWAP3",
      "path": "35"
    },
    "4163": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6887
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "4164": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6887
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4165": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6887
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x1916"
    },
    "4168": {
      "fn": "CLHouse.VotePropOffChain",
      "jump": "i",
      "offset": [
        6827,
        6887
      ],
      "op": "JUMP",
      "path": "35"
    },
    "4169": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6887
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "4170": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6827,
        6887
      ],
      "op": "POP",
      "path": "35"
    },
    "4171": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6935,
        6939
      ],
      "op": "PUSH1",
      "path": "35",
      "statement": 13,
      "value": "0x1"
    },
    "4173": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6905
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0xA"
    },
    "4175": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6916
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "4177": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6907,
        6914
      ],
      "op": "DUP15",
      "path": "35"
    },
    "4178": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6916
      ],
      "op": "DUP2",
      "path": "35"
    },
    "4179": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6916
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "4180": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6916
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "4182": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6916
      ],
      "op": "ADD",
      "path": "35"
    },
    "4183": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6916
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4184": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6916
      ],
      "op": "DUP2",
      "path": "35"
    },
    "4185": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6916
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "4186": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6916
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "4188": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6916
      ],
      "op": "ADD",
      "path": "35"
    },
    "4189": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6916
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "4191": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6916
      ],
      "op": "KECCAK256",
      "path": "35"
    },
    "4192": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6926
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "4194": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6918,
        6924
      ],
      "op": "DUP16",
      "path": "35"
    },
    "4195": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4197": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4199": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4201": {
      "op": "SHL"
    },
    "4202": {
      "op": "SUB"
    },
    "4203": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6926
      ],
      "op": "AND",
      "path": "35"
    },
    "4204": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4206": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4208": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4210": {
      "op": "SHL"
    },
    "4211": {
      "op": "SUB"
    },
    "4212": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6926
      ],
      "op": "AND",
      "path": "35"
    },
    "4213": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6926
      ],
      "op": "DUP2",
      "path": "35"
    },
    "4214": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6926
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "4215": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6926
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "4217": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6926
      ],
      "op": "ADD",
      "path": "35"
    },
    "4218": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6926
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4219": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6926
      ],
      "op": "DUP2",
      "path": "35"
    },
    "4220": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6926
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "4221": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6926
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "4223": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6926
      ],
      "op": "ADD",
      "path": "35"
    },
    "4224": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6926
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "4226": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6926
      ],
      "op": "KECCAK256",
      "path": "35"
    },
    "4227": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6932
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "4229": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6932
      ],
      "op": "ADD",
      "path": "35"
    },
    "4230": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6932
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "4232": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6939
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x100"
    },
    "4235": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6939
      ],
      "op": "EXP",
      "path": "35"
    },
    "4236": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6939
      ],
      "op": "DUP2",
      "path": "35"
    },
    "4237": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6939
      ],
      "op": "SLOAD",
      "path": "35"
    },
    "4238": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6939
      ],
      "op": "DUP2",
      "path": "35"
    },
    "4239": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6939
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0xFF"
    },
    "4241": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6939
      ],
      "op": "MUL",
      "path": "35"
    },
    "4242": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6939
      ],
      "op": "NOT",
      "path": "35"
    },
    "4243": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6939
      ],
      "op": "AND",
      "path": "35"
    },
    "4244": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6939
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4245": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6939
      ],
      "op": "DUP4",
      "path": "35"
    },
    "4246": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6939
      ],
      "op": "ISZERO",
      "path": "35"
    },
    "4247": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6939
      ],
      "op": "ISZERO",
      "path": "35"
    },
    "4248": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6939
      ],
      "op": "MUL",
      "path": "35"
    },
    "4249": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6939
      ],
      "op": "OR",
      "path": "35"
    },
    "4250": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6939
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4251": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6939
      ],
      "op": "SSTORE",
      "path": "35"
    },
    "4252": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6897,
        6939
      ],
      "op": "POP",
      "path": "35"
    },
    "4253": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6962
      ],
      "op": "PUSH1",
      "path": "35",
      "statement": 14,
      "value": "0xB"
    },
    "4255": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6964,
        6971
      ],
      "op": "DUP13",
      "path": "35"
    },
    "4256": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6973
      ],
      "op": "DUP2",
      "path": "35"
    },
    "4257": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6973
      ],
      "op": "SLOAD",
      "path": "35"
    },
    "4258": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6973
      ],
      "op": "DUP2",
      "path": "35"
    },
    "4259": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6973
      ],
      "op": "LT",
      "path": "35"
    },
    "4260": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6973
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x10AF"
    },
    "4263": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6973
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "4264": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6973
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x10AF"
    },
    "4267": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6973
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x2138"
    },
    "4270": {
      "fn": "CLHouse.VotePropOffChain",
      "jump": "i",
      "offset": [
        6950,
        6973
      ],
      "op": "JUMP",
      "path": "35"
    },
    "4271": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6973
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "4272": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6973
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "4274": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6973
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "4275": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6973
      ],
      "op": "DUP3",
      "path": "35"
    },
    "4276": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6973
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "4277": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6973
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "4279": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6973
      ],
      "op": "DUP3",
      "path": "35"
    },
    "4280": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6973
      ],
      "op": "KECCAK256",
      "path": "35"
    },
    "4281": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6982
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x3"
    },
    "4283": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6973
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x5"
    },
    "4285": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6973
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4286": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6973
      ],
      "op": "SWAP3",
      "path": "35"
    },
    "4287": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6973
      ],
      "op": "MUL",
      "path": "35"
    },
    "4288": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6973
      ],
      "op": "ADD",
      "path": "35"
    },
    "4289": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6982
      ],
      "op": "ADD",
      "path": "35"
    },
    "4290": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6984
      ],
      "op": "DUP1",
      "path": "35"
    },
    "4291": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6984
      ],
      "op": "SLOAD",
      "path": "35"
    },
    "4292": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6984
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0xFF"
    },
    "4294": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6984
      ],
      "op": "AND",
      "path": "35"
    },
    "4295": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6984
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "4296": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6984
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x10D0"
    },
    "4299": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6984
      ],
      "op": "DUP4",
      "path": "35"
    },
    "4300": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6984
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x214E"
    },
    "4303": {
      "fn": "CLHouse.VotePropOffChain",
      "jump": "i",
      "offset": [
        6950,
        6984
      ],
      "op": "JUMP",
      "path": "35"
    },
    "4304": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6984
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "4305": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6984
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "4306": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6984
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4307": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6984
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x100"
    },
    "4310": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6984
      ],
      "op": "EXP",
      "path": "35"
    },
    "4311": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6984
      ],
      "op": "DUP2",
      "path": "35"
    },
    "4312": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6984
      ],
      "op": "SLOAD",
      "path": "35"
    },
    "4313": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6984
      ],
      "op": "DUP2",
      "path": "35"
    },
    "4314": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6984
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0xFF"
    },
    "4316": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6984
      ],
      "op": "MUL",
      "path": "35"
    },
    "4317": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6984
      ],
      "op": "NOT",
      "path": "35"
    },
    "4318": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6984
      ],
      "op": "AND",
      "path": "35"
    },
    "4319": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6984
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4320": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6984
      ],
      "op": "DUP4",
      "path": "35"
    },
    "4321": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6984
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0xFF"
    },
    "4323": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6984
      ],
      "op": "AND",
      "path": "35"
    },
    "4324": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6984
      ],
      "op": "MUL",
      "path": "35"
    },
    "4325": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6984
      ],
      "op": "OR",
      "path": "35"
    },
    "4326": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6984
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4327": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6984
      ],
      "op": "SSTORE",
      "path": "35"
    },
    "4328": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6984
      ],
      "op": "POP",
      "path": "35"
    },
    "4329": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6950,
        6984
      ],
      "op": "POP",
      "path": "35"
    },
    "4330": {
      "branch": 30,
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7000,
        7008
      ],
      "op": "DUP11",
      "path": "35"
    },
    "4331": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6995,
        7061
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x1144"
    },
    "4334": {
      "branch": 30,
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6995,
        7061
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "4335": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7035
      ],
      "op": "PUSH1",
      "path": "35",
      "statement": 15,
      "value": "0xB"
    },
    "4337": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7037,
        7044
      ],
      "op": "DUP13",
      "path": "35"
    },
    "4338": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7046
      ],
      "op": "DUP2",
      "path": "35"
    },
    "4339": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7046
      ],
      "op": "SLOAD",
      "path": "35"
    },
    "4340": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7046
      ],
      "op": "DUP2",
      "path": "35"
    },
    "4341": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7046
      ],
      "op": "LT",
      "path": "35"
    },
    "4342": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7046
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x1101"
    },
    "4345": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7046
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "4346": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7046
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x1101"
    },
    "4349": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7046
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x2138"
    },
    "4352": {
      "fn": "CLHouse.VotePropOffChain",
      "jump": "i",
      "offset": [
        7023,
        7046
      ],
      "op": "JUMP",
      "path": "35"
    },
    "4353": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7046
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "4354": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7046
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "4356": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7046
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "4357": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7046
      ],
      "op": "DUP3",
      "path": "35"
    },
    "4358": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7046
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "4359": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7046
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "4361": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7046
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4362": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7046
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "4363": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7046
      ],
      "op": "KECCAK256",
      "path": "35"
    },
    "4364": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7046
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x5"
    },
    "4366": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7046
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4367": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7046
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "4368": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7046
      ],
      "op": "MUL",
      "path": "35"
    },
    "4369": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7046
      ],
      "op": "ADD",
      "path": "35"
    },
    "4370": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7059
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x3"
    },
    "4372": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7059
      ],
      "op": "ADD",
      "path": "35"
    },
    "4373": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7061
      ],
      "op": "DUP1",
      "path": "35"
    },
    "4374": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7061
      ],
      "op": "SLOAD",
      "path": "35"
    },
    "4375": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7061
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x100"
    },
    "4378": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7061
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4379": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7061
      ],
      "op": "DIV",
      "path": "35"
    },
    "4380": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7061
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0xFF"
    },
    "4382": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7061
      ],
      "op": "AND",
      "path": "35"
    },
    "4383": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7061
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4384": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7059
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x1"
    },
    "4386": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7061
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x112A"
    },
    "4389": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7061
      ],
      "op": "DUP4",
      "path": "35"
    },
    "4390": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7061
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x214E"
    },
    "4393": {
      "fn": "CLHouse.VotePropOffChain",
      "jump": "i",
      "offset": [
        7023,
        7061
      ],
      "op": "JUMP",
      "path": "35"
    },
    "4394": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7061
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "4395": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7061
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "4396": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7061
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4397": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7061
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x100"
    },
    "4400": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7061
      ],
      "op": "EXP",
      "path": "35"
    },
    "4401": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7061
      ],
      "op": "DUP2",
      "path": "35"
    },
    "4402": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7061
      ],
      "op": "SLOAD",
      "path": "35"
    },
    "4403": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7061
      ],
      "op": "DUP2",
      "path": "35"
    },
    "4404": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7061
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0xFF"
    },
    "4406": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7061
      ],
      "op": "MUL",
      "path": "35"
    },
    "4407": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7061
      ],
      "op": "NOT",
      "path": "35"
    },
    "4408": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7061
      ],
      "op": "AND",
      "path": "35"
    },
    "4409": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7061
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4410": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7061
      ],
      "op": "DUP4",
      "path": "35"
    },
    "4411": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7061
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0xFF"
    },
    "4413": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7061
      ],
      "op": "AND",
      "path": "35"
    },
    "4414": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7061
      ],
      "op": "MUL",
      "path": "35"
    },
    "4415": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7061
      ],
      "op": "OR",
      "path": "35"
    },
    "4416": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7061
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4417": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7061
      ],
      "op": "SSTORE",
      "path": "35"
    },
    "4418": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7061
      ],
      "op": "POP",
      "path": "35"
    },
    "4419": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7023,
        7061
      ],
      "op": "POP",
      "path": "35"
    },
    "4420": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        6995,
        7061
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "4421": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7077,
        7131
      ],
      "op": "PUSH32",
      "path": "35",
      "statement": 16,
      "value": "0xCF689387E0CFBCFE58BEE1B497861A7F47C2DD413053B5D49DF763B7928B254E"
    },
    "4454": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7087,
        7094
      ],
      "op": "DUP13",
      "path": "35"
    },
    "4455": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7097,
        7105
      ],
      "op": "DUP13",
      "path": "35"
    },
    "4456": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7107,
        7113
      ],
      "op": "DUP16",
      "path": "35"
    },
    "4457": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7115,
        7129
      ],
      "op": "DUP14",
      "path": "35"
    },
    "4458": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7077,
        7131
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "4460": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7077,
        7131
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "4461": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7077,
        7131
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x1179"
    },
    "4464": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7077,
        7131
      ],
      "op": "SWAP5",
      "path": "35"
    },
    "4465": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7077,
        7131
      ],
      "op": "SWAP4",
      "path": "35"
    },
    "4466": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7077,
        7131
      ],
      "op": "SWAP3",
      "path": "35"
    },
    "4467": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7077,
        7131
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "4468": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7077,
        7131
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4469": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7077,
        7131
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x217C"
    },
    "4472": {
      "fn": "CLHouse.VotePropOffChain",
      "jump": "i",
      "offset": [
        7077,
        7131
      ],
      "op": "JUMP",
      "path": "35"
    },
    "4473": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7077,
        7131
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "4474": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7077,
        7131
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "4476": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7077,
        7131
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "4477": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7077,
        7131
      ],
      "op": "DUP1",
      "path": "35"
    },
    "4478": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7077,
        7131
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "4479": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7077,
        7131
      ],
      "op": "SUB",
      "path": "35"
    },
    "4480": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7077,
        7131
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4481": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7077,
        7131
      ],
      "op": "LOG1",
      "path": "35"
    },
    "4482": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7163,
        7182
      ],
      "op": "PUSH2",
      "path": "35",
      "statement": 17,
      "value": "0x118A"
    },
    "4485": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7173,
        7180
      ],
      "op": "DUP13",
      "path": "35"
    },
    "4486": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7163,
        7171
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x8E4"
    },
    "4489": {
      "fn": "CLHouse.VotePropOffChain",
      "jump": "i",
      "offset": [
        7163,
        7182
      ],
      "op": "JUMP",
      "path": "35"
    },
    "4490": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7163,
        7182
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "4491": {
      "op": "POP"
    },
    "4492": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7200,
        7204
      ],
      "op": "PUSH1",
      "path": "35",
      "statement": 18,
      "value": "0x1"
    },
    "4494": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        7200,
        7204
      ],
      "op": "SWAP15",
      "path": "35"
    },
    "4495": {
      "fn": "CLHouse.VotePropOffChain",
      "offset": [
        4363,
        7211
      ],
      "op": "SWAP14",
      "path": "35"
    },
    "4496": {
      "op": "POP"
    },
    "4497": {
      "op": "POP"
    },
    "4498": {
      "op": "POP"
    },
    "4499": {
      "op": "POP"
    },
    "4500": {
      "op": "POP"
    },
    "4501": {
      "op": "POP"
    },
    "4502": {
      "op": "POP"
    },
    "4503": {
      "op": "POP"
    },
    "4504": {
      "op": "POP"
    },
    "4505": {
      "op": "POP"
    },
    "4506": {
      "op": "POP"
    },
    "4507": {
      "op": "POP"
    },
    "4508": {
      "op": "POP"
    },
    "4509": {
      "op": "POP"
    },
    "4510": {
      "fn": "CLHouse.VotePropOffChain",
      "jump": "o",
      "offset": [
        4363,
        7211
      ],
      "op": "JUMP",
      "path": "35"
    },
    "4511": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12262,
        13019
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "4512": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12517
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x2"
    },
    "4514": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12517
      ],
      "op": "SLOAD",
      "path": "35"
    },
    "4515": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12544,
        12733
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "4517": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12544,
        12733
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "4518": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12424,
        12438
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "4520": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12424,
        12438
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "4521": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12424,
        12438
      ],
      "op": "DUP3",
      "path": "35"
    },
    "4522": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12424,
        12438
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "4523": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12424,
        12438
      ],
      "op": "DUP3",
      "path": "35"
    },
    "4524": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12424,
        12438
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "4525": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4527": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4529": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4531": {
      "op": "SHL"
    },
    "4532": {
      "op": "SUB"
    },
    "4533": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12517
      ],
      "op": "AND",
      "path": "35"
    },
    "4534": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12517
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4535": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12544,
        12733
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x11C8"
    },
    "4538": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12544,
        12733
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4539": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12641,
        12661
      ],
      "op": "DUP9",
      "path": "35"
    },
    "4540": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12641,
        12661
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4541": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12679,
        12691
      ],
      "op": "DUP9",
      "path": "35"
    },
    "4542": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12679,
        12691
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4543": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12709,
        12719
      ],
      "op": "DUP9",
      "path": "35"
    },
    "4544": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12709,
        12719
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4545": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12544,
        12733
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x24"
    },
    "4547": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12544,
        12733
      ],
      "op": "ADD",
      "path": "35"
    },
    "4548": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12544,
        12733
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x21B8"
    },
    "4551": {
      "fn": "CLHouse.PropGovRules",
      "jump": "i",
      "offset": [
        12544,
        12733
      ],
      "op": "JUMP",
      "path": "35"
    },
    "4552": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12544,
        12733
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "4553": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12544,
        12733
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "4555": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12544,
        12733
      ],
      "op": "DUP1",
      "path": "35"
    },
    "4556": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12544,
        12733
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "4557": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4559": {
      "op": "NOT"
    },
    "4560": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12544,
        12733
      ],
      "op": "DUP2",
      "path": "35"
    },
    "4561": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12544,
        12733
      ],
      "op": "DUP5",
      "path": "35"
    },
    "4562": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12544,
        12733
      ],
      "op": "SUB",
      "path": "35"
    },
    "4563": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12544,
        12733
      ],
      "op": "ADD",
      "path": "35"
    },
    "4564": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12544,
        12733
      ],
      "op": "DUP2",
      "path": "35"
    },
    "4565": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12544,
        12733
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "4566": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12544,
        12733
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "4567": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12544,
        12733
      ],
      "op": "DUP2",
      "path": "35"
    },
    "4568": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12544,
        12733
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "4569": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12544,
        12733
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "4571": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12544,
        12733
      ],
      "op": "DUP3",
      "path": "35"
    },
    "4572": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12544,
        12733
      ],
      "op": "ADD",
      "path": "35"
    },
    "4573": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12544,
        12733
      ],
      "op": "DUP1",
      "path": "35"
    },
    "4574": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12544,
        12733
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "4575": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4577": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4579": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4581": {
      "op": "SHL"
    },
    "4582": {
      "op": "SUB"
    },
    "4583": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12544,
        12733
      ],
      "op": "AND",
      "path": "35"
    },
    "4584": {
      "op": "PUSH4",
      "value": "0x70ACB761"
    },
    "4589": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4591": {
      "op": "SHL"
    },
    "4592": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12544,
        12733
      ],
      "op": "OR",
      "path": "35"
    },
    "4593": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12544,
        12733
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4594": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12544,
        12733
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "4595": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "4596": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x11FD"
    },
    "4599": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "4600": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12544,
        12733
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4601": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x2077"
    },
    "4604": {
      "fn": "CLHouse.PropGovRules",
      "jump": "i",
      "offset": [
        12504,
        12743
      ],
      "op": "JUMP",
      "path": "35"
    },
    "4605": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "4606": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "4608": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "4610": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "4611": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "DUP1",
      "path": "35"
    },
    "4612": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "DUP4",
      "path": "35"
    },
    "4613": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "SUB",
      "path": "35"
    },
    "4614": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "DUP2",
      "path": "35"
    },
    "4615": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "DUP6",
      "path": "35"
    },
    "4616": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "GAS",
      "path": "35"
    },
    "4617": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "DELEGATECALL",
      "path": "35"
    },
    "4618": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "4619": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "POP",
      "path": "35"
    },
    "4620": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "POP",
      "path": "35"
    },
    "4621": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "4622": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "DUP1",
      "path": "35"
    },
    "4623": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "4625": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "DUP2",
      "path": "35"
    },
    "4626": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "EQ",
      "path": "35"
    },
    "4627": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x1238"
    },
    "4630": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "4631": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "4633": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "4634": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "4635": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "POP",
      "path": "35"
    },
    "4636": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x1F"
    },
    "4638": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "NOT",
      "path": "35"
    },
    "4639": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x3F"
    },
    "4641": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "4642": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "ADD",
      "path": "35"
    },
    "4643": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "AND",
      "path": "35"
    },
    "4644": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "DUP3",
      "path": "35"
    },
    "4645": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "ADD",
      "path": "35"
    },
    "4646": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "4648": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "4649": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "4650": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "DUP3",
      "path": "35"
    },
    "4651": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "4652": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "4653": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "4655": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "4657": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "DUP5",
      "path": "35"
    },
    "4658": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "ADD",
      "path": "35"
    },
    "4659": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "RETURNDATACOPY",
      "path": "35"
    },
    "4660": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x123D"
    },
    "4663": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "JUMP",
      "path": "35"
    },
    "4664": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "4665": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x60"
    },
    "4667": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "4668": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "POP",
      "path": "35"
    },
    "4669": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "4670": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12504,
        12743
      ],
      "op": "POP",
      "path": "35"
    },
    "4671": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12455,
        12743
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "4672": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12455,
        12743
      ],
      "op": "POP",
      "path": "35"
    },
    "4673": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12455,
        12743
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "4674": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12455,
        12743
      ],
      "op": "POP",
      "path": "35"
    },
    "4675": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12794,
        12798
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "4677": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12788,
        12799
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "4678": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12824,
        12840
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "4679": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12876,
        12880
      ],
      "op": "DUP1",
      "path": "35"
    },
    "4680": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12873,
        12874
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "4682": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12868,
        12871
      ],
      "op": "DUP4",
      "path": "35"
    },
    "4683": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12853,
        12881
      ],
      "op": "RETURNDATACOPY",
      "path": "35"
    },
    "4684": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12905,
        12918
      ],
      "op": "DUP4",
      "path": "35"
    },
    "4685": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12894,
        12970
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x1254"
    },
    "4688": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12894,
        12970
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "4689": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12951,
        12955
      ],
      "op": "DUP1",
      "path": "35"
    },
    "4690": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12946,
        12949
      ],
      "op": "DUP3",
      "path": "35"
    },
    "4691": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12939,
        12956
      ],
      "op": "REVERT",
      "path": "35"
    },
    "4692": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12894,
        12970
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "4693": {
      "op": "POP"
    },
    "4694": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12993,
        13003
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "4695": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12993,
        13003
      ],
      "op": "SWAP7",
      "path": "35"
    },
    "4696": {
      "fn": "CLHouse.PropGovRules",
      "offset": [
        12262,
        13019
      ],
      "op": "SWAP6",
      "path": "35"
    },
    "4697": {
      "op": "POP"
    },
    "4698": {
      "op": "POP"
    },
    "4699": {
      "op": "POP"
    },
    "4700": {
      "op": "POP"
    },
    "4701": {
      "op": "POP"
    },
    "4702": {
      "op": "POP"
    },
    "4703": {
      "fn": "CLHouse.PropGovRules",
      "jump": "o",
      "offset": [
        12262,
        13019
      ],
      "op": "JUMP",
      "path": "35"
    },
    "4704": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        9902,
        10693
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "4705": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10170
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x2"
    },
    "4707": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10170
      ],
      "op": "SLOAD",
      "path": "35"
    },
    "4708": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10197,
        10407
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "4710": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10197,
        10407
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "4711": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10077,
        10091
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "4713": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10077,
        10091
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "4714": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10077,
        10091
      ],
      "op": "DUP3",
      "path": "35"
    },
    "4715": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10077,
        10091
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "4716": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10077,
        10091
      ],
      "op": "DUP3",
      "path": "35"
    },
    "4717": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10077,
        10091
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "4718": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4720": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4722": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4724": {
      "op": "SHL"
    },
    "4725": {
      "op": "SUB"
    },
    "4726": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10170
      ],
      "op": "AND",
      "path": "35"
    },
    "4727": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10170
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4728": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10197,
        10407
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x128B"
    },
    "4731": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10197,
        10407
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4732": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10301,
        10304
      ],
      "op": "DUP10",
      "path": "35"
    },
    "4733": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10301,
        10304
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4734": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10322,
        10335
      ],
      "op": "DUP10",
      "path": "35"
    },
    "4735": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10322,
        10335
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4736": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10353,
        10365
      ],
      "op": "DUP10",
      "path": "35"
    },
    "4737": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10353,
        10365
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4738": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10383,
        10393
      ],
      "op": "DUP10",
      "path": "35"
    },
    "4739": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10383,
        10393
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4740": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10197,
        10407
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x24"
    },
    "4742": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10197,
        10407
      ],
      "op": "ADD",
      "path": "35"
    },
    "4743": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10197,
        10407
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x203F"
    },
    "4746": {
      "fn": "CLHouse.PropTxWei",
      "jump": "i",
      "offset": [
        10197,
        10407
      ],
      "op": "JUMP",
      "path": "35"
    },
    "4747": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10197,
        10407
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "4748": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10197,
        10407
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "4750": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10197,
        10407
      ],
      "op": "DUP1",
      "path": "35"
    },
    "4751": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10197,
        10407
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "4752": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4754": {
      "op": "NOT"
    },
    "4755": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10197,
        10407
      ],
      "op": "DUP2",
      "path": "35"
    },
    "4756": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10197,
        10407
      ],
      "op": "DUP5",
      "path": "35"
    },
    "4757": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10197,
        10407
      ],
      "op": "SUB",
      "path": "35"
    },
    "4758": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10197,
        10407
      ],
      "op": "ADD",
      "path": "35"
    },
    "4759": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10197,
        10407
      ],
      "op": "DUP2",
      "path": "35"
    },
    "4760": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10197,
        10407
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "4761": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10197,
        10407
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "4762": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10197,
        10407
      ],
      "op": "DUP2",
      "path": "35"
    },
    "4763": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10197,
        10407
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "4764": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10197,
        10407
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "4766": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10197,
        10407
      ],
      "op": "DUP3",
      "path": "35"
    },
    "4767": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10197,
        10407
      ],
      "op": "ADD",
      "path": "35"
    },
    "4768": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10197,
        10407
      ],
      "op": "DUP1",
      "path": "35"
    },
    "4769": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10197,
        10407
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "4770": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4772": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4774": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4776": {
      "op": "SHL"
    },
    "4777": {
      "op": "SUB"
    },
    "4778": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10197,
        10407
      ],
      "op": "AND",
      "path": "35"
    },
    "4779": {
      "op": "PUSH4",
      "value": "0xF8C70A9"
    },
    "4784": {
      "op": "PUSH1",
      "value": "0xE3"
    },
    "4786": {
      "op": "SHL"
    },
    "4787": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10197,
        10407
      ],
      "op": "OR",
      "path": "35"
    },
    "4788": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10197,
        10407
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4789": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10197,
        10407
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "4790": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "4791": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x12C0"
    },
    "4794": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "4795": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10197,
        10407
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "4796": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x2077"
    },
    "4799": {
      "fn": "CLHouse.PropTxWei",
      "jump": "i",
      "offset": [
        10157,
        10417
      ],
      "op": "JUMP",
      "path": "35"
    },
    "4800": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "4801": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "4803": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "4805": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "4806": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "DUP1",
      "path": "35"
    },
    "4807": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "DUP4",
      "path": "35"
    },
    "4808": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "SUB",
      "path": "35"
    },
    "4809": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "DUP2",
      "path": "35"
    },
    "4810": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "DUP6",
      "path": "35"
    },
    "4811": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "GAS",
      "path": "35"
    },
    "4812": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "DELEGATECALL",
      "path": "35"
    },
    "4813": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "4814": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "POP",
      "path": "35"
    },
    "4815": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "POP",
      "path": "35"
    },
    "4816": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "4817": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "DUP1",
      "path": "35"
    },
    "4818": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "4820": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "DUP2",
      "path": "35"
    },
    "4821": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "EQ",
      "path": "35"
    },
    "4822": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x12FB"
    },
    "4825": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "4826": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "4828": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "4829": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "4830": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "POP",
      "path": "35"
    },
    "4831": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x1F"
    },
    "4833": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "NOT",
      "path": "35"
    },
    "4834": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x3F"
    },
    "4836": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "4837": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "ADD",
      "path": "35"
    },
    "4838": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "AND",
      "path": "35"
    },
    "4839": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "DUP3",
      "path": "35"
    },
    "4840": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "ADD",
      "path": "35"
    },
    "4841": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "4843": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "4844": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "4845": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "DUP3",
      "path": "35"
    },
    "4846": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "4847": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "4848": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "4850": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "4852": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "DUP5",
      "path": "35"
    },
    "4853": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "ADD",
      "path": "35"
    },
    "4854": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "RETURNDATACOPY",
      "path": "35"
    },
    "4855": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x1300"
    },
    "4858": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "JUMP",
      "path": "35"
    },
    "4859": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "4860": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x60"
    },
    "4862": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "4863": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "POP",
      "path": "35"
    },
    "4864": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "4865": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10157,
        10417
      ],
      "op": "POP",
      "path": "35"
    },
    "4866": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10108,
        10417
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "4867": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10108,
        10417
      ],
      "op": "POP",
      "path": "35"
    },
    "4868": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10108,
        10417
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "4869": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10108,
        10417
      ],
      "op": "POP",
      "path": "35"
    },
    "4870": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10468,
        10472
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "4872": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10462,
        10473
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "4873": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10498,
        10514
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "4874": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10550,
        10554
      ],
      "op": "DUP1",
      "path": "35"
    },
    "4875": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10547,
        10548
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "4877": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10542,
        10545
      ],
      "op": "DUP4",
      "path": "35"
    },
    "4878": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10527,
        10555
      ],
      "op": "RETURNDATACOPY",
      "path": "35"
    },
    "4879": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10579,
        10592
      ],
      "op": "DUP4",
      "path": "35"
    },
    "4880": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10568,
        10644
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x1317"
    },
    "4883": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10568,
        10644
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "4884": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10625,
        10629
      ],
      "op": "DUP1",
      "path": "35"
    },
    "4885": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10620,
        10623
      ],
      "op": "DUP3",
      "path": "35"
    },
    "4886": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10613,
        10630
      ],
      "op": "REVERT",
      "path": "35"
    },
    "4887": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10568,
        10644
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "4888": {
      "op": "POP"
    },
    "4889": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10667,
        10677
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "4890": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        10667,
        10677
      ],
      "op": "SWAP8",
      "path": "35"
    },
    "4891": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        9902,
        10693
      ],
      "op": "SWAP7",
      "path": "35"
    },
    "4892": {
      "op": "POP"
    },
    "4893": {
      "op": "POP"
    },
    "4894": {
      "op": "POP"
    },
    "4895": {
      "op": "POP"
    },
    "4896": {
      "op": "POP"
    },
    "4897": {
      "op": "POP"
    },
    "4898": {
      "op": "POP"
    },
    "4899": {
      "fn": "CLHouse.PropTxWei",
      "jump": "o",
      "offset": [
        9902,
        10693
      ],
      "op": "JUMP",
      "path": "35"
    },
    "4900": {
      "offset": [
        1373,
        1402
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "4901": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0xF"
    },
    "4903": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "DUP2",
      "path": "37"
    },
    "4904": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "DUP2",
      "path": "37"
    },
    "4905": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "4906": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "DUP2",
      "path": "37"
    },
    "4907": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "LT",
      "path": "37"
    },
    "4908": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x1334"
    },
    "4911": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "4912": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "4914": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "DUP1",
      "path": "37"
    },
    "4915": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "REVERT",
      "path": "37"
    },
    "4916": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "4917": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "4919": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "4920": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "DUP3",
      "path": "37"
    },
    "4921": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "4922": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "4924": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "4925": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "4926": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "KECCAK256",
      "path": "37"
    },
    "4927": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x4"
    },
    "4929": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "4930": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "4931": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "MUL",
      "path": "37"
    },
    "4932": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "ADD",
      "path": "37"
    },
    "4933": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "DUP1",
      "path": "37"
    },
    "4934": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "4935": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x1"
    },
    "4937": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "DUP3",
      "path": "37"
    },
    "4938": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "ADD",
      "path": "37"
    },
    "4939": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "DUP1",
      "path": "37"
    },
    "4940": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "4941": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4943": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4945": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4947": {
      "op": "SHL"
    },
    "4948": {
      "op": "SUB"
    },
    "4949": {
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "4950": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP3",
      "path": "37"
    },
    "4951": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "AND",
      "path": "37"
    },
    "4952": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP4",
      "path": "37"
    },
    "4953": {
      "op": "POP"
    },
    "4954": {
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "4955": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x1363"
    },
    "4958": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "4959": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x20FD"
    },
    "4962": {
      "fn": "CLHouse.PropTxWei",
      "jump": "i",
      "offset": [
        1373,
        1402
      ],
      "op": "JUMP",
      "path": "37"
    },
    "4963": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "4964": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "DUP1",
      "path": "37"
    },
    "4965": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x1F"
    },
    "4967": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "ADD",
      "path": "37"
    },
    "4968": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "4970": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "DUP1",
      "path": "37"
    },
    "4971": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "4972": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "DIV",
      "path": "37"
    },
    "4973": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "MUL",
      "path": "37"
    },
    "4974": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "4976": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "ADD",
      "path": "37"
    },
    "4977": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "4979": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "MLOAD",
      "path": "37"
    },
    "4980": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "4981": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "DUP2",
      "path": "37"
    },
    "4982": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "ADD",
      "path": "37"
    },
    "4983": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "4985": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "4986": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "DUP1",
      "path": "37"
    },
    "4987": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP3",
      "path": "37"
    },
    "4988": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "4989": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "4990": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "DUP2",
      "path": "37"
    },
    "4991": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "DUP2",
      "path": "37"
    },
    "4992": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "4993": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "4995": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "ADD",
      "path": "37"
    },
    "4996": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "DUP3",
      "path": "37"
    },
    "4997": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "DUP1",
      "path": "37"
    },
    "4998": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "4999": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x138F"
    },
    "5002": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5003": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x20FD"
    },
    "5006": {
      "fn": "CLHouse.PropTxWei",
      "jump": "i",
      "offset": [
        1373,
        1402
      ],
      "op": "JUMP",
      "path": "37"
    },
    "5007": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "5008": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5009": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "ISZERO",
      "path": "37"
    },
    "5010": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x13DC"
    },
    "5013": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "5014": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5015": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x1F"
    },
    "5017": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "LT",
      "path": "37"
    },
    "5018": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x13B1"
    },
    "5021": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "5022": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x100"
    },
    "5025": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5026": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "DUP4",
      "path": "37"
    },
    "5027": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "5028": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "DIV",
      "path": "37"
    },
    "5029": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "MUL",
      "path": "37"
    },
    "5030": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "DUP4",
      "path": "37"
    },
    "5031": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "5032": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "5033": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "5035": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "ADD",
      "path": "37"
    },
    "5036": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "5037": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x13DC"
    },
    "5040": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "JUMP",
      "path": "37"
    },
    "5041": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "5042": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "DUP3",
      "path": "37"
    },
    "5043": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "ADD",
      "path": "37"
    },
    "5044": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "5045": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5046": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "5048": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "5049": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "5051": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "5053": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "KECCAK256",
      "path": "37"
    },
    "5054": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5055": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "5056": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "DUP2",
      "path": "37"
    },
    "5057": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "5058": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "DUP2",
      "path": "37"
    },
    "5059": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "5060": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5061": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x1"
    },
    "5063": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "ADD",
      "path": "37"
    },
    "5064": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5065": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "5067": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "ADD",
      "path": "37"
    },
    "5068": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5069": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "DUP4",
      "path": "37"
    },
    "5070": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "GT",
      "path": "37"
    },
    "5071": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x13BF"
    },
    "5074": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "5075": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "DUP3",
      "path": "37"
    },
    "5076": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5077": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SUB",
      "path": "37"
    },
    "5078": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x1F"
    },
    "5080": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "AND",
      "path": "37"
    },
    "5081": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "DUP3",
      "path": "37"
    },
    "5082": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "ADD",
      "path": "37"
    },
    "5083": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "5084": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "5085": {
      "op": "POP"
    },
    "5086": {
      "op": "POP"
    },
    "5087": {
      "op": "POP"
    },
    "5088": {
      "op": "POP"
    },
    "5089": {
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x2"
    },
    "5091": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "DUP4",
      "path": "37"
    },
    "5092": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "ADD",
      "path": "37"
    },
    "5093": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "5094": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x3"
    },
    "5096": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5097": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP4",
      "path": "37"
    },
    "5098": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "ADD",
      "path": "37"
    },
    "5099": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "5100": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "5101": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP3",
      "path": "37"
    },
    "5102": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "5103": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0xFF"
    },
    "5105": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5106": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "DUP3",
      "path": "37"
    },
    "5107": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "AND",
      "path": "37"
    },
    "5108": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP3",
      "path": "37"
    },
    "5109": {
      "op": "POP"
    },
    "5110": {
      "offset": [
        1373,
        1402
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x100"
    },
    "5113": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5114": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "5115": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "DIV",
      "path": "37"
    },
    "5116": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "AND",
      "path": "37"
    },
    "5117": {
      "fn": "CLHouse.PropTxWei",
      "offset": [
        1373,
        1402
      ],
      "op": "DUP6",
      "path": "37"
    },
    "5118": {
      "fn": "CLHouse.PropTxWei",
      "jump": "o",
      "offset": [
        1373,
        1402
      ],
      "op": "JUMP",
      "path": "37"
    },
    "5119": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3644,
        4357
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "5120": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        3873
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x2"
    },
    "5122": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        3873
      ],
      "op": "SLOAD",
      "path": "35"
    },
    "5123": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3900,
        4076
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "5125": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3900,
        4076
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "5126": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3790,
        3794
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "5128": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3790,
        3794
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "5129": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3790,
        3794
      ],
      "op": "DUP3",
      "path": "35"
    },
    "5130": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3790,
        3794
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "5131": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3790,
        3794
      ],
      "op": "DUP3",
      "path": "35"
    },
    "5132": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3790,
        3794
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "5133": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5135": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5137": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5139": {
      "op": "SHL"
    },
    "5140": {
      "op": "SUB"
    },
    "5141": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        3873
      ],
      "op": "AND",
      "path": "35"
    },
    "5142": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        3873
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "5143": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3900,
        4076
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x1428"
    },
    "5146": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3900,
        4076
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "5147": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3997,
        4004
      ],
      "op": "DUP9",
      "path": "35"
    },
    "5148": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3997,
        4004
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "5149": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        4022,
        4030
      ],
      "op": "DUP9",
      "path": "35"
    },
    "5150": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        4022,
        4030
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "5151": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        4048,
        4062
      ],
      "op": "DUP9",
      "path": "35"
    },
    "5152": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        4048,
        4062
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "5153": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3900,
        4076
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x24"
    },
    "5155": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3900,
        4076
      ],
      "op": "ADD",
      "path": "35"
    },
    "5156": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3900,
        4076
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x21E4"
    },
    "5159": {
      "fn": "CLHouse.VoteProposal",
      "jump": "i",
      "offset": [
        3900,
        4076
      ],
      "op": "JUMP",
      "path": "35"
    },
    "5160": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3900,
        4076
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "5161": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3900,
        4076
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "5163": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3900,
        4076
      ],
      "op": "DUP1",
      "path": "35"
    },
    "5164": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3900,
        4076
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "5165": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "5167": {
      "op": "NOT"
    },
    "5168": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3900,
        4076
      ],
      "op": "DUP2",
      "path": "35"
    },
    "5169": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3900,
        4076
      ],
      "op": "DUP5",
      "path": "35"
    },
    "5170": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3900,
        4076
      ],
      "op": "SUB",
      "path": "35"
    },
    "5171": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3900,
        4076
      ],
      "op": "ADD",
      "path": "35"
    },
    "5172": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3900,
        4076
      ],
      "op": "DUP2",
      "path": "35"
    },
    "5173": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3900,
        4076
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "5174": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3900,
        4076
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "5175": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3900,
        4076
      ],
      "op": "DUP2",
      "path": "35"
    },
    "5176": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3900,
        4076
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "5177": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3900,
        4076
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "5179": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3900,
        4076
      ],
      "op": "DUP3",
      "path": "35"
    },
    "5180": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3900,
        4076
      ],
      "op": "ADD",
      "path": "35"
    },
    "5181": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3900,
        4076
      ],
      "op": "DUP1",
      "path": "35"
    },
    "5182": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3900,
        4076
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "5183": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5185": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5187": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "5189": {
      "op": "SHL"
    },
    "5190": {
      "op": "SUB"
    },
    "5191": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3900,
        4076
      ],
      "op": "AND",
      "path": "35"
    },
    "5192": {
      "op": "PUSH4",
      "value": "0xF40E9B45"
    },
    "5197": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "5199": {
      "op": "SHL"
    },
    "5200": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3900,
        4076
      ],
      "op": "OR",
      "path": "35"
    },
    "5201": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3900,
        4076
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "5202": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3900,
        4076
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "5203": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "5204": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x145D"
    },
    "5207": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "5208": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3900,
        4076
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "5209": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x2077"
    },
    "5212": {
      "fn": "CLHouse.VoteProposal",
      "jump": "i",
      "offset": [
        3860,
        4086
      ],
      "op": "JUMP",
      "path": "35"
    },
    "5213": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "5214": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "5216": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "5218": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "5219": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "DUP1",
      "path": "35"
    },
    "5220": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "DUP4",
      "path": "35"
    },
    "5221": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "SUB",
      "path": "35"
    },
    "5222": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "DUP2",
      "path": "35"
    },
    "5223": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "DUP6",
      "path": "35"
    },
    "5224": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "GAS",
      "path": "35"
    },
    "5225": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "DELEGATECALL",
      "path": "35"
    },
    "5226": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "5227": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "POP",
      "path": "35"
    },
    "5228": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "POP",
      "path": "35"
    },
    "5229": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "5230": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "DUP1",
      "path": "35"
    },
    "5231": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "5233": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "DUP2",
      "path": "35"
    },
    "5234": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "EQ",
      "path": "35"
    },
    "5235": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x1498"
    },
    "5238": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "5239": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "5241": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "5242": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "5243": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "POP",
      "path": "35"
    },
    "5244": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x1F"
    },
    "5246": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "NOT",
      "path": "35"
    },
    "5247": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x3F"
    },
    "5249": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "5250": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "ADD",
      "path": "35"
    },
    "5251": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "AND",
      "path": "35"
    },
    "5252": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "DUP3",
      "path": "35"
    },
    "5253": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "ADD",
      "path": "35"
    },
    "5254": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "5256": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "5257": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "5258": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "DUP3",
      "path": "35"
    },
    "5259": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "5260": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "5261": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "5263": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "5265": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "DUP5",
      "path": "35"
    },
    "5266": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "ADD",
      "path": "35"
    },
    "5267": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "RETURNDATACOPY",
      "path": "35"
    },
    "5268": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x149D"
    },
    "5271": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "JUMP",
      "path": "35"
    },
    "5272": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "5273": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x60"
    },
    "5275": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "5276": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "POP",
      "path": "35"
    },
    "5277": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "5278": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3860,
        4086
      ],
      "op": "POP",
      "path": "35"
    },
    "5279": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3811,
        4086
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "5280": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3811,
        4086
      ],
      "op": "POP",
      "path": "35"
    },
    "5281": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3811,
        4086
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "5282": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3811,
        4086
      ],
      "op": "POP",
      "path": "35"
    },
    "5283": {
      "branch": 31,
      "fn": "CLHouse.VoteProposal",
      "offset": [
        4102,
        4115
      ],
      "op": "DUP2",
      "path": "35",
      "statement": 19
    },
    "5284": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        4097,
        4329
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x14B4"
    },
    "5287": {
      "branch": 31,
      "fn": "CLHouse.VoteProposal",
      "offset": [
        4097,
        4329
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "5288": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        4176,
        4180
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "5290": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        4170,
        4181
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "5291": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        4210,
        4226
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "5292": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        4266,
        4270
      ],
      "op": "DUP1",
      "path": "35"
    },
    "5293": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        4263,
        4264
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "5295": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        4258,
        4261
      ],
      "op": "DUP4",
      "path": "35"
    },
    "5296": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        4243,
        4271
      ],
      "op": "RETURNDATACOPY",
      "path": "35"
    },
    "5297": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        4300,
        4304
      ],
      "op": "DUP1",
      "path": "35"
    },
    "5298": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        4295,
        4298
      ],
      "op": "DUP3",
      "path": "35"
    },
    "5299": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        4288,
        4305
      ],
      "op": "REVERT",
      "path": "35"
    },
    "5300": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        4097,
        4329
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "5301": {
      "op": "POP"
    },
    "5302": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        4346,
        4350
      ],
      "op": "PUSH1",
      "path": "35",
      "statement": 20,
      "value": "0x1"
    },
    "5304": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        4346,
        4350
      ],
      "op": "SWAP6",
      "path": "35"
    },
    "5305": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        3644,
        4357
      ],
      "op": "SWAP5",
      "path": "35"
    },
    "5306": {
      "op": "POP"
    },
    "5307": {
      "op": "POP"
    },
    "5308": {
      "op": "POP"
    },
    "5309": {
      "op": "POP"
    },
    "5310": {
      "op": "POP"
    },
    "5311": {
      "fn": "CLHouse.VoteProposal",
      "jump": "o",
      "offset": [
        3644,
        4357
      ],
      "op": "JUMP",
      "path": "35"
    },
    "5312": {
      "offset": [
        1273,
        1317
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "5313": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0xD"
    },
    "5315": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "DUP2",
      "path": "37"
    },
    "5316": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "DUP2",
      "path": "37"
    },
    "5317": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "5318": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "DUP2",
      "path": "37"
    },
    "5319": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "LT",
      "path": "37"
    },
    "5320": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x14D0"
    },
    "5323": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "5324": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "5326": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5327": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "REVERT",
      "path": "37"
    },
    "5328": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "5329": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "5331": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "5332": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "DUP3",
      "path": "37"
    },
    "5333": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "5334": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "5336": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5337": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "5338": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "KECCAK256",
      "path": "37"
    },
    "5339": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x4"
    },
    "5341": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5342": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "5343": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "MUL",
      "path": "37"
    },
    "5344": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "ADD",
      "path": "37"
    },
    "5345": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5346": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "5347": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x1"
    },
    "5349": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "DUP3",
      "path": "37"
    },
    "5350": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "ADD",
      "path": "37"
    },
    "5351": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "5352": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x2"
    },
    "5354": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "DUP4",
      "path": "37"
    },
    "5355": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "ADD",
      "path": "37"
    },
    "5356": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "5357": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x3"
    },
    "5359": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5360": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "SWAP4",
      "path": "37"
    },
    "5361": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "ADD",
      "path": "37"
    },
    "5362": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "5363": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5365": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5367": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5369": {
      "op": "SHL"
    },
    "5370": {
      "op": "SUB"
    },
    "5371": {
      "offset": [
        1273,
        1317
      ],
      "op": "SWAP3",
      "path": "37"
    },
    "5372": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "DUP4",
      "path": "37"
    },
    "5373": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "AND",
      "path": "37"
    },
    "5374": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "SWAP5",
      "path": "37"
    },
    "5375": {
      "op": "POP"
    },
    "5376": {
      "offset": [
        1273,
        1317
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5377": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "SWAP3",
      "path": "37"
    },
    "5378": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "DUP3",
      "path": "37"
    },
    "5379": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "AND",
      "path": "37"
    },
    "5380": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "5381": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "AND",
      "path": "37"
    },
    "5382": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1273,
        1317
      ],
      "op": "DUP5",
      "path": "37"
    },
    "5383": {
      "fn": "CLHouse.VoteProposal",
      "jump": "o",
      "offset": [
        1273,
        1317
      ],
      "op": "JUMP",
      "path": "37"
    },
    "5384": {
      "offset": [
        1221,
        1267
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "5385": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0xC"
    },
    "5387": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "DUP2",
      "path": "37"
    },
    "5388": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "DUP2",
      "path": "37"
    },
    "5389": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "5390": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "DUP2",
      "path": "37"
    },
    "5391": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "LT",
      "path": "37"
    },
    "5392": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x1518"
    },
    "5395": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "5396": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "5398": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5399": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "REVERT",
      "path": "37"
    },
    "5400": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "5401": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "5403": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "5404": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "DUP3",
      "path": "37"
    },
    "5405": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "5406": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "5408": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5409": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "5410": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "KECCAK256",
      "path": "37"
    },
    "5411": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x3"
    },
    "5413": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5414": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "5415": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "MUL",
      "path": "37"
    },
    "5416": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "ADD",
      "path": "37"
    },
    "5417": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5418": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "5419": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x1"
    },
    "5421": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "DUP3",
      "path": "37"
    },
    "5422": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "ADD",
      "path": "37"
    },
    "5423": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5424": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "5425": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5427": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5429": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5431": {
      "op": "SHL"
    },
    "5432": {
      "op": "SUB"
    },
    "5433": {
      "offset": [
        1221,
        1267
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5434": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SWAP3",
      "path": "37"
    },
    "5435": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "AND",
      "path": "37"
    },
    "5436": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SWAP4",
      "path": "37"
    },
    "5437": {
      "op": "POP"
    },
    "5438": {
      "offset": [
        1221,
        1267
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5439": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x1547"
    },
    "5442": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5443": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x20FD"
    },
    "5446": {
      "fn": "CLHouse.VoteProposal",
      "jump": "i",
      "offset": [
        1221,
        1267
      ],
      "op": "JUMP",
      "path": "37"
    },
    "5447": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "5448": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5449": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x1F"
    },
    "5451": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "ADD",
      "path": "37"
    },
    "5452": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "5454": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5455": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "5456": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "DIV",
      "path": "37"
    },
    "5457": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "MUL",
      "path": "37"
    },
    "5458": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "5460": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "ADD",
      "path": "37"
    },
    "5461": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "5463": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "MLOAD",
      "path": "37"
    },
    "5464": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5465": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "DUP2",
      "path": "37"
    },
    "5466": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "ADD",
      "path": "37"
    },
    "5467": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "5469": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "5470": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5471": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SWAP3",
      "path": "37"
    },
    "5472": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "5473": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5474": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "DUP2",
      "path": "37"
    },
    "5475": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "DUP2",
      "path": "37"
    },
    "5476": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "5477": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "5479": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "ADD",
      "path": "37"
    },
    "5480": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "DUP3",
      "path": "37"
    },
    "5481": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5482": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "5483": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x1573"
    },
    "5486": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5487": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x20FD"
    },
    "5490": {
      "fn": "CLHouse.VoteProposal",
      "jump": "i",
      "offset": [
        1221,
        1267
      ],
      "op": "JUMP",
      "path": "37"
    },
    "5491": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "5492": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5493": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "ISZERO",
      "path": "37"
    },
    "5494": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x15C0"
    },
    "5497": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "5498": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5499": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x1F"
    },
    "5501": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "LT",
      "path": "37"
    },
    "5502": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x1595"
    },
    "5505": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "5506": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x100"
    },
    "5509": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5510": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "DUP4",
      "path": "37"
    },
    "5511": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "5512": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "DIV",
      "path": "37"
    },
    "5513": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "MUL",
      "path": "37"
    },
    "5514": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "DUP4",
      "path": "37"
    },
    "5515": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "5516": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "5517": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "5519": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "ADD",
      "path": "37"
    },
    "5520": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "5521": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x15C0"
    },
    "5524": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "JUMP",
      "path": "37"
    },
    "5525": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "5526": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "DUP3",
      "path": "37"
    },
    "5527": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "ADD",
      "path": "37"
    },
    "5528": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "5529": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5530": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "5532": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "5533": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "5535": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "5537": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "KECCAK256",
      "path": "37"
    },
    "5538": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5539": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "5540": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "DUP2",
      "path": "37"
    },
    "5541": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "5542": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "DUP2",
      "path": "37"
    },
    "5543": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "5544": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5545": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x1"
    },
    "5547": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "ADD",
      "path": "37"
    },
    "5548": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5549": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "5551": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "ADD",
      "path": "37"
    },
    "5552": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5553": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "DUP4",
      "path": "37"
    },
    "5554": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "GT",
      "path": "37"
    },
    "5555": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x15A3"
    },
    "5558": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "5559": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "DUP3",
      "path": "37"
    },
    "5560": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5561": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SUB",
      "path": "37"
    },
    "5562": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x1F"
    },
    "5564": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "AND",
      "path": "37"
    },
    "5565": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "DUP3",
      "path": "37"
    },
    "5566": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "ADD",
      "path": "37"
    },
    "5567": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "5568": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "5569": {
      "op": "POP"
    },
    "5570": {
      "op": "POP"
    },
    "5571": {
      "op": "POP"
    },
    "5572": {
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x2"
    },
    "5574": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5575": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SWAP4",
      "path": "37"
    },
    "5576": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "ADD",
      "path": "37"
    },
    "5577": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "5578": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "5579": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "SWAP3",
      "path": "37"
    },
    "5580": {
      "op": "POP"
    },
    "5581": {
      "op": "POP"
    },
    "5582": {
      "offset": [
        1221,
        1267
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0xFF"
    },
    "5584": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "AND",
      "path": "37"
    },
    "5585": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1221,
        1267
      ],
      "op": "DUP4",
      "path": "37"
    },
    "5586": {
      "fn": "CLHouse.VoteProposal",
      "jump": "o",
      "offset": [
        1221,
        1267
      ],
      "op": "JUMP",
      "path": "37"
    },
    "5587": {
      "offset": [
        1073,
        1140
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "5588": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0xA"
    },
    "5590": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "5592": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5593": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "DUP2",
      "path": "37"
    },
    "5594": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "5595": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "5597": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SWAP3",
      "path": "37"
    },
    "5598": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "DUP4",
      "path": "37"
    },
    "5599": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "5600": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "5602": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5603": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "DUP5",
      "path": "37"
    },
    "5604": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "KECCAK256",
      "path": "37"
    },
    "5605": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5606": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "5607": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "5608": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5609": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "DUP3",
      "path": "37"
    },
    "5610": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "5611": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5612": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "KECCAK256",
      "path": "37"
    },
    "5613": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5614": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "5615": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x1"
    },
    "5617": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "DUP3",
      "path": "37"
    },
    "5618": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "ADD",
      "path": "37"
    },
    "5619": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5620": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "5621": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0xFF"
    },
    "5623": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5624": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "DUP5",
      "path": "37"
    },
    "5625": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "AND",
      "path": "37"
    },
    "5626": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SWAP5",
      "path": "37"
    },
    "5627": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x100"
    },
    "5630": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5631": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SWAP5",
      "path": "37"
    },
    "5632": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "DIV",
      "path": "37"
    },
    "5633": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "AND",
      "path": "37"
    },
    "5634": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SWAP3",
      "path": "37"
    },
    "5635": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "5636": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5637": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x160D"
    },
    "5640": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5641": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x20FD"
    },
    "5644": {
      "fn": "CLHouse.VoteProposal",
      "jump": "i",
      "offset": [
        1073,
        1140
      ],
      "op": "JUMP",
      "path": "37"
    },
    "5645": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "5646": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5647": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x1F"
    },
    "5649": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "ADD",
      "path": "37"
    },
    "5650": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "5652": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5653": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "5654": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "DIV",
      "path": "37"
    },
    "5655": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "MUL",
      "path": "37"
    },
    "5656": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "5658": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "ADD",
      "path": "37"
    },
    "5659": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "5661": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "MLOAD",
      "path": "37"
    },
    "5662": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5663": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "DUP2",
      "path": "37"
    },
    "5664": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "ADD",
      "path": "37"
    },
    "5665": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "5667": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "5668": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5669": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SWAP3",
      "path": "37"
    },
    "5670": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "5671": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5672": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "DUP2",
      "path": "37"
    },
    "5673": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "DUP2",
      "path": "37"
    },
    "5674": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "5675": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "5677": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "ADD",
      "path": "37"
    },
    "5678": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "DUP3",
      "path": "37"
    },
    "5679": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5680": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "5681": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x1639"
    },
    "5684": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5685": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x20FD"
    },
    "5688": {
      "fn": "CLHouse.VoteProposal",
      "jump": "i",
      "offset": [
        1073,
        1140
      ],
      "op": "JUMP",
      "path": "37"
    },
    "5689": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "5690": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5691": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "ISZERO",
      "path": "37"
    },
    "5692": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x1686"
    },
    "5695": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "5696": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5697": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x1F"
    },
    "5699": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "LT",
      "path": "37"
    },
    "5700": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x165B"
    },
    "5703": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "5704": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x100"
    },
    "5707": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5708": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "DUP4",
      "path": "37"
    },
    "5709": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "5710": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "DIV",
      "path": "37"
    },
    "5711": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "MUL",
      "path": "37"
    },
    "5712": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "DUP4",
      "path": "37"
    },
    "5713": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "5714": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "5715": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "5717": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "ADD",
      "path": "37"
    },
    "5718": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "5719": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x1686"
    },
    "5722": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "JUMP",
      "path": "37"
    },
    "5723": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "5724": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "DUP3",
      "path": "37"
    },
    "5725": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "ADD",
      "path": "37"
    },
    "5726": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "5727": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5728": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "5730": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "5731": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "5733": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "5735": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "KECCAK256",
      "path": "37"
    },
    "5736": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5737": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "5738": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "DUP2",
      "path": "37"
    },
    "5739": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "5740": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "DUP2",
      "path": "37"
    },
    "5741": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "5742": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5743": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x1"
    },
    "5745": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "ADD",
      "path": "37"
    },
    "5746": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5747": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "5749": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "ADD",
      "path": "37"
    },
    "5750": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5751": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "DUP4",
      "path": "37"
    },
    "5752": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "GT",
      "path": "37"
    },
    "5753": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x1669"
    },
    "5756": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "5757": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "DUP3",
      "path": "37"
    },
    "5758": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5759": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SUB",
      "path": "37"
    },
    "5760": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x1F"
    },
    "5762": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "AND",
      "path": "37"
    },
    "5763": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "DUP3",
      "path": "37"
    },
    "5764": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "ADD",
      "path": "37"
    },
    "5765": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "5766": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "5767": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "POP",
      "path": "37"
    },
    "5768": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "POP",
      "path": "37"
    },
    "5769": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "POP",
      "path": "37"
    },
    "5770": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "POP",
      "path": "37"
    },
    "5771": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "POP",
      "path": "37"
    },
    "5772": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5773": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "POP",
      "path": "37"
    },
    "5774": {
      "fn": "CLHouse.VoteProposal",
      "offset": [
        1073,
        1140
      ],
      "op": "DUP4",
      "path": "37"
    },
    "5775": {
      "fn": "CLHouse.VoteProposal",
      "jump": "o",
      "offset": [
        1073,
        1140
      ],
      "op": "JUMP",
      "path": "37"
    },
    "5776": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        8806,
        9557
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "5777": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9045,
        9058
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x2"
    },
    "5779": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9045,
        9058
      ],
      "op": "SLOAD",
      "path": "35"
    },
    "5780": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9085,
        9271
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "5782": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9085,
        9271
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "5783": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        8965,
        8979
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "5785": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        8965,
        8979
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "5786": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        8965,
        8979
      ],
      "op": "DUP3",
      "path": "35"
    },
    "5787": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        8965,
        8979
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "5788": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        8965,
        8979
      ],
      "op": "DUP3",
      "path": "35"
    },
    "5789": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        8965,
        8979
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "5790": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5792": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5794": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5796": {
      "op": "SHL"
    },
    "5797": {
      "op": "SUB"
    },
    "5798": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9045,
        9058
      ],
      "op": "AND",
      "path": "35"
    },
    "5799": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9045,
        9058
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "5800": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9085,
        9271
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x16B9"
    },
    "5803": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9085,
        9271
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "5804": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9188,
        9199
      ],
      "op": "DUP9",
      "path": "35"
    },
    "5805": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9188,
        9199
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "5806": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9217,
        9229
      ],
      "op": "DUP9",
      "path": "35"
    },
    "5807": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9217,
        9229
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "5808": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9247,
        9257
      ],
      "op": "DUP9",
      "path": "35"
    },
    "5809": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9247,
        9257
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "5810": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9085,
        9271
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x24"
    },
    "5812": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9085,
        9271
      ],
      "op": "ADD",
      "path": "35"
    },
    "5813": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9085,
        9271
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x2205"
    },
    "5816": {
      "fn": "CLHouse.PropRemoveMember",
      "jump": "i",
      "offset": [
        9085,
        9271
      ],
      "op": "JUMP",
      "path": "35"
    },
    "5817": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9085,
        9271
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "5818": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9085,
        9271
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "5820": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9085,
        9271
      ],
      "op": "DUP1",
      "path": "35"
    },
    "5821": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9085,
        9271
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "5822": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "5824": {
      "op": "NOT"
    },
    "5825": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9085,
        9271
      ],
      "op": "DUP2",
      "path": "35"
    },
    "5826": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9085,
        9271
      ],
      "op": "DUP5",
      "path": "35"
    },
    "5827": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9085,
        9271
      ],
      "op": "SUB",
      "path": "35"
    },
    "5828": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9085,
        9271
      ],
      "op": "ADD",
      "path": "35"
    },
    "5829": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9085,
        9271
      ],
      "op": "DUP2",
      "path": "35"
    },
    "5830": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9085,
        9271
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "5831": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9085,
        9271
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "5832": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9085,
        9271
      ],
      "op": "DUP2",
      "path": "35"
    },
    "5833": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9085,
        9271
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "5834": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9085,
        9271
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "5836": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9085,
        9271
      ],
      "op": "DUP3",
      "path": "35"
    },
    "5837": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9085,
        9271
      ],
      "op": "ADD",
      "path": "35"
    },
    "5838": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9085,
        9271
      ],
      "op": "DUP1",
      "path": "35"
    },
    "5839": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9085,
        9271
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "5840": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5842": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5844": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "5846": {
      "op": "SHL"
    },
    "5847": {
      "op": "SUB"
    },
    "5848": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9085,
        9271
      ],
      "op": "AND",
      "path": "35"
    },
    "5849": {
      "op": "PUSH4",
      "value": "0xC4CAEB63"
    },
    "5854": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "5856": {
      "op": "SHL"
    },
    "5857": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9085,
        9271
      ],
      "op": "OR",
      "path": "35"
    },
    "5858": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9085,
        9271
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "5859": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9085,
        9271
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "5860": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9045,
        9281
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "5861": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9045,
        9281
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x11FD"
    },
    "5864": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9045,
        9281
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "5865": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9085,
        9271
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "5866": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        9045,
        9281
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x2077"
    },
    "5869": {
      "fn": "CLHouse.PropRemoveMember",
      "jump": "i",
      "offset": [
        9045,
        9281
      ],
      "op": "JUMP",
      "path": "35"
    },
    "5870": {
      "offset": [
        1182,
        1215
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "5871": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0xB"
    },
    "5873": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP2",
      "path": "37"
    },
    "5874": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP2",
      "path": "37"
    },
    "5875": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "5876": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP2",
      "path": "37"
    },
    "5877": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "LT",
      "path": "37"
    },
    "5878": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x16FE"
    },
    "5881": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "5882": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "5884": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5885": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "REVERT",
      "path": "37"
    },
    "5886": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "5887": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "5889": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "5890": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP3",
      "path": "37"
    },
    "5891": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "5892": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "5894": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5895": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "5896": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "KECCAK256",
      "path": "37"
    },
    "5897": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x5"
    },
    "5899": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5900": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "5901": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "MUL",
      "path": "37"
    },
    "5902": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "ADD",
      "path": "37"
    },
    "5903": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5904": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "5905": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x1"
    },
    "5907": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP3",
      "path": "37"
    },
    "5908": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "ADD",
      "path": "37"
    },
    "5909": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5910": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "5911": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5913": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5915": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5917": {
      "op": "SHL"
    },
    "5918": {
      "op": "SUB"
    },
    "5919": {
      "offset": [
        1182,
        1215
      ],
      "op": "DUP4",
      "path": "37"
    },
    "5920": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "AND",
      "path": "37"
    },
    "5921": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP5",
      "path": "37"
    },
    "5922": {
      "op": "POP"
    },
    "5923": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5925": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5927": {
      "op": "SHL"
    },
    "5928": {
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5929": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP3",
      "path": "37"
    },
    "5930": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DIV",
      "path": "37"
    },
    "5931": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0xFF"
    },
    "5933": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "AND",
      "path": "37"
    },
    "5934": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP3",
      "path": "37"
    },
    "5935": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "5936": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x1738"
    },
    "5939": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5940": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x20FD"
    },
    "5943": {
      "fn": "CLHouse.PropRemoveMember",
      "jump": "i",
      "offset": [
        1182,
        1215
      ],
      "op": "JUMP",
      "path": "37"
    },
    "5944": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "5945": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5946": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x1F"
    },
    "5948": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "ADD",
      "path": "37"
    },
    "5949": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "5951": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5952": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "5953": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DIV",
      "path": "37"
    },
    "5954": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "MUL",
      "path": "37"
    },
    "5955": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "5957": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "ADD",
      "path": "37"
    },
    "5958": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "5960": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "MLOAD",
      "path": "37"
    },
    "5961": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5962": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP2",
      "path": "37"
    },
    "5963": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "ADD",
      "path": "37"
    },
    "5964": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x40"
    },
    "5966": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "5967": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5968": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP3",
      "path": "37"
    },
    "5969": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "5970": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5971": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP2",
      "path": "37"
    },
    "5972": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP2",
      "path": "37"
    },
    "5973": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "5974": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "5976": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "ADD",
      "path": "37"
    },
    "5977": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP3",
      "path": "37"
    },
    "5978": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5979": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "5980": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x1764"
    },
    "5983": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "5984": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x20FD"
    },
    "5987": {
      "fn": "CLHouse.PropRemoveMember",
      "jump": "i",
      "offset": [
        1182,
        1215
      ],
      "op": "JUMP",
      "path": "37"
    },
    "5988": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "5989": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5990": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "ISZERO",
      "path": "37"
    },
    "5991": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x17B1"
    },
    "5994": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "5995": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP1",
      "path": "37"
    },
    "5996": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x1F"
    },
    "5998": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "LT",
      "path": "37"
    },
    "5999": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x1786"
    },
    "6002": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "6003": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x100"
    },
    "6006": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP1",
      "path": "37"
    },
    "6007": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP4",
      "path": "37"
    },
    "6008": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "6009": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DIV",
      "path": "37"
    },
    "6010": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "MUL",
      "path": "37"
    },
    "6011": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP4",
      "path": "37"
    },
    "6012": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "6013": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "6014": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "6016": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "ADD",
      "path": "37"
    },
    "6017": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "6018": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x17B1"
    },
    "6021": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "JUMP",
      "path": "37"
    },
    "6022": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "6023": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP3",
      "path": "37"
    },
    "6024": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "ADD",
      "path": "37"
    },
    "6025": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "6026": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "6027": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "6029": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "6030": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "6032": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x0"
    },
    "6034": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "KECCAK256",
      "path": "37"
    },
    "6035": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "6036": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "6037": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP2",
      "path": "37"
    },
    "6038": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "6039": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP2",
      "path": "37"
    },
    "6040": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "MSTORE",
      "path": "37"
    },
    "6041": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "6042": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x1"
    },
    "6044": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "ADD",
      "path": "37"
    },
    "6045": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "6046": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x20"
    },
    "6048": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "ADD",
      "path": "37"
    },
    "6049": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP1",
      "path": "37"
    },
    "6050": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP4",
      "path": "37"
    },
    "6051": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "GT",
      "path": "37"
    },
    "6052": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x1794"
    },
    "6055": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "JUMPI",
      "path": "37"
    },
    "6056": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP3",
      "path": "37"
    },
    "6057": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "6058": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SUB",
      "path": "37"
    },
    "6059": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x1F"
    },
    "6061": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "AND",
      "path": "37"
    },
    "6062": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP3",
      "path": "37"
    },
    "6063": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "ADD",
      "path": "37"
    },
    "6064": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP2",
      "path": "37"
    },
    "6065": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "JUMPDEST",
      "path": "37"
    },
    "6066": {
      "op": "POP"
    },
    "6067": {
      "op": "POP"
    },
    "6068": {
      "op": "POP"
    },
    "6069": {
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x2"
    },
    "6071": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP5",
      "path": "37"
    },
    "6072": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "ADD",
      "path": "37"
    },
    "6073": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "6074": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x3"
    },
    "6076": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP6",
      "path": "37"
    },
    "6077": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "ADD",
      "path": "37"
    },
    "6078": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "6079": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0x4"
    },
    "6081": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "6082": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP6",
      "path": "37"
    },
    "6083": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "ADD",
      "path": "37"
    },
    "6084": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SLOAD",
      "path": "37"
    },
    "6085": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP4",
      "path": "37"
    },
    "6086": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP5",
      "path": "37"
    },
    "6087": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "6088": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP4",
      "path": "37"
    },
    "6089": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH1",
      "path": "37",
      "value": "0xFF"
    },
    "6091": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP1",
      "path": "37"
    },
    "6092": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP4",
      "path": "37"
    },
    "6093": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "AND",
      "path": "37"
    },
    "6094": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP5",
      "path": "37"
    },
    "6095": {
      "op": "POP"
    },
    "6096": {
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH2",
      "path": "37",
      "value": "0x100"
    },
    "6099": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP4",
      "path": "37"
    },
    "6100": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DIV",
      "path": "37"
    },
    "6101": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP2",
      "path": "37"
    },
    "6102": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "AND",
      "path": "37"
    },
    "6103": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP4",
      "path": "37"
    },
    "6104": {
      "op": "POP"
    },
    "6105": {
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH3",
      "path": "37",
      "value": "0x10000"
    },
    "6109": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP4",
      "path": "37"
    },
    "6110": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DIV",
      "path": "37"
    },
    "6111": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP2",
      "path": "37"
    },
    "6112": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "AND",
      "path": "37"
    },
    "6113": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP3",
      "path": "37"
    },
    "6114": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "PUSH4",
      "path": "37",
      "value": "0x1000000"
    },
    "6119": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "6120": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DIV",
      "path": "37"
    },
    "6121": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "AND",
      "path": "37"
    },
    "6122": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "SWAP1",
      "path": "37"
    },
    "6123": {
      "fn": "CLHouse.PropRemoveMember",
      "offset": [
        1182,
        1215
      ],
      "op": "DUP10",
      "path": "37"
    },
    "6124": {
      "fn": "CLHouse.PropRemoveMember",
      "jump": "o",
      "offset": [
        1182,
        1215
      ],
      "op": "JUMP",
      "path": "37"
    },
    "6125": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11038,
        11901
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "6126": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11338
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x2"
    },
    "6128": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11338
      ],
      "op": "SLOAD",
      "path": "35"
    },
    "6129": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11365,
        11615
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "6131": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11365,
        11615
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "6132": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11245,
        11259
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "6134": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11245,
        11259
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "6135": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11245,
        11259
      ],
      "op": "DUP3",
      "path": "35"
    },
    "6136": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11245,
        11259
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "6137": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11245,
        11259
      ],
      "op": "DUP3",
      "path": "35"
    },
    "6138": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11245,
        11259
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "6139": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6141": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6143": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6145": {
      "op": "SHL"
    },
    "6146": {
      "op": "SUB"
    },
    "6147": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11338
      ],
      "op": "AND",
      "path": "35"
    },
    "6148": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11338
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "6149": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11365,
        11615
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x181A"
    },
    "6152": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11365,
        11615
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "6153": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11479,
        11482
      ],
      "op": "DUP11",
      "path": "35"
    },
    "6154": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11479,
        11482
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "6155": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11500,
        11513
      ],
      "op": "DUP11",
      "path": "35"
    },
    "6156": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11500,
        11513
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "6157": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11531,
        11543
      ],
      "op": "DUP11",
      "path": "35"
    },
    "6158": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11531,
        11543
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "6159": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11561,
        11573
      ],
      "op": "DUP11",
      "path": "35"
    },
    "6160": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11561,
        11573
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "6161": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11591,
        11601
      ],
      "op": "DUP11",
      "path": "35"
    },
    "6162": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11591,
        11601
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "6163": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11365,
        11615
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x24"
    },
    "6165": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11365,
        11615
      ],
      "op": "ADD",
      "path": "35"
    },
    "6166": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11365,
        11615
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x2229"
    },
    "6169": {
      "fn": "CLHouse.PropTxERC20",
      "jump": "i",
      "offset": [
        11365,
        11615
      ],
      "op": "JUMP",
      "path": "35"
    },
    "6170": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11365,
        11615
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "6171": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11365,
        11615
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "6173": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11365,
        11615
      ],
      "op": "DUP1",
      "path": "35"
    },
    "6174": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11365,
        11615
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "6175": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "6177": {
      "op": "NOT"
    },
    "6178": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11365,
        11615
      ],
      "op": "DUP2",
      "path": "35"
    },
    "6179": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11365,
        11615
      ],
      "op": "DUP5",
      "path": "35"
    },
    "6180": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11365,
        11615
      ],
      "op": "SUB",
      "path": "35"
    },
    "6181": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11365,
        11615
      ],
      "op": "ADD",
      "path": "35"
    },
    "6182": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11365,
        11615
      ],
      "op": "DUP2",
      "path": "35"
    },
    "6183": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11365,
        11615
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "6184": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11365,
        11615
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "6185": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11365,
        11615
      ],
      "op": "DUP2",
      "path": "35"
    },
    "6186": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11365,
        11615
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "6187": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11365,
        11615
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "6189": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11365,
        11615
      ],
      "op": "DUP3",
      "path": "35"
    },
    "6190": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11365,
        11615
      ],
      "op": "ADD",
      "path": "35"
    },
    "6191": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11365,
        11615
      ],
      "op": "DUP1",
      "path": "35"
    },
    "6192": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11365,
        11615
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "6193": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6195": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6197": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "6199": {
      "op": "SHL"
    },
    "6200": {
      "op": "SUB"
    },
    "6201": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11365,
        11615
      ],
      "op": "AND",
      "path": "35"
    },
    "6202": {
      "op": "PUSH4",
      "value": "0x6F2D58A7"
    },
    "6207": {
      "op": "PUSH1",
      "value": "0xE1"
    },
    "6209": {
      "op": "SHL"
    },
    "6210": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11365,
        11615
      ],
      "op": "OR",
      "path": "35"
    },
    "6211": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11365,
        11615
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "6212": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11365,
        11615
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "6213": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "6214": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x184F"
    },
    "6217": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "6218": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11365,
        11615
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "6219": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x2077"
    },
    "6222": {
      "fn": "CLHouse.PropTxERC20",
      "jump": "i",
      "offset": [
        11325,
        11625
      ],
      "op": "JUMP",
      "path": "35"
    },
    "6223": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "6224": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "6226": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "6228": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "6229": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "DUP1",
      "path": "35"
    },
    "6230": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "DUP4",
      "path": "35"
    },
    "6231": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "SUB",
      "path": "35"
    },
    "6232": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "DUP2",
      "path": "35"
    },
    "6233": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "DUP6",
      "path": "35"
    },
    "6234": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "GAS",
      "path": "35"
    },
    "6235": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "DELEGATECALL",
      "path": "35"
    },
    "6236": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "6237": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "POP",
      "path": "35"
    },
    "6238": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "POP",
      "path": "35"
    },
    "6239": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "6240": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "DUP1",
      "path": "35"
    },
    "6241": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "6243": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "DUP2",
      "path": "35"
    },
    "6244": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "EQ",
      "path": "35"
    },
    "6245": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x188A"
    },
    "6248": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "6249": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "6251": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "6252": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "6253": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "POP",
      "path": "35"
    },
    "6254": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x1F"
    },
    "6256": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "NOT",
      "path": "35"
    },
    "6257": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x3F"
    },
    "6259": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "6260": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "ADD",
      "path": "35"
    },
    "6261": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "AND",
      "path": "35"
    },
    "6262": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "DUP3",
      "path": "35"
    },
    "6263": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "ADD",
      "path": "35"
    },
    "6264": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "6266": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "6267": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "6268": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "DUP3",
      "path": "35"
    },
    "6269": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "6270": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "6271": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "6273": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "6275": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "DUP5",
      "path": "35"
    },
    "6276": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "ADD",
      "path": "35"
    },
    "6277": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "RETURNDATACOPY",
      "path": "35"
    },
    "6278": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x188F"
    },
    "6281": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "JUMP",
      "path": "35"
    },
    "6282": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "6283": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x60"
    },
    "6285": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "6286": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "POP",
      "path": "35"
    },
    "6287": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "6288": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11325,
        11625
      ],
      "op": "POP",
      "path": "35"
    },
    "6289": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11276,
        11625
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "6290": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11276,
        11625
      ],
      "op": "POP",
      "path": "35"
    },
    "6291": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11276,
        11625
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "6292": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11276,
        11625
      ],
      "op": "POP",
      "path": "35"
    },
    "6293": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11676,
        11680
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "6295": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11670,
        11681
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "6296": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11706,
        11722
      ],
      "op": "RETURNDATASIZE",
      "path": "35"
    },
    "6297": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11758,
        11762
      ],
      "op": "DUP1",
      "path": "35"
    },
    "6298": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11755,
        11756
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "6300": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11750,
        11753
      ],
      "op": "DUP4",
      "path": "35"
    },
    "6301": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11735,
        11763
      ],
      "op": "RETURNDATACOPY",
      "path": "35"
    },
    "6302": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11787,
        11800
      ],
      "op": "DUP4",
      "path": "35"
    },
    "6303": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11776,
        11852
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x18A6"
    },
    "6306": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11776,
        11852
      ],
      "op": "JUMPI",
      "path": "35"
    },
    "6307": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11833,
        11837
      ],
      "op": "DUP1",
      "path": "35"
    },
    "6308": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11828,
        11831
      ],
      "op": "DUP3",
      "path": "35"
    },
    "6309": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11821,
        11838
      ],
      "op": "REVERT",
      "path": "35"
    },
    "6310": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11776,
        11852
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "6311": {
      "op": "POP"
    },
    "6312": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11875,
        11885
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "6313": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11875,
        11885
      ],
      "op": "SWAP9",
      "path": "35"
    },
    "6314": {
      "fn": "CLHouse.PropTxERC20",
      "offset": [
        11038,
        11901
      ],
      "op": "SWAP8",
      "path": "35"
    },
    "6315": {
      "op": "POP"
    },
    "6316": {
      "op": "POP"
    },
    "6317": {
      "op": "POP"
    },
    "6318": {
      "op": "POP"
    },
    "6319": {
      "op": "POP"
    },
    "6320": {
      "op": "POP"
    },
    "6321": {
      "op": "POP"
    },
    "6322": {
      "op": "POP"
    },
    "6323": {
      "fn": "CLHouse.PropTxERC20",
      "jump": "o",
      "offset": [
        11038,
        11901
      ],
      "op": "JUMP",
      "path": "35"
    },
    "6324": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7656,
        8524
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "6325": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7949,
        7962
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x2"
    },
    "6327": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7949,
        7962
      ],
      "op": "SLOAD",
      "path": "35"
    },
    "6328": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7989,
        8238
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "6330": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7989,
        8238
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "6331": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7869,
        7883
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x0"
    },
    "6333": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7869,
        7883
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "6334": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7869,
        7883
      ],
      "op": "DUP3",
      "path": "35"
    },
    "6335": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7869,
        7883
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "6336": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7869,
        7883
      ],
      "op": "DUP3",
      "path": "35"
    },
    "6337": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7869,
        7883
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "6338": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6340": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6342": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6344": {
      "op": "SHL"
    },
    "6345": {
      "op": "SUB"
    },
    "6346": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7949,
        7962
      ],
      "op": "AND",
      "path": "35"
    },
    "6347": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7949,
        7962
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "6348": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7989,
        8238
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x18E1"
    },
    "6351": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7989,
        8238
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "6352": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        8104,
        8115
      ],
      "op": "DUP11",
      "path": "35"
    },
    "6353": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        8104,
        8115
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "6354": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        8133,
        8138
      ],
      "op": "DUP11",
      "path": "35"
    },
    "6355": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        8133,
        8138
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "6356": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        8156,
        8168
      ],
      "op": "DUP11",
      "path": "35"
    },
    "6357": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        8156,
        8168
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "6358": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        8186,
        8196
      ],
      "op": "DUP11",
      "path": "35"
    },
    "6359": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        8186,
        8196
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "6360": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        8214,
        8224
      ],
      "op": "DUP11",
      "path": "35"
    },
    "6361": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        8214,
        8224
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "6362": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7989,
        8238
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x24"
    },
    "6364": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7989,
        8238
      ],
      "op": "ADD",
      "path": "35"
    },
    "6365": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7989,
        8238
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x225C"
    },
    "6368": {
      "fn": "CLHouse.PropInviteMember",
      "jump": "i",
      "offset": [
        7989,
        8238
      ],
      "op": "JUMP",
      "path": "35"
    },
    "6369": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7989,
        8238
      ],
      "op": "JUMPDEST",
      "path": "35"
    },
    "6370": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7989,
        8238
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x40"
    },
    "6372": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7989,
        8238
      ],
      "op": "DUP1",
      "path": "35"
    },
    "6373": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7989,
        8238
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "6374": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "6376": {
      "op": "NOT"
    },
    "6377": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7989,
        8238
      ],
      "op": "DUP2",
      "path": "35"
    },
    "6378": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7989,
        8238
      ],
      "op": "DUP5",
      "path": "35"
    },
    "6379": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7989,
        8238
      ],
      "op": "SUB",
      "path": "35"
    },
    "6380": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7989,
        8238
      ],
      "op": "ADD",
      "path": "35"
    },
    "6381": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7989,
        8238
      ],
      "op": "DUP2",
      "path": "35"
    },
    "6382": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7989,
        8238
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "6383": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7989,
        8238
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "6384": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7989,
        8238
      ],
      "op": "DUP2",
      "path": "35"
    },
    "6385": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7989,
        8238
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "6386": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7989,
        8238
      ],
      "op": "PUSH1",
      "path": "35",
      "value": "0x20"
    },
    "6388": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7989,
        8238
      ],
      "op": "DUP3",
      "path": "35"
    },
    "6389": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7989,
        8238
      ],
      "op": "ADD",
      "path": "35"
    },
    "6390": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7989,
        8238
      ],
      "op": "DUP1",
      "path": "35"
    },
    "6391": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7989,
        8238
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "6392": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6394": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6396": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "6398": {
      "op": "SHL"
    },
    "6399": {
      "op": "SUB"
    },
    "6400": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7989,
        8238
      ],
      "op": "AND",
      "path": "35"
    },
    "6401": {
      "op": "PUSH4",
      "value": "0x7F3756F3"
    },
    "6406": {
      "op": "PUSH1",
      "value": "0xE1"
    },
    "6408": {
      "op": "SHL"
    },
    "6409": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7989,
        8238
      ],
      "op": "OR",
      "path": "35"
    },
    "6410": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7989,
        8238
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "6411": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7989,
        8238
      ],
      "op": "MSTORE",
      "path": "35"
    },
    "6412": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7949,
        8248
      ],
      "op": "MLOAD",
      "path": "35"
    },
    "6413": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7949,
        8248
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x184F"
    },
    "6416": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7949,
        8248
      ],
      "op": "SWAP2",
      "path": "35"
    },
    "6417": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7989,
        8238
      ],
      "op": "SWAP1",
      "path": "35"
    },
    "6418": {
      "fn": "CLHouse.PropInviteMember",
      "offset": [
        7949,
        8248
      ],
      "op": "PUSH2",
      "path": "35",
      "value": "0x2077"
    },
    "6421": {
      "fn": "CLHouse.PropInviteMember",
      "jump": "i",
      "offset": [
        7949,
        8248
      ],
      "op": "JUMP",
      "path": "35"
    },
    "6422": {
      "op": "JUMPDEST"
    },
    "6423": {
      "op": "DUP3"
    },
    "6424": {
      "op": "DUP1"
    },
    "6425": {
      "op": "SLOAD"
    },
    "6426": {
      "op": "PUSH2",
      "value": "0x1922"
    },
    "6429": {
      "op": "SWAP1"
    },
    "6430": {
      "op": "PUSH2",
      "value": "0x20FD"
    },
    "6433": {
      "jump": "i",
      "op": "JUMP"
    },
    "6434": {
      "op": "JUMPDEST"
    },
    "6435": {
      "op": "SWAP1"
    },
    "6436": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6438": {
      "op": "MSTORE"
    },
    "6439": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6441": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6443": {
      "op": "KECCAK256"
    },
    "6444": {
      "op": "SWAP1"
    },
    "6445": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "6447": {
      "op": "ADD"
    },
    "6448": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6450": {
      "op": "SWAP1"
    },
    "6451": {
      "op": "DIV"
    },
    "6452": {
      "op": "DUP2"
    },
    "6453": {
      "op": "ADD"
    },
    "6454": {
      "op": "SWAP3"
    },
    "6455": {
      "op": "DUP3"
    },
    "6456": {
      "op": "PUSH2",
      "value": "0x1944"
    },
    "6459": {
      "op": "JUMPI"
    },
    "6460": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6462": {
      "op": "DUP6"
    },
    "6463": {
      "op": "SSTORE"
    },
    "6464": {
      "op": "PUSH2",
      "value": "0x198A"
    },
    "6467": {
      "op": "JUMP"
    },
    "6468": {
      "op": "JUMPDEST"
    },
    "6469": {
      "op": "DUP3"
    },
    "6470": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "6472": {
      "op": "LT"
    },
    "6473": {
      "op": "PUSH2",
      "value": "0x195D"
    },
    "6476": {
      "op": "JUMPI"
    },
    "6477": {
      "op": "DUP1"
    },
    "6478": {
      "op": "MLOAD"
    },
    "6479": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "6481": {
      "op": "NOT"
    },
    "6482": {
      "op": "AND"
    },
    "6483": {
      "op": "DUP4"
    },
    "6484": {
      "op": "DUP1"
    },
    "6485": {
      "op": "ADD"
    },
    "6486": {
      "op": "OR"
    },
    "6487": {
      "op": "DUP6"
    },
    "6488": {
      "op": "SSTORE"
    },
    "6489": {
      "op": "PUSH2",
      "value": "0x198A"
    },
    "6492": {
      "op": "JUMP"
    },
    "6493": {
      "op": "JUMPDEST"
    },
    "6494": {
      "op": "DUP3"
    },
    "6495": {
      "op": "DUP1"
    },
    "6496": {
      "op": "ADD"
    },
    "6497": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6499": {
      "op": "ADD"
    },
    "6500": {
      "op": "DUP6"
    },
    "6501": {
      "op": "SSTORE"
    },
    "6502": {
      "op": "DUP3"
    },
    "6503": {
      "op": "ISZERO"
    },
    "6504": {
      "op": "PUSH2",
      "value": "0x198A"
    },
    "6507": {
      "op": "JUMPI"
    },
    "6508": {
      "op": "SWAP2"
    },
    "6509": {
      "op": "DUP3"
    },
    "6510": {
      "op": "ADD"
    },
    "6511": {
      "op": "JUMPDEST"
    },
    "6512": {
      "op": "DUP3"
    },
    "6513": {
      "op": "DUP2"
    },
    "6514": {
      "op": "GT"
    },
    "6515": {
      "op": "ISZERO"
    },
    "6516": {
      "op": "PUSH2",
      "value": "0x198A"
    },
    "6519": {
      "op": "JUMPI"
    },
    "6520": {
      "op": "DUP3"
    },
    "6521": {
      "op": "MLOAD"
    },
    "6522": {
      "op": "DUP3"
    },
    "6523": {
      "op": "SSTORE"
    },
    "6524": {
      "op": "SWAP2"
    },
    "6525": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6527": {
      "op": "ADD"
    },
    "6528": {
      "op": "SWAP2"
    },
    "6529": {
      "op": "SWAP1"
    },
    "6530": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6532": {
      "op": "ADD"
    },
    "6533": {
      "op": "SWAP1"
    },
    "6534": {
      "op": "PUSH2",
      "value": "0x196F"
    },
    "6537": {
      "op": "JUMP"
    },
    "6538": {
      "op": "JUMPDEST"
    },
    "6539": {
      "op": "POP"
    },
    "6540": {
      "op": "PUSH2",
      "value": "0x1996"
    },
    "6543": {
      "op": "SWAP3"
    },
    "6544": {
      "op": "SWAP2"
    },
    "6545": {
      "op": "POP"
    },
    "6546": {
      "op": "PUSH2",
      "value": "0x199A"
    },
    "6549": {
      "jump": "i",
      "op": "JUMP"
    },
    "6550": {
      "op": "JUMPDEST"
    },
    "6551": {
      "op": "POP"
    },
    "6552": {
      "op": "SWAP1"
    },
    "6553": {
      "jump": "o",
      "op": "JUMP"
    },
    "6554": {
      "op": "JUMPDEST"
    },
    "6555": {
      "op": "JUMPDEST"
    },
    "6556": {
      "op": "DUP1"
    },
    "6557": {
      "op": "DUP3"
    },
    "6558": {
      "op": "GT"
    },
    "6559": {
      "op": "ISZERO"
    },
    "6560": {
      "op": "PUSH2",
      "value": "0x1996"
    },
    "6563": {
      "op": "JUMPI"
    },
    "6564": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6566": {
      "op": "DUP2"
    },
    "6567": {
      "op": "SSTORE"
    },
    "6568": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6570": {
      "op": "ADD"
    },
    "6571": {
      "op": "PUSH2",
      "value": "0x199B"
    },
    "6574": {
      "op": "JUMP"
    },
    "6575": {
      "op": "JUMPDEST"
    },
    "6576": {
      "op": "DUP1"
    },
    "6577": {
      "op": "CALLDATALOAD"
    },
    "6578": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6580": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6582": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6584": {
      "op": "SHL"
    },
    "6585": {
      "op": "SUB"
    },
    "6586": {
      "op": "DUP2"
    },
    "6587": {
      "op": "AND"
    },
    "6588": {
      "op": "DUP2"
    },
    "6589": {
      "op": "EQ"
    },
    "6590": {
      "op": "PUSH2",
      "value": "0x19C6"
    },
    "6593": {
      "op": "JUMPI"
    },
    "6594": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6596": {
      "op": "DUP1"
    },
    "6597": {
      "op": "REVERT"
    },
    "6598": {
      "op": "JUMPDEST"
    },
    "6599": {
      "op": "SWAP2"
    },
    "6600": {
      "op": "SWAP1"
    },
    "6601": {
      "op": "POP"
    },
    "6602": {
      "jump": "o",
      "op": "JUMP"
    },
    "6603": {
      "op": "JUMPDEST"
    },
    "6604": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "6609": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "6611": {
      "op": "SHL"
    },
    "6612": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6614": {
      "op": "MSTORE"
    },
    "6615": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "6617": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "6619": {
      "op": "MSTORE"
    },
    "6620": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "6622": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6624": {
      "op": "REVERT"
    },
    "6625": {
      "op": "JUMPDEST"
    },
    "6626": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6628": {
      "op": "DUP3"
    },
    "6629": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "6631": {
      "op": "DUP4"
    },
    "6632": {
      "op": "ADD"
    },
    "6633": {
      "op": "SLT"
    },
    "6634": {
      "op": "PUSH2",
      "value": "0x19F2"
    },
    "6637": {
      "op": "JUMPI"
    },
    "6638": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6640": {
      "op": "DUP1"
    },
    "6641": {
      "op": "REVERT"
    },
    "6642": {
      "op": "JUMPDEST"
    },
    "6643": {
      "op": "DUP2"
    },
    "6644": {
      "op": "CALLDATALOAD"
    },
    "6645": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "6654": {
      "op": "DUP1"
    },
    "6655": {
      "op": "DUP3"
    },
    "6656": {
      "op": "GT"
    },
    "6657": {
      "op": "ISZERO"
    },
    "6658": {
      "op": "PUSH2",
      "value": "0x1A0D"
    },
    "6661": {
      "op": "JUMPI"
    },
    "6662": {
      "op": "PUSH2",
      "value": "0x1A0D"
    },
    "6665": {
      "op": "PUSH2",
      "value": "0x19CB"
    },
    "6668": {
      "jump": "i",
      "op": "JUMP"
    },
    "6669": {
      "op": "JUMPDEST"
    },
    "6670": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6672": {
      "op": "MLOAD"
    },
    "6673": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "6675": {
      "op": "DUP4"
    },
    "6676": {
      "op": "ADD"
    },
    "6677": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "6679": {
      "op": "NOT"
    },
    "6680": {
      "op": "SWAP1"
    },
    "6681": {
      "op": "DUP2"
    },
    "6682": {
      "op": "AND"
    },
    "6683": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "6685": {
      "op": "ADD"
    },
    "6686": {
      "op": "AND"
    },
    "6687": {
      "op": "DUP2"
    },
    "6688": {
      "op": "ADD"
    },
    "6689": {
      "op": "SWAP1"
    },
    "6690": {
      "op": "DUP3"
    },
    "6691": {
      "op": "DUP3"
    },
    "6692": {
      "op": "GT"
    },
    "6693": {
      "op": "DUP2"
    },
    "6694": {
      "op": "DUP4"
    },
    "6695": {
      "op": "LT"
    },
    "6696": {
      "op": "OR"
    },
    "6697": {
      "op": "ISZERO"
    },
    "6698": {
      "op": "PUSH2",
      "value": "0x1A35"
    },
    "6701": {
      "op": "JUMPI"
    },
    "6702": {
      "op": "PUSH2",
      "value": "0x1A35"
    },
    "6705": {
      "op": "PUSH2",
      "value": "0x19CB"
    },
    "6708": {
      "jump": "i",
      "op": "JUMP"
    },
    "6709": {
      "op": "JUMPDEST"
    },
    "6710": {
      "op": "DUP2"
    },
    "6711": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6713": {
      "op": "MSTORE"
    },
    "6714": {
      "op": "DUP4"
    },
    "6715": {
      "op": "DUP2"
    },
    "6716": {
      "op": "MSTORE"
    },
    "6717": {
      "op": "DUP7"
    },
    "6718": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6720": {
      "op": "DUP6"
    },
    "6721": {
      "op": "DUP9"
    },
    "6722": {
      "op": "ADD"
    },
    "6723": {
      "op": "ADD"
    },
    "6724": {
      "op": "GT"
    },
    "6725": {
      "op": "ISZERO"
    },
    "6726": {
      "op": "PUSH2",
      "value": "0x1A4E"
    },
    "6729": {
      "op": "JUMPI"
    },
    "6730": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6732": {
      "op": "DUP1"
    },
    "6733": {
      "op": "REVERT"
    },
    "6734": {
      "op": "JUMPDEST"
    },
    "6735": {
      "op": "DUP4"
    },
    "6736": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6738": {
      "op": "DUP8"
    },
    "6739": {
      "op": "ADD"
    },
    "6740": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6742": {
      "op": "DUP4"
    },
    "6743": {
      "op": "ADD"
    },
    "6744": {
      "op": "CALLDATACOPY"
    },
    "6745": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6747": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6749": {
      "op": "DUP6"
    },
    "6750": {
      "op": "DUP4"
    },
    "6751": {
      "op": "ADD"
    },
    "6752": {
      "op": "ADD"
    },
    "6753": {
      "op": "MSTORE"
    },
    "6754": {
      "op": "DUP1"
    },
    "6755": {
      "op": "SWAP5"
    },
    "6756": {
      "op": "POP"
    },
    "6757": {
      "op": "POP"
    },
    "6758": {
      "op": "POP"
    },
    "6759": {
      "op": "POP"
    },
    "6760": {
      "op": "POP"
    },
    "6761": {
      "op": "SWAP3"
    },
    "6762": {
      "op": "SWAP2"
    },
    "6763": {
      "op": "POP"
    },
    "6764": {
      "op": "POP"
    },
    "6765": {
      "jump": "o",
      "op": "JUMP"
    },
    "6766": {
      "op": "JUMPDEST"
    },
    "6767": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6769": {
      "op": "DUP1"
    },
    "6770": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6772": {
      "op": "DUP1"
    },
    "6773": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "6775": {
      "op": "DUP6"
    },
    "6776": {
      "op": "DUP8"
    },
    "6777": {
      "op": "SUB"
    },
    "6778": {
      "op": "SLT"
    },
    "6779": {
      "op": "ISZERO"
    },
    "6780": {
      "op": "PUSH2",
      "value": "0x1A84"
    },
    "6783": {
      "op": "JUMPI"
    },
    "6784": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6786": {
      "op": "DUP1"
    },
    "6787": {
      "op": "REVERT"
    },
    "6788": {
      "op": "JUMPDEST"
    },
    "6789": {
      "op": "PUSH2",
      "value": "0x1A8D"
    },
    "6792": {
      "op": "DUP6"
    },
    "6793": {
      "op": "PUSH2",
      "value": "0x19AF"
    },
    "6796": {
      "jump": "i",
      "op": "JUMP"
    },
    "6797": {
      "op": "JUMPDEST"
    },
    "6798": {
      "op": "SWAP4"
    },
    "6799": {
      "op": "POP"
    },
    "6800": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6802": {
      "op": "DUP6"
    },
    "6803": {
      "op": "ADD"
    },
    "6804": {
      "op": "CALLDATALOAD"
    },
    "6805": {
      "op": "SWAP3"
    },
    "6806": {
      "op": "POP"
    },
    "6807": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6809": {
      "op": "DUP6"
    },
    "6810": {
      "op": "ADD"
    },
    "6811": {
      "op": "CALLDATALOAD"
    },
    "6812": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "6821": {
      "op": "DUP2"
    },
    "6822": {
      "op": "GT"
    },
    "6823": {
      "op": "ISZERO"
    },
    "6824": {
      "op": "PUSH2",
      "value": "0x1AB0"
    },
    "6827": {
      "op": "JUMPI"
    },
    "6828": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6830": {
      "op": "DUP1"
    },
    "6831": {
      "op": "REVERT"
    },
    "6832": {
      "op": "JUMPDEST"
    },
    "6833": {
      "op": "PUSH2",
      "value": "0x1ABC"
    },
    "6836": {
      "op": "DUP8"
    },
    "6837": {
      "op": "DUP3"
    },
    "6838": {
      "op": "DUP9"
    },
    "6839": {
      "op": "ADD"
    },
    "6840": {
      "op": "PUSH2",
      "value": "0x19E1"
    },
    "6843": {
      "jump": "i",
      "op": "JUMP"
    },
    "6844": {
      "op": "JUMPDEST"
    },
    "6845": {
      "op": "SWAP5"
    },
    "6846": {
      "op": "SWAP8"
    },
    "6847": {
      "op": "SWAP4"
    },
    "6848": {
      "op": "SWAP7"
    },
    "6849": {
      "op": "POP"
    },
    "6850": {
      "op": "SWAP4"
    },
    "6851": {
      "op": "SWAP5"
    },
    "6852": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "6854": {
      "op": "ADD"
    },
    "6855": {
      "op": "CALLDATALOAD"
    },
    "6856": {
      "op": "SWAP4"
    },
    "6857": {
      "op": "POP"
    },
    "6858": {
      "op": "POP"
    },
    "6859": {
      "op": "POP"
    },
    "6860": {
      "jump": "o",
      "op": "JUMP"
    },
    "6861": {
      "op": "JUMPDEST"
    },
    "6862": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6864": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6866": {
      "op": "DUP3"
    },
    "6867": {
      "op": "DUP5"
    },
    "6868": {
      "op": "SUB"
    },
    "6869": {
      "op": "SLT"
    },
    "6870": {
      "op": "ISZERO"
    },
    "6871": {
      "op": "PUSH2",
      "value": "0x1ADF"
    },
    "6874": {
      "op": "JUMPI"
    },
    "6875": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6877": {
      "op": "DUP1"
    },
    "6878": {
      "op": "REVERT"
    },
    "6879": {
      "op": "JUMPDEST"
    },
    "6880": {
      "op": "PUSH2",
      "value": "0x1AE8"
    },
    "6883": {
      "op": "DUP3"
    },
    "6884": {
      "op": "PUSH2",
      "value": "0x19AF"
    },
    "6887": {
      "jump": "i",
      "op": "JUMP"
    },
    "6888": {
      "op": "JUMPDEST"
    },
    "6889": {
      "op": "SWAP4"
    },
    "6890": {
      "op": "SWAP3"
    },
    "6891": {
      "op": "POP"
    },
    "6892": {
      "op": "POP"
    },
    "6893": {
      "op": "POP"
    },
    "6894": {
      "jump": "o",
      "op": "JUMP"
    },
    "6895": {
      "op": "JUMPDEST"
    },
    "6896": {
      "op": "DUP1"
    },
    "6897": {
      "op": "CALLDATALOAD"
    },
    "6898": {
      "op": "DUP1"
    },
    "6899": {
      "op": "ISZERO"
    },
    "6900": {
      "op": "ISZERO"
    },
    "6901": {
      "op": "DUP2"
    },
    "6902": {
      "op": "EQ"
    },
    "6903": {
      "op": "PUSH2",
      "value": "0x19C6"
    },
    "6906": {
      "op": "JUMPI"
    },
    "6907": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6909": {
      "op": "DUP1"
    },
    "6910": {
      "op": "REVERT"
    },
    "6911": {
      "op": "JUMPDEST"
    },
    "6912": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6914": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6916": {
      "op": "DUP3"
    },
    "6917": {
      "op": "DUP5"
    },
    "6918": {
      "op": "SUB"
    },
    "6919": {
      "op": "SLT"
    },
    "6920": {
      "op": "ISZERO"
    },
    "6921": {
      "op": "PUSH2",
      "value": "0x1B11"
    },
    "6924": {
      "op": "JUMPI"
    },
    "6925": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6927": {
      "op": "DUP1"
    },
    "6928": {
      "op": "REVERT"
    },
    "6929": {
      "op": "JUMPDEST"
    },
    "6930": {
      "op": "PUSH2",
      "value": "0x1AE8"
    },
    "6933": {
      "op": "DUP3"
    },
    "6934": {
      "op": "PUSH2",
      "value": "0x1AEF"
    },
    "6937": {
      "jump": "i",
      "op": "JUMP"
    },
    "6938": {
      "op": "JUMPDEST"
    },
    "6939": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6941": {
      "op": "DUP1"
    },
    "6942": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6944": {
      "op": "DUP1"
    },
    "6945": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6947": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6949": {
      "op": "DUP7"
    },
    "6950": {
      "op": "DUP9"
    },
    "6951": {
      "op": "SUB"
    },
    "6952": {
      "op": "SLT"
    },
    "6953": {
      "op": "ISZERO"
    },
    "6954": {
      "op": "PUSH2",
      "value": "0x1B32"
    },
    "6957": {
      "op": "JUMPI"
    },
    "6958": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6960": {
      "op": "DUP1"
    },
    "6961": {
      "op": "REVERT"
    },
    "6962": {
      "op": "JUMPDEST"
    },
    "6963": {
      "op": "PUSH2",
      "value": "0x1B3B"
    },
    "6966": {
      "op": "DUP7"
    },
    "6967": {
      "op": "PUSH2",
      "value": "0x19AF"
    },
    "6970": {
      "jump": "i",
      "op": "JUMP"
    },
    "6971": {
      "op": "JUMPDEST"
    },
    "6972": {
      "op": "SWAP5"
    },
    "6973": {
      "op": "POP"
    },
    "6974": {
      "op": "PUSH2",
      "value": "0x1B49"
    },
    "6977": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6979": {
      "op": "DUP8"
    },
    "6980": {
      "op": "ADD"
    },
    "6981": {
      "op": "PUSH2",
      "value": "0x19AF"
    },
    "6984": {
      "jump": "i",
      "op": "JUMP"
    },
    "6985": {
      "op": "JUMPDEST"
    },
    "6986": {
      "op": "SWAP4"
    },
    "6987": {
      "op": "POP"
    },
    "6988": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6990": {
      "op": "DUP7"
    },
    "6991": {
      "op": "ADD"
    },
    "6992": {
      "op": "CALLDATALOAD"
    },
    "6993": {
      "op": "SWAP3"
    },
    "6994": {
      "op": "POP"
    },
    "6995": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "6997": {
      "op": "DUP7"
    },
    "6998": {
      "op": "ADD"
    },
    "6999": {
      "op": "CALLDATALOAD"
    },
    "7000": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "7009": {
      "op": "DUP2"
    },
    "7010": {
      "op": "GT"
    },
    "7011": {
      "op": "ISZERO"
    },
    "7012": {
      "op": "PUSH2",
      "value": "0x1B6C"
    },
    "7015": {
      "op": "JUMPI"
    },
    "7016": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7018": {
      "op": "DUP1"
    },
    "7019": {
      "op": "REVERT"
    },
    "7020": {
      "op": "JUMPDEST"
    },
    "7021": {
      "op": "PUSH2",
      "value": "0x1B78"
    },
    "7024": {
      "op": "DUP9"
    },
    "7025": {
      "op": "DUP3"
    },
    "7026": {
      "op": "DUP10"
    },
    "7027": {
      "op": "ADD"
    },
    "7028": {
      "op": "PUSH2",
      "value": "0x19E1"
    },
    "7031": {
      "jump": "i",
      "op": "JUMP"
    },
    "7032": {
      "op": "JUMPDEST"
    },
    "7033": {
      "op": "SWAP6"
    },
    "7034": {
      "op": "SWAP9"
    },
    "7035": {
      "op": "SWAP5"
    },
    "7036": {
      "op": "SWAP8"
    },
    "7037": {
      "op": "POP"
    },
    "7038": {
      "op": "SWAP3"
    },
    "7039": {
      "op": "SWAP6"
    },
    "7040": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "7042": {
      "op": "ADD"
    },
    "7043": {
      "op": "CALLDATALOAD"
    },
    "7044": {
      "op": "SWAP4"
    },
    "7045": {
      "op": "SWAP3"
    },
    "7046": {
      "op": "POP"
    },
    "7047": {
      "op": "POP"
    },
    "7048": {
      "op": "POP"
    },
    "7049": {
      "jump": "o",
      "op": "JUMP"
    },
    "7050": {
      "op": "JUMPDEST"
    },
    "7051": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7053": {
      "op": "DUP1"
    },
    "7054": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "7056": {
      "op": "DUP4"
    },
    "7057": {
      "op": "DUP6"
    },
    "7058": {
      "op": "SUB"
    },
    "7059": {
      "op": "SLT"
    },
    "7060": {
      "op": "ISZERO"
    },
    "7061": {
      "op": "PUSH2",
      "value": "0x1B9D"
    },
    "7064": {
      "op": "JUMPI"
    },
    "7065": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7067": {
      "op": "DUP1"
    },
    "7068": {
      "op": "REVERT"
    },
    "7069": {
      "op": "JUMPDEST"
    },
    "7070": {
      "op": "DUP3"
    },
    "7071": {
      "op": "CALLDATALOAD"
    },
    "7072": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "7081": {
      "op": "DUP1"
    },
    "7082": {
      "op": "DUP3"
    },
    "7083": {
      "op": "GT"
    },
    "7084": {
      "op": "ISZERO"
    },
    "7085": {
      "op": "PUSH2",
      "value": "0x1BB5"
    },
    "7088": {
      "op": "JUMPI"
    },
    "7089": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7091": {
      "op": "DUP1"
    },
    "7092": {
      "op": "REVERT"
    },
    "7093": {
      "op": "JUMPDEST"
    },
    "7094": {
      "op": "PUSH2",
      "value": "0x1BC1"
    },
    "7097": {
      "op": "DUP7"
    },
    "7098": {
      "op": "DUP4"
    },
    "7099": {
      "op": "DUP8"
    },
    "7100": {
      "op": "ADD"
    },
    "7101": {
      "op": "PUSH2",
      "value": "0x19E1"
    },
    "7104": {
      "jump": "i",
      "op": "JUMP"
    },
    "7105": {
      "op": "JUMPDEST"
    },
    "7106": {
      "op": "SWAP4"
    },
    "7107": {
      "op": "POP"
    },
    "7108": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7110": {
      "op": "DUP6"
    },
    "7111": {
      "op": "ADD"
    },
    "7112": {
      "op": "CALLDATALOAD"
    },
    "7113": {
      "op": "SWAP2"
    },
    "7114": {
      "op": "POP"
    },
    "7115": {
      "op": "DUP1"
    },
    "7116": {
      "op": "DUP3"
    },
    "7117": {
      "op": "GT"
    },
    "7118": {
      "op": "ISZERO"
    },
    "7119": {
      "op": "PUSH2",
      "value": "0x1BD7"
    },
    "7122": {
      "op": "JUMPI"
    },
    "7123": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7125": {
      "op": "DUP1"
    },
    "7126": {
      "op": "REVERT"
    },
    "7127": {
      "op": "JUMPDEST"
    },
    "7128": {
      "op": "POP"
    },
    "7129": {
      "op": "PUSH2",
      "value": "0x1BE4"
    },
    "7132": {
      "op": "DUP6"
    },
    "7133": {
      "op": "DUP3"
    },
    "7134": {
      "op": "DUP7"
    },
    "7135": {
      "op": "ADD"
    },
    "7136": {
      "op": "PUSH2",
      "value": "0x19E1"
    },
    "7139": {
      "jump": "i",
      "op": "JUMP"
    },
    "7140": {
      "op": "JUMPDEST"
    },
    "7141": {
      "op": "SWAP2"
    },
    "7142": {
      "op": "POP"
    },
    "7143": {
      "op": "POP"
    },
    "7144": {
      "op": "SWAP3"
    },
    "7145": {
      "op": "POP"
    },
    "7146": {
      "op": "SWAP3"
    },
    "7147": {
      "op": "SWAP1"
    },
    "7148": {
      "op": "POP"
    },
    "7149": {
      "jump": "o",
      "op": "JUMP"
    },
    "7150": {
      "op": "JUMPDEST"
    },
    "7151": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7153": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7155": {
      "op": "DUP3"
    },
    "7156": {
      "op": "DUP5"
    },
    "7157": {
      "op": "SUB"
    },
    "7158": {
      "op": "SLT"
    },
    "7159": {
      "op": "ISZERO"
    },
    "7160": {
      "op": "PUSH2",
      "value": "0x1C00"
    },
    "7163": {
      "op": "JUMPI"
    },
    "7164": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7166": {
      "op": "DUP1"
    },
    "7167": {
      "op": "REVERT"
    },
    "7168": {
      "op": "JUMPDEST"
    },
    "7169": {
      "op": "POP"
    },
    "7170": {
      "op": "CALLDATALOAD"
    },
    "7171": {
      "op": "SWAP2"
    },
    "7172": {
      "op": "SWAP1"
    },
    "7173": {
      "op": "POP"
    },
    "7174": {
      "jump": "o",
      "op": "JUMP"
    },
    "7175": {
      "op": "JUMPDEST"
    },
    "7176": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7178": {
      "op": "JUMPDEST"
    },
    "7179": {
      "op": "DUP4"
    },
    "7180": {
      "op": "DUP2"
    },
    "7181": {
      "op": "LT"
    },
    "7182": {
      "op": "ISZERO"
    },
    "7183": {
      "op": "PUSH2",
      "value": "0x1C22"
    },
    "7186": {
      "op": "JUMPI"
    },
    "7187": {
      "op": "DUP2"
    },
    "7188": {
      "op": "DUP2"
    },
    "7189": {
      "op": "ADD"
    },
    "7190": {
      "op": "MLOAD"
    },
    "7191": {
      "op": "DUP4"
    },
    "7192": {
      "op": "DUP3"
    },
    "7193": {
      "op": "ADD"
    },
    "7194": {
      "op": "MSTORE"
    },
    "7195": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7197": {
      "op": "ADD"
    },
    "7198": {
      "op": "PUSH2",
      "value": "0x1C0A"
    },
    "7201": {
      "op": "JUMP"
    },
    "7202": {
      "op": "JUMPDEST"
    },
    "7203": {
      "op": "DUP4"
    },
    "7204": {
      "op": "DUP2"
    },
    "7205": {
      "op": "GT"
    },
    "7206": {
      "op": "ISZERO"
    },
    "7207": {
      "op": "PUSH2",
      "value": "0x1C31"
    },
    "7210": {
      "op": "JUMPI"
    },
    "7211": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7213": {
      "op": "DUP5"
    },
    "7214": {
      "op": "DUP5"
    },
    "7215": {
      "op": "ADD"
    },
    "7216": {
      "op": "MSTORE"
    },
    "7217": {
      "op": "JUMPDEST"
    },
    "7218": {
      "op": "POP"
    },
    "7219": {
      "op": "POP"
    },
    "7220": {
      "op": "POP"
    },
    "7221": {
      "op": "POP"
    },
    "7222": {
      "jump": "o",
      "op": "JUMP"
    },
    "7223": {
      "op": "JUMPDEST"
    },
    "7224": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7226": {
      "op": "DUP2"
    },
    "7227": {
      "op": "MLOAD"
    },
    "7228": {
      "op": "DUP1"
    },
    "7229": {
      "op": "DUP5"
    },
    "7230": {
      "op": "MSTORE"
    },
    "7231": {
      "op": "PUSH2",
      "value": "0x1C4F"
    },
    "7234": {
      "op": "DUP2"
    },
    "7235": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7237": {
      "op": "DUP7"
    },
    "7238": {
      "op": "ADD"
    },
    "7239": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7241": {
      "op": "DUP7"
    },
    "7242": {
      "op": "ADD"
    },
    "7243": {
      "op": "PUSH2",
      "value": "0x1C07"
    },
    "7246": {
      "jump": "i",
      "op": "JUMP"
    },
    "7247": {
      "op": "JUMPDEST"
    },
    "7248": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "7250": {
      "op": "ADD"
    },
    "7251": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "7253": {
      "op": "NOT"
    },
    "7254": {
      "op": "AND"
    },
    "7255": {
      "op": "SWAP3"
    },
    "7256": {
      "op": "SWAP1"
    },
    "7257": {
      "op": "SWAP3"
    },
    "7258": {
      "op": "ADD"
    },
    "7259": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7261": {
      "op": "ADD"
    },
    "7262": {
      "op": "SWAP3"
    },
    "7263": {
      "op": "SWAP2"
    },
    "7264": {
      "op": "POP"
    },
    "7265": {
      "op": "POP"
    },
    "7266": {
      "jump": "o",
      "op": "JUMP"
    },
    "7267": {
      "op": "JUMPDEST"
    },
    "7268": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7270": {
      "op": "DUP2"
    },
    "7271": {
      "op": "MSTORE"
    },
    "7272": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7274": {
      "op": "PUSH2",
      "value": "0x1AE8"
    },
    "7277": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7279": {
      "op": "DUP4"
    },
    "7280": {
      "op": "ADD"
    },
    "7281": {
      "op": "DUP5"
    },
    "7282": {
      "op": "PUSH2",
      "value": "0x1C37"
    },
    "7285": {
      "jump": "i",
      "op": "JUMP"
    },
    "7286": {
      "op": "JUMPDEST"
    },
    "7287": {
      "op": "DUP3"
    },
    "7288": {
      "op": "ISZERO"
    },
    "7289": {
      "op": "ISZERO"
    },
    "7290": {
      "op": "DUP2"
    },
    "7291": {
      "op": "MSTORE"
    },
    "7292": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "7294": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7296": {
      "op": "DUP3"
    },
    "7297": {
      "op": "ADD"
    },
    "7298": {
      "op": "MSTORE"
    },
    "7299": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7301": {
      "op": "PUSH2",
      "value": "0x1C91"
    },
    "7304": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "7306": {
      "op": "DUP4"
    },
    "7307": {
      "op": "ADD"
    },
    "7308": {
      "op": "DUP5"
    },
    "7309": {
      "op": "PUSH2",
      "value": "0x1C37"
    },
    "7312": {
      "jump": "i",
      "op": "JUMP"
    },
    "7313": {
      "op": "JUMPDEST"
    },
    "7314": {
      "op": "SWAP5"
    },
    "7315": {
      "op": "SWAP4"
    },
    "7316": {
      "op": "POP"
    },
    "7317": {
      "op": "POP"
    },
    "7318": {
      "op": "POP"
    },
    "7319": {
      "op": "POP"
    },
    "7320": {
      "jump": "o",
      "op": "JUMP"
    },
    "7321": {
      "op": "JUMPDEST"
    },
    "7322": {
      "op": "DUP1"
    },
    "7323": {
      "op": "CALLDATALOAD"
    },
    "7324": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "7326": {
      "op": "DUP2"
    },
    "7327": {
      "op": "AND"
    },
    "7328": {
      "op": "DUP2"
    },
    "7329": {
      "op": "EQ"
    },
    "7330": {
      "op": "PUSH2",
      "value": "0x19C6"
    },
    "7333": {
      "op": "JUMPI"
    },
    "7334": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7336": {
      "op": "DUP1"
    },
    "7337": {
      "op": "REVERT"
    },
    "7338": {
      "op": "JUMPDEST"
    },
    "7339": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7341": {
      "op": "DUP1"
    },
    "7342": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7344": {
      "op": "DUP1"
    },
    "7345": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7347": {
      "op": "DUP1"
    },
    "7348": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7350": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "7352": {
      "op": "DUP9"
    },
    "7353": {
      "op": "DUP11"
    },
    "7354": {
      "op": "SUB"
    },
    "7355": {
      "op": "SLT"
    },
    "7356": {
      "op": "ISZERO"
    },
    "7357": {
      "op": "PUSH2",
      "value": "0x1CC5"
    },
    "7360": {
      "op": "JUMPI"
    },
    "7361": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7363": {
      "op": "DUP1"
    },
    "7364": {
      "op": "REVERT"
    },
    "7365": {
      "op": "JUMPDEST"
    },
    "7366": {
      "op": "PUSH2",
      "value": "0x1CCE"
    },
    "7369": {
      "op": "DUP9"
    },
    "7370": {
      "op": "PUSH2",
      "value": "0x19AF"
    },
    "7373": {
      "jump": "i",
      "op": "JUMP"
    },
    "7374": {
      "op": "JUMPDEST"
    },
    "7375": {
      "op": "SWAP7"
    },
    "7376": {
      "op": "POP"
    },
    "7377": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7379": {
      "op": "DUP9"
    },
    "7380": {
      "op": "ADD"
    },
    "7381": {
      "op": "CALLDATALOAD"
    },
    "7382": {
      "op": "SWAP6"
    },
    "7383": {
      "op": "POP"
    },
    "7384": {
      "op": "PUSH2",
      "value": "0x1CE3"
    },
    "7387": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "7389": {
      "op": "DUP10"
    },
    "7390": {
      "op": "ADD"
    },
    "7391": {
      "op": "PUSH2",
      "value": "0x1AEF"
    },
    "7394": {
      "jump": "i",
      "op": "JUMP"
    },
    "7395": {
      "op": "JUMPDEST"
    },
    "7396": {
      "op": "SWAP5"
    },
    "7397": {
      "op": "POP"
    },
    "7398": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "7400": {
      "op": "DUP9"
    },
    "7401": {
      "op": "ADD"
    },
    "7402": {
      "op": "CALLDATALOAD"
    },
    "7403": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "7412": {
      "op": "DUP2"
    },
    "7413": {
      "op": "GT"
    },
    "7414": {
      "op": "ISZERO"
    },
    "7415": {
      "op": "PUSH2",
      "value": "0x1CFF"
    },
    "7418": {
      "op": "JUMPI"
    },
    "7419": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7421": {
      "op": "DUP1"
    },
    "7422": {
      "op": "REVERT"
    },
    "7423": {
      "op": "JUMPDEST"
    },
    "7424": {
      "op": "PUSH2",
      "value": "0x1D0B"
    },
    "7427": {
      "op": "DUP11"
    },
    "7428": {
      "op": "DUP3"
    },
    "7429": {
      "op": "DUP12"
    },
    "7430": {
      "op": "ADD"
    },
    "7431": {
      "op": "PUSH2",
      "value": "0x19E1"
    },
    "7434": {
      "jump": "i",
      "op": "JUMP"
    },
    "7435": {
      "op": "JUMPDEST"
    },
    "7436": {
      "op": "SWAP5"
    },
    "7437": {
      "op": "POP"
    },
    "7438": {
      "op": "POP"
    },
    "7439": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "7441": {
      "op": "DUP9"
    },
    "7442": {
      "op": "ADD"
    },
    "7443": {
      "op": "CALLDATALOAD"
    },
    "7444": {
      "op": "SWAP3"
    },
    "7445": {
      "op": "POP"
    },
    "7446": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "7448": {
      "op": "DUP9"
    },
    "7449": {
      "op": "ADD"
    },
    "7450": {
      "op": "CALLDATALOAD"
    },
    "7451": {
      "op": "SWAP2"
    },
    "7452": {
      "op": "POP"
    },
    "7453": {
      "op": "PUSH2",
      "value": "0x1D28"
    },
    "7456": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "7458": {
      "op": "DUP10"
    },
    "7459": {
      "op": "ADD"
    },
    "7460": {
      "op": "PUSH2",
      "value": "0x1C99"
    },
    "7463": {
      "jump": "i",
      "op": "JUMP"
    },
    "7464": {
      "op": "JUMPDEST"
    },
    "7465": {
      "op": "SWAP1"
    },
    "7466": {
      "op": "POP"
    },
    "7467": {
      "op": "SWAP3"
    },
    "7468": {
      "op": "SWAP6"
    },
    "7469": {
      "op": "SWAP9"
    },
    "7470": {
      "op": "SWAP2"
    },
    "7471": {
      "op": "SWAP5"
    },
    "7472": {
      "op": "SWAP8"
    },
    "7473": {
      "op": "POP"
    },
    "7474": {
      "op": "SWAP3"
    },
    "7475": {
      "op": "SWAP6"
    },
    "7476": {
      "op": "POP"
    },
    "7477": {
      "jump": "o",
      "op": "JUMP"
    },
    "7478": {
      "op": "JUMPDEST"
    },
    "7479": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7481": {
      "op": "DUP1"
    },
    "7482": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7484": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "7486": {
      "op": "DUP5"
    },
    "7487": {
      "op": "DUP7"
    },
    "7488": {
      "op": "SUB"
    },
    "7489": {
      "op": "SLT"
    },
    "7490": {
      "op": "ISZERO"
    },
    "7491": {
      "op": "PUSH2",
      "value": "0x1D4B"
    },
    "7494": {
      "op": "JUMPI"
    },
    "7495": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7497": {
      "op": "DUP1"
    },
    "7498": {
      "op": "REVERT"
    },
    "7499": {
      "op": "JUMPDEST"
    },
    "7500": {
      "op": "PUSH2",
      "value": "0x1D54"
    },
    "7503": {
      "op": "DUP5"
    },
    "7504": {
      "op": "PUSH2",
      "value": "0x1C99"
    },
    "7507": {
      "jump": "i",
      "op": "JUMP"
    },
    "7508": {
      "op": "JUMPDEST"
    },
    "7509": {
      "op": "SWAP3"
    },
    "7510": {
      "op": "POP"
    },
    "7511": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7513": {
      "op": "DUP5"
    },
    "7514": {
      "op": "ADD"
    },
    "7515": {
      "op": "CALLDATALOAD"
    },
    "7516": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "7525": {
      "op": "DUP2"
    },
    "7526": {
      "op": "GT"
    },
    "7527": {
      "op": "ISZERO"
    },
    "7528": {
      "op": "PUSH2",
      "value": "0x1D70"
    },
    "7531": {
      "op": "JUMPI"
    },
    "7532": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7534": {
      "op": "DUP1"
    },
    "7535": {
      "op": "REVERT"
    },
    "7536": {
      "op": "JUMPDEST"
    },
    "7537": {
      "op": "PUSH2",
      "value": "0x1D7C"
    },
    "7540": {
      "op": "DUP7"
    },
    "7541": {
      "op": "DUP3"
    },
    "7542": {
      "op": "DUP8"
    },
    "7543": {
      "op": "ADD"
    },
    "7544": {
      "op": "PUSH2",
      "value": "0x19E1"
    },
    "7547": {
      "jump": "i",
      "op": "JUMP"
    },
    "7548": {
      "op": "JUMPDEST"
    },
    "7549": {
      "op": "SWAP3"
    },
    "7550": {
      "op": "POP"
    },
    "7551": {
      "op": "POP"
    },
    "7552": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "7554": {
      "op": "DUP5"
    },
    "7555": {
      "op": "ADD"
    },
    "7556": {
      "op": "CALLDATALOAD"
    },
    "7557": {
      "op": "SWAP1"
    },
    "7558": {
      "op": "POP"
    },
    "7559": {
      "op": "SWAP3"
    },
    "7560": {
      "op": "POP"
    },
    "7561": {
      "op": "SWAP3"
    },
    "7562": {
      "op": "POP"
    },
    "7563": {
      "op": "SWAP3"
    },
    "7564": {
      "jump": "o",
      "op": "JUMP"
    },
    "7565": {
      "op": "JUMPDEST"
    },
    "7566": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7568": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7570": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "7572": {
      "op": "SHL"
    },
    "7573": {
      "op": "SUB"
    },
    "7574": {
      "op": "DUP7"
    },
    "7575": {
      "op": "AND"
    },
    "7576": {
      "op": "DUP2"
    },
    "7577": {
      "op": "MSTORE"
    },
    "7578": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "7580": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7582": {
      "op": "DUP3"
    },
    "7583": {
      "op": "ADD"
    },
    "7584": {
      "op": "DUP2"
    },
    "7585": {
      "op": "SWAP1"
    },
    "7586": {
      "op": "MSTORE"
    },
    "7587": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7589": {
      "op": "SWAP1"
    },
    "7590": {
      "op": "PUSH2",
      "value": "0x1DB1"
    },
    "7593": {
      "op": "SWAP1"
    },
    "7594": {
      "op": "DUP4"
    },
    "7595": {
      "op": "ADD"
    },
    "7596": {
      "op": "DUP8"
    },
    "7597": {
      "op": "PUSH2",
      "value": "0x1C37"
    },
    "7600": {
      "jump": "i",
      "op": "JUMP"
    },
    "7601": {
      "op": "JUMPDEST"
    },
    "7602": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "7604": {
      "op": "DUP4"
    },
    "7605": {
      "op": "ADD"
    },
    "7606": {
      "op": "SWAP6"
    },
    "7607": {
      "op": "SWAP1"
    },
    "7608": {
      "op": "SWAP6"
    },
    "7609": {
      "op": "MSTORE"
    },
    "7610": {
      "op": "POP"
    },
    "7611": {
      "op": "SWAP2"
    },
    "7612": {
      "op": "ISZERO"
    },
    "7613": {
      "op": "ISZERO"
    },
    "7614": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "7616": {
      "op": "DUP4"
    },
    "7617": {
      "op": "ADD"
    },
    "7618": {
      "op": "MSTORE"
    },
    "7619": {
      "op": "ISZERO"
    },
    "7620": {
      "op": "ISZERO"
    },
    "7621": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "7623": {
      "op": "SWAP1"
    },
    "7624": {
      "op": "SWAP2"
    },
    "7625": {
      "op": "ADD"
    },
    "7626": {
      "op": "MSTORE"
    },
    "7627": {
      "op": "SWAP3"
    },
    "7628": {
      "op": "SWAP2"
    },
    "7629": {
      "op": "POP"
    },
    "7630": {
      "op": "POP"
    },
    "7631": {
      "jump": "o",
      "op": "JUMP"
    },
    "7632": {
      "op": "JUMPDEST"
    },
    "7633": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7635": {
      "op": "DUP1"
    },
    "7636": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7638": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "7640": {
      "op": "DUP5"
    },
    "7641": {
      "op": "DUP7"
    },
    "7642": {
      "op": "SUB"
    },
    "7643": {
      "op": "SLT"
    },
    "7644": {
      "op": "ISZERO"
    },
    "7645": {
      "op": "PUSH2",
      "value": "0x1DE5"
    },
    "7648": {
      "op": "JUMPI"
    },
    "7649": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7651": {
      "op": "DUP1"
    },
    "7652": {
      "op": "REVERT"
    },
    "7653": {
      "op": "JUMPDEST"
    },
    "7654": {
      "op": "DUP4"
    },
    "7655": {
      "op": "CALLDATALOAD"
    },
    "7656": {
      "op": "SWAP3"
    },
    "7657": {
      "op": "POP"
    },
    "7658": {
      "op": "PUSH2",
      "value": "0x1DF5"
    },
    "7661": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7663": {
      "op": "DUP6"
    },
    "7664": {
      "op": "ADD"
    },
    "7665": {
      "op": "PUSH2",
      "value": "0x1AEF"
    },
    "7668": {
      "jump": "i",
      "op": "JUMP"
    },
    "7669": {
      "op": "JUMPDEST"
    },
    "7670": {
      "op": "SWAP2"
    },
    "7671": {
      "op": "POP"
    },
    "7672": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "7674": {
      "op": "DUP5"
    },
    "7675": {
      "op": "ADD"
    },
    "7676": {
      "op": "CALLDATALOAD"
    },
    "7677": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "7686": {
      "op": "DUP2"
    },
    "7687": {
      "op": "GT"
    },
    "7688": {
      "op": "ISZERO"
    },
    "7689": {
      "op": "PUSH2",
      "value": "0x1E11"
    },
    "7692": {
      "op": "JUMPI"
    },
    "7693": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7695": {
      "op": "DUP1"
    },
    "7696": {
      "op": "REVERT"
    },
    "7697": {
      "op": "JUMPDEST"
    },
    "7698": {
      "op": "PUSH2",
      "value": "0x1E1D"
    },
    "7701": {
      "op": "DUP7"
    },
    "7702": {
      "op": "DUP3"
    },
    "7703": {
      "op": "DUP8"
    },
    "7704": {
      "op": "ADD"
    },
    "7705": {
      "op": "PUSH2",
      "value": "0x19E1"
    },
    "7708": {
      "jump": "i",
      "op": "JUMP"
    },
    "7709": {
      "op": "JUMPDEST"
    },
    "7710": {
      "op": "SWAP2"
    },
    "7711": {
      "op": "POP"
    },
    "7712": {
      "op": "POP"
    },
    "7713": {
      "op": "SWAP3"
    },
    "7714": {
      "op": "POP"
    },
    "7715": {
      "op": "SWAP3"
    },
    "7716": {
      "op": "POP"
    },
    "7717": {
      "op": "SWAP3"
    },
    "7718": {
      "jump": "o",
      "op": "JUMP"
    },
    "7719": {
      "op": "JUMPDEST"
    },
    "7720": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7722": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7724": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "7726": {
      "op": "SHL"
    },
    "7727": {
      "op": "SUB"
    },
    "7728": {
      "op": "DUP5"
    },
    "7729": {
      "op": "AND"
    },
    "7730": {
      "op": "DUP2"
    },
    "7731": {
      "op": "MSTORE"
    },
    "7732": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "7734": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7736": {
      "op": "DUP3"
    },
    "7737": {
      "op": "ADD"
    },
    "7738": {
      "op": "DUP2"
    },
    "7739": {
      "op": "SWAP1"
    },
    "7740": {
      "op": "MSTORE"
    },
    "7741": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7743": {
      "op": "SWAP1"
    },
    "7744": {
      "op": "PUSH2",
      "value": "0x1E4B"
    },
    "7747": {
      "op": "SWAP1"
    },
    "7748": {
      "op": "DUP4"
    },
    "7749": {
      "op": "ADD"
    },
    "7750": {
      "op": "DUP6"
    },
    "7751": {
      "op": "PUSH2",
      "value": "0x1C37"
    },
    "7754": {
      "jump": "i",
      "op": "JUMP"
    },
    "7755": {
      "op": "JUMPDEST"
    },
    "7756": {
      "op": "SWAP1"
    },
    "7757": {
      "op": "POP"
    },
    "7758": {
      "op": "DUP3"
    },
    "7759": {
      "op": "ISZERO"
    },
    "7760": {
      "op": "ISZERO"
    },
    "7761": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "7763": {
      "op": "DUP4"
    },
    "7764": {
      "op": "ADD"
    },
    "7765": {
      "op": "MSTORE"
    },
    "7766": {
      "op": "SWAP5"
    },
    "7767": {
      "op": "SWAP4"
    },
    "7768": {
      "op": "POP"
    },
    "7769": {
      "op": "POP"
    },
    "7770": {
      "op": "POP"
    },
    "7771": {
      "op": "POP"
    },
    "7772": {
      "jump": "o",
      "op": "JUMP"
    },
    "7773": {
      "op": "JUMPDEST"
    },
    "7774": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7776": {
      "op": "DUP1"
    },
    "7777": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "7779": {
      "op": "DUP4"
    },
    "7780": {
      "op": "DUP6"
    },
    "7781": {
      "op": "SUB"
    },
    "7782": {
      "op": "SLT"
    },
    "7783": {
      "op": "ISZERO"
    },
    "7784": {
      "op": "PUSH2",
      "value": "0x1E70"
    },
    "7787": {
      "op": "JUMPI"
    },
    "7788": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7790": {
      "op": "DUP1"
    },
    "7791": {
      "op": "REVERT"
    },
    "7792": {
      "op": "JUMPDEST"
    },
    "7793": {
      "op": "DUP3"
    },
    "7794": {
      "op": "CALLDATALOAD"
    },
    "7795": {
      "op": "SWAP2"
    },
    "7796": {
      "op": "POP"
    },
    "7797": {
      "op": "PUSH2",
      "value": "0x1E80"
    },
    "7800": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7802": {
      "op": "DUP5"
    },
    "7803": {
      "op": "ADD"
    },
    "7804": {
      "op": "PUSH2",
      "value": "0x19AF"
    },
    "7807": {
      "jump": "i",
      "op": "JUMP"
    },
    "7808": {
      "op": "JUMPDEST"
    },
    "7809": {
      "op": "SWAP1"
    },
    "7810": {
      "op": "POP"
    },
    "7811": {
      "op": "SWAP3"
    },
    "7812": {
      "op": "POP"
    },
    "7813": {
      "op": "SWAP3"
    },
    "7814": {
      "op": "SWAP1"
    },
    "7815": {
      "op": "POP"
    },
    "7816": {
      "jump": "o",
      "op": "JUMP"
    },
    "7817": {
      "op": "JUMPDEST"
    },
    "7818": {
      "op": "DUP4"
    },
    "7819": {
      "op": "ISZERO"
    },
    "7820": {
      "op": "ISZERO"
    },
    "7821": {
      "op": "DUP2"
    },
    "7822": {
      "op": "MSTORE"
    },
    "7823": {
      "op": "DUP3"
    },
    "7824": {
      "op": "ISZERO"
    },
    "7825": {
      "op": "ISZERO"
    },
    "7826": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7828": {
      "op": "DUP3"
    },
    "7829": {
      "op": "ADD"
    },
    "7830": {
      "op": "MSTORE"
    },
    "7831": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "7833": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "7835": {
      "op": "DUP3"
    },
    "7836": {
      "op": "ADD"
    },
    "7837": {
      "op": "MSTORE"
    },
    "7838": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7840": {
      "op": "PUSH2",
      "value": "0x1EAC"
    },
    "7843": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "7845": {
      "op": "DUP4"
    },
    "7846": {
      "op": "ADD"
    },
    "7847": {
      "op": "DUP5"
    },
    "7848": {
      "op": "PUSH2",
      "value": "0x1C37"
    },
    "7851": {
      "jump": "i",
      "op": "JUMP"
    },
    "7852": {
      "op": "JUMPDEST"
    },
    "7853": {
      "op": "SWAP6"
    },
    "7854": {
      "op": "SWAP5"
    },
    "7855": {
      "op": "POP"
    },
    "7856": {
      "op": "POP"
    },
    "7857": {
      "op": "POP"
    },
    "7858": {
      "op": "POP"
    },
    "7859": {
      "op": "POP"
    },
    "7860": {
      "jump": "o",
      "op": "JUMP"
    },
    "7861": {
      "op": "JUMPDEST"
    },
    "7862": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7864": {
      "op": "DUP1"
    },
    "7865": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7867": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "7869": {
      "op": "DUP5"
    },
    "7870": {
      "op": "DUP7"
    },
    "7871": {
      "op": "SUB"
    },
    "7872": {
      "op": "SLT"
    },
    "7873": {
      "op": "ISZERO"
    },
    "7874": {
      "op": "PUSH2",
      "value": "0x1ECA"
    },
    "7877": {
      "op": "JUMPI"
    },
    "7878": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7880": {
      "op": "DUP1"
    },
    "7881": {
      "op": "REVERT"
    },
    "7882": {
      "op": "JUMPDEST"
    },
    "7883": {
      "op": "PUSH2",
      "value": "0x1D54"
    },
    "7886": {
      "op": "DUP5"
    },
    "7887": {
      "op": "PUSH2",
      "value": "0x19AF"
    },
    "7890": {
      "jump": "i",
      "op": "JUMP"
    },
    "7891": {
      "op": "JUMPDEST"
    },
    "7892": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7894": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "7896": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "7898": {
      "op": "SHL"
    },
    "7899": {
      "op": "SUB"
    },
    "7900": {
      "op": "DUP11"
    },
    "7901": {
      "op": "AND"
    },
    "7902": {
      "op": "DUP2"
    },
    "7903": {
      "op": "MSTORE"
    },
    "7904": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7906": {
      "op": "PUSH2",
      "value": "0x120"
    },
    "7909": {
      "op": "PUSH1",
      "value": "0x9"
    },
    "7911": {
      "op": "DUP12"
    },
    "7912": {
      "op": "LT"
    },
    "7913": {
      "op": "PUSH2",
      "value": "0x1F02"
    },
    "7916": {
      "op": "JUMPI"
    },
    "7917": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "7922": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "7924": {
      "op": "SHL"
    },
    "7925": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7927": {
      "op": "MSTORE"
    },
    "7928": {
      "op": "PUSH1",
      "value": "0x21"
    },
    "7930": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "7932": {
      "op": "MSTORE"
    },
    "7933": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "7935": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "7937": {
      "op": "REVERT"
    },
    "7938": {
      "op": "JUMPDEST"
    },
    "7939": {
      "op": "DUP11"
    },
    "7940": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "7942": {
      "op": "DUP5"
    },
    "7943": {
      "op": "ADD"
    },
    "7944": {
      "op": "MSTORE"
    },
    "7945": {
      "op": "DUP1"
    },
    "7946": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "7948": {
      "op": "DUP5"
    },
    "7949": {
      "op": "ADD"
    },
    "7950": {
      "op": "MSTORE"
    },
    "7951": {
      "op": "PUSH2",
      "value": "0x1F1A"
    },
    "7954": {
      "op": "DUP2"
    },
    "7955": {
      "op": "DUP5"
    },
    "7956": {
      "op": "ADD"
    },
    "7957": {
      "op": "DUP12"
    },
    "7958": {
      "op": "PUSH2",
      "value": "0x1C37"
    },
    "7961": {
      "jump": "i",
      "op": "JUMP"
    },
    "7962": {
      "op": "JUMPDEST"
    },
    "7963": {
      "op": "SWAP2"
    },
    "7964": {
      "op": "POP"
    },
    "7965": {
      "op": "POP"
    },
    "7966": {
      "op": "DUP8"
    },
    "7967": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "7969": {
      "op": "DUP4"
    },
    "7970": {
      "op": "ADD"
    },
    "7971": {
      "op": "MSTORE"
    },
    "7972": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "7974": {
      "op": "DUP8"
    },
    "7975": {
      "op": "AND"
    },
    "7976": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "7978": {
      "op": "DUP4"
    },
    "7979": {
      "op": "ADD"
    },
    "7980": {
      "op": "MSTORE"
    },
    "7981": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "7983": {
      "op": "DUP7"
    },
    "7984": {
      "op": "AND"
    },
    "7985": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "7987": {
      "op": "DUP4"
    },
    "7988": {
      "op": "ADD"
    },
    "7989": {
      "op": "MSTORE"
    },
    "7990": {
      "op": "DUP5"
    },
    "7991": {
      "op": "ISZERO"
    },
    "7992": {
      "op": "ISZERO"
    },
    "7993": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "7995": {
      "op": "DUP4"
    },
    "7996": {
      "op": "ADD"
    },
    "7997": {
      "op": "MSTORE"
    },
    "7998": {
      "op": "PUSH2",
      "value": "0x1F4B"
    },
    "8001": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "8003": {
      "op": "DUP4"
    },
    "8004": {
      "op": "ADD"
    },
    "8005": {
      "op": "DUP6"
    },
    "8006": {
      "op": "ISZERO"
    },
    "8007": {
      "op": "ISZERO"
    },
    "8008": {
      "op": "SWAP1"
    },
    "8009": {
      "op": "MSTORE"
    },
    "8010": {
      "op": "JUMP"
    },
    "8011": {
      "op": "JUMPDEST"
    },
    "8012": {
      "op": "DUP3"
    },
    "8013": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "8016": {
      "op": "DUP4"
    },
    "8017": {
      "op": "ADD"
    },
    "8018": {
      "op": "MSTORE"
    },
    "8019": {
      "op": "SWAP11"
    },
    "8020": {
      "op": "SWAP10"
    },
    "8021": {
      "op": "POP"
    },
    "8022": {
      "op": "POP"
    },
    "8023": {
      "op": "POP"
    },
    "8024": {
      "op": "POP"
    },
    "8025": {
      "op": "POP"
    },
    "8026": {
      "op": "POP"
    },
    "8027": {
      "op": "POP"
    },
    "8028": {
      "op": "POP"
    },
    "8029": {
      "op": "POP"
    },
    "8030": {
      "op": "POP"
    },
    "8031": {
      "jump": "o",
      "op": "JUMP"
    },
    "8032": {
      "op": "JUMPDEST"
    },
    "8033": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "8035": {
      "op": "DUP1"
    },
    "8036": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "8038": {
      "op": "DUP1"
    },
    "8039": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "8041": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "8043": {
      "op": "DUP7"
    },
    "8044": {
      "op": "DUP9"
    },
    "8045": {
      "op": "SUB"
    },
    "8046": {
      "op": "SLT"
    },
    "8047": {
      "op": "ISZERO"
    },
    "8048": {
      "op": "PUSH2",
      "value": "0x1F78"
    },
    "8051": {
      "op": "JUMPI"
    },
    "8052": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "8054": {
      "op": "DUP1"
    },
    "8055": {
      "op": "REVERT"
    },
    "8056": {
      "op": "JUMPDEST"
    },
    "8057": {
      "op": "PUSH2",
      "value": "0x1F81"
    },
    "8060": {
      "op": "DUP7"
    },
    "8061": {
      "op": "PUSH2",
      "value": "0x19AF"
    },
    "8064": {
      "jump": "i",
      "op": "JUMP"
    },
    "8065": {
      "op": "JUMPDEST"
    },
    "8066": {
      "op": "SWAP5"
    },
    "8067": {
      "op": "POP"
    },
    "8068": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "8070": {
      "op": "DUP7"
    },
    "8071": {
      "op": "ADD"
    },
    "8072": {
      "op": "CALLDATALOAD"
    },
    "8073": {
      "op": "SWAP4"
    },
    "8074": {
      "op": "POP"
    },
    "8075": {
      "op": "PUSH2",
      "value": "0x1F96"
    },
    "8078": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "8080": {
      "op": "DUP8"
    },
    "8081": {
      "op": "ADD"
    },
    "8082": {
      "op": "PUSH2",
      "value": "0x19AF"
    },
    "8085": {
      "jump": "i",
      "op": "JUMP"
    },
    "8086": {
      "op": "JUMPDEST"
    },
    "8087": {
      "op": "SWAP3"
    },
    "8088": {
      "op": "POP"
    },
    "8089": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "8091": {
      "op": "DUP7"
    },
    "8092": {
      "op": "ADD"
    },
    "8093": {
      "op": "CALLDATALOAD"
    },
    "8094": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "8103": {
      "op": "DUP2"
    },
    "8104": {
      "op": "GT"
    },
    "8105": {
      "op": "ISZERO"
    },
    "8106": {
      "op": "PUSH2",
      "value": "0x1B6C"
    },
    "8109": {
      "op": "JUMPI"
    },
    "8110": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "8112": {
      "op": "DUP1"
    },
    "8113": {
      "op": "REVERT"
    },
    "8114": {
      "op": "JUMPDEST"
    },
    "8115": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "8117": {
      "op": "DUP1"
    },
    "8118": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "8120": {
      "op": "DUP1"
    },
    "8121": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "8123": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "8125": {
      "op": "DUP7"
    },
    "8126": {
      "op": "DUP9"
    },
    "8127": {
      "op": "SUB"
    },
    "8128": {
      "op": "SLT"
    },
    "8129": {
      "op": "ISZERO"
    },
    "8130": {
      "op": "PUSH2",
      "value": "0x1FCA"
    },
    "8133": {
      "op": "JUMPI"
    },
    "8134": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "8136": {
      "op": "DUP1"
    },
    "8137": {
      "op": "REVERT"
    },
    "8138": {
      "op": "JUMPDEST"
    },
    "8139": {
      "op": "PUSH2",
      "value": "0x1FD3"
    },
    "8142": {
      "op": "DUP7"
    },
    "8143": {
      "op": "PUSH2",
      "value": "0x19AF"
    },
    "8146": {
      "jump": "i",
      "op": "JUMP"
    },
    "8147": {
      "op": "JUMPDEST"
    },
    "8148": {
      "op": "SWAP5"
    },
    "8149": {
      "op": "POP"
    },
    "8150": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "8152": {
      "op": "DUP7"
    },
    "8153": {
      "op": "ADD"
    },
    "8154": {
      "op": "CALLDATALOAD"
    },
    "8155": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "8164": {
      "op": "DUP1"
    },
    "8165": {
      "op": "DUP3"
    },
    "8166": {
      "op": "GT"
    },
    "8167": {
      "op": "ISZERO"
    },
    "8168": {
      "op": "PUSH2",
      "value": "0x1FF0"
    },
    "8171": {
      "op": "JUMPI"
    },
    "8172": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "8174": {
      "op": "DUP1"
    },
    "8175": {
      "op": "REVERT"
    },
    "8176": {
      "op": "JUMPDEST"
    },
    "8177": {
      "op": "PUSH2",
      "value": "0x1FFC"
    },
    "8180": {
      "op": "DUP10"
    },
    "8181": {
      "op": "DUP4"
    },
    "8182": {
      "op": "DUP11"
    },
    "8183": {
      "op": "ADD"
    },
    "8184": {
      "op": "PUSH2",
      "value": "0x19E1"
    },
    "8187": {
      "jump": "i",
      "op": "JUMP"
    },
    "8188": {
      "op": "JUMPDEST"
    },
    "8189": {
      "op": "SWAP6"
    },
    "8190": {
      "op": "POP"
    },
    "8191": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "8193": {
      "op": "DUP9"
    },
    "8194": {
      "op": "ADD"
    },
    "8195": {
      "op": "CALLDATALOAD"
    },
    "8196": {
      "op": "SWAP2"
    },
    "8197": {
      "op": "POP"
    },
    "8198": {
      "op": "DUP1"
    },
    "8199": {
      "op": "DUP3"
    },
    "8200": {
      "op": "GT"
    },
    "8201": {
      "op": "ISZERO"
    },
    "8202": {
      "op": "PUSH2",
      "value": "0x2012"
    },
    "8205": {
      "op": "JUMPI"
    },
    "8206": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "8208": {
      "op": "DUP1"
    },
    "8209": {
      "op": "REVERT"
    },
    "8210": {
      "op": "JUMPDEST"
    },
    "8211": {
      "op": "POP"
    },
    "8212": {
      "op": "PUSH2",
      "value": "0x201F"
    },
    "8215": {
      "op": "DUP9"
    },
    "8216": {
      "op": "DUP3"
    },
    "8217": {
      "op": "DUP10"
    },
    "8218": {
      "op": "ADD"
    },
    "8219": {
      "op": "PUSH2",
      "value": "0x19E1"
    },
    "8222": {
      "jump": "i",
      "op": "JUMP"
    },
    "8223": {
      "op": "JUMPDEST"
    },
    "8224": {
      "op": "SWAP4"
    },
    "8225": {
      "op": "POP"
    },
    "8226": {
      "op": "POP"
    },
    "8227": {
      "op": "PUSH2",
      "value": "0x202E"
    },
    "8230": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "8232": {
      "op": "DUP8"
    },
    "8233": {
      "op": "ADD"
    },
    "8234": {
      "op": "PUSH2",
      "value": "0x1AEF"
    },
    "8237": {
      "jump": "i",
      "op": "JUMP"
    },
    "8238": {
      "op": "JUMPDEST"
    },
    "8239": {
      "op": "SWAP5"
    },
    "8240": {
      "op": "SWAP8"
    },
    "8241": {
      "op": "SWAP4"
    },
    "8242": {
      "op": "SWAP7"
    },
    "8243": {
      "op": "POP"
    },
    "8244": {
      "op": "SWAP2"
    },
    "8245": {
      "op": "SWAP5"
    },
    "8246": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "8248": {
      "op": "ADD"
    },
    "8249": {
      "op": "CALLDATALOAD"
    },
    "8250": {
      "op": "SWAP3"
    },
    "8251": {
      "op": "SWAP2"
    },
    "8252": {
      "op": "POP"
    },
    "8253": {
      "op": "POP"
    },
    "8254": {
      "jump": "o",
      "op": "JUMP"
    },
    "8255": {
      "op": "JUMPDEST"
    },
    "8256": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8258": {
      "op": "DUP1"
    },
    "8259": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "8261": {
      "op": "SHL"
    },
    "8262": {
      "op": "SUB"
    },
    "8263": {
      "op": "DUP6"
    },
    "8264": {
      "op": "AND"
    },
    "8265": {
      "op": "DUP2"
    },
    "8266": {
      "op": "MSTORE"
    },
    "8267": {
      "op": "DUP4"
    },
    "8268": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "8270": {
      "op": "DUP3"
    },
    "8271": {
      "op": "ADD"
    },
    "8272": {
      "op": "MSTORE"
    },
    "8273": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "8275": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "8277": {
      "op": "DUP3"
    },
    "8278": {
      "op": "ADD"
    },
    "8279": {
      "op": "MSTORE"
    },
    "8280": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "8282": {
      "op": "PUSH2",
      "value": "0x2066"
    },
    "8285": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "8287": {
      "op": "DUP4"
    },
    "8288": {
      "op": "ADD"
    },
    "8289": {
      "op": "DUP6"
    },
    "8290": {
      "op": "PUSH2",
      "value": "0x1C37"
    },
    "8293": {
      "jump": "i",
      "op": "JUMP"
    },
    "8294": {
      "op": "JUMPDEST"
    },
    "8295": {
      "op": "SWAP1"
    },
    "8296": {
      "op": "POP"
    },
    "8297": {
      "op": "DUP3"
    },
    "8298": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "8300": {
      "op": "DUP4"
    },
    "8301": {
      "op": "ADD"
    },
    "8302": {
      "op": "MSTORE"
    },
    "8303": {
      "op": "SWAP6"
    },
    "8304": {
      "op": "SWAP5"
    },
    "8305": {
      "op": "POP"
    },
    "8306": {
      "op": "POP"
    },
    "8307": {
      "op": "POP"
    },
    "8308": {
      "op": "POP"
    },
    "8309": {
      "op": "POP"
    },
    "8310": {
      "jump": "o",
      "op": "JUMP"
    },
    "8311": {
      "op": "JUMPDEST"
    },
    "8312": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "8314": {
      "op": "DUP3"
    },
    "8315": {
      "op": "MLOAD"
    },
    "8316": {
      "op": "PUSH2",
      "value": "0x2089"
    },
    "8319": {
      "op": "DUP2"
    },
    "8320": {
      "op": "DUP5"
    },
    "8321": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "8323": {
      "op": "DUP8"
    },
    "8324": {
      "op": "ADD"
    },
    "8325": {
      "op": "PUSH2",
      "value": "0x1C07"
    },
    "8328": {
      "jump": "i",
      "op": "JUMP"
    },
    "8329": {
      "op": "JUMPDEST"
    },
    "8330": {
      "op": "SWAP2"
    },
    "8331": {
      "op": "SWAP1"
    },
    "8332": {
      "op": "SWAP2"
    },
    "8333": {
      "op": "ADD"
    },
    "8334": {
      "op": "SWAP3"
    },
    "8335": {
      "op": "SWAP2"
    },
    "8336": {
      "op": "POP"
    },
    "8337": {
      "op": "POP"
    },
    "8338": {
      "jump": "o",
      "op": "JUMP"
    },
    "8339": {
      "op": "JUMPDEST"
    },
    "8340": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8342": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8344": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "8346": {
      "op": "SHL"
    },
    "8347": {
      "op": "SUB"
    },
    "8348": {
      "op": "DUP7"
    },
    "8349": {
      "op": "DUP2"
    },
    "8350": {
      "op": "AND"
    },
    "8351": {
      "op": "DUP3"
    },
    "8352": {
      "op": "MSTORE"
    },
    "8353": {
      "op": "DUP6"
    },
    "8354": {
      "op": "AND"
    },
    "8355": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "8357": {
      "op": "DUP3"
    },
    "8358": {
      "op": "ADD"
    },
    "8359": {
      "op": "MSTORE"
    },
    "8360": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "8362": {
      "op": "DUP2"
    },
    "8363": {
      "op": "ADD"
    },
    "8364": {
      "op": "DUP5"
    },
    "8365": {
      "op": "SWAP1"
    },
    "8366": {
      "op": "MSTORE"
    },
    "8367": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "8369": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "8371": {
      "op": "DUP3"
    },
    "8372": {
      "op": "ADD"
    },
    "8373": {
      "op": "DUP2"
    },
    "8374": {
      "op": "SWAP1"
    },
    "8375": {
      "op": "MSTORE"
    },
    "8376": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "8378": {
      "op": "SWAP1"
    },
    "8379": {
      "op": "PUSH2",
      "value": "0x20C6"
    },
    "8382": {
      "op": "SWAP1"
    },
    "8383": {
      "op": "DUP4"
    },
    "8384": {
      "op": "ADD"
    },
    "8385": {
      "op": "DUP6"
    },
    "8386": {
      "op": "PUSH2",
      "value": "0x1C37"
    },
    "8389": {
      "jump": "i",
      "op": "JUMP"
    },
    "8390": {
      "op": "JUMPDEST"
    },
    "8391": {
      "op": "SWAP1"
    },
    "8392": {
      "op": "POP"
    },
    "8393": {
      "op": "DUP3"
    },
    "8394": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "8396": {
      "op": "DUP4"
    },
    "8397": {
      "op": "ADD"
    },
    "8398": {
      "op": "MSTORE"
    },
    "8399": {
      "op": "SWAP7"
    },
    "8400": {
      "op": "SWAP6"
    },
    "8401": {
      "op": "POP"
    },
    "8402": {
      "op": "POP"
    },
    "8403": {
      "op": "POP"
    },
    "8404": {
      "op": "POP"
    },
    "8405": {
      "op": "POP"
    },
    "8406": {
      "op": "POP"
    },
    "8407": {
      "jump": "o",
      "op": "JUMP"
    },
    "8408": {
      "op": "JUMPDEST"
    },
    "8409": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "8411": {
      "op": "DUP2"
    },
    "8412": {
      "op": "MSTORE"
    },
    "8413": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "8415": {
      "op": "PUSH2",
      "value": "0x20EB"
    },
    "8418": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "8420": {
      "op": "DUP4"
    },
    "8421": {
      "op": "ADD"
    },
    "8422": {
      "op": "DUP6"
    },
    "8423": {
      "op": "PUSH2",
      "value": "0x1C37"
    },
    "8426": {
      "jump": "i",
      "op": "JUMP"
    },
    "8427": {
      "op": "JUMPDEST"
    },
    "8428": {
      "op": "DUP3"
    },
    "8429": {
      "op": "DUP2"
    },
    "8430": {
      "op": "SUB"
    },
    "8431": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "8433": {
      "op": "DUP5"
    },
    "8434": {
      "op": "ADD"
    },
    "8435": {
      "op": "MSTORE"
    },
    "8436": {
      "op": "PUSH2",
      "value": "0x1EAC"
    },
    "8439": {
      "op": "DUP2"
    },
    "8440": {
      "op": "DUP6"
    },
    "8441": {
      "op": "PUSH2",
      "value": "0x1C37"
    },
    "8444": {
      "jump": "i",
      "op": "JUMP"
    },
    "8445": {
      "op": "JUMPDEST"
    },
    "8446": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8448": {
      "op": "DUP2"
    },
    "8449": {
      "op": "DUP2"
    },
    "8450": {
      "op": "SHR"
    },
    "8451": {
      "op": "SWAP1"
    },
    "8452": {
      "op": "DUP3"
    },
    "8453": {
      "op": "AND"
    },
    "8454": {
      "op": "DUP1"
    },
    "8455": {
      "op": "PUSH2",
      "value": "0x2111"
    },
    "8458": {
      "op": "JUMPI"
    },
    "8459": {
      "op": "PUSH1",
      "value": "0x7F"
    },
    "8461": {
      "op": "DUP3"
    },
    "8462": {
      "op": "AND"
    },
    "8463": {
      "op": "SWAP2"
    },
    "8464": {
      "op": "POP"
    },
    "8465": {
      "op": "JUMPDEST"
    },
    "8466": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "8468": {
      "op": "DUP3"
    },
    "8469": {
      "op": "LT"
    },
    "8470": {
      "op": "DUP2"
    },
    "8471": {
      "op": "EQ"
    },
    "8472": {
      "op": "ISZERO"
    },
    "8473": {
      "op": "PUSH2",
      "value": "0x2132"
    },
    "8476": {
      "op": "JUMPI"
    },
    "8477": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "8482": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "8484": {
      "op": "SHL"
    },
    "8485": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "8487": {
      "op": "MSTORE"
    },
    "8488": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "8490": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "8492": {
      "op": "MSTORE"
    },
    "8493": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "8495": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "8497": {
      "op": "REVERT"
    },
    "8498": {
      "op": "JUMPDEST"
    },
    "8499": {
      "op": "POP"
    },
    "8500": {
      "op": "SWAP2"
    },
    "8501": {
      "op": "SWAP1"
    },
    "8502": {
      "op": "POP"
    },
    "8503": {
      "jump": "o",
      "op": "JUMP"
    },
    "8504": {
      "op": "JUMPDEST"
    },
    "8505": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "8510": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "8512": {
      "op": "SHL"
    },
    "8513": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "8515": {
      "op": "MSTORE"
    },
    "8516": {
      "op": "PUSH1",
      "value": "0x32"
    },
    "8518": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "8520": {
      "op": "MSTORE"
    },
    "8521": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "8523": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "8525": {
      "op": "REVERT"
    },
    "8526": {
      "op": "JUMPDEST"
    },
    "8527": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "8529": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "8531": {
      "op": "DUP3"
    },
    "8532": {
      "op": "AND"
    },
    "8533": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "8535": {
      "op": "DUP2"
    },
    "8536": {
      "op": "EQ"
    },
    "8537": {
      "op": "ISZERO"
    },
    "8538": {
      "op": "PUSH2",
      "value": "0x2173"
    },
    "8541": {
      "op": "JUMPI"
    },
    "8542": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "8547": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "8549": {
      "op": "SHL"
    },
    "8550": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "8552": {
      "op": "MSTORE"
    },
    "8553": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "8555": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "8557": {
      "op": "MSTORE"
    },
    "8558": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "8560": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "8562": {
      "op": "REVERT"
    },
    "8563": {
      "op": "JUMPDEST"
    },
    "8564": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8566": {
      "op": "ADD"
    },
    "8567": {
      "op": "SWAP3"
    },
    "8568": {
      "op": "SWAP2"
    },
    "8569": {
      "op": "POP"
    },
    "8570": {
      "op": "POP"
    },
    "8571": {
      "jump": "o",
      "op": "JUMP"
    },
    "8572": {
      "op": "JUMPDEST"
    },
    "8573": {
      "op": "DUP5"
    },
    "8574": {
      "op": "DUP2"
    },
    "8575": {
      "op": "MSTORE"
    },
    "8576": {
      "op": "DUP4"
    },
    "8577": {
      "op": "ISZERO"
    },
    "8578": {
      "op": "ISZERO"
    },
    "8579": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "8581": {
      "op": "DUP3"
    },
    "8582": {
      "op": "ADD"
    },
    "8583": {
      "op": "MSTORE"
    },
    "8584": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8586": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8588": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "8590": {
      "op": "SHL"
    },
    "8591": {
      "op": "SUB"
    },
    "8592": {
      "op": "DUP4"
    },
    "8593": {
      "op": "AND"
    },
    "8594": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "8596": {
      "op": "DUP3"
    },
    "8597": {
      "op": "ADD"
    },
    "8598": {
      "op": "MSTORE"
    },
    "8599": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "8601": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "8603": {
      "op": "DUP3"
    },
    "8604": {
      "op": "ADD"
    },
    "8605": {
      "op": "DUP2"
    },
    "8606": {
      "op": "SWAP1"
    },
    "8607": {
      "op": "MSTORE"
    },
    "8608": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "8610": {
      "op": "SWAP1"
    },
    "8611": {
      "op": "PUSH2",
      "value": "0x21AE"
    },
    "8614": {
      "op": "SWAP1"
    },
    "8615": {
      "op": "DUP4"
    },
    "8616": {
      "op": "ADD"
    },
    "8617": {
      "op": "DUP5"
    },
    "8618": {
      "op": "PUSH2",
      "value": "0x1C37"
    },
    "8621": {
      "jump": "i",
      "op": "JUMP"
    },
    "8622": {
      "op": "JUMPDEST"
    },
    "8623": {
      "op": "SWAP7"
    },
    "8624": {
      "op": "SWAP6"
    },
    "8625": {
      "op": "POP"
    },
    "8626": {
      "op": "POP"
    },
    "8627": {
      "op": "POP"
    },
    "8628": {
      "op": "POP"
    },
    "8629": {
      "op": "POP"
    },
    "8630": {
      "op": "POP"
    },
    "8631": {
      "jump": "o",
      "op": "JUMP"
    },
    "8632": {
      "op": "JUMPDEST"
    },
    "8633": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "8635": {
      "op": "DUP5"
    },
    "8636": {
      "op": "AND"
    },
    "8637": {
      "op": "DUP2"
    },
    "8638": {
      "op": "MSTORE"
    },
    "8639": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "8641": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "8643": {
      "op": "DUP3"
    },
    "8644": {
      "op": "ADD"
    },
    "8645": {
      "op": "MSTORE"
    },
    "8646": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "8648": {
      "op": "PUSH2",
      "value": "0x21D4"
    },
    "8651": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "8653": {
      "op": "DUP4"
    },
    "8654": {
      "op": "ADD"
    },
    "8655": {
      "op": "DUP6"
    },
    "8656": {
      "op": "PUSH2",
      "value": "0x1C37"
    },
    "8659": {
      "jump": "i",
      "op": "JUMP"
    },
    "8660": {
      "op": "JUMPDEST"
    },
    "8661": {
      "op": "SWAP1"
    },
    "8662": {
      "op": "POP"
    },
    "8663": {
      "op": "DUP3"
    },
    "8664": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "8666": {
      "op": "DUP4"
    },
    "8667": {
      "op": "ADD"
    },
    "8668": {
      "op": "MSTORE"
    },
    "8669": {
      "op": "SWAP5"
    },
    "8670": {
      "op": "SWAP4"
    },
    "8671": {
      "op": "POP"
    },
    "8672": {
      "op": "POP"
    },
    "8673": {
      "op": "POP"
    },
    "8674": {
      "op": "POP"
    },
    "8675": {
      "jump": "o",
      "op": "JUMP"
    },
    "8676": {
      "op": "JUMPDEST"
    },
    "8677": {
      "op": "DUP4"
    },
    "8678": {
      "op": "DUP2"
    },
    "8679": {
      "op": "MSTORE"
    },
    "8680": {
      "op": "DUP3"
    },
    "8681": {
      "op": "ISZERO"
    },
    "8682": {
      "op": "ISZERO"
    },
    "8683": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "8685": {
      "op": "DUP3"
    },
    "8686": {
      "op": "ADD"
    },
    "8687": {
      "op": "MSTORE"
    },
    "8688": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "8690": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "8692": {
      "op": "DUP3"
    },
    "8693": {
      "op": "ADD"
    },
    "8694": {
      "op": "MSTORE"
    },
    "8695": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "8697": {
      "op": "PUSH2",
      "value": "0x1EAC"
    },
    "8700": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "8702": {
      "op": "DUP4"
    },
    "8703": {
      "op": "ADD"
    },
    "8704": {
      "op": "DUP5"
    },
    "8705": {
      "op": "PUSH2",
      "value": "0x1C37"
    },
    "8708": {
      "jump": "i",
      "op": "JUMP"
    },
    "8709": {
      "op": "JUMPDEST"
    },
    "8710": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8712": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8714": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "8716": {
      "op": "SHL"
    },
    "8717": {
      "op": "SUB"
    },
    "8718": {
      "op": "DUP5"
    },
    "8719": {
      "op": "AND"
    },
    "8720": {
      "op": "DUP2"
    },
    "8721": {
      "op": "MSTORE"
    },
    "8722": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "8724": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "8726": {
      "op": "DUP3"
    },
    "8727": {
      "op": "ADD"
    },
    "8728": {
      "op": "DUP2"
    },
    "8729": {
      "op": "SWAP1"
    },
    "8730": {
      "op": "MSTORE"
    },
    "8731": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "8733": {
      "op": "SWAP1"
    },
    "8734": {
      "op": "PUSH2",
      "value": "0x21D4"
    },
    "8737": {
      "op": "SWAP1"
    },
    "8738": {
      "op": "DUP4"
    },
    "8739": {
      "op": "ADD"
    },
    "8740": {
      "op": "DUP6"
    },
    "8741": {
      "op": "PUSH2",
      "value": "0x1C37"
    },
    "8744": {
      "jump": "i",
      "op": "JUMP"
    },
    "8745": {
      "op": "JUMPDEST"
    },
    "8746": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8748": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8750": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "8752": {
      "op": "SHL"
    },
    "8753": {
      "op": "SUB"
    },
    "8754": {
      "op": "DUP7"
    },
    "8755": {
      "op": "DUP2"
    },
    "8756": {
      "op": "AND"
    },
    "8757": {
      "op": "DUP3"
    },
    "8758": {
      "op": "MSTORE"
    },
    "8759": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "8761": {
      "op": "DUP3"
    },
    "8762": {
      "op": "ADD"
    },
    "8763": {
      "op": "DUP7"
    },
    "8764": {
      "op": "SWAP1"
    },
    "8765": {
      "op": "MSTORE"
    },
    "8766": {
      "op": "DUP5"
    },
    "8767": {
      "op": "AND"
    },
    "8768": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "8770": {
      "op": "DUP3"
    },
    "8771": {
      "op": "ADD"
    },
    "8772": {
      "op": "MSTORE"
    },
    "8773": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "8775": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "8777": {
      "op": "DUP3"
    },
    "8778": {
      "op": "ADD"
    },
    "8779": {
      "op": "DUP2"
    },
    "8780": {
      "op": "SWAP1"
    },
    "8781": {
      "op": "MSTORE"
    },
    "8782": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "8784": {
      "op": "SWAP1"
    },
    "8785": {
      "op": "PUSH2",
      "value": "0x20C6"
    },
    "8788": {
      "op": "SWAP1"
    },
    "8789": {
      "op": "DUP4"
    },
    "8790": {
      "op": "ADD"
    },
    "8791": {
      "op": "DUP6"
    },
    "8792": {
      "op": "PUSH2",
      "value": "0x1C37"
    },
    "8795": {
      "jump": "i",
      "op": "JUMP"
    },
    "8796": {
      "op": "JUMPDEST"
    },
    "8797": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8799": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "8801": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "8803": {
      "op": "SHL"
    },
    "8804": {
      "op": "SUB"
    },
    "8805": {
      "op": "DUP7"
    },
    "8806": {
      "op": "AND"
    },
    "8807": {
      "op": "DUP2"
    },
    "8808": {
      "op": "MSTORE"
    },
    "8809": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "8811": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "8813": {
      "op": "DUP3"
    },
    "8814": {
      "op": "ADD"
    },
    "8815": {
      "op": "DUP2"
    },
    "8816": {
      "op": "SWAP1"
    },
    "8817": {
      "op": "MSTORE"
    },
    "8818": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "8820": {
      "op": "SWAP1"
    },
    "8821": {
      "op": "PUSH2",
      "value": "0x2280"
    },
    "8824": {
      "op": "SWAP1"
    },
    "8825": {
      "op": "DUP4"
    },
    "8826": {
      "op": "ADD"
    },
    "8827": {
      "op": "DUP8"
    },
    "8828": {
      "op": "PUSH2",
      "value": "0x1C37"
    },
    "8831": {
      "jump": "i",
      "op": "JUMP"
    },
    "8832": {
      "op": "JUMPDEST"
    },
    "8833": {
      "op": "DUP3"
    },
    "8834": {
      "op": "DUP2"
    },
    "8835": {
      "op": "SUB"
    },
    "8836": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "8838": {
      "op": "DUP5"
    },
    "8839": {
      "op": "ADD"
    },
    "8840": {
      "op": "MSTORE"
    },
    "8841": {
      "op": "PUSH2",
      "value": "0x2292"
    },
    "8844": {
      "op": "DUP2"
    },
    "8845": {
      "op": "DUP8"
    },
    "8846": {
      "op": "PUSH2",
      "value": "0x1C37"
    },
    "8849": {
      "jump": "i",
      "op": "JUMP"
    },
    "8850": {
      "op": "JUMPDEST"
    },
    "8851": {
      "op": "SWAP5"
    },
    "8852": {
      "op": "ISZERO"
    },
    "8853": {
      "op": "ISZERO"
    },
    "8854": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "8856": {
      "op": "DUP5"
    },
    "8857": {
      "op": "ADD"
    },
    "8858": {
      "op": "MSTORE"
    },
    "8859": {
      "op": "POP"
    },
    "8860": {
      "op": "POP"
    },
    "8861": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "8863": {
      "op": "ADD"
    },
    "8864": {
      "op": "MSTORE"
    },
    "8865": {
      "op": "SWAP4"
    },
    "8866": {
      "op": "SWAP3"
    },
    "8867": {
      "op": "POP"
    },
    "8868": {
      "op": "POP"
    },
    "8869": {
      "op": "POP"
    },
    "8870": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "84badf8e7b5f8b710ad910cbee05bb58531f158d",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.11;\n\nimport \"./CLStorage.sol\";\n\n/// @title Contract to implement and test the basic fuctions of CLHouses\n/// @author Leonardo Urrego\n/// @notice This contract for test only the most basic interactions\ncontract CLHouse is CLStorage {\n\n    /// @notice Create a new CLH\n    /// @dev Some parameters can be ignored depending on the governance model\n    /// @param _owner The address of the deployed wallet\n    /// @param _houseName Name given by the owner\n    /// @param _housePrivate If is set to 1, the CLH is set to private\n    /// @param _gov keccak256 hash of the governance model, see the __GOV_* constans\n    /// @param _govRuleMaxManagerMembers Max of manager member that CLH can accept (only for COMMITTEE )\n    /// @param _govRuleMaxActiveMembers Max of all members (including managers)\n    /// @param _govRuleApprovPercentage Percentage for approval o reject proposal based on `numManagerMembers`\n    /// @param _ManagerWallets Whitelist of address for invitate as managers\n    constructor(\n        address _owner, \n        string memory _houseName,\n        bool _housePrivate,\n        bytes32 _gov,\n        uint8 _govRuleMaxManagerMembers,\n        uint8 _govRuleMaxActiveMembers,\n        uint8 _govRuleApprovPercentage,\n        address _CLCMemberManagement,\n        address _CLCGovernance,\n        address _CLLConstructor,\n        address[] memory _ManagerWallets\n    )\n    {\n\n        \n        (bool successDGTCLL, bytes memory dataDLGTCLL) = _CLLConstructor.delegatecall(\n            abi.encodeWithSignature(\n                \"CLLCLHConstructor(address,string,bool,bytes32,uint8,uint8,uint8,address,address,address[])\",\n                _owner, \n                _houseName,\n                _housePrivate,\n                _gov,\n                _govRuleMaxManagerMembers,\n                _govRuleMaxActiveMembers,\n                _govRuleApprovPercentage,\n                _CLCMemberManagement,\n                _CLCGovernance,\n                _ManagerWallets\n            )\n        );\n\n        if( !successDGTCLL ) {\n            assembly {\n                let ptr := mload(0x40)\n                let size := returndatasize()\n                returndatacopy(ptr, 0, size)\n                revert(ptr, size)\n            }\n        }\n    }\n\n    /// @notice Execute (or reject) a proposal computing the votes and the governance model\n    /// @dev Normally is called internally after each vote\n    /// @param _propId ID of the proposal, based on `arrProposals`\n    /// @return status True if the proposal can be execute, false in other cases\n    /// @return message result of the transaction\n    function ExecProp(\n        uint256 _propId\n    )\n        public\n        returns(\n            bool status,\n            string memory message\n        )\n    {\n        (bool successDGTCLL, bytes memory dataDLGTCLL) = CLCGovernance.delegatecall(\n            abi.encodeWithSignature(\n                \"_ExecProp(uint256)\",\n                _propId\n            )\n        );\n\n        if( !successDGTCLL ) {\n            assembly {\n                let ptr := mload(0x40)\n                let size := returndatasize()\n                returndatacopy(ptr, 0, size)\n                revert(ptr, size)\n            }\n        }\n\n        return ( true , \"Success executed proposal\" );\n    }\n\n    /// @notice Used to vote a proposal\n    /// @dev After vote the proposal automatically try to be executed\n    /// @param _propId ID of the proposal, based on `arrProposals`\n    /// @param _support True for accept, false to reject\n    /// @param _justification About your vote\n    /// @return true is the vote can be stored\n    function VoteProposal(\n        uint256 _propId,\n        bool _support,\n        string memory _justification\n    )\n        public\n        returns( bool )\n    {\n        (bool successDGTCLL, bytes memory dataDLGTCLL) = CLCGovernance.delegatecall(\n            abi.encodeWithSignature( \n                \"_VoteProposal(uint256,bool,string)\", \n                _propId,\n                _support,\n                _justification\n            )\n        );\n\n        if( !successDGTCLL ) {\n            assembly {\n                let ptr := mload(0x40)\n                let size := returndatasize()\n                returndatacopy(ptr, 0, size)\n                revert(ptr, size)\n            }\n        }\n\n        return true;\n    }\n\n    function VotePropOffChain(\n        address _voter,\n        uint256 _propId,\n        bool _support,\n        string memory _justification,\n        bytes32 signR,\n        bytes32 signS,\n        uint8 signV\n\n    )\n        external\n        returns( bool )\n    {\n        uint256 chainId = block.chainid;\n\n        bytes32 eip712DomainHash = keccak256(\n            abi.encode(\n                keccak256(abi.encodePacked(\n                    \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n                )),\n                keccak256(\"CLHouse\"),\n                keccak256(\"0.0.10\"),\n                chainId,\n                address(this)\n            )\n        );\n\n        bytes32 hashStruct = keccak256(\n            abi.encode(\n                keccak256(abi.encodePacked(\n                    \"strOffChainVote(address voter,uint256 propId,bool support,string justification)\"\n                )),\n                _voter,\n                _propId,\n                _support,\n                keccak256(abi.encodePacked(_justification))\n            )\n        );\n        \n        bytes32 singhash = keccak256(abi.encodePacked(\"\\x19\\x01\", eip712DomainHash, hashStruct));\n            \n        // require( _signature.length == 65, \"VotePropOffChain: Bad signature length\");\n\n        // bytes32 signR;\n        // bytes32 signS;\n        // uint8 signV;\n\n        // assembly {\n        //     // first 32 bytes, after the length prefix\n        //     signR := mload(add(_signature, 32))\n        //     // second 32 bytes\n        //     signS := mload(add(_signature, 64))\n        //     // final byte (first byte of the next 32 bytes)\n        //     signV := byte(0, mload(add(_signature, 96)))\n        // }\n\n        address signer = ecrecover( singhash, signV, signR, signS );\n\n        require( signer != address(0), \"ECDSA: invalid signature\" );\n        require( signer == _voter, \"VotePropOffChain: invalid signature\" );\n        require( _propId < arrProposals.length , \"Proposal does not exist\" );\n        require( false == arrProposals[ _propId ].executed , \"Proposal already executed\" );\n        require( false == arrProposals[ _propId ].rejected , \"Proposal was rejected\" );\n        require( !mapVotes[ _propId ][ _voter ].voted , \"User have a vote registred for this proposal\" );\n        require( block.timestamp < arrProposals[ _propId ].deadline , \"Proposal deadline\" );\n\n        mapVotes[ _propId ][ _voter ].inSupport = _support;\n        mapVotes[ _propId ][ _voter ].justification = _justification;\n        mapVotes[ _propId ][ _voter ].voted = true;\n\n        arrProposals[ _propId ].numVotes++;\n\n        if( !_support )\n            arrProposals[ _propId ].againstVotes++;\n\n        emit evtVoted( _propId,  _support, _voter, _justification );\n\n        // auto exec\n        ExecProp( _propId );\n\n        return true;\n    }\n\n    /// @notice Generate a new proposal to invite a new member\n    /// @dev the execution of this proposal only create an invitation \n    /// @param _walletAddr  Address of the new user\n    /// @param _name Can be the nickname or other reference to the User\n    /// @param _description A text for the proposal\n    /// @param _isManager True if is for a manager member\n    /// @return propId ID of the new proposal, based on `arrProposals`\n    function PropInviteMember(\n        address _walletAddr,\n        string memory _name,\n        string memory _description,\n        bool _isManager,\n        uint256 _delayTime\n    )\n        external\n        returns( uint256 propId )\n    {\n        (bool successDGTCLL, bytes memory dataDLGTCLL) = CLCGovernance.delegatecall(\n            abi.encodeWithSignature( \n                \"PropInviteMember(address,string,string,bool,uint256)\", \n                _walletAddr,\n                _name,\n                _description,\n                _isManager,\n                _delayTime\n            )\n        );\n\n        assembly {\n            let ptr := mload(0x40)\n            let size := returndatasize()\n            returndatacopy(ptr, 0, size)\n            if iszero( successDGTCLL ) {\n                revert(ptr, size)\n            }\n            propId := mload(ptr)\n        }\n    }\n\n    /// @notice Generate a new proposal for remove a member\n    /// @dev The member can be a managaer\n    /// @param _walletAddr member Address to be removed\n    /// @param _description About the proposal\n    /// @return propId ID of the new proposal, based on `arrProposals`\n    function PropRemoveMember(\n        address _walletAddr,\n        string memory _description,\n        uint256 _delayTime\n    )\n        external\n        returns( uint256 propId )\n    {\n        (bool successDGTCLL, bytes memory dataDLGTCLL) = CLCGovernance.delegatecall(\n            abi.encodeWithSignature( \n                \"PropRemoveMember(address,string,uint256)\", \n                _walletAddr,\n                _description,\n                _delayTime\n            )\n        );\n\n        assembly {\n            let ptr := mload(0x40)\n            let size := returndatasize()\n            returndatacopy(ptr, 0, size)\n            if iszero( successDGTCLL ) {\n                revert(ptr, size)\n            }\n            propId := mload(ptr)\n        }\n    }\n\n    /// @notice generate a new proposal to transfer ETH in weis\n    /// @dev When execute this proposal, the transfer is made\n    /// @param _to Recipient address\n    /// @param _amountOutCLV Amount to transfer (in wei)\n    /// @param _description About this proposal\n    /// @return propId ID of the new proposal, based on `arrProposals`\n    function PropTxWei(\n        address _to,\n        uint256 _amountOutCLV,\n        string memory _description,\n        uint256 _delayTime\n    )\n        external\n        returns( uint256 propId )\n    {\n        (bool successDGTCLL, bytes memory dataDLGTCLL) = CLCGovernance.delegatecall(\n            abi.encodeWithSignature( \n                \"PropTxWei(address,uint256,string,uint256)\", \n                _to,\n                _amountOutCLV,\n                _description,\n                _delayTime\n            )\n        );\n\n        assembly {\n            let ptr := mload(0x40)\n            let size := returndatasize()\n            returndatacopy(ptr, 0, size)\n            if iszero( successDGTCLL ) {\n                revert(ptr, size)\n            }\n            propId := mload(ptr)\n        }\n    }\n\n    /// @notice generate a new proposal to transfer ETH in weis\n    /// @dev When execute this proposal, the transfer is made\n    /// @param _to Recipient address\n    /// @param _amountOutCLV Amount to transfer (in wei)\n    /// @param _description About this proposal\n    /// @return propId ID of the new proposal, based on `arrProposals`\n    function PropTxERC20(\n        address _to,\n        uint256 _amountOutCLV,\n        address _tokenOutCLV,\n        string memory _description,\n        uint256 _delayTime\n    )\n        external\n        returns( uint256 propId )\n    {\n        (bool successDGTCLL, bytes memory dataDLGTCLL) = CLCGovernance.delegatecall(\n            abi.encodeWithSignature( \n                \"PropTxERC20(address,uint256,address,string,uint256)\", \n                _to,\n                _amountOutCLV,\n                _tokenOutCLV,\n                _description,\n                _delayTime\n            )\n        );\n\n        assembly {\n            let ptr := mload(0x40)\n            let size := returndatasize()\n            returndatacopy(ptr, 0, size)\n            if iszero( successDGTCLL ) {\n                revert(ptr, size)\n            }\n            propId := mload(ptr)\n        }\n    }\n\n    /// @notice Generate a new proposal for change some governance parameters\n    /// @dev When execute this proposal the new values will be set\n    /// @param _newApprovPercentage The new percentaje for accept or reject a proposal\n    /// @param _description About the new proposal \n    /// @return propId ID of the new proposal, based on `arrProposals`\n    function PropGovRules(\n        uint8 _newApprovPercentage,\n        string memory _description,\n        uint256 _delayTime\n    )\n        external\n        returns( uint256 propId )\n    {\n        (bool successDGTCLL, bytes memory dataDLGTCLL) = CLCGovernance.delegatecall(\n            abi.encodeWithSignature( \n                \"PropGovRules(uint8,string,uint256)\", \n                _newApprovPercentage,\n                _description,\n                _delayTime\n            )\n        );\n\n        assembly {\n            let ptr := mload(0x40)\n            let size := returndatasize()\n            returndatacopy(ptr, 0, size)\n            if iszero( successDGTCLL ) {\n                revert(ptr, size)\n            }\n            propId := mload(ptr)\n        }\n    }\n\n    /// @notice Generate a proposal from a user that want to join to the CLH\n    /// @dev Only avaiable in public CLH\n    /// @param _name Nickname or other user identification\n    /// @param _description About the request\n    /// @return propId ID of the new proposal, based on `arrProposals`\n    function PropRequestToJoin(\n        string memory _name,\n        string memory _description\n    )\n        external\n        returns( uint256 )\n    {\n        (bool successDGTCLL, bytes memory dataDLGTCLL) = CLCGovernance.delegatecall(\n            abi.encodeWithSignature( \n                \"PropRequestToJoin(string,string)\", \n                _name,\n                _description\n            )\n        );\n\n        assembly {\n            let ptr := mload(0x40)\n            let size := returndatasize()\n            returndatacopy(ptr, 0, size)\n            if iszero( successDGTCLL ) {\n                revert(ptr, size)\n            }\n            return(ptr, size)\n        }\n    }\n\n    /// @notice For an user that have an invitation pending\n    /// @dev \n    /// @param _acceptance True for accept the invitation\n    function AcceptRejectInvitation(\n        bool _acceptance\n    )\n        external\n    {\n        (bool successDGTCLL, bytes memory dataDLGTCLL) = CLCMemberManagement.delegatecall(\n            abi.encodeWithSignature( \n                \"AcceptRejectInvitation(bool)\", \n                _acceptance\n            )\n        );\n\n        if( !successDGTCLL ) {\n            assembly {\n                let ptr := mload(0x40)\n                let size := returndatasize()\n                returndatacopy(ptr, 0, size)\n                revert(ptr, size)\n            }\n        }\n    }\n\n    function PropSwapERC20(\n        address _tokenOutCLV,\n        address _tokenInCLV,\n        uint256 _amountOutCLV,\n        string memory _description,\n        uint256 _delayTime\n    )\n        external\n        returns( uint256 propId )\n    {\n        (bool successDGTCLL, bytes memory dataDLGTCLL) = CLCGovernance.delegatecall(\n            abi.encodeWithSignature( \n                \"PropSwapERC20(address,address,uint256,string,uint256)\", \n                 _tokenOutCLV,\n                 _tokenInCLV,\n                 _amountOutCLV,\n                 _description,\n                 _delayTime\n            )\n        );\n\n        assembly {\n            let ptr := mload(0x40)\n            let size := returndatasize()\n            returndatacopy(ptr, 0, size)\n            if iszero( successDGTCLL ) {\n                revert(ptr, size)\n            }\n            return(ptr, size)\n        }\n    }\n\n    function PropSellERC20(\n        address _tokenOutCLV,\n        uint256 _amountOutCLV,\n        string memory _description,\n        uint256 _delayTime\n    )\n        external\n        returns( uint256 propId )\n    {\n        (bool successDGTCLL, bytes memory dataDLGTCLL) = CLCGovernance.delegatecall(\n            abi.encodeWithSignature( \n                \"PropSellERC20(address,uint256,string,uint256)\", \n                 _tokenOutCLV,\n                 _amountOutCLV,\n                 _description,\n                 _delayTime\n            )\n        );\n\n        assembly {\n            let ptr := mload(0x40)\n            let size := returndatasize()\n            returndatacopy(ptr, 0, size)\n            if iszero( successDGTCLL ) {\n                revert(ptr, size)\n            }\n            return(ptr, size)\n        }\n    }\n\n    function PropBuyERC20(\n        address _tokenInCLV,\n        uint256 _amountOutCLV,\n        string memory _description,\n        uint256 _delayTime\n    )\n        external\n        returns( uint256 propId )\n    {\n        (bool successDGTCLL, bytes memory dataDLGTCLL) = CLCGovernance.delegatecall(\n            abi.encodeWithSignature( \n                \"PropBuyERC20(address,uint256,string,uint256)\", \n                 _tokenInCLV,\n                 _amountOutCLV,\n                 _description,\n                 _delayTime\n            )\n        );\n\n        assembly {\n            let ptr := mload(0x40)\n            let size := returndatasize()\n            returndatacopy(ptr, 0, size)\n            if iszero( successDGTCLL ) {\n                revert(ptr, size)\n            }\n            return(ptr, size)\n        }\n    }\n\n    function GetArrMembersLength() external view returns( uint256 ){\n        return arrMembers.length;\n    }\n}",
  "sourceMap": "254:17087:35:-:0;;;1038:1250;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1456:18;1476:24;1504:15;-1:-1:-1;;;;;1504:28:35;1697:6;1722:10;1750:13;1781:4;1803:25;1846:24;1888;1930:20;1968:14;2000:15;1546:483;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1546:483:35;;;;;;;;;;;;;;-1:-1:-1;;;;;1546:483:35;-1:-1:-1;;;1546:483:35;;;1504:535;;;1546:483;1504:535;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1455:584;;;;2055:13;2050:232;;2129:4;2123:11;2163:16;2219:4;2216:1;2211:3;2196:28;2253:4;2248:3;2241:17;2050:232;1435:853;;1038:1250;;;;;;;;;;;254:17087;;14:177:46;93:13;;-1:-1:-1;;;;;135:31:46;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:127::-;257:10;252:3;248:20;245:1;238:31;288:4;285:1;278:15;312:4;309:1;302:15;328:275;399:2;393:9;464:2;445:13;;-1:-1:-1;;441:27:46;429:40;;-1:-1:-1;;;;;484:34:46;;520:22;;;481:62;478:88;;;546:18;;:::i;:::-;582:2;575:22;328:275;;-1:-1:-1;328:275:46:o;608:258::-;680:1;690:113;704:6;701:1;698:13;690:113;;;780:11;;;774:18;761:11;;;754:39;726:2;719:10;690:113;;;821:6;818:1;815:13;812:48;;;856:1;847:6;842:3;838:16;831:27;812:48;;608:258;;;:::o;871:497::-;925:5;978:3;971:4;963:6;959:17;955:27;945:55;;996:1;993;986:12;945:55;1019:13;;-1:-1:-1;;;;;1044:26:46;;1041:52;;;1073:18;;:::i;:::-;1117:55;1160:2;1141:13;;-1:-1:-1;;1137:27:46;1166:4;1133:38;1117:55;:::i;:::-;1197:2;1188:7;1181:19;1243:3;1236:4;1231:2;1223:6;1219:15;1215:26;1212:35;1209:55;;;1260:1;1257;1250:12;1209:55;1273:64;1334:2;1327:4;1318:7;1314:18;1307:4;1299:6;1295:17;1273:64;:::i;:::-;1355:7;871:497;-1:-1:-1;;;;871:497:46:o;1373:164::-;1449:13;;1498;;1491:21;1481:32;;1471:60;;1527:1;1524;1517:12;1542:160;1619:13;;1672:4;1661:16;;1651:27;;1641:55;;1692:1;1689;1682:12;1707:733;1772:5;1825:3;1818:4;1810:6;1806:17;1802:27;1792:55;;1843:1;1840;1833:12;1792:55;1866:13;;1898:4;-1:-1:-1;;;;;1914:26:46;;1911:52;;;1943:18;;:::i;:::-;1989:2;1986:1;1982:10;2012:28;2036:2;2032;2028:11;2012:28;:::i;:::-;2074:15;;;2144;;;2140:24;;;2105:12;;;;2176:15;;;2173:35;;;2204:1;2201;2194:12;2173:35;2240:2;2232:6;2228:15;2217:26;;2252:159;2268:6;2263:3;2260:15;2252:159;;;2334:34;2364:3;2334:34;:::i;:::-;2322:47;;2285:12;;;;2389;;;;2252:159;;;2429:5;1707:733;-1:-1:-1;;;;;;;1707:733:46:o;2445:1316::-;2631:6;2639;2647;2655;2663;2671;2679;2687;2695;2703;2711:7;2765:3;2753:9;2744:7;2740:23;2736:33;2733:53;;;2782:1;2779;2772:12;2733:53;2805:40;2835:9;2805:40;:::i;:::-;2889:2;2874:18;;2868:25;2795:50;;-1:-1:-1;;;;;;2905:30:46;;2902:50;;;2948:1;2945;2938:12;2902:50;2971:61;3024:7;3015:6;3004:9;3000:22;2971:61;:::i;:::-;2961:71;;;3051:46;3093:2;3082:9;3078:18;3051:46;:::i;:::-;3041:56;;3137:2;3126:9;3122:18;3116:25;3106:35;;3160:48;3203:3;3192:9;3188:19;3160:48;:::i;:::-;3150:58;;3227:48;3270:3;3259:9;3255:19;3227:48;:::i;:::-;3217:58;;3294:48;3337:3;3326:9;3322:19;3294:48;:::i;:::-;3284:58;;3361:50;3406:3;3395:9;3391:19;3361:50;:::i;:::-;3351:60;;3430:50;3475:3;3464:9;3460:19;3430:50;:::i;:::-;3420:60;;3499:50;3544:3;3533:9;3529:19;3499:50;:::i;:::-;3595:3;3580:19;;3574:26;3489:60;;-1:-1:-1;;;;;;3612:32:46;;3609:52;;;3657:1;3654;3647:12;3609:52;3681:74;3747:7;3736:8;3725:9;3721:24;3681:74;:::i;:::-;3670:85;;;2445:1316;;;;;;;;;;;;;;:::o;4051:461::-;4104:3;4142:5;4136:12;4169:6;4164:3;4157:19;4195:4;4224:2;4219:3;4215:12;4208:19;;4261:2;4254:5;4250:14;4282:1;4292:195;4306:6;4303:1;4300:13;4292:195;;;4371:13;;-1:-1:-1;;;;;4367:39:46;4355:52;;4427:12;;;;4462:15;;;;4403:1;4321:9;4292:195;;;-1:-1:-1;4503:3:46;;4051:461;-1:-1:-1;;;;;4051:461:46:o;4517:1234::-;4979:1;4975;4970:3;4966:11;4962:19;4954:6;4950:32;4939:9;4932:51;5019:3;5014:2;5003:9;4999:18;4992:31;4913:4;5052:6;5046:13;5096:6;5090:3;5079:9;5075:19;5068:35;5112:67;5172:6;5166:3;5155:9;5151:19;5146:2;5138:6;5134:15;5112:67;:::i;:::-;5238:2;5217:15;-1:-1:-1;;5213:29:46;5198:45;;5252:43;5291:2;5276:18;;5268:6;3945:13;3938:21;3926:34;;3875:91;5252:43;5331:6;5326:2;5315:9;5311:18;5304:34;5347:45;5387:3;5376:9;5372:19;5364:6;4038:4;4027:16;4015:29;;3971:75;5347:45;4038:4;4027:16;;5441:3;5426:19;;4015:29;4038:4;4027:16;;5495:3;5480:19;;4015:29;-1:-1:-1;;;;;3832:31:46;;5551:3;5536:19;;3820:44;-1:-1:-1;;;;;3832:31:46;;5607:3;5592:19;;3820:44;5673:3;5661:9;5657:2;5653:18;5649:28;5643:3;5632:9;5628:19;5621:57;5695:50;5740:3;5736:2;5732:12;5724:6;5695:50;:::i;:::-;5687:58;4517:1234;-1:-1:-1;;;;;;;;;;;;;4517:1234:46:o;5756:274::-;5885:3;5923:6;5917:13;5939:53;5985:6;5980:3;5973:4;5965:6;5961:17;5939:53;:::i;:::-;6008:16;;;;;5756:274;-1:-1:-1;;5756:274:46:o;:::-;254:17087:35;;;;;;",
  "sourcePath": "contracts/CLHouse/CLHouse.sol",
  "type": "contract"
}