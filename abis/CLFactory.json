{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "houseAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "houseName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "houseId",
          "type": "uint256"
        }
      ],
      "name": "evtNewCLH",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "CLCName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "evtUpdateCLC",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CLLConstructorCLH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLLGovernance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLLUserManagement",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_houseName",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_housePrivate",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_houseOpen",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_govRuleMaxUsers",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_whiteListNFT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_signerWallet",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "CreateCLH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beaconCLH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pxyApiCLH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pxyNFTManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pxyNFTMember",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pxyNFTInvitation",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pxyNFTAccessPass",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_CLLUserManagement",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_CLLGovernance",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_CLLConstructorCLH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ownerCLF",
          "type": "address"
        }
      ],
      "name": "Init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pxyApiCLH",
          "type": "address"
        }
      ],
      "name": "UpdateCLHAPI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_CLLConstructorCLH",
          "type": "address"
        }
      ],
      "name": "UpdateCLLConstructorCLH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_CLLGovernance",
          "type": "address"
        }
      ],
      "name": "UpdateCLLGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_CLLUserManagement",
          "type": "address"
        }
      ],
      "name": "UpdateCLLUserManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beaconCLH",
      "outputs": [
        {
          "internalType": "contract CLBeacon",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "checkAccessNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCLHImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mapCLH",
      "outputs": [
        {
          "internalType": "contract ICLHouse",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mapIdCLH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numCLH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownerCLF",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pxyApiCLH",
      "outputs": [
        {
          "internalType": "contract CLHouseApi",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pxyNFTAccessPass",
      "outputs": [
        {
          "internalType": "contract CLANFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pxyNFTInvitation",
      "outputs": [
        {
          "internalType": "contract CLHNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pxyNFTManager",
      "outputs": [
        {
          "internalType": "contract CLHNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pxyNFTMember",
      "outputs": [
        {
          "internalType": "contract CLHNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "10": "/home/trecetp/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.7.3/contracts/proxy/utils/Initializable.sol",
    "17": "contracts/APICLH/CLHouseApi.sol",
    "19": "contracts/CLCore/CLTypes.sol",
    "20": "contracts/CLFactory/CLFactory.sol",
    "25": "contracts/CLNFT/CLANFT.sol",
    "26": "contracts/CLNFT/CLHNFT.sol",
    "29": "contracts/CLProxy/CLBeacon.sol",
    "30": "contracts/CLProxy/CLPBeacon.sol",
    "32": "interfaces/ICLFactory.sol",
    "33": "interfaces/ICLHouse.sol"
  },
  "ast": {
    "absolutePath": "contracts/CLFactory/CLFactory.sol",
    "exportedSymbols": {
      "Address": [
        6606
      ],
      "BeaconProxy": [
        6123
      ],
      "CLANFT": [
        4111
      ],
      "CLBeacon": [
        4976
      ],
      "CLFactory": [
        1767
      ],
      "CLHNFT": [
        4375
      ],
      "CLHouseApi": [
        923
      ],
      "CLPBeacon": [
        4994
      ],
      "Context": [
        7281
      ],
      "ERC1967Upgrade": [
        7207
      ],
      "ERC721CL": [
        4955
      ],
      "ERC721Metadata": [
        4399
      ],
      "ERC721TokenReceiver": [
        4419
      ],
      "IBeacon": [
        6889
      ],
      "ICLFactory": [
        5149
      ],
      "ICLHouse": [
        5306
      ],
      "IERC1822Proxiable": [
        7328
      ],
      "Initializable": [
        5457
      ],
      "Ownable": [
        6731
      ],
      "Proxy": [
        7259
      ],
      "StorageSlot": [
        7388
      ],
      "UpgradeableBeacon": [
        6057
      ],
      "__CLHOUSE_VERSION__": [
        6128
      ],
      "__CONTRACT_NAME_HASH__": [
        6154
      ],
      "__CONTRACT_VERSION_HASH__": [
        6162
      ],
      "__GOV_COMMITTEE__": [
        6144
      ],
      "__GOV_DICTATORSHIP__": [
        6139
      ],
      "__GOV_SIMPLE_MAJORITY__": [
        6149
      ],
      "__STR_EIP712DOMAIN_HASH__": [
        6170
      ],
      "__STR_OCBULKVOTE_HASH__": [
        6194
      ],
      "__STR_OCDELUSER_HASH__": [
        6210
      ],
      "__STR_OCINVIT_HASH__": [
        6178
      ],
      "__STR_OCNEWCLH_HASH__": [
        6226
      ],
      "__STR_OCNEWLOCK_HASH__": [
        6234
      ],
      "__STR_OCNEWUSER_HASH__": [
        6202
      ],
      "__STR_OCREQUEST_HASH__": [
        6218
      ],
      "__STR_OCVOTE_HASH__": [
        6186
      ],
      "__UPGRADEABLE_CLANFT_VERSION__": [
        3870
      ],
      "__UPGRADEABLE_CLF_VERSION__": [
        6134
      ],
      "__UPGRADEABLE_CLHNFT_VERSION__": [
        4119
      ],
      "__UPGRADEABLE_CLH_VERSION__": [
        6131
      ],
      "eCLC": [
        6258
      ],
      "proposalEvent": [
        6245
      ],
      "proposalType": [
        6250
      ],
      "strDataGovRules": [
        6311
      ],
      "strDataTxAssets": [
        6308
      ],
      "strDataUser": [
        6299
      ],
      "strProposal": [
        6285
      ],
      "strUser": [
        6265
      ],
      "strVote": [
        6292
      ],
      "userEvent": [
        6241
      ]
    },
    "id": 1768,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1284,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".11"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:24:20"
      },
      {
        "absolutePath": "/home/trecetp/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.7.3/contracts/proxy/utils/Initializable.sol",
        "file": "@openzeppelin/contracts/proxy/utils/Initializable.sol",
        "id": 1285,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1768,
        "sourceUnit": 5458,
        "src": "58:63:20",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "interfaces/ICLHouse.sol",
        "file": "../../interfaces/ICLHouse.sol",
        "id": 1286,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1768,
        "sourceUnit": 5307,
        "src": "122:39:20",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "interfaces/ICLFactory.sol",
        "file": "../../interfaces/ICLFactory.sol",
        "id": 1287,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1768,
        "sourceUnit": 5150,
        "src": "162:41:20",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/CLProxy/CLBeacon.sol",
        "file": "../CLProxy/CLBeacon.sol",
        "id": 1288,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1768,
        "sourceUnit": 4977,
        "src": "204:33:20",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/CLProxy/CLPBeacon.sol",
        "file": "../CLProxy/CLPBeacon.sol",
        "id": 1289,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1768,
        "sourceUnit": 4995,
        "src": "238:34:20",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/APICLH/CLHouseApi.sol",
        "file": "../APICLH/CLHouseApi.sol",
        "id": 1290,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1768,
        "sourceUnit": 924,
        "src": "273:34:20",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/CLNFT/CLHNFT.sol",
        "file": "../CLNFT/CLHNFT.sol",
        "id": 1291,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1768,
        "sourceUnit": 4376,
        "src": "308:29:20",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/CLNFT/CLANFT.sol",
        "file": "../CLNFT/CLANFT.sol",
        "id": 1292,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1768,
        "sourceUnit": 4112,
        "src": "338:29:20",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 1294,
              "name": "ICLFactory",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 5149,
              "src": "555:10:20"
            },
            "id": 1295,
            "nodeType": "InheritanceSpecifier",
            "src": "555:10:20"
          },
          {
            "baseName": {
              "id": 1296,
              "name": "Initializable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 5457,
              "src": "567:13:20"
            },
            "id": 1297,
            "nodeType": "InheritanceSpecifier",
            "src": "567:13:20"
          }
        ],
        "canonicalName": "CLFactory",
        "contractDependencies": [
          4994
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 1293,
          "nodeType": "StructuredDocumentation",
          "src": "370:163:20",
          "text": "@title Crypto League House Factory\n @notice Create and config CLHouses\n @dev This contract is the standard way to create CLH\n @author Leonardo Urrego"
        },
        "fullyImplemented": true,
        "id": 1767,
        "linearizedBaseContracts": [
          1767,
          5457,
          5149
        ],
        "name": "CLFactory",
        "nameLocation": "542:9:20",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "baseFunctions": [
              5043
            ],
            "constant": false,
            "documentation": {
              "id": 1298,
              "nodeType": "StructuredDocumentation",
              "src": "587:46:20",
              "text": "@notice Store the number of houses created"
            },
            "functionSelector": "ee7a7d1b",
            "id": 1300,
            "mutability": "mutable",
            "name": "numCLH",
            "nameLocation": "653:6:20",
            "nodeType": "VariableDeclaration",
            "scope": 1767,
            "src": "638:21:20",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1299,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "638:7:20",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5069
            ],
            "constant": false,
            "documentation": {
              "id": 1301,
              "nodeType": "StructuredDocumentation",
              "src": "666:51:20",
              "text": "@notice Proxy Contract to CLH Constructor logic"
            },
            "functionSelector": "594034e3",
            "id": 1303,
            "mutability": "mutable",
            "name": "CLLConstructorCLH",
            "nameLocation": "737:17:20",
            "nodeType": "VariableDeclaration",
            "scope": 1767,
            "src": "722:32:20",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1302,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "722:7:20",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5074
            ],
            "constant": false,
            "documentation": {
              "id": 1304,
              "nodeType": "StructuredDocumentation",
              "src": "761:59:20",
              "text": "@notice Proxy Contract to functions for user management"
            },
            "functionSelector": "529382d5",
            "id": 1306,
            "mutability": "mutable",
            "name": "CLLUserManagement",
            "nameLocation": "840:17:20",
            "nodeType": "VariableDeclaration",
            "scope": 1767,
            "src": "825:32:20",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1305,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "825:7:20",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5079
            ],
            "constant": false,
            "documentation": {
              "id": 1307,
              "nodeType": "StructuredDocumentation",
              "src": "864:54:20",
              "text": "@notice Proxy Contract to functions for Governance"
            },
            "functionSelector": "a327ab69",
            "id": 1309,
            "mutability": "mutable",
            "name": "CLLGovernance",
            "nameLocation": "938:13:20",
            "nodeType": "VariableDeclaration",
            "scope": 1767,
            "src": "923:28:20",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1308,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "923:7:20",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "documentation": {
              "id": 1310,
              "nodeType": "StructuredDocumentation",
              "src": "958:49:20",
              "text": "@notice Wallet address owner of the CLFactory"
            },
            "functionSelector": "2a13de96",
            "id": 1312,
            "mutability": "mutable",
            "name": "ownerCLF",
            "nameLocation": "1027:8:20",
            "nodeType": "VariableDeclaration",
            "scope": 1767,
            "src": "1012:23:20",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1311,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1012:7:20",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5064
            ],
            "constant": false,
            "documentation": {
              "id": 1313,
              "nodeType": "StructuredDocumentation",
              "src": "1042:41:20",
              "text": "@notice Proxy Contract to CLHouse API"
            },
            "functionSelector": "12534615",
            "id": 1316,
            "mutability": "mutable",
            "name": "pxyApiCLH",
            "nameLocation": "1106:9:20",
            "nodeType": "VariableDeclaration",
            "scope": 1767,
            "src": "1088:27:20",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_CLHouseApi_$923",
              "typeString": "contract CLHouseApi"
            },
            "typeName": {
              "id": 1315,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 1314,
                "name": "CLHouseApi",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 923,
                "src": "1088:10:20"
              },
              "referencedDeclaration": 923,
              "src": "1088:10:20",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_CLHouseApi_$923",
                "typeString": "contract CLHouseApi"
              }
            },
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5085
            ],
            "constant": false,
            "documentation": {
              "id": 1317,
              "nodeType": "StructuredDocumentation",
              "src": "1122:114:20",
              "text": "@notice Contract Object of the beacon (store the add)\n @dev The beacon store the updated address of CLH"
            },
            "functionSelector": "c0828f63",
            "id": 1320,
            "mutability": "mutable",
            "name": "beaconCLH",
            "nameLocation": "1257:9:20",
            "nodeType": "VariableDeclaration",
            "scope": 1767,
            "src": "1241:25:20",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_CLBeacon_$4976",
              "typeString": "contract CLBeacon"
            },
            "typeName": {
              "id": 1319,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 1318,
                "name": "CLBeacon",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 4976,
                "src": "1241:8:20"
              },
              "referencedDeclaration": 4976,
              "src": "1241:8:20",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_CLBeacon_$4976",
                "typeString": "contract CLBeacon"
              }
            },
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5096
            ],
            "constant": false,
            "documentation": {
              "id": 1321,
              "nodeType": "StructuredDocumentation",
              "src": "1277:41:20",
              "text": "@notice Contract Proxy of NFT Manager"
            },
            "functionSelector": "6fc68f94",
            "id": 1324,
            "mutability": "mutable",
            "name": "pxyNFTManager",
            "nameLocation": "1337:13:20",
            "nodeType": "VariableDeclaration",
            "scope": 1767,
            "src": "1323:27:20",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_CLHNFT_$4375",
              "typeString": "contract CLHNFT"
            },
            "typeName": {
              "id": 1323,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 1322,
                "name": "CLHNFT",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 4375,
                "src": "1323:6:20"
              },
              "referencedDeclaration": 4375,
              "src": "1323:6:20",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_CLHNFT_$4375",
                "typeString": "contract CLHNFT"
              }
            },
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5102
            ],
            "constant": false,
            "documentation": {
              "id": 1325,
              "nodeType": "StructuredDocumentation",
              "src": "1357:40:20",
              "text": "@notice Contract Proxy of NFT Member"
            },
            "functionSelector": "c837f069",
            "id": 1328,
            "mutability": "mutable",
            "name": "pxyNFTMember",
            "nameLocation": "1416:12:20",
            "nodeType": "VariableDeclaration",
            "scope": 1767,
            "src": "1402:26:20",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_CLHNFT_$4375",
              "typeString": "contract CLHNFT"
            },
            "typeName": {
              "id": 1327,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 1326,
                "name": "CLHNFT",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 4375,
                "src": "1402:6:20"
              },
              "referencedDeclaration": 4375,
              "src": "1402:6:20",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_CLHNFT_$4375",
                "typeString": "contract CLHNFT"
              }
            },
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5108
            ],
            "constant": false,
            "documentation": {
              "id": 1329,
              "nodeType": "StructuredDocumentation",
              "src": "1435:44:20",
              "text": "@notice Contract Proxy of NFT Invitation"
            },
            "functionSelector": "5e4a9df8",
            "id": 1332,
            "mutability": "mutable",
            "name": "pxyNFTInvitation",
            "nameLocation": "1498:16:20",
            "nodeType": "VariableDeclaration",
            "scope": 1767,
            "src": "1484:30:20",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_CLHNFT_$4375",
              "typeString": "contract CLHNFT"
            },
            "typeName": {
              "id": 1331,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 1330,
                "name": "CLHNFT",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 4375,
                "src": "1484:6:20"
              },
              "referencedDeclaration": 4375,
              "src": "1484:6:20",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_CLHNFT_$4375",
                "typeString": "contract CLHNFT"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "documentation": {
              "id": 1333,
              "nodeType": "StructuredDocumentation",
              "src": "1521:44:20",
              "text": "@notice Contract Proxy of NFT AccessPass"
            },
            "functionSelector": "c1d4b9ae",
            "id": 1336,
            "mutability": "mutable",
            "name": "pxyNFTAccessPass",
            "nameLocation": "1584:16:20",
            "nodeType": "VariableDeclaration",
            "scope": 1767,
            "src": "1570:30:20",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_CLANFT_$4111",
              "typeString": "contract CLANFT"
            },
            "typeName": {
              "id": 1335,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 1334,
                "name": "CLANFT",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 4111,
                "src": "1570:6:20"
              },
              "referencedDeclaration": 4111,
              "src": "1570:6:20",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_CLANFT_$4111",
                "typeString": "contract CLANFT"
              }
            },
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5058
            ],
            "constant": false,
            "documentation": {
              "id": 1337,
              "nodeType": "StructuredDocumentation",
              "src": "1607:43:20",
              "text": "@notice Relation houseAddr with houseId"
            },
            "functionSelector": "86bdfcac",
            "id": 1341,
            "mutability": "mutable",
            "name": "mapIdCLH",
            "nameLocation": "1692:8:20",
            "nodeType": "VariableDeclaration",
            "scope": 1767,
            "src": "1655:45:20",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
              "typeString": "mapping(address => uint256)"
            },
            "typeName": {
              "id": 1340,
              "keyType": {
                "id": 1338,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1664:7:20",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1655:29:20",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                "typeString": "mapping(address => uint256)"
              },
              "valueType": {
                "id": 1339,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1675:7:20",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5051
            ],
            "constant": false,
            "documentation": {
              "id": 1342,
              "nodeType": "StructuredDocumentation",
              "src": "1711:51:20",
              "text": "@notice Mapping to store all the created houses"
            },
            "functionSelector": "624d8774",
            "id": 1347,
            "mutability": "mutable",
            "name": "mapCLH",
            "nameLocation": "1805:6:20",
            "nodeType": "VariableDeclaration",
            "scope": 1767,
            "src": "1767:44:20",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_contract$_ICLHouse_$5306_$",
              "typeString": "mapping(uint256 => contract ICLHouse)"
            },
            "typeName": {
              "id": 1346,
              "keyType": {
                "id": 1343,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1776:7:20",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "1767:30:20",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_contract$_ICLHouse_$5306_$",
                "typeString": "mapping(uint256 => contract ICLHouse)"
              },
              "valueType": {
                "id": 1345,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 1344,
                  "name": "ICLHouse",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 5306,
                  "src": "1787:8:20"
                },
                "referencedDeclaration": 5306,
                "src": "1787:8:20",
                "typeDescriptions": {
                  "typeIdentifier": "t_contract$_ICLHouse_$5306",
                  "typeString": "contract ICLHouse"
                }
              }
            },
            "visibility": "public"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 1348,
              "nodeType": "StructuredDocumentation",
              "src": "1819:198:20",
              "text": "@notice Event when house is created\n @param houseAddr Address of the created house\n @param houseName Name of the created house\n @param houseId Id of CLH of the created house"
            },
            "id": 1356,
            "name": "evtNewCLH",
            "nameLocation": "2028:9:20",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1355,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1350,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "houseAddr",
                  "nameLocation": "2047:9:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1356,
                  "src": "2039:17:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1349,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2039:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1352,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "houseName",
                  "nameLocation": "2065:9:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1356,
                  "src": "2058:16:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1351,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2058:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1354,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "houseId",
                  "nameLocation": "2084:7:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1356,
                  "src": "2076:15:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1353,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2076:7:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2037:56:20"
            },
            "src": "2022:72:20"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 1357,
              "nodeType": "StructuredDocumentation",
              "src": "2100:209:20",
              "text": "@notice Event when a CL Contract address is updated\n @param CLCName Name of contract var\n @param oldAddress Old Address value of the var\n @param newAddress New Address value of the var"
            },
            "id": 1365,
            "name": "evtUpdateCLC",
            "nameLocation": "2320:12:20",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1364,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1359,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "CLCName",
                  "nameLocation": "2341:7:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1365,
                  "src": "2334:14:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1358,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2334:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1361,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "oldAddress",
                  "nameLocation": "2358:10:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1365,
                  "src": "2350:18:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1360,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2350:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1363,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "newAddress",
                  "nameLocation": "2378:10:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1365,
                  "src": "2370:18:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1362,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2370:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2332:58:20"
            },
            "src": "2314:77:20"
          },
          {
            "body": {
              "id": 1376,
              "nodeType": "Block",
              "src": "2418:82:20",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 1371,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 1368,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "2437:3:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 1369,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "2437:10:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 1370,
                          "name": "ownerCLF",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1312,
                          "src": "2451:8:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "2437:22:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f6e6c79204f776e6572206f6620434c46",
                        "id": 1372,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2461:19:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_9cab9c3fc8448618eb4bc0794ceddd891ee2d538224ac2d311d80c37c4299e09",
                          "typeString": "literal_string \"Only Owner of CLF\""
                        },
                        "value": "Only Owner of CLF"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_9cab9c3fc8448618eb4bc0794ceddd891ee2d538224ac2d311d80c37c4299e09",
                          "typeString": "literal_string \"Only Owner of CLF\""
                        }
                      ],
                      "id": 1367,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2428:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1373,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2428:54:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1374,
                  "nodeType": "ExpressionStatement",
                  "src": "2428:54:20"
                },
                {
                  "id": 1375,
                  "nodeType": "PlaceholderStatement",
                  "src": "2492:1:20"
                }
              ]
            },
            "id": 1377,
            "name": "onlyOwner",
            "nameLocation": "2406:9:20",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 1366,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2415:2:20"
            },
            "src": "2397:103:20",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1392,
              "nodeType": "Block",
              "src": "2556:96:20",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1388,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "hexValue": "30",
                          "id": 1383,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2575:1:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "id": 1386,
                              "name": "_wallet",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1379,
                              "src": "2608:7:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "id": 1384,
                              "name": "pxyNFTAccessPass",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1336,
                              "src": "2580:16:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_CLANFT_$4111",
                                "typeString": "contract CLANFT"
                              }
                            },
                            "id": 1385,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "balanceOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 4525,
                            "src": "2580:26:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view external returns (uint256)"
                            }
                          },
                          "id": 1387,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2580:37:20",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2575:42:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "446f6e2774206861766520416363657373204e4654",
                        "id": 1389,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2620:23:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_a94a811640f2b422162c7335ba133e008b5586f22eba2a56bc489a27327debe8",
                          "typeString": "literal_string \"Don't have Access NFT\""
                        },
                        "value": "Don't have Access NFT"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_a94a811640f2b422162c7335ba133e008b5586f22eba2a56bc489a27327debe8",
                          "typeString": "literal_string \"Don't have Access NFT\""
                        }
                      ],
                      "id": 1382,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2566:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1390,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2566:79:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1391,
                  "nodeType": "ExpressionStatement",
                  "src": "2566:79:20"
                }
              ]
            },
            "functionSelector": "a34b8447",
            "id": 1393,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "checkAccessNFT",
            "nameLocation": "2515:14:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1380,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1379,
                  "mutability": "mutable",
                  "name": "_wallet",
                  "nameLocation": "2539:7:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1393,
                  "src": "2531:15:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1378,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2531:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2529:19:20"
            },
            "returnParameters": {
              "id": 1381,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2556:0:20"
            },
            "scope": 1767,
            "src": "2506:146:20",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1400,
              "nodeType": "Block",
              "src": "2725:39:20",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 1397,
                      "name": "_disableInitializers",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5456,
                      "src": "2735:20:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 1398,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2735:22:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1399,
                  "nodeType": "ExpressionStatement",
                  "src": "2735:22:20"
                }
              ]
            },
            "documentation": {
              "id": 1394,
              "nodeType": "StructuredDocumentation",
              "src": "2658:48:20",
              "text": "@custom:oz-upgrades-unsafe-allow constructor"
            },
            "id": 1401,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1395,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2722:2:20"
            },
            "returnParameters": {
              "id": 1396,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2725:0:20"
            },
            "scope": 1767,
            "src": "2711:53:20",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5131
            ],
            "body": {
              "id": 1504,
              "nodeType": "Block",
              "src": "3857:606:20",
              "statements": [
                {
                  "expression": {
                    "id": 1432,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1428,
                      "name": "beaconCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1320,
                      "src": "3867:9:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_CLBeacon_$4976",
                        "typeString": "contract CLBeacon"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 1430,
                          "name": "_beaconCLH",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1404,
                          "src": "3889:10:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 1429,
                        "name": "CLBeacon",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4976,
                        "src": "3879:8:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_CLBeacon_$4976_$",
                          "typeString": "type(contract CLBeacon)"
                        }
                      },
                      "id": 1431,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3879:22:20",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_CLBeacon_$4976",
                        "typeString": "contract CLBeacon"
                      }
                    },
                    "src": "3867:34:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_CLBeacon_$4976",
                      "typeString": "contract CLBeacon"
                    }
                  },
                  "id": 1433,
                  "nodeType": "ExpressionStatement",
                  "src": "3867:34:20"
                },
                {
                  "expression": {
                    "id": 1438,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1434,
                      "name": "pxyApiCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1316,
                      "src": "3920:9:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_CLHouseApi_$923",
                        "typeString": "contract CLHouseApi"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 1436,
                          "name": "_pxyApiCLH",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1406,
                          "src": "3944:10:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 1435,
                        "name": "CLHouseApi",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 923,
                        "src": "3932:10:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_CLHouseApi_$923_$",
                          "typeString": "type(contract CLHouseApi)"
                        }
                      },
                      "id": 1437,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3932:24:20",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_CLHouseApi_$923",
                        "typeString": "contract CLHouseApi"
                      }
                    },
                    "src": "3920:36:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_CLHouseApi_$923",
                      "typeString": "contract CLHouseApi"
                    }
                  },
                  "id": 1439,
                  "nodeType": "ExpressionStatement",
                  "src": "3920:36:20"
                },
                {
                  "expression": {
                    "id": 1442,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1440,
                      "name": "CLLUserManagement",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1306,
                      "src": "3967:17:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1441,
                      "name": "_CLLUserManagement",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1416,
                      "src": "3987:18:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "3967:38:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1443,
                  "nodeType": "ExpressionStatement",
                  "src": "3967:38:20"
                },
                {
                  "expression": {
                    "id": 1446,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1444,
                      "name": "CLLGovernance",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1309,
                      "src": "4015:13:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1445,
                      "name": "_CLLGovernance",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1418,
                      "src": "4031:14:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4015:30:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1447,
                  "nodeType": "ExpressionStatement",
                  "src": "4015:30:20"
                },
                {
                  "expression": {
                    "id": 1450,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1448,
                      "name": "CLLConstructorCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1303,
                      "src": "4055:17:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1449,
                      "name": "_CLLConstructorCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1420,
                      "src": "4075:18:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4055:38:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1451,
                  "nodeType": "ExpressionStatement",
                  "src": "4055:38:20"
                },
                {
                  "expression": {
                    "id": 1456,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1452,
                      "name": "pxyNFTManager",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1324,
                      "src": "4104:13:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_CLHNFT_$4375",
                        "typeString": "contract CLHNFT"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 1454,
                          "name": "_pxyNFTManager",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1408,
                          "src": "4128:14:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 1453,
                        "name": "CLHNFT",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4375,
                        "src": "4120:6:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_CLHNFT_$4375_$",
                          "typeString": "type(contract CLHNFT)"
                        }
                      },
                      "id": 1455,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4120:24:20",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_CLHNFT_$4375",
                        "typeString": "contract CLHNFT"
                      }
                    },
                    "src": "4104:40:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_CLHNFT_$4375",
                      "typeString": "contract CLHNFT"
                    }
                  },
                  "id": 1457,
                  "nodeType": "ExpressionStatement",
                  "src": "4104:40:20"
                },
                {
                  "expression": {
                    "id": 1462,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1458,
                      "name": "pxyNFTMember",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1328,
                      "src": "4154:12:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_CLHNFT_$4375",
                        "typeString": "contract CLHNFT"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 1460,
                          "name": "_pxyNFTMember",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1410,
                          "src": "4177:13:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 1459,
                        "name": "CLHNFT",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4375,
                        "src": "4169:6:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_CLHNFT_$4375_$",
                          "typeString": "type(contract CLHNFT)"
                        }
                      },
                      "id": 1461,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4169:23:20",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_CLHNFT_$4375",
                        "typeString": "contract CLHNFT"
                      }
                    },
                    "src": "4154:38:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_CLHNFT_$4375",
                      "typeString": "contract CLHNFT"
                    }
                  },
                  "id": 1463,
                  "nodeType": "ExpressionStatement",
                  "src": "4154:38:20"
                },
                {
                  "expression": {
                    "id": 1468,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1464,
                      "name": "pxyNFTInvitation",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1332,
                      "src": "4202:16:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_CLHNFT_$4375",
                        "typeString": "contract CLHNFT"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 1466,
                          "name": "_pxyNFTInvitation",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1412,
                          "src": "4229:17:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 1465,
                        "name": "CLHNFT",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4375,
                        "src": "4221:6:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_CLHNFT_$4375_$",
                          "typeString": "type(contract CLHNFT)"
                        }
                      },
                      "id": 1467,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4221:27:20",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_CLHNFT_$4375",
                        "typeString": "contract CLHNFT"
                      }
                    },
                    "src": "4202:46:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_CLHNFT_$4375",
                      "typeString": "contract CLHNFT"
                    }
                  },
                  "id": 1469,
                  "nodeType": "ExpressionStatement",
                  "src": "4202:46:20"
                },
                {
                  "expression": {
                    "id": 1474,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1470,
                      "name": "pxyNFTAccessPass",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1336,
                      "src": "4258:16:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_CLANFT_$4111",
                        "typeString": "contract CLANFT"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 1472,
                          "name": "_pxyNFTAccessPass",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1414,
                          "src": "4285:17:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 1471,
                        "name": "CLANFT",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4111,
                        "src": "4277:6:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_CLANFT_$4111_$",
                          "typeString": "type(contract CLANFT)"
                        }
                      },
                      "id": 1473,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4277:27:20",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_CLANFT_$4111",
                        "typeString": "contract CLANFT"
                      }
                    },
                    "src": "4258:46:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_CLANFT_$4111",
                      "typeString": "contract CLANFT"
                    }
                  },
                  "id": 1475,
                  "nodeType": "ExpressionStatement",
                  "src": "4258:46:20"
                },
                {
                  "expression": {
                    "id": 1478,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1476,
                      "name": "numCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1300,
                      "src": "4323:6:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "30",
                      "id": 1477,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4332:1:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "4323:10:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1479,
                  "nodeType": "ExpressionStatement",
                  "src": "4323:10:20"
                },
                {
                  "expression": {
                    "id": 1489,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 1480,
                        "name": "mapCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1347,
                        "src": "4343:6:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_contract$_ICLHouse_$5306_$",
                          "typeString": "mapping(uint256 => contract ICLHouse)"
                        }
                      },
                      "id": 1482,
                      "indexExpression": {
                        "id": 1481,
                        "name": "numCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1300,
                        "src": "4351:6:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "4343:16:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ICLHouse_$5306",
                        "typeString": "contract ICLHouse"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 1486,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4380:1:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 1485,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "4372:7:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 1484,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "4372:7:20",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 1487,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4372:10:20",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 1483,
                        "name": "ICLHouse",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5306,
                        "src": "4362:8:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_ICLHouse_$5306_$",
                          "typeString": "type(contract ICLHouse)"
                        }
                      },
                      "id": 1488,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4362:22:20",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ICLHouse_$5306",
                        "typeString": "contract ICLHouse"
                      }
                    },
                    "src": "4343:41:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ICLHouse_$5306",
                      "typeString": "contract ICLHouse"
                    }
                  },
                  "id": 1490,
                  "nodeType": "ExpressionStatement",
                  "src": "4343:41:20"
                },
                {
                  "expression": {
                    "id": 1498,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 1491,
                        "name": "mapIdCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1341,
                        "src": "4394:8:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 1496,
                      "indexExpression": {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 1494,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4412:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 1493,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "4404:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 1492,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "4404:7:20",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 1495,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4404:10:20",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "4394:22:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1497,
                      "name": "numCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1300,
                      "src": "4419:6:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4394:31:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1499,
                  "nodeType": "ExpressionStatement",
                  "src": "4394:31:20"
                },
                {
                  "expression": {
                    "id": 1502,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1500,
                      "name": "ownerCLF",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1312,
                      "src": "4436:8:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1501,
                      "name": "_ownerCLF",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1422,
                      "src": "4447:9:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4436:20:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1503,
                  "nodeType": "ExpressionStatement",
                  "src": "4436:20:20"
                }
              ]
            },
            "documentation": {
              "id": 1402,
              "nodeType": "StructuredDocumentation",
              "src": "2770:670:20",
              "text": "@notice Config the CLFactory with the CL Logic Contracts\n @param _beaconCLH Address Beacon CLH Contract\n @param _pxyApiCLH Address of pxyApiCLH Contract\n @param _pxyNFTManager Address of proxy Contract for NFT Manager\n @param _pxyNFTMember Address of proxy Contract for NFT Member\n @param _pxyNFTInvitation Address of proxy Contract for NFT Invitation\n @param _CLLUserManagement Address Contract Logic for user management\n @param _CLLGovernance Address Contract Logic for governance\n @param _CLLConstructorCLH Address Contract with the Constructor logic\n @param _ownerCLF Address Owner for this Contract"
            },
            "functionSelector": "4c98122b",
            "id": 1505,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 1425,
                    "name": "__UPGRADEABLE_CLF_VERSION__",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 6134,
                    "src": "3823:27:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  }
                ],
                "id": 1426,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 1424,
                  "name": "reinitializer",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 5410,
                  "src": "3808:13:20"
                },
                "nodeType": "ModifierInvocation",
                "src": "3808:44:20"
              }
            ],
            "name": "Init",
            "nameLocation": "3454:4:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1423,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1404,
                  "mutability": "mutable",
                  "name": "_beaconCLH",
                  "nameLocation": "3476:10:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1505,
                  "src": "3468:18:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1403,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3468:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1406,
                  "mutability": "mutable",
                  "name": "_pxyApiCLH",
                  "nameLocation": "3504:10:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1505,
                  "src": "3496:18:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1405,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3496:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1408,
                  "mutability": "mutable",
                  "name": "_pxyNFTManager",
                  "nameLocation": "3532:14:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1505,
                  "src": "3524:22:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1407,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3524:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1410,
                  "mutability": "mutable",
                  "name": "_pxyNFTMember",
                  "nameLocation": "3564:13:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1505,
                  "src": "3556:21:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1409,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3556:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1412,
                  "mutability": "mutable",
                  "name": "_pxyNFTInvitation",
                  "nameLocation": "3595:17:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1505,
                  "src": "3587:25:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1411,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3587:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1414,
                  "mutability": "mutable",
                  "name": "_pxyNFTAccessPass",
                  "nameLocation": "3630:17:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1505,
                  "src": "3622:25:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1413,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3622:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1416,
                  "mutability": "mutable",
                  "name": "_CLLUserManagement",
                  "nameLocation": "3665:18:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1505,
                  "src": "3657:26:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1415,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3657:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1418,
                  "mutability": "mutable",
                  "name": "_CLLGovernance",
                  "nameLocation": "3701:14:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1505,
                  "src": "3693:22:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1417,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3693:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1420,
                  "mutability": "mutable",
                  "name": "_CLLConstructorCLH",
                  "nameLocation": "3733:18:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1505,
                  "src": "3725:26:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1419,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3725:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1422,
                  "mutability": "mutable",
                  "name": "_ownerCLF",
                  "nameLocation": "3769:9:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1505,
                  "src": "3761:17:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1421,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3761:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3458:326:20"
            },
            "returnParameters": {
              "id": 1427,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3857:0:20"
            },
            "scope": 1767,
            "src": "3445:1018:20",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5148
            ],
            "body": {
              "id": 1657,
              "nodeType": "Block",
              "src": "5227:1623:20",
              "statements": [
                {
                  "assignments": [
                    1524
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1524,
                      "mutability": "mutable",
                      "name": "houseOwner",
                      "nameLocation": "5245:10:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 1657,
                      "src": "5237:18:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1523,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5237:7:20",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1527,
                  "initialValue": {
                    "expression": {
                      "id": 1525,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -15,
                      "src": "5258:3:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 1526,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "src": "5258:10:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5237:31:20"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 1533,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 1528,
                      "name": "_signerWallet",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1518,
                      "src": "5283:13:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "arguments": [
                        {
                          "hexValue": "30",
                          "id": 1531,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "5308:1:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 1530,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "5300:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 1529,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5300:7:20",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 1532,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5300:10:20",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "5283:27:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1566,
                  "nodeType": "IfStatement",
                  "src": "5279:581:20",
                  "trueBody": {
                    "id": 1565,
                    "nodeType": "Block",
                    "src": "5313:547:20",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1538,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 1535,
                                  "name": "_signature",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1520,
                                  "src": "5336:10:20",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                "id": 1536,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "src": "5336:17:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "hexValue": "3635",
                                "id": 1537,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "5357:2:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_65_by_1",
                                  "typeString": "int_const 65"
                                },
                                "value": "65"
                              },
                              "src": "5336:23:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "437265617465434c483a20426164207369676e6174757265206c656e677468",
                              "id": 1539,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5361:33:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_66546f6712041f6d05b5202f53cc0449a241460309628ff6f24130bbd6047f30",
                                "typeString": "literal_string \"CreateCLH: Bad signature length\""
                              },
                              "value": "CreateCLH: Bad signature length"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_66546f6712041f6d05b5202f53cc0449a241460309628ff6f24130bbd6047f30",
                                "typeString": "literal_string \"CreateCLH: Bad signature length\""
                              }
                            ],
                            "id": 1534,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "5327:7:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1540,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5327:69:20",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1541,
                        "nodeType": "ExpressionStatement",
                        "src": "5327:69:20"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 1557,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1543,
                                "name": "_signerWallet",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1518,
                                "src": "5448:13:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "id": 1546,
                                    "name": "_houseName",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1508,
                                    "src": "5511:10:20",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  },
                                  {
                                    "id": 1547,
                                    "name": "_housePrivate",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1510,
                                    "src": "5543:13:20",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "id": 1548,
                                    "name": "_houseOpen",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1512,
                                    "src": "5578:10:20",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "id": 1549,
                                    "name": "_govRuleMaxUsers",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1514,
                                    "src": "5610:16:20",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "id": 1550,
                                    "name": "_whiteListNFT",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1516,
                                    "src": "5648:13:20",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "id": 1553,
                                        "name": "this",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -28,
                                        "src": "5691:4:20",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_contract$_CLFactory_$1767",
                                          "typeString": "contract CLFactory"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_contract$_CLFactory_$1767",
                                          "typeString": "contract CLFactory"
                                        }
                                      ],
                                      "id": 1552,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "5683:7:20",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 1551,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "5683:7:20",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 1554,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "5683:13:20",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 1555,
                                    "name": "_signature",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1520,
                                    "src": "5718:10:20",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    },
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  ],
                                  "expression": {
                                    "id": 1544,
                                    "name": "pxyApiCLH",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1316,
                                    "src": "5465:9:20",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_CLHouseApi_$923",
                                      "typeString": "contract CLHouseApi"
                                    }
                                  },
                                  "id": 1545,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "SignerOCNewCLH",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 855,
                                  "src": "5465:24:20",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_view$_t_string_memory_ptr_$_t_bool_$_t_bool_$_t_uint256_$_t_address_$_t_address_$_t_bytes_memory_ptr_$returns$_t_address_$",
                                    "typeString": "function (string memory,bool,bool,uint256,address,address,bytes memory) view external returns (address)"
                                  }
                                },
                                "id": 1556,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5465:281:20",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "5448:298:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "437265617465434c483a20496e76616c6964205369676e6174757265",
                              "id": 1558,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5764:30:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_099f17192883e41fedd772ee8fa6333842f0019e00f69fd93b115b83fd0b3f05",
                                "typeString": "literal_string \"CreateCLH: Invalid Signature\""
                              },
                              "value": "CreateCLH: Invalid Signature"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_099f17192883e41fedd772ee8fa6333842f0019e00f69fd93b115b83fd0b3f05",
                                "typeString": "literal_string \"CreateCLH: Invalid Signature\""
                              }
                            ],
                            "id": 1542,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "5423:7:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1559,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5423:385:20",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1560,
                        "nodeType": "ExpressionStatement",
                        "src": "5423:385:20"
                      },
                      {
                        "expression": {
                          "id": 1563,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1561,
                            "name": "houseOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1524,
                            "src": "5823:10:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1562,
                            "name": "_signerWallet",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1518,
                            "src": "5836:13:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "5823:26:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 1564,
                        "nodeType": "ExpressionStatement",
                        "src": "5823:26:20"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1568,
                        "name": "houseOwner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1524,
                        "src": "5886:10:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 1567,
                      "name": "checkAccessNFT",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1393,
                      "src": "5870:14:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 1569,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5870:28:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1570,
                  "nodeType": "ExpressionStatement",
                  "src": "5870:28:20"
                },
                {
                  "assignments": [
                    1573
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1573,
                      "mutability": "mutable",
                      "name": "pxyCLH",
                      "nameLocation": "5919:6:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 1657,
                      "src": "5909:16:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_CLPBeacon_$4994",
                        "typeString": "contract CLPBeacon"
                      },
                      "typeName": {
                        "id": 1572,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1571,
                          "name": "CLPBeacon",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 4994,
                          "src": "5909:9:20"
                        },
                        "referencedDeclaration": 4994,
                        "src": "5909:9:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_CLPBeacon_$4994",
                          "typeString": "contract CLPBeacon"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1614,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 1579,
                            "name": "beaconCLH",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1320,
                            "src": "5964:9:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_CLBeacon_$4976",
                              "typeString": "contract CLBeacon"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_CLBeacon_$4976",
                              "typeString": "contract CLBeacon"
                            }
                          ],
                          "id": 1578,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "5955:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 1577,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "5955:7:20",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 1580,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5955:20:20",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "hexValue": "496e697428616464726573732c737472696e672c626f6f6c2c626f6f6c2c75696e743235362c616464726573735b375d29",
                            "id": 1583,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6030:51:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_5b4587e1579ae1ef6e2d664e987da267e26898c081bab4b5665cc4a54b864435",
                              "typeString": "literal_string \"Init(address,string,bool,bool,uint256,address[7])\""
                            },
                            "value": "Init(address,string,bool,bool,uint256,address[7])"
                          },
                          {
                            "id": 1584,
                            "name": "houseOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1524,
                            "src": "6099:10:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 1585,
                            "name": "_houseName",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1508,
                            "src": "6128:10:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          {
                            "id": 1586,
                            "name": "_housePrivate",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1510,
                            "src": "6156:13:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "id": 1587,
                            "name": "_houseOpen",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1512,
                            "src": "6187:10:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "id": 1588,
                            "name": "_govRuleMaxUsers",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1514,
                            "src": "6215:16:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "components": [
                              {
                                "id": 1589,
                                "name": "CLLConstructorCLH",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1303,
                                "src": "6272:17:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "arguments": [
                                  {
                                    "id": 1592,
                                    "name": "this",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -28,
                                    "src": "6320:4:20",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_CLFactory_$1767",
                                      "typeString": "contract CLFactory"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_CLFactory_$1767",
                                      "typeString": "contract CLFactory"
                                    }
                                  ],
                                  "id": 1591,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "6311:7:20",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 1590,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "6311:7:20",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 1593,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "6311:15:20",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "arguments": [
                                  {
                                    "id": 1596,
                                    "name": "pxyApiCLH",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1316,
                                    "src": "6357:9:20",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_CLHouseApi_$923",
                                      "typeString": "contract CLHouseApi"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_CLHouseApi_$923",
                                      "typeString": "contract CLHouseApi"
                                    }
                                  ],
                                  "id": 1595,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "6348:7:20",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 1594,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "6348:7:20",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 1597,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "6348:20:20",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "arguments": [
                                  {
                                    "id": 1600,
                                    "name": "pxyNFTManager",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1324,
                                    "src": "6399:13:20",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_CLHNFT_$4375",
                                      "typeString": "contract CLHNFT"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_CLHNFT_$4375",
                                      "typeString": "contract CLHNFT"
                                    }
                                  ],
                                  "id": 1599,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "6390:7:20",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 1598,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "6390:7:20",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 1601,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "6390:24:20",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "arguments": [
                                  {
                                    "id": 1604,
                                    "name": "pxyNFTMember",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1328,
                                    "src": "6445:12:20",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_CLHNFT_$4375",
                                      "typeString": "contract CLHNFT"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_CLHNFT_$4375",
                                      "typeString": "contract CLHNFT"
                                    }
                                  ],
                                  "id": 1603,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "6436:7:20",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 1602,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "6436:7:20",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 1605,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "6436:23:20",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "arguments": [
                                  {
                                    "id": 1608,
                                    "name": "pxyNFTInvitation",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1332,
                                    "src": "6490:16:20",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_CLHNFT_$4375",
                                      "typeString": "contract CLHNFT"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_CLHNFT_$4375",
                                      "typeString": "contract CLHNFT"
                                    }
                                  ],
                                  "id": 1607,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "6481:7:20",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 1606,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "6481:7:20",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 1609,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "6481:27:20",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 1610,
                                "name": "_whiteListNFT",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1516,
                                "src": "6530:13:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "id": 1611,
                            "isConstant": false,
                            "isInlineArray": true,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "6249:312:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$7_memory_ptr",
                              "typeString": "address[7] memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_5b4587e1579ae1ef6e2d664e987da267e26898c081bab4b5665cc4a54b864435",
                              "typeString": "literal_string \"Init(address,string,bool,bool,uint256,address[7])\""
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            },
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_array$_t_address_$7_memory_ptr",
                              "typeString": "address[7] memory"
                            }
                          ],
                          "expression": {
                            "id": 1581,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "5989:3:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 1582,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodeWithSignature",
                          "nodeType": "MemberAccess",
                          "src": "5989:23:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (string memory) pure returns (bytes memory)"
                          }
                        },
                        "id": 1612,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5989:586:20",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 1576,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "NewExpression",
                      "src": "5928:13:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_creation_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_contract$_CLPBeacon_$4994_$",
                        "typeString": "function (address,bytes memory) returns (contract CLPBeacon)"
                      },
                      "typeName": {
                        "id": 1575,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1574,
                          "name": "CLPBeacon",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 4994,
                          "src": "5932:9:20"
                        },
                        "referencedDeclaration": 4994,
                        "src": "5932:9:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_CLPBeacon_$4994",
                          "typeString": "contract CLPBeacon"
                        }
                      }
                    },
                    "id": 1613,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5928:657:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_CLPBeacon_$4994",
                      "typeString": "contract CLPBeacon"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5909:676:20"
                },
                {
                  "expression": {
                    "id": 1616,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "++",
                    "prefix": false,
                    "src": "6596:8:20",
                    "subExpression": {
                      "id": 1615,
                      "name": "numCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1300,
                      "src": "6596:6:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1617,
                  "nodeType": "ExpressionStatement",
                  "src": "6596:8:20"
                },
                {
                  "expression": {
                    "id": 1627,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 1618,
                        "name": "mapCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1347,
                        "src": "6614:6:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_contract$_ICLHouse_$5306_$",
                          "typeString": "mapping(uint256 => contract ICLHouse)"
                        }
                      },
                      "id": 1620,
                      "indexExpression": {
                        "id": 1619,
                        "name": "numCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1300,
                        "src": "6622:6:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "6614:16:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ICLHouse_$5306",
                        "typeString": "contract ICLHouse"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "id": 1624,
                              "name": "pxyCLH",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1573,
                              "src": "6652:6:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_CLPBeacon_$4994",
                                "typeString": "contract CLPBeacon"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_CLPBeacon_$4994",
                                "typeString": "contract CLPBeacon"
                              }
                            ],
                            "id": 1623,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "6643:7:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 1622,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "6643:7:20",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 1625,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6643:17:20",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 1621,
                        "name": "ICLHouse",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5306,
                        "src": "6633:8:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_ICLHouse_$5306_$",
                          "typeString": "type(contract ICLHouse)"
                        }
                      },
                      "id": 1626,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "6633:29:20",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ICLHouse_$5306",
                        "typeString": "contract ICLHouse"
                      }
                    },
                    "src": "6614:48:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ICLHouse_$5306",
                      "typeString": "contract ICLHouse"
                    }
                  },
                  "id": 1628,
                  "nodeType": "ExpressionStatement",
                  "src": "6614:48:20"
                },
                {
                  "expression": {
                    "id": 1636,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 1629,
                        "name": "mapIdCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1341,
                        "src": "6672:8:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 1634,
                      "indexExpression": {
                        "arguments": [
                          {
                            "id": 1632,
                            "name": "pxyCLH",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1573,
                            "src": "6691:6:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_CLPBeacon_$4994",
                              "typeString": "contract CLPBeacon"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_CLPBeacon_$4994",
                              "typeString": "contract CLPBeacon"
                            }
                          ],
                          "id": 1631,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "6682:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 1630,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "6682:7:20",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 1633,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6682:17:20",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "6672:29:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1635,
                      "name": "numCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1300,
                      "src": "6704:6:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "6672:38:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1637,
                  "nodeType": "ExpressionStatement",
                  "src": "6672:38:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 1643,
                            "name": "pxyCLH",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1573,
                            "src": "6755:6:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_CLPBeacon_$4994",
                              "typeString": "contract CLPBeacon"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_CLPBeacon_$4994",
                              "typeString": "contract CLPBeacon"
                            }
                          ],
                          "id": 1642,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "6746:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 1641,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "6746:7:20",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 1644,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6746:17:20",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1645,
                        "name": "houseOwner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1524,
                        "src": "6765:10:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 1638,
                        "name": "pxyNFTManager",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1324,
                        "src": "6721:13:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_CLHNFT_$4375",
                          "typeString": "contract CLHNFT"
                        }
                      },
                      "id": 1640,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "forceMint",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4264,
                      "src": "6721:23:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (address,address) external"
                      }
                    },
                    "id": 1646,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6721:56:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1647,
                  "nodeType": "ExpressionStatement",
                  "src": "6721:56:20"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 1651,
                            "name": "pxyCLH",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1573,
                            "src": "6813:6:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_CLPBeacon_$4994",
                              "typeString": "contract CLPBeacon"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_CLPBeacon_$4994",
                              "typeString": "contract CLPBeacon"
                            }
                          ],
                          "id": 1650,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "6804:7:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 1649,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "6804:7:20",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 1652,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6804:17:20",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1653,
                        "name": "_houseName",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1508,
                        "src": "6823:10:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      {
                        "id": 1654,
                        "name": "numCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1300,
                        "src": "6835:6:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1648,
                      "name": "evtNewCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1356,
                      "src": "6793:9:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_string_memory_ptr_$_t_uint256_$returns$__$",
                        "typeString": "function (address,string memory,uint256)"
                      }
                    },
                    "id": 1655,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6793:50:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1656,
                  "nodeType": "EmitStatement",
                  "src": "6788:55:20"
                }
              ]
            },
            "documentation": {
              "id": 1506,
              "nodeType": "StructuredDocumentation",
              "src": "4470:491:20",
              "text": "@notice Create a new CLHouse proxy Contract\n @param _houseName Name of the CLH\n @param _housePrivate If is set to 1, the CLH is set to private\n @param _houseOpen If is set to 1, the CLH is set to open\n @param _govRuleMaxUsers Max users in the house\n @param _whiteListNFT Address of NFT Collection for users invitation\n @param _signerWallet Wallet address of the signer for OffChain Tx\n @param _signature Signature for validate OffChain Tx"
            },
            "functionSelector": "7b2da764",
            "id": 1658,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "CreateCLH",
            "nameLocation": "4975:9:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1521,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1508,
                  "mutability": "mutable",
                  "name": "_houseName",
                  "nameLocation": "5008:10:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1658,
                  "src": "4994:24:20",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1507,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "4994:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1510,
                  "mutability": "mutable",
                  "name": "_housePrivate",
                  "nameLocation": "5033:13:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1658,
                  "src": "5028:18:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1509,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5028:4:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1512,
                  "mutability": "mutable",
                  "name": "_houseOpen",
                  "nameLocation": "5061:10:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1658,
                  "src": "5056:15:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1511,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5056:4:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1514,
                  "mutability": "mutable",
                  "name": "_govRuleMaxUsers",
                  "nameLocation": "5089:16:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1658,
                  "src": "5081:24:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1513,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5081:7:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1516,
                  "mutability": "mutable",
                  "name": "_whiteListNFT",
                  "nameLocation": "5123:13:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1658,
                  "src": "5115:21:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1515,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5115:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1518,
                  "mutability": "mutable",
                  "name": "_signerWallet",
                  "nameLocation": "5154:13:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1658,
                  "src": "5146:21:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1517,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5146:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1520,
                  "mutability": "mutable",
                  "name": "_signature",
                  "nameLocation": "5190:10:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1658,
                  "src": "5177:23:20",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1519,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "5177:5:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4984:222:20"
            },
            "returnParameters": {
              "id": 1522,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5227:0:20"
            },
            "scope": 1767,
            "src": "4966:1884:20",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5090
            ],
            "body": {
              "id": 1668,
              "nodeType": "Block",
              "src": "6979:50:20",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 1664,
                        "name": "beaconCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1320,
                        "src": "6996:9:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_CLBeacon_$4976",
                          "typeString": "contract CLBeacon"
                        }
                      },
                      "id": 1665,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "implementation",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 6020,
                      "src": "6996:24:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
                        "typeString": "function () view external returns (address)"
                      }
                    },
                    "id": 1666,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6996:26:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 1663,
                  "id": 1667,
                  "nodeType": "Return",
                  "src": "6989:33:20"
                }
              ]
            },
            "documentation": {
              "id": 1659,
              "nodeType": "StructuredDocumentation",
              "src": "6857:53:20",
              "text": "@notice Get the address of the CLH contract logic"
            },
            "functionSelector": "a6b6ed3a",
            "id": 1669,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getCLHImplementation",
            "nameLocation": "6924:20:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1660,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6944:2:20"
            },
            "returnParameters": {
              "id": 1663,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1662,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1669,
                  "src": "6970:7:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1661,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6970:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6969:9:20"
            },
            "scope": 1767,
            "src": "6915:114:20",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1691,
              "nodeType": "Block",
              "src": "7179:179:20",
              "statements": [
                {
                  "assignments": [
                    1678
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1678,
                      "mutability": "mutable",
                      "name": "oldAddr",
                      "nameLocation": "7197:7:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 1691,
                      "src": "7189:15:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1677,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "7189:7:20",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1680,
                  "initialValue": {
                    "id": 1679,
                    "name": "CLLConstructorCLH",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1303,
                    "src": "7207:17:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7189:35:20"
                },
                {
                  "expression": {
                    "id": 1683,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1681,
                      "name": "CLLConstructorCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1303,
                      "src": "7234:17:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1682,
                      "name": "_CLLConstructorCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1672,
                      "src": "7254:18:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "7234:38:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1684,
                  "nodeType": "ExpressionStatement",
                  "src": "7234:38:20"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "hexValue": "434c4c436f6e7374727563746f72434c48",
                        "id": 1686,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7301:19:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_21ca4107ae7c6046a1dcb965fe2f0c3235f996f64457d0aee953a67fec2a2477",
                          "typeString": "literal_string \"CLLConstructorCLH\""
                        },
                        "value": "CLLConstructorCLH"
                      },
                      {
                        "id": 1687,
                        "name": "oldAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1678,
                        "src": "7322:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1688,
                        "name": "_CLLConstructorCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1672,
                        "src": "7331:18:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_21ca4107ae7c6046a1dcb965fe2f0c3235f996f64457d0aee953a67fec2a2477",
                          "typeString": "literal_string \"CLLConstructorCLH\""
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 1685,
                      "name": "evtUpdateCLC",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1365,
                      "src": "7287:12:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_string_memory_ptr_$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (string memory,address,address)"
                      }
                    },
                    "id": 1689,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7287:64:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1690,
                  "nodeType": "EmitStatement",
                  "src": "7282:69:20"
                }
              ]
            },
            "documentation": {
              "id": 1670,
              "nodeType": "StructuredDocumentation",
              "src": "7035:57:20",
              "text": "@notice Update the CLLConstructorCLH contract Address"
            },
            "functionSelector": "f6f7a1b3",
            "id": 1692,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 1675,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 1674,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1377,
                  "src": "7169:9:20"
                },
                "nodeType": "ModifierInvocation",
                "src": "7169:9:20"
              }
            ],
            "name": "UpdateCLLConstructorCLH",
            "nameLocation": "7106:23:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1673,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1672,
                  "mutability": "mutable",
                  "name": "_CLLConstructorCLH",
                  "nameLocation": "7139:18:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1692,
                  "src": "7131:26:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1671,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7131:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7129:30:20"
            },
            "returnParameters": {
              "id": 1676,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7179:0:20"
            },
            "scope": 1767,
            "src": "7097:261:20",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1714,
              "nodeType": "Block",
              "src": "7508:179:20",
              "statements": [
                {
                  "assignments": [
                    1701
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1701,
                      "mutability": "mutable",
                      "name": "oldAddr",
                      "nameLocation": "7526:7:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 1714,
                      "src": "7518:15:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1700,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "7518:7:20",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1703,
                  "initialValue": {
                    "id": 1702,
                    "name": "CLLUserManagement",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1306,
                    "src": "7536:17:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7518:35:20"
                },
                {
                  "expression": {
                    "id": 1706,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1704,
                      "name": "CLLUserManagement",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1306,
                      "src": "7563:17:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1705,
                      "name": "_CLLUserManagement",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1695,
                      "src": "7583:18:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "7563:38:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1707,
                  "nodeType": "ExpressionStatement",
                  "src": "7563:38:20"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "hexValue": "434c4c557365724d616e6167656d656e74",
                        "id": 1709,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7630:19:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_8818be37b272861fc8aaea0e23015042e4fd23826d87079659169951e66dc62a",
                          "typeString": "literal_string \"CLLUserManagement\""
                        },
                        "value": "CLLUserManagement"
                      },
                      {
                        "id": 1710,
                        "name": "oldAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1701,
                        "src": "7651:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1711,
                        "name": "_CLLUserManagement",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1695,
                        "src": "7660:18:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_8818be37b272861fc8aaea0e23015042e4fd23826d87079659169951e66dc62a",
                          "typeString": "literal_string \"CLLUserManagement\""
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 1708,
                      "name": "evtUpdateCLC",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1365,
                      "src": "7616:12:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_string_memory_ptr_$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (string memory,address,address)"
                      }
                    },
                    "id": 1712,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7616:64:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1713,
                  "nodeType": "EmitStatement",
                  "src": "7611:69:20"
                }
              ]
            },
            "documentation": {
              "id": 1693,
              "nodeType": "StructuredDocumentation",
              "src": "7364:57:20",
              "text": "@notice Update the CLLUserManagement contract Address"
            },
            "functionSelector": "c1e45428",
            "id": 1715,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 1698,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 1697,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1377,
                  "src": "7498:9:20"
                },
                "nodeType": "ModifierInvocation",
                "src": "7498:9:20"
              }
            ],
            "name": "UpdateCLLUserManagement",
            "nameLocation": "7435:23:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1696,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1695,
                  "mutability": "mutable",
                  "name": "_CLLUserManagement",
                  "nameLocation": "7468:18:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1715,
                  "src": "7460:26:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1694,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7460:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7458:30:20"
            },
            "returnParameters": {
              "id": 1699,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7508:0:20"
            },
            "scope": 1767,
            "src": "7426:261:20",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1737,
              "nodeType": "Block",
              "src": "7825:159:20",
              "statements": [
                {
                  "assignments": [
                    1724
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1724,
                      "mutability": "mutable",
                      "name": "oldAddr",
                      "nameLocation": "7843:7:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 1737,
                      "src": "7835:15:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1723,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "7835:7:20",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1726,
                  "initialValue": {
                    "id": 1725,
                    "name": "CLLGovernance",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1309,
                    "src": "7853:13:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7835:31:20"
                },
                {
                  "expression": {
                    "id": 1729,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1727,
                      "name": "CLLGovernance",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1309,
                      "src": "7876:13:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1728,
                      "name": "_CLLGovernance",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1718,
                      "src": "7892:14:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "7876:30:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1730,
                  "nodeType": "ExpressionStatement",
                  "src": "7876:30:20"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "hexValue": "434c4c476f7665726e616e6365",
                        "id": 1732,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7935:15:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_5e0add186a65a03987845808813dd6258edab07c4a3ce5ebe4a055283e2a29f0",
                          "typeString": "literal_string \"CLLGovernance\""
                        },
                        "value": "CLLGovernance"
                      },
                      {
                        "id": 1733,
                        "name": "oldAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1724,
                        "src": "7952:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1734,
                        "name": "_CLLGovernance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1718,
                        "src": "7961:14:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_5e0add186a65a03987845808813dd6258edab07c4a3ce5ebe4a055283e2a29f0",
                          "typeString": "literal_string \"CLLGovernance\""
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 1731,
                      "name": "evtUpdateCLC",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1365,
                      "src": "7921:12:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_string_memory_ptr_$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (string memory,address,address)"
                      }
                    },
                    "id": 1735,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7921:56:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1736,
                  "nodeType": "EmitStatement",
                  "src": "7916:61:20"
                }
              ]
            },
            "documentation": {
              "id": 1716,
              "nodeType": "StructuredDocumentation",
              "src": "7693:53:20",
              "text": "@notice Update the CLLGovernance contract Address"
            },
            "functionSelector": "d742063c",
            "id": 1738,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 1721,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 1720,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1377,
                  "src": "7815:9:20"
                },
                "nodeType": "ModifierInvocation",
                "src": "7815:9:20"
              }
            ],
            "name": "UpdateCLLGovernance",
            "nameLocation": "7760:19:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1719,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1718,
                  "mutability": "mutable",
                  "name": "_CLLGovernance",
                  "nameLocation": "7789:14:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1738,
                  "src": "7781:22:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1717,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7781:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7779:26:20"
            },
            "returnParameters": {
              "id": 1722,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7825:0:20"
            },
            "scope": 1767,
            "src": "7751:233:20",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1765,
              "nodeType": "Block",
              "src": "8107:164:20",
              "statements": [
                {
                  "assignments": [
                    1747
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1747,
                      "mutability": "mutable",
                      "name": "oldAddr",
                      "nameLocation": "8125:7:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 1765,
                      "src": "8117:15:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1746,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "8117:7:20",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1752,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 1750,
                        "name": "pxyApiCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1316,
                        "src": "8144:9:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_CLHouseApi_$923",
                          "typeString": "contract CLHouseApi"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_contract$_CLHouseApi_$923",
                          "typeString": "contract CLHouseApi"
                        }
                      ],
                      "id": 1749,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "8135:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_address_$",
                        "typeString": "type(address)"
                      },
                      "typeName": {
                        "id": 1748,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "8135:7:20",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 1751,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8135:20:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "8117:38:20"
                },
                {
                  "expression": {
                    "id": 1757,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1753,
                      "name": "pxyApiCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1316,
                      "src": "8165:9:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_CLHouseApi_$923",
                        "typeString": "contract CLHouseApi"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 1755,
                          "name": "_pxyApiCLH",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1741,
                          "src": "8189:10:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 1754,
                        "name": "CLHouseApi",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 923,
                        "src": "8177:10:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_CLHouseApi_$923_$",
                          "typeString": "type(contract CLHouseApi)"
                        }
                      },
                      "id": 1756,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "8177:24:20",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_CLHouseApi_$923",
                        "typeString": "contract CLHouseApi"
                      }
                    },
                    "src": "8165:36:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_CLHouseApi_$923",
                      "typeString": "contract CLHouseApi"
                    }
                  },
                  "id": 1758,
                  "nodeType": "ExpressionStatement",
                  "src": "8165:36:20"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "hexValue": "707879417069434c48",
                        "id": 1760,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8230:11:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_d3cf9685e9cbd75f09272bf82d46b1b0a28e281855b8873df5235497823a8acb",
                          "typeString": "literal_string \"pxyApiCLH\""
                        },
                        "value": "pxyApiCLH"
                      },
                      {
                        "id": 1761,
                        "name": "oldAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1747,
                        "src": "8243:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1762,
                        "name": "_pxyApiCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1741,
                        "src": "8252:10:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_d3cf9685e9cbd75f09272bf82d46b1b0a28e281855b8873df5235497823a8acb",
                          "typeString": "literal_string \"pxyApiCLH\""
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 1759,
                      "name": "evtUpdateCLC",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1365,
                      "src": "8216:12:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_string_memory_ptr_$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (string memory,address,address)"
                      }
                    },
                    "id": 1763,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8216:48:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1764,
                  "nodeType": "EmitStatement",
                  "src": "8211:53:20"
                }
              ]
            },
            "documentation": {
              "id": 1739,
              "nodeType": "StructuredDocumentation",
              "src": "7990:49:20",
              "text": "@notice Update the pxyApiCLH contract Address"
            },
            "functionSelector": "4bc3959f",
            "id": 1766,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 1744,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 1743,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1377,
                  "src": "8097:9:20"
                },
                "nodeType": "ModifierInvocation",
                "src": "8097:9:20"
              }
            ],
            "name": "UpdateCLHAPI",
            "nameLocation": "8053:12:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1742,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1741,
                  "mutability": "mutable",
                  "name": "_pxyApiCLH",
                  "nameLocation": "8075:10:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 1766,
                  "src": "8067:18:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1740,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8067:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8065:22:20"
            },
            "returnParameters": {
              "id": 1745,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8107:0:20"
            },
            "scope": 1767,
            "src": "8044:227:20",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 1768,
        "src": "533:7740:20",
        "usedErrors": []
      }
    ],
    "src": "32:8241:20"
  },
  "bytecode": "608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b611bce806100ed6000396000f3fe60806040523480156200001157600080fd5b5060043610620001515760003560e01c806386bdfcac11620000c7578063c1d4b9ae1162000086578063c1d4b9ae14620002d9578063c1e4542814620002ed578063c837f0691462000304578063d742063c1462000318578063ee7a7d1b146200032f578063f6f7a1b3146200033957600080fd5b806386bdfcac146200025e578063a327ab691462000290578063a34b844714620002a4578063a6b6ed3a14620002bb578063c0828f6314620002c557600080fd5b8063594034e31162000114578063594034e314620001df5780635e4a9df814620001f3578063624d877414620002075780636fc68f9414620002335780637b2da764146200024757600080fd5b80631253461514620001565780632a13de9614620001875780634bc3959f146200019b5780634c98122b14620001b4578063529382d514620001cb575b600080fd5b6006546200016a906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6005546200016a906001600160a01b031681565b620001b2620001ac36600462000d84565b62000350565b005b620001b2620001c536600462000dab565b620003f8565b6003546200016a906001600160a01b031681565b6002546200016a906001600160a01b031681565b600a546200016a906001600160a01b031681565b6200016a6200021836600462000e90565b600d602052600090815260409020546001600160a01b031681565b6008546200016a906001600160a01b031681565b620001b26200025836600462000f71565b62000712565b620002816200026f36600462000d84565b600c6020526000908152604090205481565b6040519081526020016200017e565b6004546200016a906001600160a01b031681565b620001b2620002b536600462000d84565b62000a42565b6200016a62000afc565b6007546200016a906001600160a01b031681565b600b546200016a906001600160a01b031681565b620001b2620002fe36600462000d84565b62000b72565b6009546200016a906001600160a01b031681565b620001b26200032936600462000d84565b62000c12565b6200028160015481565b620001b26200034a36600462000d84565b62000cae565b6005546001600160a01b03163314620003865760405162461bcd60e51b81526004016200037d9062001048565b60405180910390fd5b600680546001600160a01b031981166001600160a01b03848116918217909355604080516060808252600990820152680e0f0f282e0d28698960bb1b60808201529390921660208401819052918301529060008051602062001b798339815191529060a0015b60405180910390a15050565b600054600190610100900460ff161580156200041b575060005460ff8083169116105b620004805760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016200037d565b806000806101000a81548160ff021916908360ff1602179055506001600060016101000a81548160ff0219169083151502179055508a600760006101000a8154816001600160a01b0302191690836001600160a01b0316021790555089600660006101000a8154816001600160a01b0302191690836001600160a01b0316021790555084600360006101000a8154816001600160a01b0302191690836001600160a01b0316021790555083600460006101000a8154816001600160a01b0302191690836001600160a01b0316021790555082600260006101000a8154816001600160a01b0302191690836001600160a01b0316021790555088600860006101000a8154816001600160a01b0302191690836001600160a01b0316021790555087600960006101000a8154816001600160a01b0302191690836001600160a01b0316021790555086600a60006101000a8154816001600160a01b0302191690836001600160a01b0316021790555085600b60006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060006001819055506000600d6000600154815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600154600c6000806001600160a01b03166001600160a01b031681526020019081526020016000208190555081600560006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249881604051620006fd919060ff91909116815260200190565b60405180910390a15050505050505050505050565b336001600160a01b038316156200085d578151604114620007765760405162461bcd60e51b815260206004820152601f60248201527f437265617465434c483a20426164207369676e6174757265206c656e6774680060448201526064016200037d565b6006546040516344d7258360e01b81526001600160a01b03909116906344d7258390620007b4908b908b908b908b908b9030908b90600401620010c3565b602060405180830381865afa158015620007d2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007f8919062001128565b6001600160a01b0316836001600160a01b0316146200085a5760405162461bcd60e51b815260206004820152601c60248201527f437265617465434c483a20496e76616c6964205369676e61747572650000000060448201526064016200037d565b50815b620008688162000a42565b6007546040805160e0810182526002546001600160a01b0390811682523060208301526006548116828401526008548116606083015260095481166080830152600a54811660a083015287811660c083015291516000939290921691620008dc9185918d918d918d918d9160240162001148565b60408051601f198184030181529181526020820180516001600160e01b0316635b4587e160e01b17905251620009129062000d4e565b6200091f929190620011c5565b604051809103906000f0801580156200093c573d6000803e3d6000fd5b506001805491925060006200095183620011f3565b9091555050600180546000908152600d6020908152604080832080546001600160a01b0319166001600160a01b038781169182179092559454858552600c9093529281902091909155600854905163650938db60e11b815260048101939093528482166024840152169063ca1271b690604401600060405180830381600087803b158015620009df57600080fd5b505af1158015620009f4573d6000803e3d6000fd5b505050507f6510209152e59feb0a7445a97b24bc79bfcb456ca1d8bff1e4980536c4e8cabb818a60015460405162000a2f939291906200121d565b60405180910390a1505050505050505050565b600b546040516370a0823160e01b81526001600160a01b038381166004830152909116906370a0823190602401602060405180830381865afa15801562000a8d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ab3919062001253565b62000af95760405162461bcd60e51b8152602060048201526015602482015274111bdb89dd081a185d99481058d8d95cdcc8139195605a1b60448201526064016200037d565b50565b60075460408051635c60da1b60e01b815290516000926001600160a01b031691635c60da1b9160048083019260209291908290030181865afa15801562000b47573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b6d919062001128565b905090565b6005546001600160a01b0316331462000b9f5760405162461bcd60e51b81526004016200037d9062001048565b600380546001600160a01b031981166001600160a01b038481169182179093556040805160608082526011908201527010d313155cd95c93585b9859d95b595b9d607a1b60808201529390921660208401819052918301529060008051602062001b798339815191529060a001620003ec565b6005546001600160a01b0316331462000c3f5760405162461bcd60e51b81526004016200037d9062001048565b600480546001600160a01b031981166001600160a01b03848116918217909355604080516060808252600d908201526c434c4c476f7665726e616e636560981b60808201529390921660208401819052918301529060008051602062001b798339815191529060a001620003ec565b6005546001600160a01b0316331462000cdb5760405162461bcd60e51b81526004016200037d9062001048565b600280546001600160a01b031981166001600160a01b0384811691821790935560408051606080825260119082015270086989886dedce6e8e4eac6e8dee486989607b1b60808201529390921660208401819052918301529060008051602062001b798339815191529060a001620003ec565b61090b806200126e83390190565b6001600160a01b038116811462000af957600080fd5b803562000d7f8162000d5c565b919050565b60006020828403121562000d9757600080fd5b813562000da48162000d5c565b9392505050565b6000806000806000806000806000806101408b8d03121562000dcc57600080fd5b8a3562000dd98162000d5c565b995060208b013562000deb8162000d5c565b985060408b013562000dfd8162000d5c565b975060608b013562000e0f8162000d5c565b965060808b013562000e218162000d5c565b955060a08b013562000e338162000d5c565b945060c08b013562000e458162000d5c565b935060e08b013562000e578162000d5c565b92506101008b013562000e6a8162000d5c565b91506101208b013562000e7d8162000d5c565b809150509295989b9194979a5092959850565b60006020828403121562000ea357600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111562000ede5762000ede62000eaa565b604051601f8501601f19908116603f0116810190828211818310171562000f095762000f0962000eaa565b8160405280935085815286868601111562000f2357600080fd5b858560208301376000602087830101525050509392505050565b8035801515811462000d7f57600080fd5b600082601f83011262000f6057600080fd5b62000da48383356020850162000ec0565b600080600080600080600060e0888a03121562000f8d57600080fd5b873567ffffffffffffffff8082111562000fa657600080fd5b818a0191508a601f83011262000fbb57600080fd5b62000fcc8b83356020850162000ec0565b985062000fdc60208b0162000f3d565b975062000fec60408b0162000f3d565b965060608a013595506200100360808b0162000d72565b94506200101360a08b0162000d72565b935060c08a01359150808211156200102a57600080fd5b50620010398a828b0162000f4e565b91505092959891949750929550565b60208082526011908201527027b7363c9027bbb732b91037b31021a62360791b604082015260600190565b6000815180845260005b818110156200109b576020818501810151868301820152016200107d565b81811115620010ae576000602083870101525b50601f01601f19169290920160200192915050565b60e081526000620010d860e083018a62001073565b88151560208401528715156040840152606083018790526001600160a01b038681166080850152851660a084015282810360c08401526200111a818562001073565b9a9950505050505050505050565b6000602082840312156200113b57600080fd5b815162000da48162000d5c565b6001600160a01b038781168252610180602080840182905260009290620011728584018b62001073565b93508815156040860152871515606086015286608086015260a0850192508560005b6007811015620011b557815184168552938201939082019060010162001194565b5050505050979650505050505050565b6001600160a01b0383168152604060208201819052600090620011eb9083018462001073565b949350505050565b60006000198214156200121657634e487b7160e01b600052601160045260246000fd5b5060010190565b6001600160a01b0384168152606060208201819052600090620012439083018562001073565b9050826040830152949350505050565b6000602082840312156200126657600080fd5b505191905056fe608060405234801561001057600080fd5b5060405161090b38038061090b83398101604081905261002f91610467565b818161003d82826000610046565b50505050610591565b61004f83610111565b6040516001600160a01b038416907f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e90600090a26000825111806100905750805b1561010c5761010a836001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fa9190610527565b836102b460201b6100291760201c565b505b505050565b610124816102e060201b6100551760201c565b6101835760405162461bcd60e51b815260206004820152602560248201527f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b6101f7816001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e89190610527565b6102e060201b6100551760201c565b61025c5760405162461bcd60e51b815260206004820152603060248201527f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960448201526f1cc81b9bdd08184818dbdb9d1c9858dd60821b606482015260840161017a565b806102937fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5060001b6102ef60201b6100641760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b60606102d983836040518060600160405280602781526020016108e4602791396102f2565b9392505050565b6001600160a01b03163b151590565b90565b60606001600160a01b0384163b61035a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161017a565b600080856001600160a01b0316856040516103759190610542565b600060405180830381855af49150503d80600081146103b0576040519150601f19603f3d011682016040523d82523d6000602084013e6103b5565b606091505b5090925090506103c68282866103d0565b9695505050505050565b606083156103df5750816102d9565b8251156103ef5782518084602001fd5b8160405162461bcd60e51b815260040161017a919061055e565b80516001600160a01b038116811461042057600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561045657818101518382015260200161043e565b8381111561010a5750506000910152565b6000806040838503121561047a57600080fd5b61048383610409565b60208401519092506001600160401b03808211156104a057600080fd5b818501915085601f8301126104b457600080fd5b8151818111156104c6576104c6610425565b604051601f8201601f19908116603f011681019083821181831017156104ee576104ee610425565b8160405282815288602084870101111561050757600080fd5b61051883602083016020880161043b565b80955050505050509250929050565b60006020828403121561053957600080fd5b6102d982610409565b6000825161055481846020870161043b565b9190910192915050565b602081526000825180602084015261057d81604085016020870161043b565b601f01601f19169190910160400192915050565b610344806105a06000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610067565b610100565b565b606061004e83836040518060600160405280602781526020016102e860279139610124565b9392505050565b6001600160a01b03163b151590565b90565b600061009a7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50546001600160a01b031690565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fb919061023f565b905090565b3660008037600080366000845af43d6000803e80801561011f573d6000f35b3d6000fd5b60606001600160a01b0384163b6101915760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b0316856040516101ac9190610298565b600060405180830381855af49150503d80600081146101e7576040519150601f19603f3d011682016040523d82523d6000602084013e6101ec565b606091505b50915091506101fc828286610206565b9695505050505050565b6060831561021557508161004e565b8251156102255782518084602001fd5b8160405162461bcd60e51b815260040161018891906102b4565b60006020828403121561025157600080fd5b81516001600160a01b038116811461004e57600080fd5b60005b8381101561028357818101518382015260200161026b565b83811115610292576000848401525b50505050565b600082516102aa818460208701610268565b9190910192915050565b60208152600082518060208401526102d3816040850160208701610268565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220076597d2217ef849e290edf67701d6b6f2acba1feffb45a8e109398165817c1764736f6c634300080c0033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65648068a223bc38529864701ed6f372296d3ecb2aa9affe6c91cf94e2ae6dd577c8a2646970667358221220428a29d617508facb12f3405b2e5fa8fd86b7fec2777ec077f220803e1e3c7e764736f6c634300080c0033",
  "bytecodeSha1": "77ed71d36170cadc253e0a203e1cc4d67a1cb5ad",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.12+commit.f00d7308"
  },
  "contractName": "CLFactory",
  "coverageMap": {
    "branches": {
      "10": {
        "CLFactory.Init": {
          "35": [
            4396,
            4409,
            false
          ]
        }
      },
      "17": {},
      "19": {},
      "20": {
        "CLFactory.CreateCLH": {
          "32": [
            5283,
            5310,
            false
          ],
          "33": [
            5336,
            5359,
            true
          ],
          "34": [
            5448,
            5746,
            true
          ]
        }
      },
      "25": {},
      "26": {},
      "29": {},
      "30": {},
      "32": {},
      "33": {}
    },
    "statements": {
      "10": {},
      "17": {},
      "19": {},
      "20": {
        "CLFactory.CreateCLH": {
          "15": [
            5327,
            5396
          ],
          "16": [
            5423,
            5808
          ],
          "17": [
            5823,
            5849
          ],
          "18": [
            5870,
            5898
          ],
          "19": [
            6596,
            6604
          ],
          "20": [
            6614,
            6662
          ],
          "21": [
            6672,
            6710
          ],
          "22": [
            6721,
            6777
          ],
          "23": [
            6788,
            6843
          ]
        },
        "CLFactory.Init": {
          "2": [
            3867,
            3901
          ],
          "3": [
            3920,
            3956
          ],
          "4": [
            3967,
            4005
          ],
          "5": [
            4015,
            4045
          ],
          "6": [
            4055,
            4093
          ],
          "7": [
            4104,
            4144
          ],
          "8": [
            4154,
            4192
          ],
          "9": [
            4202,
            4248
          ],
          "10": [
            4258,
            4304
          ],
          "11": [
            4323,
            4333
          ],
          "12": [
            4343,
            4384
          ],
          "13": [
            4394,
            4425
          ],
          "14": [
            4436,
            4456
          ]
        },
        "CLFactory.UpdateCLHAPI": {
          "0": [
            8165,
            8201
          ],
          "1": [
            8211,
            8264
          ]
        },
        "CLFactory.UpdateCLLConstructorCLH": {
          "30": [
            7234,
            7272
          ],
          "31": [
            7282,
            7351
          ]
        },
        "CLFactory.UpdateCLLGovernance": {
          "28": [
            7876,
            7906
          ],
          "29": [
            7916,
            7977
          ]
        },
        "CLFactory.UpdateCLLUserManagement": {
          "26": [
            7563,
            7601
          ],
          "27": [
            7611,
            7680
          ]
        },
        "CLFactory.checkAccessNFT": {
          "24": [
            2566,
            2645
          ]
        },
        "CLFactory.getCLHImplementation": {
          "25": [
            6989,
            7022
          ]
        }
      },
      "25": {},
      "26": {},
      "29": {},
      "30": {},
      "32": {},
      "33": {}
    }
  },
  "dependencies": [
    "CLANFT",
    "CLBeacon",
    "CLHNFT",
    "CLHouseApi",
    "CLPBeacon",
    "ICLFactory",
    "ICLHouse",
    "OpenZeppelin/openzeppelin-contracts@4.7.3/Initializable"
  ],
  "deployedBytecode": "",
  "deployedSourceMap": "533:7740:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1088:27;;;;;-1:-1:-1;;;;;1088:27:20;;;;;;-1:-1:-1;;;;;196:32:35;;;178:51;;166:2;151:18;1088:27:20;;;;;;;;1012:23;;;;;-1:-1:-1;;;;;1012:23:20;;;8044:227;;;;;;:::i;:::-;;:::i;:::-;;3445:1018;;;;;;:::i;:::-;;:::i;825:32::-;;;;;-1:-1:-1;;;;;825:32:20;;;722;;;;;-1:-1:-1;;;;;722:32:20;;;1484:30;;;;;-1:-1:-1;;;;;1484:30:20;;;1767:44;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;1767:44:20;;;1323:27;;;;;-1:-1:-1;;;;;1323:27:20;;;4966:1884;;;;;;:::i;:::-;;:::i;1655:45::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;5477:25:35;;;5465:2;5450:18;1655:45:20;5331:177:35;923:28:20;;;;;-1:-1:-1;;;;;923:28:20;;;2506:146;;;;;;:::i;:::-;;:::i;6915:114::-;;;:::i;1241:25::-;;;;;-1:-1:-1;;;;;1241:25:20;;;1570:30;;;;;-1:-1:-1;;;;;1570:30:20;;;7426:261;;;;;;:::i;:::-;;:::i;1402:26::-;;;;;-1:-1:-1;;;;;1402:26:20;;;7751:233;;;;;;:::i;:::-;;:::i;638:21::-;;;;;;7097:261;;;;;;:::i;:::-;;:::i;8044:227::-;2451:8;;-1:-1:-1;;;;;2451:8:20;2437:10;:22;2428:54;;;;-1:-1:-1;;;2428:54:20;;;;;;;:::i;:::-;;;;;;;;;8144:9:::1;::::0;;-1:-1:-1;;;;;;8165:36:20;::::1;-1:-1:-1::0;;;;;8165:36:20;;::::1;::::0;;::::1;::::0;;;8216:48:::1;::::0;;6565:2:35;6547:21;;;6604:1;6584:18;;;6577:29;-1:-1:-1;;;6637:3:35;6622:19;;6615:40;8144:9:20;;;::::1;6760:4:35::0;6745:20;;6738:45;;;6799:18;;;6792:43;8144:9:20;-1:-1:-1;;;;;;;;;;;8216:48:20;6687:3:35;6672:19;8216:48:20::1;;;;;;;;8107:164;8044:227:::0;:::o;3445:1018::-;4396:13:10;;236:1:19;;4396:13:10;;;;;4395:14;:40;;;;-1:-1:-1;4413:12:10;;:22;;;;:12;;:22;4395:40;4387:99;;;;-1:-1:-1;;;4387:99:10;;7048:2:35;4387:99:10;;;7030:21:35;7087:2;7067:18;;;7060:30;7126:34;7106:18;;;7099:62;-1:-1:-1;;;7177:18:35;;;7170:44;7231:19;;4387:99:10;6846:410:35;4387:99:10;4511:7;4496:12;;:22;;;;;;;;;;;;;;;;;;4544:4;4528:13;;:20;;;;;;;;;;;;;;;;;;3889:10:20::1;3867:9;;:34;;;;;-1:-1:-1::0;;;;;3867:34:20::1;;;;;-1:-1:-1::0;;;;;3867:34:20::1;;;;;;3944:10;3920:9;;:36;;;;;-1:-1:-1::0;;;;;3920:36:20::1;;;;;-1:-1:-1::0;;;;;3920:36:20::1;;;;;;3987:18;3967:17;;:38;;;;;-1:-1:-1::0;;;;;3967:38:20::1;;;;;-1:-1:-1::0;;;;;3967:38:20::1;;;;;;4031:14;4015:13;;:30;;;;;-1:-1:-1::0;;;;;4015:30:20::1;;;;;-1:-1:-1::0;;;;;4015:30:20::1;;;;;;4075:18;4055:17;;:38;;;;;-1:-1:-1::0;;;;;4055:38:20::1;;;;;-1:-1:-1::0;;;;;4055:38:20::1;;;;;;4128:14;4104:13;;:40;;;;;-1:-1:-1::0;;;;;4104:40:20::1;;;;;-1:-1:-1::0;;;;;4104:40:20::1;;;;;;4177:13;4154:12;;:38;;;;;-1:-1:-1::0;;;;;4154:38:20::1;;;;;-1:-1:-1::0;;;;;4154:38:20::1;;;;;;4229:17;4202:16;;:46;;;;;-1:-1:-1::0;;;;;4202:46:20::1;;;;;-1:-1:-1::0;;;;;4202:46:20::1;;;;;;4285:17;4258:16;;:46;;;;;-1:-1:-1::0;;;;;4258:46:20::1;;;;;-1:-1:-1::0;;;;;4258:46:20::1;;;;;;4332:1;4323:6;:10;;;;4380:1;4343:6;:16;4351:6;;4343:16;;;;;;;;;;;;:41;;;;;-1:-1:-1::0;;;;;4343:41:20::1;;;;;-1:-1:-1::0;;;;;4343:41:20::1;;;;;;4419:6;;4394:8;:22;4412:1:::0;-1:-1:-1;;;;;4394:22:20::1;-1:-1:-1::0;;;;;4394:22:20::1;;;;;;;;;;;;:31;;;;4447:9;4436:8;;:20;;;;;-1:-1:-1::0;;;;;4436:20:20::1;;;;;-1:-1:-1::0;;;;;4436:20:20::1;;;;;;4585:5:10::0;4569:13;;:21;;;;;;;;;;;;;;;;;;4605:20;4617:7;4605:20;;;;;7433:4:35;7421:17;;;;7403:36;;7391:2;7376:18;;7261:184;4605:20:10;;;;;;;;3445:1018:20;;;;;;;;;;;:::o;4966:1884::-;5258:10;-1:-1:-1;;;;;5283:27:20;;;5279:581;;5336:10;:17;5357:2;5336:23;5327:69;;;;-1:-1:-1;;;5327:69:20;;7652:2:35;5327:69:20;;;7634:21:35;7691:2;7671:18;;;7664:30;7730:33;7710:18;;;7703:61;7781:18;;5327:69:20;7450:355:35;5327:69:20;5465:9;;:281;;-1:-1:-1;;;5465:281:20;;-1:-1:-1;;;;;5465:9:20;;;;:24;;:281;;5511:10;;5543:13;;5578:10;;5610:16;;5648:13;;5691:4;;5718:10;;5465:281;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;5448:298:20;:13;-1:-1:-1;;;;;5448:298:20;;5423:385;;;;-1:-1:-1;;;5423:385:20;;9567:2:35;5423:385:20;;;9549:21:35;9606:2;9586:18;;;9579:30;9645;9625:18;;;9618:58;9693:18;;5423:385:20;9365:352:35;5423:385:20;-1:-1:-1;5836:13:20;5279:581;5870:28;5886:10;5870:14;:28::i;:::-;5964:9;;5989:586;;;;;;;;6272:17;;-1:-1:-1;;;;;6272:17:20;;;5989:586;;6320:4;5989:586;;;;6357:9;;;;5989:586;;;;6399:13;;;;5989:586;;;;6445:12;;;;5989:586;;;;6490:16;;;;5989:586;;;;;;;;;;;;;5909:16;;5964:9;;;;;5989:586;;6099:10;;6128;;6156:13;;6187:10;;6215:16;;5989:586;;;:::i;:::-;;;;-1:-1:-1;;5989:586:20;;;;;;;;;;;;;;-1:-1:-1;;;;;5989:586:20;-1:-1:-1;;;5989:586:20;;;5928:657;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6596:6:20;:8;;5909:676;;-1:-1:-1;6596:6:20;:8;;;:::i;:::-;;;;-1:-1:-1;;6622:6:20;;;6614:16;;;;:6;:16;;;;;;;;:48;;-1:-1:-1;;;;;;6614:48:20;-1:-1:-1;;;;;6614:48:20;;;;;;;;;6704:6;;6672:29;;;:8;:29;;;;;;;:38;;;;6721:13;;:56;;-1:-1:-1;;;6721:56:20;;;;;11476:34:35;;;;11546:15;;;11526:18;;;11519:43;6721:13:20;;:23;;11411:18:35;;6721:56:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6793:50;6813:6;6823:10;6835:6;;6793:50;;;;;;;;:::i;:::-;;;;;;;;5227:1623;;4966:1884;;;;;;;:::o;2506:146::-;2580:16;;:37;;-1:-1:-1;;;2580:37:20;;-1:-1:-1;;;;;196:32:35;;;2580:37:20;;;178:51:35;2580:16:20;;;;:26;;151:18:35;;2580:37:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2566:79;;;;-1:-1:-1;;;2566:79:20;;12357:2:35;2566:79:20;;;12339:21:35;12396:2;12376:18;;;12369:30;-1:-1:-1;;;12415:18:35;;;12408:51;12476:18;;2566:79:20;12155:345:35;2566:79:20;2506:146;:::o;6915:114::-;6996:9;;:26;;;-1:-1:-1;;;6996:26:20;;;;6970:7;;-1:-1:-1;;;;;6996:9:20;;:24;;:26;;;;;;;;;;;;;;:9;:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6989:33;;6915:114;:::o;7426:261::-;2451:8;;-1:-1:-1;;;;;2451:8:20;2437:10;:22;2428:54;;;;-1:-1:-1;;;2428:54:20;;;;;;;:::i;:::-;7536:17:::1;::::0;;-1:-1:-1;;;;;;7563:38:20;::::1;-1:-1:-1::0;;;;;7563:38:20;;::::1;::::0;;::::1;::::0;;;7616:64:::1;::::0;;12763:2:35;12745:21;;;12802:2;12782:18;;;12775:30;-1:-1:-1;;;12836:3:35;12821:19;;12814:48;7536:17:20;;;::::1;12967:4:35::0;12952:20;;12945:45;;;13006:18;;;12999:43;7536:17:20;-1:-1:-1;;;;;;;;;;;7616:64:20;12894:3:35;12879:19;7616:64:20::1;12505:543:35::0;7751:233:20;2451:8;;-1:-1:-1;;;;;2451:8:20;2437:10;:22;2428:54;;;;-1:-1:-1;;;2428:54:20;;;;;;;:::i;:::-;7853:13:::1;::::0;;-1:-1:-1;;;;;;7876:30:20;::::1;-1:-1:-1::0;;;;;7876:30:20;;::::1;::::0;;::::1;::::0;;;7921:56:::1;::::0;;13311:2:35;13293:21;;;13350:2;13330:18;;;13323:30;-1:-1:-1;;;13384:3:35;13369:19;;13362:44;7853:13:20;;;::::1;13511:4:35::0;13496:20;;13489:45;;;13550:18;;;13543:43;7853:13:20;-1:-1:-1;;;;;;;;;;;7921:56:20;13438:3:35;13423:19;7921:56:20::1;13053:539:35::0;7097:261:20;2451:8;;-1:-1:-1;;;;;2451:8:20;2437:10;:22;2428:54;;;;-1:-1:-1;;;2428:54:20;;;;;;;:::i;:::-;7207:17:::1;::::0;;-1:-1:-1;;;;;;7234:38:20;::::1;-1:-1:-1::0;;;;;7234:38:20;;::::1;::::0;;::::1;::::0;;;7287:64:::1;::::0;;13855:2:35;13837:21;;;13894:2;13874:18;;;13867:30;-1:-1:-1;;;13928:3:35;13913:19;;13906:48;7207:17:20;;;::::1;14059:4:35::0;14044:20;;14037:45;;;14098:18;;;14091:43;7207:17:20;-1:-1:-1;;;;;;;;;;;7287:64:20;13986:3:35;13971:19;7287:64:20::1;13597:543:35::0;-1:-1:-1;;;;;;;;:::o;448:131:35:-;-1:-1:-1;;;;;523:31:35;;513:42;;503:70;;569:1;566;559:12;584:134;652:20;;681:31;652:20;681:31;:::i;:::-;584:134;;;:::o;723:247::-;782:6;835:2;823:9;814:7;810:23;806:32;803:52;;;851:1;848;841:12;803:52;890:9;877:23;909:31;934:5;909:31;:::i;:::-;959:5;723:247;-1:-1:-1;;;723:247:35:o;975:1523::-;1115:6;1123;1131;1139;1147;1155;1163;1171;1179;1187;1240:3;1228:9;1219:7;1215:23;1211:33;1208:53;;;1257:1;1254;1247:12;1208:53;1296:9;1283:23;1315:31;1340:5;1315:31;:::i;:::-;1365:5;-1:-1:-1;1422:2:35;1407:18;;1394:32;1435:33;1394:32;1435:33;:::i;:::-;1487:7;-1:-1:-1;1546:2:35;1531:18;;1518:32;1559:33;1518:32;1559:33;:::i;:::-;1611:7;-1:-1:-1;1670:2:35;1655:18;;1642:32;1683:33;1642:32;1683:33;:::i;:::-;1735:7;-1:-1:-1;1794:3:35;1779:19;;1766:33;1808;1766;1808;:::i;:::-;1860:7;-1:-1:-1;1919:3:35;1904:19;;1891:33;1933;1891;1933;:::i;:::-;1985:7;-1:-1:-1;2044:3:35;2029:19;;2016:33;2058;2016;2058;:::i;:::-;2110:7;-1:-1:-1;2169:3:35;2154:19;;2141:33;2183;2141;2183;:::i;:::-;2235:7;-1:-1:-1;2294:3:35;2279:19;;2266:33;2308;2266;2308;:::i;:::-;2360:7;-1:-1:-1;2419:3:35;2404:19;;2391:33;2433;2391;2433;:::i;:::-;2485:7;2475:17;;;975:1523;;;;;;;;;;;;;:::o;2726:180::-;2785:6;2838:2;2826:9;2817:7;2813:23;2809:32;2806:52;;;2854:1;2851;2844:12;2806:52;-1:-1:-1;2877:23:35;;2726:180;-1:-1:-1;2726:180:35:o;3136:127::-;3197:10;3192:3;3188:20;3185:1;3178:31;3228:4;3225:1;3218:15;3252:4;3249:1;3242:15;3268:632;3333:5;3363:18;3404:2;3396:6;3393:14;3390:40;;;3410:18;;:::i;:::-;3485:2;3479:9;3453:2;3539:15;;-1:-1:-1;;3535:24:35;;;3561:2;3531:33;3527:42;3515:55;;;3585:18;;;3605:22;;;3582:46;3579:72;;;3631:18;;:::i;:::-;3671:10;3667:2;3660:22;3700:6;3691:15;;3730:6;3722;3715:22;3770:3;3761:6;3756:3;3752:16;3749:25;3746:45;;;3787:1;3784;3777:12;3746:45;3837:6;3832:3;3825:4;3817:6;3813:17;3800:44;3892:1;3885:4;3876:6;3868;3864:19;3860:30;3853:41;;;;3268:632;;;;;:::o;3905:160::-;3970:20;;4026:13;;4019:21;4009:32;;3999:60;;4055:1;4052;4045:12;4070:221;4112:5;4165:3;4158:4;4150:6;4146:17;4142:27;4132:55;;4183:1;4180;4173:12;4132:55;4205:80;4281:3;4272:6;4259:20;4252:4;4244:6;4240:17;4205:80;:::i;4296:1030::-;4422:6;4430;4438;4446;4454;4462;4470;4523:3;4511:9;4502:7;4498:23;4494:33;4491:53;;;4540:1;4537;4530:12;4491:53;4580:9;4567:23;4609:18;4650:2;4642:6;4639:14;4636:34;;;4666:1;4663;4656:12;4636:34;4704:6;4693:9;4689:22;4679:32;;4749:7;4742:4;4738:2;4734:13;4730:27;4720:55;;4771:1;4768;4761:12;4720:55;4794:76;4862:7;4857:2;4844:16;4837:4;4833:2;4829:13;4794:76;:::i;:::-;4784:86;;4889:37;4920:4;4909:9;4905:20;4889:37;:::i;:::-;4879:47;;4945:35;4976:2;4965:9;4961:18;4945:35;:::i;:::-;4935:45;;5027:2;5016:9;5012:18;4999:32;4989:42;;5050:39;5084:3;5073:9;5069:19;5050:39;:::i;:::-;5040:49;;5108:39;5142:3;5131:9;5127:19;5108:39;:::i;:::-;5098:49;;5200:3;5189:9;5185:19;5172:33;5156:49;;5230:2;5220:8;5217:16;5214:36;;;5246:1;5243;5236:12;5214:36;;5269:51;5312:7;5301:8;5290:9;5286:24;5269:51;:::i;:::-;5259:61;;;4296:1030;;;;;;;;;;:::o;5961:341::-;6163:2;6145:21;;;6202:2;6182:18;;;6175:30;-1:-1:-1;;;6236:2:35;6221:18;;6214:47;6293:2;6278:18;;5961:341::o;7810:472::-;7852:3;7890:5;7884:12;7917:6;7912:3;7905:19;7942:1;7952:162;7966:6;7963:1;7960:13;7952:162;;;8028:4;8084:13;;;8080:22;;8074:29;8056:11;;;8052:20;;8045:59;7981:12;7952:162;;;8132:6;8129:1;8126:13;8123:87;;;8198:1;8191:4;8182:6;8177:3;8173:16;8169:27;8162:38;8123:87;-1:-1:-1;8264:2:35;8243:15;-1:-1:-1;;8239:29:35;8230:39;;;;8271:4;8226:50;;7810:472;-1:-1:-1;;7810:472:35:o;8287:817::-;8610:3;8599:9;8592:22;8573:4;8637:46;8678:3;8667:9;8663:19;8655:6;8637:46;:::i;:::-;8726:14;;8719:22;8714:2;8699:18;;8692:50;8785:14;;8778:22;8773:2;8758:18;;8751:50;8832:2;8817:18;;8810:34;;;-1:-1:-1;;;;;8919:15:35;;;8913:3;8898:19;;8891:44;8972:15;;8871:3;8951:19;;8944:44;9025:22;;;9019:3;9004:19;;8997:51;9065:33;9029:6;9083;9065:33;:::i;:::-;9057:41;8287:817;-1:-1:-1;;;;;;;;;;8287:817:35:o;9109:251::-;9179:6;9232:2;9220:9;9211:7;9207:23;9203:32;9200:52;;;9248:1;9245;9238:12;9200:52;9280:9;9274:16;9299:31;9324:5;9299:31;:::i;9722:980::-;-1:-1:-1;;;;;10105:15:35;;;10087:34;;10037:3;10140:2;10158:18;;;10151:30;;;10008:4;;10059:19;10198:45;10224:18;;;10216:6;10198:45;:::i;:::-;10190:53;;10293:6;10286:14;10279:22;10274:2;10263:9;10259:18;10252:50;10352:6;10345:14;10338:22;10333:2;10322:9;10318:18;10311:50;10398:6;10392:3;10381:9;10377:19;10370:35;10440:3;10429:9;10425:19;10414:30;;10486:6;10510:1;10520:176;10534:4;10531:1;10528:11;10520:176;;;10597:13;;10593:22;;10581:35;;10636:12;;;;10671:15;;;;10554:1;10547:9;10520:176;;;10524:3;;;;;9722:980;;;;;;;;;:::o;10707:315::-;-1:-1:-1;;;;;10882:32:35;;10864:51;;10951:2;10946;10931:18;;10924:30;;;-1:-1:-1;;10971:45:35;;10997:18;;10989:6;10971:45;:::i;:::-;10963:53;10707:315;-1:-1:-1;;;;10707:315:35:o;11027:232::-;11066:3;-1:-1:-1;;11087:17:35;;11084:140;;;11146:10;11141:3;11137:20;11134:1;11127:31;11181:4;11178:1;11171:15;11209:4;11206:1;11199:15;11084:140;-1:-1:-1;11251:1:35;11240:13;;11027:232::o;11573:388::-;-1:-1:-1;;;;;11778:32:35;;11760:51;;11847:2;11842;11827:18;;11820:30;;;-1:-1:-1;;11867:45:35;;11893:18;;11885:6;11867:45;:::i;:::-;11859:53;;11948:6;11943:2;11932:9;11928:18;11921:34;11573:388;;;;;;:::o;11966:184::-;12036:6;12089:2;12077:9;12068:7;12064:23;12060:32;12057:52;;;12105:1;12102;12095:12;12057:52;-1:-1:-1;12128:16:35;;11966:184;-1:-1:-1;11966:184:35:o",
  "language": "Solidity",
  "natspec": {
    "author": "Leonardo Urrego",
    "details": "This contract is the standard way to create CLH",
    "events": {
      "evtNewCLH(address,string,uint256)": {
        "params": {
          "houseAddr": "Address of the created house",
          "houseId": "Id of CLH of the created house",
          "houseName": "Name of the created house"
        }
      },
      "evtUpdateCLC(string,address,address)": {
        "params": {
          "CLCName": "Name of contract var",
          "newAddress": "New Address value of the var",
          "oldAddress": "Old Address value of the var"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "CLLConstructorCLH()": {
        "notice": "Proxy Contract to CLH Constructor logic"
      },
      "CLLGovernance()": {
        "notice": "Proxy Contract to functions for Governance"
      },
      "CLLUserManagement()": {
        "notice": "Proxy Contract to functions for user management"
      },
      "CreateCLH(string,bool,bool,uint256,address,address,bytes)": {
        "notice": "Create a new CLHouse proxy Contract",
        "params": {
          "_govRuleMaxUsers": "Max users in the house",
          "_houseName": "Name of the CLH",
          "_houseOpen": "If is set to 1, the CLH is set to open",
          "_housePrivate": "If is set to 1, the CLH is set to private",
          "_signature": "Signature for validate OffChain Tx",
          "_signerWallet": "Wallet address of the signer for OffChain Tx",
          "_whiteListNFT": "Address of NFT Collection for users invitation"
        }
      },
      "Init(address,address,address,address,address,address,address,address,address,address)": {
        "notice": "Config the CLFactory with the CL Logic Contracts",
        "params": {
          "_CLLConstructorCLH": "Address Contract with the Constructor logic",
          "_CLLGovernance": "Address Contract Logic for governance",
          "_CLLUserManagement": "Address Contract Logic for user management",
          "_beaconCLH": "Address Beacon CLH Contract",
          "_ownerCLF": "Address Owner for this Contract",
          "_pxyApiCLH": "Address of pxyApiCLH Contract",
          "_pxyNFTInvitation": "Address of proxy Contract for NFT Invitation",
          "_pxyNFTManager": "Address of proxy Contract for NFT Manager",
          "_pxyNFTMember": "Address of proxy Contract for NFT Member"
        }
      },
      "UpdateCLHAPI(address)": {
        "notice": "Update the pxyApiCLH contract Address"
      },
      "UpdateCLLConstructorCLH(address)": {
        "notice": "Update the CLLConstructorCLH contract Address"
      },
      "UpdateCLLGovernance(address)": {
        "notice": "Update the CLLGovernance contract Address"
      },
      "UpdateCLLUserManagement(address)": {
        "notice": "Update the CLLUserManagement contract Address"
      },
      "beaconCLH()": {
        "notice": "Contract Object of the beacon (store the add)"
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getCLHImplementation()": {
        "notice": "Get the address of the CLH contract logic"
      },
      "mapCLH(uint256)": {
        "notice": "Mapping to store all the created houses"
      },
      "mapIdCLH(address)": {
        "notice": "Relation houseAddr with houseId"
      },
      "numCLH()": {
        "notice": "Store the number of houses created"
      },
      "ownerCLF()": {
        "notice": "Wallet address owner of the CLFactory"
      },
      "pxyApiCLH()": {
        "notice": "Proxy Contract to CLHouse API"
      },
      "pxyNFTAccessPass()": {
        "notice": "Contract Proxy of NFT AccessPass"
      },
      "pxyNFTInvitation()": {
        "notice": "Contract Proxy of NFT Invitation"
      },
      "pxyNFTManager()": {
        "notice": "Contract Proxy of NFT Manager"
      },
      "pxyNFTMember()": {
        "notice": "Contract Proxy of NFT Member"
      }
    },
    "notice": "Create and config CLHouses",
    "stateVariables": {
      "beaconCLH": {
        "details": "The beacon store the updated address of CLH"
      }
    },
    "title": "Crypto League House Factory",
    "version": 1
  },
  "offset": [
    533,
    8273
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH3 0x151 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x86BDFCAC GT PUSH3 0xC7 JUMPI DUP1 PUSH4 0xC1D4B9AE GT PUSH3 0x86 JUMPI DUP1 PUSH4 0xC1D4B9AE EQ PUSH3 0x2D9 JUMPI DUP1 PUSH4 0xC1E45428 EQ PUSH3 0x2ED JUMPI DUP1 PUSH4 0xC837F069 EQ PUSH3 0x304 JUMPI DUP1 PUSH4 0xD742063C EQ PUSH3 0x318 JUMPI DUP1 PUSH4 0xEE7A7D1B EQ PUSH3 0x32F JUMPI DUP1 PUSH4 0xF6F7A1B3 EQ PUSH3 0x339 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x86BDFCAC EQ PUSH3 0x25E JUMPI DUP1 PUSH4 0xA327AB69 EQ PUSH3 0x290 JUMPI DUP1 PUSH4 0xA34B8447 EQ PUSH3 0x2A4 JUMPI DUP1 PUSH4 0xA6B6ED3A EQ PUSH3 0x2BB JUMPI DUP1 PUSH4 0xC0828F63 EQ PUSH3 0x2C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x594034E3 GT PUSH3 0x114 JUMPI DUP1 PUSH4 0x594034E3 EQ PUSH3 0x1DF JUMPI DUP1 PUSH4 0x5E4A9DF8 EQ PUSH3 0x1F3 JUMPI DUP1 PUSH4 0x624D8774 EQ PUSH3 0x207 JUMPI DUP1 PUSH4 0x6FC68F94 EQ PUSH3 0x233 JUMPI DUP1 PUSH4 0x7B2DA764 EQ PUSH3 0x247 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x12534615 EQ PUSH3 0x156 JUMPI DUP1 PUSH4 0x2A13DE96 EQ PUSH3 0x187 JUMPI DUP1 PUSH4 0x4BC3959F EQ PUSH3 0x19B JUMPI DUP1 PUSH4 0x4C98122B EQ PUSH3 0x1B4 JUMPI DUP1 PUSH4 0x529382D5 EQ PUSH3 0x1CB JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x6 SLOAD PUSH3 0x16A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x5 SLOAD PUSH3 0x16A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH3 0x1B2 PUSH3 0x1AC CALLDATASIZE PUSH1 0x4 PUSH3 0xD84 JUMP JUMPDEST PUSH3 0x350 JUMP JUMPDEST STOP JUMPDEST PUSH3 0x1B2 PUSH3 0x1C5 CALLDATASIZE PUSH1 0x4 PUSH3 0xDAB JUMP JUMPDEST PUSH3 0x3F8 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH3 0x16A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH3 0x16A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH3 0x16A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH3 0x16A PUSH3 0x218 CALLDATASIZE PUSH1 0x4 PUSH3 0xE90 JUMP JUMPDEST PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH3 0x16A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH3 0x1B2 PUSH3 0x258 CALLDATASIZE PUSH1 0x4 PUSH3 0xF71 JUMP JUMPDEST PUSH3 0x712 JUMP JUMPDEST PUSH3 0x281 PUSH3 0x26F CALLDATASIZE PUSH1 0x4 PUSH3 0xD84 JUMP JUMPDEST PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x17E JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH3 0x16A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH3 0x1B2 PUSH3 0x2B5 CALLDATASIZE PUSH1 0x4 PUSH3 0xD84 JUMP JUMPDEST PUSH3 0xA42 JUMP JUMPDEST PUSH3 0x16A PUSH3 0xAFC JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH3 0x16A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH3 0x16A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH3 0x1B2 PUSH3 0x2FE CALLDATASIZE PUSH1 0x4 PUSH3 0xD84 JUMP JUMPDEST PUSH3 0xB72 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH3 0x16A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH3 0x1B2 PUSH3 0x329 CALLDATASIZE PUSH1 0x4 PUSH3 0xD84 JUMP JUMPDEST PUSH3 0xC12 JUMP JUMPDEST PUSH3 0x281 PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH3 0x1B2 PUSH3 0x34A CALLDATASIZE PUSH1 0x4 PUSH3 0xD84 JUMP JUMPDEST PUSH3 0xCAE JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH3 0x386 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x37D SWAP1 PUSH3 0x1048 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 MSTORE PUSH1 0x9 SWAP1 DUP3 ADD MSTORE PUSH9 0xE0F0F282E0D286989 PUSH1 0xBB SHL PUSH1 0x80 DUP3 ADD MSTORE SWAP4 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD DUP2 SWAP1 MSTORE SWAP2 DUP4 ADD MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x1B79 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0xA0 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH3 0x41B JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF DUP1 DUP4 AND SWAP2 AND LT JUMPDEST PUSH3 0x480 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x37D JUMP JUMPDEST DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP11 PUSH1 0x7 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP DUP10 PUSH1 0x6 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP DUP5 PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP DUP4 PUSH1 0x4 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP DUP3 PUSH1 0x2 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP DUP9 PUSH1 0x8 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP DUP8 PUSH1 0x9 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP DUP7 PUSH1 0xA PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP DUP6 PUSH1 0xB PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0xD PUSH1 0x0 PUSH1 0x1 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 SLOAD PUSH1 0xC PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x5 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 DUP2 PUSH1 0x40 MLOAD PUSH3 0x6FD SWAP2 SWAP1 PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH3 0x85D JUMPI DUP2 MLOAD PUSH1 0x41 EQ PUSH3 0x776 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x437265617465434C483A20426164207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x37D JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH4 0x44D72583 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x44D72583 SWAP1 PUSH3 0x7B4 SWAP1 DUP12 SWAP1 DUP12 SWAP1 DUP12 SWAP1 DUP12 SWAP1 DUP12 SWAP1 ADDRESS SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH3 0x10C3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x7D2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x7F8 SWAP2 SWAP1 PUSH3 0x1128 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH3 0x85A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x437265617465434C483A20496E76616C6964205369676E617475726500000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x37D JUMP JUMPDEST POP DUP2 JUMPDEST PUSH3 0x868 DUP2 PUSH3 0xA42 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE ADDRESS PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x6 SLOAD DUP2 AND DUP3 DUP5 ADD MSTORE PUSH1 0x8 SLOAD DUP2 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x9 SLOAD DUP2 AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA SLOAD DUP2 AND PUSH1 0xA0 DUP4 ADD MSTORE DUP8 DUP2 AND PUSH1 0xC0 DUP4 ADD MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP4 SWAP3 SWAP1 SWAP3 AND SWAP2 PUSH3 0x8DC SWAP2 DUP6 SWAP2 DUP14 SWAP2 DUP14 SWAP2 DUP14 SWAP2 DUP14 SWAP2 PUSH1 0x24 ADD PUSH3 0x1148 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x5B4587E1 PUSH1 0xE0 SHL OR SWAP1 MSTORE MLOAD PUSH3 0x912 SWAP1 PUSH3 0xD4E JUMP JUMPDEST PUSH3 0x91F SWAP3 SWAP2 SWAP1 PUSH3 0x11C5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x93C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 DUP1 SLOAD SWAP2 SWAP3 POP PUSH1 0x0 PUSH3 0x951 DUP4 PUSH3 0x11F3 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 DUP1 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP5 SLOAD DUP6 DUP6 MSTORE PUSH1 0xC SWAP1 SWAP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x8 SLOAD SWAP1 MLOAD PUSH4 0x650938DB PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP5 DUP3 AND PUSH1 0x24 DUP5 ADD MSTORE AND SWAP1 PUSH4 0xCA1271B6 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x9DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x9F4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH32 0x6510209152E59FEB0A7445A97B24BC79BFCB456CA1D8BFF1E4980536C4E8CABB DUP2 DUP11 PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH3 0xA2F SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x121D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xA8D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xAB3 SWAP2 SWAP1 PUSH3 0x1253 JUMP JUMPDEST PUSH3 0xAF9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x111BDB89DD081A185D99481058D8D95CDCC8139195 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x37D JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x5C60DA1B PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x5C60DA1B SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xB47 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xB6D SWAP2 SWAP1 PUSH3 0x1128 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH3 0xB9F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x37D SWAP1 PUSH3 0x1048 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x10D313155CD95C93585B9859D95B595B9D PUSH1 0x7A SHL PUSH1 0x80 DUP3 ADD MSTORE SWAP4 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD DUP2 SWAP1 MSTORE SWAP2 DUP4 ADD MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x1B79 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0xA0 ADD PUSH3 0x3EC JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH3 0xC3F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x37D SWAP1 PUSH3 0x1048 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH13 0x434C4C476F7665726E616E6365 PUSH1 0x98 SHL PUSH1 0x80 DUP3 ADD MSTORE SWAP4 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD DUP2 SWAP1 MSTORE SWAP2 DUP4 ADD MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x1B79 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0xA0 ADD PUSH3 0x3EC JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH3 0xCDB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x37D SWAP1 PUSH3 0x1048 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x86989886DEDCE6E8E4EAC6E8DEE486989 PUSH1 0x7B SHL PUSH1 0x80 DUP3 ADD MSTORE SWAP4 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD DUP2 SWAP1 MSTORE SWAP2 DUP4 ADD MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x1B79 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0xA0 ADD PUSH3 0x3EC JUMP JUMPDEST PUSH2 0x90B DUP1 PUSH3 0x126E DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0xAF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH3 0xD7F DUP2 PUSH3 0xD5C JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0xD97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH3 0xDA4 DUP2 PUSH3 0xD5C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x140 DUP12 DUP14 SUB SLT ISZERO PUSH3 0xDCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP11 CALLDATALOAD PUSH3 0xDD9 DUP2 PUSH3 0xD5C JUMP JUMPDEST SWAP10 POP PUSH1 0x20 DUP12 ADD CALLDATALOAD PUSH3 0xDEB DUP2 PUSH3 0xD5C JUMP JUMPDEST SWAP9 POP PUSH1 0x40 DUP12 ADD CALLDATALOAD PUSH3 0xDFD DUP2 PUSH3 0xD5C JUMP JUMPDEST SWAP8 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD PUSH3 0xE0F DUP2 PUSH3 0xD5C JUMP JUMPDEST SWAP7 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD PUSH3 0xE21 DUP2 PUSH3 0xD5C JUMP JUMPDEST SWAP6 POP PUSH1 0xA0 DUP12 ADD CALLDATALOAD PUSH3 0xE33 DUP2 PUSH3 0xD5C JUMP JUMPDEST SWAP5 POP PUSH1 0xC0 DUP12 ADD CALLDATALOAD PUSH3 0xE45 DUP2 PUSH3 0xD5C JUMP JUMPDEST SWAP4 POP PUSH1 0xE0 DUP12 ADD CALLDATALOAD PUSH3 0xE57 DUP2 PUSH3 0xD5C JUMP JUMPDEST SWAP3 POP PUSH2 0x100 DUP12 ADD CALLDATALOAD PUSH3 0xE6A DUP2 PUSH3 0xD5C JUMP JUMPDEST SWAP2 POP PUSH2 0x120 DUP12 ADD CALLDATALOAD PUSH3 0xE7D DUP2 PUSH3 0xD5C JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP12 SWAP2 SWAP5 SWAP8 SWAP11 POP SWAP3 SWAP6 SWAP9 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0xEA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP5 GT ISZERO PUSH3 0xEDE JUMPI PUSH3 0xEDE PUSH3 0xEAA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP6 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0xF09 JUMPI PUSH3 0xF09 PUSH3 0xEAA JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP1 SWAP4 POP DUP6 DUP2 MSTORE DUP7 DUP7 DUP7 ADD GT ISZERO PUSH3 0xF23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP6 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP8 DUP4 ADD ADD MSTORE POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH3 0xD7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0xF60 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0xDA4 DUP4 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH3 0xEC0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH3 0xF8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH3 0xFA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP11 ADD SWAP2 POP DUP11 PUSH1 0x1F DUP4 ADD SLT PUSH3 0xFBB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0xFCC DUP12 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH3 0xEC0 JUMP JUMPDEST SWAP9 POP PUSH3 0xFDC PUSH1 0x20 DUP12 ADD PUSH3 0xF3D JUMP JUMPDEST SWAP8 POP PUSH3 0xFEC PUSH1 0x40 DUP12 ADD PUSH3 0xF3D JUMP JUMPDEST SWAP7 POP PUSH1 0x60 DUP11 ADD CALLDATALOAD SWAP6 POP PUSH3 0x1003 PUSH1 0x80 DUP12 ADD PUSH3 0xD72 JUMP JUMPDEST SWAP5 POP PUSH3 0x1013 PUSH1 0xA0 DUP12 ADD PUSH3 0xD72 JUMP JUMPDEST SWAP4 POP PUSH1 0xC0 DUP11 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x102A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x1039 DUP11 DUP3 DUP12 ADD PUSH3 0xF4E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x27B7363C9027BBB732B91037B31021A623 PUSH1 0x79 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x109B JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH3 0x107D JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH3 0x10AE JUMPI PUSH1 0x0 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xE0 DUP2 MSTORE PUSH1 0x0 PUSH3 0x10D8 PUSH1 0xE0 DUP4 ADD DUP11 PUSH3 0x1073 JUMP JUMPDEST DUP9 ISZERO ISZERO PUSH1 0x20 DUP5 ADD MSTORE DUP8 ISZERO ISZERO PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD DUP8 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x80 DUP6 ADD MSTORE DUP6 AND PUSH1 0xA0 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0xC0 DUP5 ADD MSTORE PUSH3 0x111A DUP2 DUP6 PUSH3 0x1073 JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x113B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH3 0xDA4 DUP2 PUSH3 0xD5C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP3 MSTORE PUSH2 0x180 PUSH1 0x20 DUP1 DUP5 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP3 SWAP1 PUSH3 0x1172 DUP6 DUP5 ADD DUP12 PUSH3 0x1073 JUMP JUMPDEST SWAP4 POP DUP9 ISZERO ISZERO PUSH1 0x40 DUP7 ADD MSTORE DUP8 ISZERO ISZERO PUSH1 0x60 DUP7 ADD MSTORE DUP7 PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0xA0 DUP6 ADD SWAP3 POP DUP6 PUSH1 0x0 JUMPDEST PUSH1 0x7 DUP2 LT ISZERO PUSH3 0x11B5 JUMPI DUP2 MLOAD DUP5 AND DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0x1194 JUMP JUMPDEST POP POP POP POP POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH3 0x11EB SWAP1 DUP4 ADD DUP5 PUSH3 0x1073 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH3 0x1216 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH3 0x1243 SWAP1 DUP4 ADD DUP6 PUSH3 0x1073 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1266 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x90B CODESIZE SUB DUP1 PUSH2 0x90B DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x467 JUMP JUMPDEST DUP2 DUP2 PUSH2 0x3D DUP3 DUP3 PUSH1 0x0 PUSH2 0x46 JUMP JUMPDEST POP POP POP POP PUSH2 0x591 JUMP JUMPDEST PUSH2 0x4F DUP4 PUSH2 0x111 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH32 0x1CF3B03A6CF19FA2BABA4DF148E9DCABEDEA7F8A5C07840E207E5C089BE95D3E SWAP1 PUSH1 0x0 SWAP1 LOG2 PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x90 JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0x10C JUMPI PUSH2 0x10A DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5C60DA1B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFA SWAP2 SWAP1 PUSH2 0x527 JUMP JUMPDEST DUP4 PUSH2 0x2B4 PUSH1 0x20 SHL PUSH2 0x29 OR PUSH1 0x20 SHR JUMP JUMPDEST POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x124 DUP2 PUSH2 0x2E0 PUSH1 0x20 SHL PUSH2 0x55 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x183 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720626561636F6E206973206E6F74206120636F6E PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x1D1C9858DD PUSH1 0xDA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1F7 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5C60DA1B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1C4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E8 SWAP2 SWAP1 PUSH2 0x527 JUMP JUMPDEST PUSH2 0x2E0 PUSH1 0x20 SHL PUSH2 0x55 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x25C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A20626561636F6E20696D706C656D656E746174696F6E2069 PUSH1 0x44 DUP3 ADD MSTORE PUSH16 0x1CC81B9BDD08184818DBDB9D1C9858DD PUSH1 0x82 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x17A JUMP JUMPDEST DUP1 PUSH2 0x293 PUSH32 0xA3F0AD74E5423AEBFD80D3EF4346578335A9A72AEAEE59FF6CB3582B35133D50 PUSH1 0x0 SHL PUSH2 0x2EF PUSH1 0x20 SHL PUSH2 0x64 OR PUSH1 0x20 SHR JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2D9 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8E4 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x2F2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE PUSH2 0x35A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x17A JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x375 SWAP2 SWAP1 PUSH2 0x542 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3B0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3B5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x3C6 DUP3 DUP3 DUP7 PUSH2 0x3D0 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x3DF JUMPI POP DUP2 PUSH2 0x2D9 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x3EF JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17A SWAP2 SWAP1 PUSH2 0x55E JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x420 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x456 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x43E JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x10A JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x47A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x483 DUP4 PUSH2 0x409 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x4A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x4C6 JUMPI PUSH2 0x4C6 PUSH2 0x425 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x4EE JUMPI PUSH2 0x4EE PUSH2 0x425 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x507 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x518 DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x43B JUMP JUMPDEST DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x539 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2D9 DUP3 PUSH2 0x409 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x554 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x43B JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x57D DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x43B JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x344 DUP1 PUSH2 0x5A0 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE PUSH2 0x13 JUMPI PUSH2 0x11 PUSH2 0x17 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x11 JUMPDEST PUSH2 0x27 PUSH2 0x22 PUSH2 0x67 JUMP JUMPDEST PUSH2 0x100 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4E DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2E8 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x124 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9A PUSH32 0xA3F0AD74E5423AEBFD80D3EF4346578335A9A72AEAEE59FF6CB3582B35133D50 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5C60DA1B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x23F JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 DUP1 ISZERO PUSH2 0x11F JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE PUSH2 0x191 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x1AC SWAP2 SWAP1 PUSH2 0x298 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1E7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1EC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1FC DUP3 DUP3 DUP7 PUSH2 0x206 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x215 JUMPI POP DUP2 PUSH2 0x4E JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x225 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x188 SWAP2 SWAP1 PUSH2 0x2B4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x251 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x283 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x26B JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x292 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2AA DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x268 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2D3 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x268 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x70667358221220076597 0xD2 0x21 PUSH31 0xF849E290EDF67701D6B6F2ACBA1FEFFB45A8E109398165817C1764736F6C63 NUMBER STOP ADDMOD 0xC STOP CALLER COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C65648068 LOG2 0x23 0xBC CODESIZE MSTORE SWAP9 PUSH5 0x701ED6F372 0x29 PUSH14 0x3ECB2AA9AFFE6C91CF94E2AE6DD5 PUSH24 0xC8A2646970667358221220428A29D617508FACB12F3405B2 0xE5 STATICCALL DUP16 0xD8 PUSH12 0x7FEC2777EC077F220803E1E3 0xC7 0xE7 PUSH5 0x736F6C6343 STOP ADDMOD 0xC STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        533,
        8273
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "5": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "CALLVALUE",
      "path": "20"
    },
    "6": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "DUP1",
      "path": "20"
    },
    "7": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "8": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x11"
    },
    "12": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "13": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "15": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "DUP1",
      "path": "20"
    },
    "16": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "REVERT",
      "path": "20"
    },
    "17": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "18": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "POP",
      "path": "20"
    },
    "19": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "21": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "CALLDATASIZE",
      "path": "20"
    },
    "22": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "LT",
      "path": "20"
    },
    "23": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x151"
    },
    "27": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "28": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "30": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "CALLDATALOAD",
      "path": "20"
    },
    "31": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0xE0"
    },
    "33": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "SHR",
      "path": "20"
    },
    "34": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "DUP1",
      "path": "20"
    },
    "35": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0x86BDFCAC"
    },
    "40": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "GT",
      "path": "20"
    },
    "41": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0xC7"
    },
    "45": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "46": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "DUP1",
      "path": "20"
    },
    "47": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xC1D4B9AE"
    },
    "52": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "GT",
      "path": "20"
    },
    "53": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x86"
    },
    "57": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "58": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "DUP1",
      "path": "20"
    },
    "59": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xC1D4B9AE"
    },
    "64": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "EQ",
      "path": "20"
    },
    "65": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x2D9"
    },
    "69": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "70": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "DUP1",
      "path": "20"
    },
    "71": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xC1E45428"
    },
    "76": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "EQ",
      "path": "20"
    },
    "77": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x2ED"
    },
    "81": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "82": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "DUP1",
      "path": "20"
    },
    "83": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xC837F069"
    },
    "88": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "EQ",
      "path": "20"
    },
    "89": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x304"
    },
    "93": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "94": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "DUP1",
      "path": "20"
    },
    "95": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xD742063C"
    },
    "100": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "EQ",
      "path": "20"
    },
    "101": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x318"
    },
    "105": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "106": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "DUP1",
      "path": "20"
    },
    "107": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xEE7A7D1B"
    },
    "112": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "EQ",
      "path": "20"
    },
    "113": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x32F"
    },
    "117": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "118": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "DUP1",
      "path": "20"
    },
    "119": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xF6F7A1B3"
    },
    "124": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "EQ",
      "path": "20"
    },
    "125": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x339"
    },
    "129": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "130": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "132": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "DUP1",
      "path": "20"
    },
    "133": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "REVERT",
      "path": "20"
    },
    "134": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "135": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "DUP1",
      "path": "20"
    },
    "136": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0x86BDFCAC"
    },
    "141": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "EQ",
      "path": "20"
    },
    "142": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x25E"
    },
    "146": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "147": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "DUP1",
      "path": "20"
    },
    "148": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xA327AB69"
    },
    "153": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "EQ",
      "path": "20"
    },
    "154": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x290"
    },
    "158": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "159": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "DUP1",
      "path": "20"
    },
    "160": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xA34B8447"
    },
    "165": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "EQ",
      "path": "20"
    },
    "166": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x2A4"
    },
    "170": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "171": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "DUP1",
      "path": "20"
    },
    "172": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xA6B6ED3A"
    },
    "177": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "EQ",
      "path": "20"
    },
    "178": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x2BB"
    },
    "182": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "183": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "DUP1",
      "path": "20"
    },
    "184": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xC0828F63"
    },
    "189": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "EQ",
      "path": "20"
    },
    "190": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x2C5"
    },
    "194": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "195": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "197": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "DUP1",
      "path": "20"
    },
    "198": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "REVERT",
      "path": "20"
    },
    "199": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "200": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "DUP1",
      "path": "20"
    },
    "201": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0x594034E3"
    },
    "206": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "GT",
      "path": "20"
    },
    "207": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x114"
    },
    "211": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "212": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "DUP1",
      "path": "20"
    },
    "213": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0x594034E3"
    },
    "218": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "EQ",
      "path": "20"
    },
    "219": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x1DF"
    },
    "223": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "224": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "DUP1",
      "path": "20"
    },
    "225": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0x5E4A9DF8"
    },
    "230": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "EQ",
      "path": "20"
    },
    "231": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x1F3"
    },
    "235": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "236": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "DUP1",
      "path": "20"
    },
    "237": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0x624D8774"
    },
    "242": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "EQ",
      "path": "20"
    },
    "243": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x207"
    },
    "247": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "248": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "DUP1",
      "path": "20"
    },
    "249": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0x6FC68F94"
    },
    "254": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "EQ",
      "path": "20"
    },
    "255": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x233"
    },
    "259": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "260": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "DUP1",
      "path": "20"
    },
    "261": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0x7B2DA764"
    },
    "266": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "EQ",
      "path": "20"
    },
    "267": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x247"
    },
    "271": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "272": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "274": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "DUP1",
      "path": "20"
    },
    "275": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "REVERT",
      "path": "20"
    },
    "276": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "277": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "DUP1",
      "path": "20"
    },
    "278": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0x12534615"
    },
    "283": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "EQ",
      "path": "20"
    },
    "284": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x156"
    },
    "288": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "289": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "DUP1",
      "path": "20"
    },
    "290": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0x2A13DE96"
    },
    "295": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "EQ",
      "path": "20"
    },
    "296": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x187"
    },
    "300": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "301": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "DUP1",
      "path": "20"
    },
    "302": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0x4BC3959F"
    },
    "307": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "EQ",
      "path": "20"
    },
    "308": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x19B"
    },
    "312": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "313": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "DUP1",
      "path": "20"
    },
    "314": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0x4C98122B"
    },
    "319": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "EQ",
      "path": "20"
    },
    "320": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x1B4"
    },
    "324": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "325": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "DUP1",
      "path": "20"
    },
    "326": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0x529382D5"
    },
    "331": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "EQ",
      "path": "20"
    },
    "332": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x1CB"
    },
    "336": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "337": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "338": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "340": {
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "DUP1",
      "path": "20"
    },
    "341": {
      "first_revert": true,
      "fn": null,
      "offset": [
        533,
        8273
      ],
      "op": "REVERT",
      "path": "20"
    },
    "342": {
      "offset": [
        1088,
        1115
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "343": {
      "fn": null,
      "offset": [
        1088,
        1115
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x6"
    },
    "345": {
      "fn": null,
      "offset": [
        1088,
        1115
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "346": {
      "fn": null,
      "offset": [
        1088,
        1115
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x16A"
    },
    "350": {
      "fn": null,
      "offset": [
        1088,
        1115
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "351": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "353": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "355": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "357": {
      "op": "SHL"
    },
    "358": {
      "op": "SUB"
    },
    "359": {
      "offset": [
        1088,
        1115
      ],
      "op": "AND",
      "path": "20"
    },
    "360": {
      "fn": null,
      "offset": [
        1088,
        1115
      ],
      "op": "DUP2",
      "path": "20"
    },
    "361": {
      "fn": null,
      "offset": [
        1088,
        1115
      ],
      "op": "JUMP",
      "path": "20"
    },
    "362": {
      "fn": null,
      "offset": [
        1088,
        1115
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "363": {
      "fn": null,
      "offset": [
        1088,
        1115
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "365": {
      "fn": null,
      "offset": [
        1088,
        1115
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "366": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "368": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "370": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "372": {
      "op": "SHL"
    },
    "373": {
      "op": "SUB"
    },
    "374": {
      "op": "SWAP1"
    },
    "375": {
      "op": "SWAP2"
    },
    "376": {
      "op": "AND"
    },
    "377": {
      "op": "DUP2"
    },
    "378": {
      "op": "MSTORE"
    },
    "379": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "381": {
      "op": "ADD"
    },
    "382": {
      "offset": [
        1088,
        1115
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "383": {
      "fn": null,
      "offset": [
        1088,
        1115
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "385": {
      "fn": null,
      "offset": [
        1088,
        1115
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "386": {
      "fn": null,
      "offset": [
        1088,
        1115
      ],
      "op": "DUP1",
      "path": "20"
    },
    "387": {
      "fn": null,
      "offset": [
        1088,
        1115
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "388": {
      "fn": null,
      "offset": [
        1088,
        1115
      ],
      "op": "SUB",
      "path": "20"
    },
    "389": {
      "fn": null,
      "offset": [
        1088,
        1115
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "390": {
      "fn": null,
      "offset": [
        1088,
        1115
      ],
      "op": "RETURN",
      "path": "20"
    },
    "391": {
      "offset": [
        1012,
        1035
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "392": {
      "fn": null,
      "offset": [
        1012,
        1035
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x5"
    },
    "394": {
      "fn": null,
      "offset": [
        1012,
        1035
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "395": {
      "fn": null,
      "offset": [
        1012,
        1035
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x16A"
    },
    "399": {
      "fn": null,
      "offset": [
        1012,
        1035
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "400": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "402": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "404": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "406": {
      "op": "SHL"
    },
    "407": {
      "op": "SUB"
    },
    "408": {
      "offset": [
        1012,
        1035
      ],
      "op": "AND",
      "path": "20"
    },
    "409": {
      "fn": null,
      "offset": [
        1012,
        1035
      ],
      "op": "DUP2",
      "path": "20"
    },
    "410": {
      "fn": null,
      "offset": [
        1012,
        1035
      ],
      "op": "JUMP",
      "path": "20"
    },
    "411": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8044,
        8271
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "412": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8044,
        8271
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x1B2"
    },
    "416": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8044,
        8271
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x1AC"
    },
    "420": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8044,
        8271
      ],
      "op": "CALLDATASIZE",
      "path": "20"
    },
    "421": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8044,
        8271
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "423": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8044,
        8271
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0xD84"
    },
    "427": {
      "fn": "CLFactory.UpdateCLHAPI",
      "jump": "i",
      "offset": [
        8044,
        8271
      ],
      "op": "JUMP",
      "path": "20"
    },
    "428": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8044,
        8271
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "429": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8044,
        8271
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x350"
    },
    "433": {
      "fn": "CLFactory.UpdateCLHAPI",
      "jump": "i",
      "offset": [
        8044,
        8271
      ],
      "op": "JUMP",
      "path": "20"
    },
    "434": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8044,
        8271
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "435": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8044,
        8271
      ],
      "op": "STOP",
      "path": "20"
    },
    "436": {
      "fn": "CLFactory.Init",
      "offset": [
        3445,
        4463
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "437": {
      "fn": "CLFactory.Init",
      "offset": [
        3445,
        4463
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x1B2"
    },
    "441": {
      "fn": "CLFactory.Init",
      "offset": [
        3445,
        4463
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x1C5"
    },
    "445": {
      "fn": "CLFactory.Init",
      "offset": [
        3445,
        4463
      ],
      "op": "CALLDATASIZE",
      "path": "20"
    },
    "446": {
      "fn": "CLFactory.Init",
      "offset": [
        3445,
        4463
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "448": {
      "fn": "CLFactory.Init",
      "offset": [
        3445,
        4463
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0xDAB"
    },
    "452": {
      "fn": "CLFactory.Init",
      "jump": "i",
      "offset": [
        3445,
        4463
      ],
      "op": "JUMP",
      "path": "20"
    },
    "453": {
      "fn": "CLFactory.Init",
      "offset": [
        3445,
        4463
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "454": {
      "fn": "CLFactory.Init",
      "offset": [
        3445,
        4463
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x3F8"
    },
    "458": {
      "fn": "CLFactory.Init",
      "jump": "i",
      "offset": [
        3445,
        4463
      ],
      "op": "JUMP",
      "path": "20"
    },
    "459": {
      "offset": [
        825,
        857
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "460": {
      "fn": "CLFactory.Init",
      "offset": [
        825,
        857
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x3"
    },
    "462": {
      "fn": "CLFactory.Init",
      "offset": [
        825,
        857
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "463": {
      "fn": "CLFactory.Init",
      "offset": [
        825,
        857
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x16A"
    },
    "467": {
      "fn": "CLFactory.Init",
      "offset": [
        825,
        857
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "468": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "470": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "472": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "474": {
      "op": "SHL"
    },
    "475": {
      "op": "SUB"
    },
    "476": {
      "offset": [
        825,
        857
      ],
      "op": "AND",
      "path": "20"
    },
    "477": {
      "fn": "CLFactory.Init",
      "offset": [
        825,
        857
      ],
      "op": "DUP2",
      "path": "20"
    },
    "478": {
      "fn": "CLFactory.Init",
      "offset": [
        825,
        857
      ],
      "op": "JUMP",
      "path": "20"
    },
    "479": {
      "offset": [
        722,
        754
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "480": {
      "fn": "CLFactory.Init",
      "offset": [
        722,
        754
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x2"
    },
    "482": {
      "fn": "CLFactory.Init",
      "offset": [
        722,
        754
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "483": {
      "fn": "CLFactory.Init",
      "offset": [
        722,
        754
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x16A"
    },
    "487": {
      "fn": "CLFactory.Init",
      "offset": [
        722,
        754
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "488": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "490": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "492": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "494": {
      "op": "SHL"
    },
    "495": {
      "op": "SUB"
    },
    "496": {
      "offset": [
        722,
        754
      ],
      "op": "AND",
      "path": "20"
    },
    "497": {
      "fn": "CLFactory.Init",
      "offset": [
        722,
        754
      ],
      "op": "DUP2",
      "path": "20"
    },
    "498": {
      "fn": "CLFactory.Init",
      "offset": [
        722,
        754
      ],
      "op": "JUMP",
      "path": "20"
    },
    "499": {
      "offset": [
        1484,
        1514
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "500": {
      "fn": "CLFactory.Init",
      "offset": [
        1484,
        1514
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0xA"
    },
    "502": {
      "fn": "CLFactory.Init",
      "offset": [
        1484,
        1514
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "503": {
      "fn": "CLFactory.Init",
      "offset": [
        1484,
        1514
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x16A"
    },
    "507": {
      "fn": "CLFactory.Init",
      "offset": [
        1484,
        1514
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "508": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "510": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "512": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "514": {
      "op": "SHL"
    },
    "515": {
      "op": "SUB"
    },
    "516": {
      "offset": [
        1484,
        1514
      ],
      "op": "AND",
      "path": "20"
    },
    "517": {
      "fn": "CLFactory.Init",
      "offset": [
        1484,
        1514
      ],
      "op": "DUP2",
      "path": "20"
    },
    "518": {
      "fn": "CLFactory.Init",
      "offset": [
        1484,
        1514
      ],
      "op": "JUMP",
      "path": "20"
    },
    "519": {
      "offset": [
        1767,
        1811
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "520": {
      "fn": "CLFactory.Init",
      "offset": [
        1767,
        1811
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x16A"
    },
    "524": {
      "fn": "CLFactory.Init",
      "offset": [
        1767,
        1811
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x218"
    },
    "528": {
      "fn": "CLFactory.Init",
      "offset": [
        1767,
        1811
      ],
      "op": "CALLDATASIZE",
      "path": "20"
    },
    "529": {
      "fn": "CLFactory.Init",
      "offset": [
        1767,
        1811
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "531": {
      "fn": "CLFactory.Init",
      "offset": [
        1767,
        1811
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0xE90"
    },
    "535": {
      "fn": "CLFactory.Init",
      "jump": "i",
      "offset": [
        1767,
        1811
      ],
      "op": "JUMP",
      "path": "20"
    },
    "536": {
      "fn": "CLFactory.Init",
      "offset": [
        1767,
        1811
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "537": {
      "fn": "CLFactory.Init",
      "offset": [
        1767,
        1811
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0xD"
    },
    "539": {
      "fn": "CLFactory.Init",
      "offset": [
        1767,
        1811
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "541": {
      "fn": "CLFactory.Init",
      "offset": [
        1767,
        1811
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "542": {
      "fn": "CLFactory.Init",
      "offset": [
        1767,
        1811
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "544": {
      "fn": "CLFactory.Init",
      "offset": [
        1767,
        1811
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "545": {
      "fn": "CLFactory.Init",
      "offset": [
        1767,
        1811
      ],
      "op": "DUP2",
      "path": "20"
    },
    "546": {
      "fn": "CLFactory.Init",
      "offset": [
        1767,
        1811
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "547": {
      "fn": "CLFactory.Init",
      "offset": [
        1767,
        1811
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "549": {
      "fn": "CLFactory.Init",
      "offset": [
        1767,
        1811
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "550": {
      "fn": "CLFactory.Init",
      "offset": [
        1767,
        1811
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "551": {
      "fn": "CLFactory.Init",
      "offset": [
        1767,
        1811
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "552": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "554": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "556": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "558": {
      "op": "SHL"
    },
    "559": {
      "op": "SUB"
    },
    "560": {
      "offset": [
        1767,
        1811
      ],
      "op": "AND",
      "path": "20"
    },
    "561": {
      "fn": "CLFactory.Init",
      "offset": [
        1767,
        1811
      ],
      "op": "DUP2",
      "path": "20"
    },
    "562": {
      "fn": "CLFactory.Init",
      "offset": [
        1767,
        1811
      ],
      "op": "JUMP",
      "path": "20"
    },
    "563": {
      "offset": [
        1323,
        1350
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "564": {
      "fn": "CLFactory.Init",
      "offset": [
        1323,
        1350
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x8"
    },
    "566": {
      "fn": "CLFactory.Init",
      "offset": [
        1323,
        1350
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "567": {
      "fn": "CLFactory.Init",
      "offset": [
        1323,
        1350
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x16A"
    },
    "571": {
      "fn": "CLFactory.Init",
      "offset": [
        1323,
        1350
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "572": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "574": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "576": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "578": {
      "op": "SHL"
    },
    "579": {
      "op": "SUB"
    },
    "580": {
      "offset": [
        1323,
        1350
      ],
      "op": "AND",
      "path": "20"
    },
    "581": {
      "fn": "CLFactory.Init",
      "offset": [
        1323,
        1350
      ],
      "op": "DUP2",
      "path": "20"
    },
    "582": {
      "fn": "CLFactory.Init",
      "offset": [
        1323,
        1350
      ],
      "op": "JUMP",
      "path": "20"
    },
    "583": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4966,
        6850
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "584": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4966,
        6850
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x1B2"
    },
    "588": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4966,
        6850
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x258"
    },
    "592": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4966,
        6850
      ],
      "op": "CALLDATASIZE",
      "path": "20"
    },
    "593": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4966,
        6850
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "595": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4966,
        6850
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0xF71"
    },
    "599": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        4966,
        6850
      ],
      "op": "JUMP",
      "path": "20"
    },
    "600": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4966,
        6850
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "601": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4966,
        6850
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x712"
    },
    "605": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        4966,
        6850
      ],
      "op": "JUMP",
      "path": "20"
    },
    "606": {
      "offset": [
        1655,
        1700
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "607": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        1655,
        1700
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x281"
    },
    "611": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        1655,
        1700
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x26F"
    },
    "615": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        1655,
        1700
      ],
      "op": "CALLDATASIZE",
      "path": "20"
    },
    "616": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        1655,
        1700
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "618": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        1655,
        1700
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0xD84"
    },
    "622": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        1655,
        1700
      ],
      "op": "JUMP",
      "path": "20"
    },
    "623": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        1655,
        1700
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "624": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        1655,
        1700
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0xC"
    },
    "626": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        1655,
        1700
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "628": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        1655,
        1700
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "629": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        1655,
        1700
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "631": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        1655,
        1700
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "632": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        1655,
        1700
      ],
      "op": "DUP2",
      "path": "20"
    },
    "633": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        1655,
        1700
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "634": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        1655,
        1700
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "636": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        1655,
        1700
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "637": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        1655,
        1700
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "638": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        1655,
        1700
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "639": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        1655,
        1700
      ],
      "op": "DUP2",
      "path": "20"
    },
    "640": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        1655,
        1700
      ],
      "op": "JUMP",
      "path": "20"
    },
    "641": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        1655,
        1700
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "642": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        1655,
        1700
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "644": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        1655,
        1700
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "645": {
      "op": "SWAP1"
    },
    "646": {
      "op": "DUP2"
    },
    "647": {
      "op": "MSTORE"
    },
    "648": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "650": {
      "op": "ADD"
    },
    "651": {
      "offset": [
        1655,
        1700
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x17E"
    },
    "655": {
      "op": "JUMP"
    },
    "656": {
      "offset": [
        923,
        951
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "657": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        923,
        951
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "659": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        923,
        951
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "660": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        923,
        951
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x16A"
    },
    "664": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        923,
        951
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "665": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "667": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "669": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "671": {
      "op": "SHL"
    },
    "672": {
      "op": "SUB"
    },
    "673": {
      "offset": [
        923,
        951
      ],
      "op": "AND",
      "path": "20"
    },
    "674": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        923,
        951
      ],
      "op": "DUP2",
      "path": "20"
    },
    "675": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        923,
        951
      ],
      "op": "JUMP",
      "path": "20"
    },
    "676": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2506,
        2652
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "677": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2506,
        2652
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x1B2"
    },
    "681": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2506,
        2652
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x2B5"
    },
    "685": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2506,
        2652
      ],
      "op": "CALLDATASIZE",
      "path": "20"
    },
    "686": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2506,
        2652
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "688": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2506,
        2652
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0xD84"
    },
    "692": {
      "fn": "CLFactory.checkAccessNFT",
      "jump": "i",
      "offset": [
        2506,
        2652
      ],
      "op": "JUMP",
      "path": "20"
    },
    "693": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2506,
        2652
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "694": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2506,
        2652
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0xA42"
    },
    "698": {
      "fn": "CLFactory.checkAccessNFT",
      "jump": "i",
      "offset": [
        2506,
        2652
      ],
      "op": "JUMP",
      "path": "20"
    },
    "699": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6915,
        7029
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "700": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6915,
        7029
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x16A"
    },
    "704": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6915,
        7029
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0xAFC"
    },
    "708": {
      "fn": "CLFactory.getCLHImplementation",
      "jump": "i",
      "offset": [
        6915,
        7029
      ],
      "op": "JUMP",
      "path": "20"
    },
    "709": {
      "offset": [
        1241,
        1266
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "710": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        1241,
        1266
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x7"
    },
    "712": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        1241,
        1266
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "713": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        1241,
        1266
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x16A"
    },
    "717": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        1241,
        1266
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "718": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "720": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "722": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "724": {
      "op": "SHL"
    },
    "725": {
      "op": "SUB"
    },
    "726": {
      "offset": [
        1241,
        1266
      ],
      "op": "AND",
      "path": "20"
    },
    "727": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        1241,
        1266
      ],
      "op": "DUP2",
      "path": "20"
    },
    "728": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        1241,
        1266
      ],
      "op": "JUMP",
      "path": "20"
    },
    "729": {
      "offset": [
        1570,
        1600
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "730": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        1570,
        1600
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0xB"
    },
    "732": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        1570,
        1600
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "733": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        1570,
        1600
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x16A"
    },
    "737": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        1570,
        1600
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "738": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "740": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "742": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "744": {
      "op": "SHL"
    },
    "745": {
      "op": "SUB"
    },
    "746": {
      "offset": [
        1570,
        1600
      ],
      "op": "AND",
      "path": "20"
    },
    "747": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        1570,
        1600
      ],
      "op": "DUP2",
      "path": "20"
    },
    "748": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        1570,
        1600
      ],
      "op": "JUMP",
      "path": "20"
    },
    "749": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        7426,
        7687
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "750": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        7426,
        7687
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x1B2"
    },
    "754": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        7426,
        7687
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x2FE"
    },
    "758": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        7426,
        7687
      ],
      "op": "CALLDATASIZE",
      "path": "20"
    },
    "759": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        7426,
        7687
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "761": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        7426,
        7687
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0xD84"
    },
    "765": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "jump": "i",
      "offset": [
        7426,
        7687
      ],
      "op": "JUMP",
      "path": "20"
    },
    "766": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        7426,
        7687
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "767": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        7426,
        7687
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0xB72"
    },
    "771": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "jump": "i",
      "offset": [
        7426,
        7687
      ],
      "op": "JUMP",
      "path": "20"
    },
    "772": {
      "offset": [
        1402,
        1428
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "773": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        1402,
        1428
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x9"
    },
    "775": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        1402,
        1428
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "776": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        1402,
        1428
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x16A"
    },
    "780": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        1402,
        1428
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "781": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "783": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "785": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "787": {
      "op": "SHL"
    },
    "788": {
      "op": "SUB"
    },
    "789": {
      "offset": [
        1402,
        1428
      ],
      "op": "AND",
      "path": "20"
    },
    "790": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        1402,
        1428
      ],
      "op": "DUP2",
      "path": "20"
    },
    "791": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        1402,
        1428
      ],
      "op": "JUMP",
      "path": "20"
    },
    "792": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7751,
        7984
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "793": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7751,
        7984
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x1B2"
    },
    "797": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7751,
        7984
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x329"
    },
    "801": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7751,
        7984
      ],
      "op": "CALLDATASIZE",
      "path": "20"
    },
    "802": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7751,
        7984
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "804": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7751,
        7984
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0xD84"
    },
    "808": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "jump": "i",
      "offset": [
        7751,
        7984
      ],
      "op": "JUMP",
      "path": "20"
    },
    "809": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7751,
        7984
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "810": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7751,
        7984
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0xC12"
    },
    "814": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "jump": "i",
      "offset": [
        7751,
        7984
      ],
      "op": "JUMP",
      "path": "20"
    },
    "815": {
      "offset": [
        638,
        659
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "816": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        638,
        659
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x281"
    },
    "820": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        638,
        659
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x1"
    },
    "822": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        638,
        659
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "823": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        638,
        659
      ],
      "op": "DUP2",
      "path": "20"
    },
    "824": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        638,
        659
      ],
      "op": "JUMP",
      "path": "20"
    },
    "825": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        7097,
        7358
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "826": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        7097,
        7358
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x1B2"
    },
    "830": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        7097,
        7358
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x34A"
    },
    "834": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        7097,
        7358
      ],
      "op": "CALLDATASIZE",
      "path": "20"
    },
    "835": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        7097,
        7358
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "837": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        7097,
        7358
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0xD84"
    },
    "841": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "jump": "i",
      "offset": [
        7097,
        7358
      ],
      "op": "JUMP",
      "path": "20"
    },
    "842": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        7097,
        7358
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "843": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        7097,
        7358
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0xCAE"
    },
    "847": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "jump": "i",
      "offset": [
        7097,
        7358
      ],
      "op": "JUMP",
      "path": "20"
    },
    "848": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8044,
        8271
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "849": {
      "offset": [
        2451,
        2459
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x5"
    },
    "851": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        2451,
        2459
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "852": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "854": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "856": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "858": {
      "op": "SHL"
    },
    "859": {
      "op": "SUB"
    },
    "860": {
      "offset": [
        2451,
        2459
      ],
      "op": "AND",
      "path": "20"
    },
    "861": {
      "offset": [
        2437,
        2447
      ],
      "op": "CALLER",
      "path": "20"
    },
    "862": {
      "offset": [
        2437,
        2459
      ],
      "op": "EQ",
      "path": "20"
    },
    "863": {
      "offset": [
        2428,
        2482
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x386"
    },
    "867": {
      "offset": [
        2428,
        2482
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "868": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        2428,
        2482
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "870": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        2428,
        2482
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "871": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "875": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "877": {
      "op": "SHL"
    },
    "878": {
      "offset": [
        2428,
        2482
      ],
      "op": "DUP2",
      "path": "20"
    },
    "879": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        2428,
        2482
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "880": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        2428,
        2482
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "882": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        2428,
        2482
      ],
      "op": "ADD",
      "path": "20"
    },
    "883": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        2428,
        2482
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x37D"
    },
    "887": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        2428,
        2482
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "888": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        2428,
        2482
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x1048"
    },
    "892": {
      "fn": "CLFactory.UpdateCLHAPI",
      "jump": "i",
      "offset": [
        2428,
        2482
      ],
      "op": "JUMP",
      "path": "20"
    },
    "893": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        2428,
        2482
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "894": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        2428,
        2482
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "896": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        2428,
        2482
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "897": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        2428,
        2482
      ],
      "op": "DUP1",
      "path": "20"
    },
    "898": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        2428,
        2482
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "899": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        2428,
        2482
      ],
      "op": "SUB",
      "path": "20"
    },
    "900": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        2428,
        2482
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "901": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        2428,
        2482
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "20"
    },
    "902": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        2428,
        2482
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "903": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8144,
        8153
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x6"
    },
    "905": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8144,
        8153
      ],
      "op": "DUP1",
      "path": "20"
    },
    "906": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8144,
        8153
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "907": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "909": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "911": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "913": {
      "op": "SHL"
    },
    "914": {
      "op": "SUB"
    },
    "915": {
      "op": "NOT"
    },
    "916": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8165,
        8201
      ],
      "op": "DUP2",
      "path": "20",
      "statement": 0
    },
    "917": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8165,
        8201
      ],
      "op": "AND",
      "path": "20"
    },
    "918": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "920": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "922": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "924": {
      "op": "SHL"
    },
    "925": {
      "op": "SUB"
    },
    "926": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8165,
        8201
      ],
      "op": "DUP5",
      "path": "20"
    },
    "927": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8165,
        8201
      ],
      "op": "DUP2",
      "path": "20"
    },
    "928": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8165,
        8201
      ],
      "op": "AND",
      "path": "20"
    },
    "929": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8165,
        8201
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "930": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8165,
        8201
      ],
      "op": "DUP3",
      "path": "20"
    },
    "931": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8165,
        8201
      ],
      "op": "OR",
      "path": "20"
    },
    "932": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8165,
        8201
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "933": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8165,
        8201
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "934": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8165,
        8201
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "935": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8216,
        8264
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 1,
      "value": "0x40"
    },
    "937": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8216,
        8264
      ],
      "op": "DUP1",
      "path": "20"
    },
    "938": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8216,
        8264
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "939": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "941": {
      "op": "DUP1"
    },
    "942": {
      "op": "DUP3"
    },
    "943": {
      "op": "MSTORE"
    },
    "944": {
      "op": "PUSH1",
      "value": "0x9"
    },
    "946": {
      "op": "SWAP1"
    },
    "947": {
      "op": "DUP3"
    },
    "948": {
      "op": "ADD"
    },
    "949": {
      "op": "MSTORE"
    },
    "950": {
      "op": "PUSH9",
      "value": "0xE0F0F282E0D286989"
    },
    "960": {
      "op": "PUSH1",
      "value": "0xBB"
    },
    "962": {
      "op": "SHL"
    },
    "963": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "965": {
      "op": "DUP3"
    },
    "966": {
      "op": "ADD"
    },
    "967": {
      "op": "MSTORE"
    },
    "968": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8144,
        8153
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "969": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8144,
        8153
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "970": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8144,
        8153
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "971": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8144,
        8153
      ],
      "op": "AND",
      "path": "20"
    },
    "972": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "974": {
      "op": "DUP5"
    },
    "975": {
      "op": "ADD"
    },
    "976": {
      "op": "DUP2"
    },
    "977": {
      "op": "SWAP1"
    },
    "978": {
      "op": "MSTORE"
    },
    "979": {
      "op": "SWAP2"
    },
    "980": {
      "op": "DUP4"
    },
    "981": {
      "op": "ADD"
    },
    "982": {
      "op": "MSTORE"
    },
    "983": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8144,
        8153
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "984": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "986": {
      "op": "DUP1"
    },
    "987": {
      "op": "MLOAD"
    },
    "988": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "990": {
      "op": "PUSH3",
      "value": "0x1B79"
    },
    "994": {
      "op": "DUP4"
    },
    "995": {
      "op": "CODECOPY"
    },
    "996": {
      "op": "DUP2"
    },
    "997": {
      "op": "MLOAD"
    },
    "998": {
      "op": "SWAP2"
    },
    "999": {
      "op": "MSTORE"
    },
    "1000": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8216,
        8264
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1001": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1003": {
      "op": "ADD"
    },
    "1004": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8216,
        8264
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "1005": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8216,
        8264
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "1007": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8216,
        8264
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "1008": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8216,
        8264
      ],
      "op": "DUP1",
      "path": "20"
    },
    "1009": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8216,
        8264
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "1010": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8216,
        8264
      ],
      "op": "SUB",
      "path": "20"
    },
    "1011": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8216,
        8264
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1012": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8216,
        8264
      ],
      "op": "LOG1",
      "path": "20"
    },
    "1013": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8107,
        8271
      ],
      "op": "POP",
      "path": "20"
    },
    "1014": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        8044,
        8271
      ],
      "op": "POP",
      "path": "20"
    },
    "1015": {
      "fn": "CLFactory.UpdateCLHAPI",
      "jump": "o",
      "offset": [
        8044,
        8271
      ],
      "op": "JUMP",
      "path": "20"
    },
    "1016": {
      "fn": "CLFactory.Init",
      "offset": [
        3445,
        4463
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "1017": {
      "offset": [
        4396,
        4409
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "1019": {
      "fn": "CLFactory.Init",
      "offset": [
        4396,
        4409
      ],
      "op": "SLOAD",
      "path": "10"
    },
    "1020": {
      "offset": [
        236,
        237
      ],
      "op": "PUSH1",
      "path": "19",
      "value": "0x1"
    },
    "1022": {
      "fn": "CLFactory.Init",
      "offset": [
        236,
        237
      ],
      "op": "SWAP1",
      "path": "19"
    },
    "1023": {
      "offset": [
        4396,
        4409
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x100"
    },
    "1026": {
      "fn": "CLFactory.Init",
      "offset": [
        4396,
        4409
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1027": {
      "fn": "CLFactory.Init",
      "offset": [
        4396,
        4409
      ],
      "op": "DIV",
      "path": "10"
    },
    "1028": {
      "fn": "CLFactory.Init",
      "offset": [
        4396,
        4409
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0xFF"
    },
    "1030": {
      "branch": 35,
      "fn": "CLFactory.Init",
      "offset": [
        4396,
        4409
      ],
      "op": "AND",
      "path": "10"
    },
    "1031": {
      "offset": [
        4395,
        4409
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "1032": {
      "offset": [
        4395,
        4435
      ],
      "op": "DUP1",
      "path": "10"
    },
    "1033": {
      "fn": "CLFactory.Init",
      "offset": [
        4395,
        4435
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "1034": {
      "fn": "CLFactory.Init",
      "offset": [
        4395,
        4435
      ],
      "op": "PUSH3",
      "path": "10",
      "value": "0x41B"
    },
    "1038": {
      "branch": 35,
      "offset": [
        4395,
        4435
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "1039": {
      "op": "POP"
    },
    "1040": {
      "offset": [
        4413,
        4425
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "1042": {
      "fn": "CLFactory.Init",
      "offset": [
        4413,
        4425
      ],
      "op": "SLOAD",
      "path": "10"
    },
    "1043": {
      "offset": [
        4413,
        4435
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0xFF"
    },
    "1045": {
      "fn": "CLFactory.Init",
      "offset": [
        4413,
        4435
      ],
      "op": "DUP1",
      "path": "10"
    },
    "1046": {
      "fn": "CLFactory.Init",
      "offset": [
        4413,
        4435
      ],
      "op": "DUP4",
      "path": "10"
    },
    "1047": {
      "fn": "CLFactory.Init",
      "offset": [
        4413,
        4435
      ],
      "op": "AND",
      "path": "10"
    },
    "1048": {
      "offset": [
        4413,
        4425
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "1049": {
      "fn": "CLFactory.Init",
      "offset": [
        4413,
        4425
      ],
      "op": "AND",
      "path": "10"
    },
    "1050": {
      "offset": [
        4413,
        4435
      ],
      "op": "LT",
      "path": "10"
    },
    "1051": {
      "offset": [
        4395,
        4435
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1052": {
      "offset": [
        4387,
        4486
      ],
      "op": "PUSH3",
      "path": "10",
      "value": "0x480"
    },
    "1056": {
      "offset": [
        4387,
        4486
      ],
      "op": "JUMPI",
      "path": "10"
    },
    "1057": {
      "fn": "CLFactory.Init",
      "offset": [
        4387,
        4486
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1059": {
      "fn": "CLFactory.Init",
      "offset": [
        4387,
        4486
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1060": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1064": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1066": {
      "op": "SHL"
    },
    "1067": {
      "offset": [
        4387,
        4486
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1068": {
      "fn": "CLFactory.Init",
      "offset": [
        4387,
        4486
      ],
      "op": "MSTORE",
      "path": "10"
    },
    "1069": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1071": {
      "offset": [
        4387,
        4486
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x4"
    },
    "1073": {
      "fn": "CLFactory.Init",
      "offset": [
        4387,
        4486
      ],
      "op": "DUP3",
      "path": "10"
    },
    "1074": {
      "fn": "CLFactory.Init",
      "offset": [
        4387,
        4486
      ],
      "op": "ADD",
      "path": "10"
    },
    "1075": {
      "op": "MSTORE"
    },
    "1076": {
      "op": "PUSH1",
      "value": "0x2E"
    },
    "1078": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1080": {
      "op": "DUP3"
    },
    "1081": {
      "op": "ADD"
    },
    "1082": {
      "op": "MSTORE"
    },
    "1083": {
      "op": "PUSH32",
      "value": "0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561"
    },
    "1116": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1118": {
      "op": "DUP3"
    },
    "1119": {
      "op": "ADD"
    },
    "1120": {
      "op": "MSTORE"
    },
    "1121": {
      "op": "PUSH14",
      "value": "0x191E481A5B9A5D1A585B1A5E9959"
    },
    "1136": {
      "op": "PUSH1",
      "value": "0x92"
    },
    "1138": {
      "op": "SHL"
    },
    "1139": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1141": {
      "op": "DUP3"
    },
    "1142": {
      "op": "ADD"
    },
    "1143": {
      "op": "MSTORE"
    },
    "1144": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1146": {
      "op": "ADD"
    },
    "1147": {
      "offset": [
        4387,
        4486
      ],
      "op": "PUSH3",
      "path": "10",
      "value": "0x37D"
    },
    "1151": {
      "op": "JUMP"
    },
    "1152": {
      "offset": [
        4387,
        4486
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1153": {
      "offset": [
        4511,
        4518
      ],
      "op": "DUP1",
      "path": "10"
    },
    "1154": {
      "offset": [
        4496,
        4508
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "1156": {
      "fn": "CLFactory.Init",
      "offset": [
        4496,
        4508
      ],
      "op": "DUP1",
      "path": "10"
    },
    "1157": {
      "offset": [
        4496,
        4518
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x100"
    },
    "1160": {
      "fn": "CLFactory.Init",
      "offset": [
        4496,
        4518
      ],
      "op": "EXP",
      "path": "10"
    },
    "1161": {
      "fn": "CLFactory.Init",
      "offset": [
        4496,
        4518
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1162": {
      "fn": "CLFactory.Init",
      "offset": [
        4496,
        4518
      ],
      "op": "SLOAD",
      "path": "10"
    },
    "1163": {
      "fn": "CLFactory.Init",
      "offset": [
        4496,
        4518
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1164": {
      "fn": "CLFactory.Init",
      "offset": [
        4496,
        4518
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0xFF"
    },
    "1166": {
      "fn": "CLFactory.Init",
      "offset": [
        4496,
        4518
      ],
      "op": "MUL",
      "path": "10"
    },
    "1167": {
      "fn": "CLFactory.Init",
      "offset": [
        4496,
        4518
      ],
      "op": "NOT",
      "path": "10"
    },
    "1168": {
      "fn": "CLFactory.Init",
      "offset": [
        4496,
        4518
      ],
      "op": "AND",
      "path": "10"
    },
    "1169": {
      "fn": "CLFactory.Init",
      "offset": [
        4496,
        4518
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1170": {
      "fn": "CLFactory.Init",
      "offset": [
        4496,
        4518
      ],
      "op": "DUP4",
      "path": "10"
    },
    "1171": {
      "fn": "CLFactory.Init",
      "offset": [
        4496,
        4518
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0xFF"
    },
    "1173": {
      "fn": "CLFactory.Init",
      "offset": [
        4496,
        4518
      ],
      "op": "AND",
      "path": "10"
    },
    "1174": {
      "fn": "CLFactory.Init",
      "offset": [
        4496,
        4518
      ],
      "op": "MUL",
      "path": "10"
    },
    "1175": {
      "fn": "CLFactory.Init",
      "offset": [
        4496,
        4518
      ],
      "op": "OR",
      "path": "10"
    },
    "1176": {
      "fn": "CLFactory.Init",
      "offset": [
        4496,
        4518
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1177": {
      "fn": "CLFactory.Init",
      "offset": [
        4496,
        4518
      ],
      "op": "SSTORE",
      "path": "10"
    },
    "1178": {
      "fn": "CLFactory.Init",
      "offset": [
        4496,
        4518
      ],
      "op": "POP",
      "path": "10"
    },
    "1179": {
      "offset": [
        4544,
        4548
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x1"
    },
    "1181": {
      "offset": [
        4528,
        4541
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "1183": {
      "fn": "CLFactory.Init",
      "offset": [
        4528,
        4541
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x1"
    },
    "1185": {
      "offset": [
        4528,
        4548
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x100"
    },
    "1188": {
      "fn": "CLFactory.Init",
      "offset": [
        4528,
        4548
      ],
      "op": "EXP",
      "path": "10"
    },
    "1189": {
      "fn": "CLFactory.Init",
      "offset": [
        4528,
        4548
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1190": {
      "fn": "CLFactory.Init",
      "offset": [
        4528,
        4548
      ],
      "op": "SLOAD",
      "path": "10"
    },
    "1191": {
      "fn": "CLFactory.Init",
      "offset": [
        4528,
        4548
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1192": {
      "fn": "CLFactory.Init",
      "offset": [
        4528,
        4548
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0xFF"
    },
    "1194": {
      "fn": "CLFactory.Init",
      "offset": [
        4528,
        4548
      ],
      "op": "MUL",
      "path": "10"
    },
    "1195": {
      "fn": "CLFactory.Init",
      "offset": [
        4528,
        4548
      ],
      "op": "NOT",
      "path": "10"
    },
    "1196": {
      "fn": "CLFactory.Init",
      "offset": [
        4528,
        4548
      ],
      "op": "AND",
      "path": "10"
    },
    "1197": {
      "fn": "CLFactory.Init",
      "offset": [
        4528,
        4548
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1198": {
      "fn": "CLFactory.Init",
      "offset": [
        4528,
        4548
      ],
      "op": "DUP4",
      "path": "10"
    },
    "1199": {
      "fn": "CLFactory.Init",
      "offset": [
        4528,
        4548
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "1200": {
      "fn": "CLFactory.Init",
      "offset": [
        4528,
        4548
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "1201": {
      "fn": "CLFactory.Init",
      "offset": [
        4528,
        4548
      ],
      "op": "MUL",
      "path": "10"
    },
    "1202": {
      "fn": "CLFactory.Init",
      "offset": [
        4528,
        4548
      ],
      "op": "OR",
      "path": "10"
    },
    "1203": {
      "fn": "CLFactory.Init",
      "offset": [
        4528,
        4548
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1204": {
      "fn": "CLFactory.Init",
      "offset": [
        4528,
        4548
      ],
      "op": "SSTORE",
      "path": "10"
    },
    "1205": {
      "fn": "CLFactory.Init",
      "offset": [
        4528,
        4548
      ],
      "op": "POP",
      "path": "10"
    },
    "1206": {
      "fn": "CLFactory.Init",
      "offset": [
        3889,
        3899
      ],
      "op": "DUP11",
      "path": "20",
      "statement": 2
    },
    "1207": {
      "fn": "CLFactory.Init",
      "offset": [
        3867,
        3876
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x7"
    },
    "1209": {
      "fn": "CLFactory.Init",
      "offset": [
        3867,
        3876
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "1211": {
      "fn": "CLFactory.Init",
      "offset": [
        3867,
        3901
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x100"
    },
    "1214": {
      "fn": "CLFactory.Init",
      "offset": [
        3867,
        3901
      ],
      "op": "EXP",
      "path": "20"
    },
    "1215": {
      "fn": "CLFactory.Init",
      "offset": [
        3867,
        3901
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1216": {
      "fn": "CLFactory.Init",
      "offset": [
        3867,
        3901
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "1217": {
      "fn": "CLFactory.Init",
      "offset": [
        3867,
        3901
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1218": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1220": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1222": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1224": {
      "op": "SHL"
    },
    "1225": {
      "op": "SUB"
    },
    "1226": {
      "fn": "CLFactory.Init",
      "offset": [
        3867,
        3901
      ],
      "op": "MUL",
      "path": "20"
    },
    "1227": {
      "fn": "CLFactory.Init",
      "offset": [
        3867,
        3901
      ],
      "op": "NOT",
      "path": "20"
    },
    "1228": {
      "fn": "CLFactory.Init",
      "offset": [
        3867,
        3901
      ],
      "op": "AND",
      "path": "20"
    },
    "1229": {
      "fn": "CLFactory.Init",
      "offset": [
        3867,
        3901
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1230": {
      "fn": "CLFactory.Init",
      "offset": [
        3867,
        3901
      ],
      "op": "DUP4",
      "path": "20"
    },
    "1231": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1233": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1235": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1237": {
      "op": "SHL"
    },
    "1238": {
      "op": "SUB"
    },
    "1239": {
      "fn": "CLFactory.Init",
      "offset": [
        3867,
        3901
      ],
      "op": "AND",
      "path": "20"
    },
    "1240": {
      "fn": "CLFactory.Init",
      "offset": [
        3867,
        3901
      ],
      "op": "MUL",
      "path": "20"
    },
    "1241": {
      "fn": "CLFactory.Init",
      "offset": [
        3867,
        3901
      ],
      "op": "OR",
      "path": "20"
    },
    "1242": {
      "fn": "CLFactory.Init",
      "offset": [
        3867,
        3901
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1243": {
      "fn": "CLFactory.Init",
      "offset": [
        3867,
        3901
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "1244": {
      "fn": "CLFactory.Init",
      "offset": [
        3867,
        3901
      ],
      "op": "POP",
      "path": "20"
    },
    "1245": {
      "fn": "CLFactory.Init",
      "offset": [
        3944,
        3954
      ],
      "op": "DUP10",
      "path": "20",
      "statement": 3
    },
    "1246": {
      "fn": "CLFactory.Init",
      "offset": [
        3920,
        3929
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x6"
    },
    "1248": {
      "fn": "CLFactory.Init",
      "offset": [
        3920,
        3929
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "1250": {
      "fn": "CLFactory.Init",
      "offset": [
        3920,
        3956
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x100"
    },
    "1253": {
      "fn": "CLFactory.Init",
      "offset": [
        3920,
        3956
      ],
      "op": "EXP",
      "path": "20"
    },
    "1254": {
      "fn": "CLFactory.Init",
      "offset": [
        3920,
        3956
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1255": {
      "fn": "CLFactory.Init",
      "offset": [
        3920,
        3956
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "1256": {
      "fn": "CLFactory.Init",
      "offset": [
        3920,
        3956
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1257": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1259": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1261": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1263": {
      "op": "SHL"
    },
    "1264": {
      "op": "SUB"
    },
    "1265": {
      "fn": "CLFactory.Init",
      "offset": [
        3920,
        3956
      ],
      "op": "MUL",
      "path": "20"
    },
    "1266": {
      "fn": "CLFactory.Init",
      "offset": [
        3920,
        3956
      ],
      "op": "NOT",
      "path": "20"
    },
    "1267": {
      "fn": "CLFactory.Init",
      "offset": [
        3920,
        3956
      ],
      "op": "AND",
      "path": "20"
    },
    "1268": {
      "fn": "CLFactory.Init",
      "offset": [
        3920,
        3956
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1269": {
      "fn": "CLFactory.Init",
      "offset": [
        3920,
        3956
      ],
      "op": "DUP4",
      "path": "20"
    },
    "1270": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1272": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1274": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1276": {
      "op": "SHL"
    },
    "1277": {
      "op": "SUB"
    },
    "1278": {
      "fn": "CLFactory.Init",
      "offset": [
        3920,
        3956
      ],
      "op": "AND",
      "path": "20"
    },
    "1279": {
      "fn": "CLFactory.Init",
      "offset": [
        3920,
        3956
      ],
      "op": "MUL",
      "path": "20"
    },
    "1280": {
      "fn": "CLFactory.Init",
      "offset": [
        3920,
        3956
      ],
      "op": "OR",
      "path": "20"
    },
    "1281": {
      "fn": "CLFactory.Init",
      "offset": [
        3920,
        3956
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1282": {
      "fn": "CLFactory.Init",
      "offset": [
        3920,
        3956
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "1283": {
      "fn": "CLFactory.Init",
      "offset": [
        3920,
        3956
      ],
      "op": "POP",
      "path": "20"
    },
    "1284": {
      "fn": "CLFactory.Init",
      "offset": [
        3987,
        4005
      ],
      "op": "DUP5",
      "path": "20",
      "statement": 4
    },
    "1285": {
      "fn": "CLFactory.Init",
      "offset": [
        3967,
        3984
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x3"
    },
    "1287": {
      "fn": "CLFactory.Init",
      "offset": [
        3967,
        3984
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "1289": {
      "fn": "CLFactory.Init",
      "offset": [
        3967,
        4005
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x100"
    },
    "1292": {
      "fn": "CLFactory.Init",
      "offset": [
        3967,
        4005
      ],
      "op": "EXP",
      "path": "20"
    },
    "1293": {
      "fn": "CLFactory.Init",
      "offset": [
        3967,
        4005
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1294": {
      "fn": "CLFactory.Init",
      "offset": [
        3967,
        4005
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "1295": {
      "fn": "CLFactory.Init",
      "offset": [
        3967,
        4005
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1296": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1298": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1300": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1302": {
      "op": "SHL"
    },
    "1303": {
      "op": "SUB"
    },
    "1304": {
      "fn": "CLFactory.Init",
      "offset": [
        3967,
        4005
      ],
      "op": "MUL",
      "path": "20"
    },
    "1305": {
      "fn": "CLFactory.Init",
      "offset": [
        3967,
        4005
      ],
      "op": "NOT",
      "path": "20"
    },
    "1306": {
      "fn": "CLFactory.Init",
      "offset": [
        3967,
        4005
      ],
      "op": "AND",
      "path": "20"
    },
    "1307": {
      "fn": "CLFactory.Init",
      "offset": [
        3967,
        4005
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1308": {
      "fn": "CLFactory.Init",
      "offset": [
        3967,
        4005
      ],
      "op": "DUP4",
      "path": "20"
    },
    "1309": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1311": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1313": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1315": {
      "op": "SHL"
    },
    "1316": {
      "op": "SUB"
    },
    "1317": {
      "fn": "CLFactory.Init",
      "offset": [
        3967,
        4005
      ],
      "op": "AND",
      "path": "20"
    },
    "1318": {
      "fn": "CLFactory.Init",
      "offset": [
        3967,
        4005
      ],
      "op": "MUL",
      "path": "20"
    },
    "1319": {
      "fn": "CLFactory.Init",
      "offset": [
        3967,
        4005
      ],
      "op": "OR",
      "path": "20"
    },
    "1320": {
      "fn": "CLFactory.Init",
      "offset": [
        3967,
        4005
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1321": {
      "fn": "CLFactory.Init",
      "offset": [
        3967,
        4005
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "1322": {
      "fn": "CLFactory.Init",
      "offset": [
        3967,
        4005
      ],
      "op": "POP",
      "path": "20"
    },
    "1323": {
      "fn": "CLFactory.Init",
      "offset": [
        4031,
        4045
      ],
      "op": "DUP4",
      "path": "20",
      "statement": 5
    },
    "1324": {
      "fn": "CLFactory.Init",
      "offset": [
        4015,
        4028
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "1326": {
      "fn": "CLFactory.Init",
      "offset": [
        4015,
        4028
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "1328": {
      "fn": "CLFactory.Init",
      "offset": [
        4015,
        4045
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x100"
    },
    "1331": {
      "fn": "CLFactory.Init",
      "offset": [
        4015,
        4045
      ],
      "op": "EXP",
      "path": "20"
    },
    "1332": {
      "fn": "CLFactory.Init",
      "offset": [
        4015,
        4045
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1333": {
      "fn": "CLFactory.Init",
      "offset": [
        4015,
        4045
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "1334": {
      "fn": "CLFactory.Init",
      "offset": [
        4015,
        4045
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1335": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1337": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1339": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1341": {
      "op": "SHL"
    },
    "1342": {
      "op": "SUB"
    },
    "1343": {
      "fn": "CLFactory.Init",
      "offset": [
        4015,
        4045
      ],
      "op": "MUL",
      "path": "20"
    },
    "1344": {
      "fn": "CLFactory.Init",
      "offset": [
        4015,
        4045
      ],
      "op": "NOT",
      "path": "20"
    },
    "1345": {
      "fn": "CLFactory.Init",
      "offset": [
        4015,
        4045
      ],
      "op": "AND",
      "path": "20"
    },
    "1346": {
      "fn": "CLFactory.Init",
      "offset": [
        4015,
        4045
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1347": {
      "fn": "CLFactory.Init",
      "offset": [
        4015,
        4045
      ],
      "op": "DUP4",
      "path": "20"
    },
    "1348": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1350": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1352": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1354": {
      "op": "SHL"
    },
    "1355": {
      "op": "SUB"
    },
    "1356": {
      "fn": "CLFactory.Init",
      "offset": [
        4015,
        4045
      ],
      "op": "AND",
      "path": "20"
    },
    "1357": {
      "fn": "CLFactory.Init",
      "offset": [
        4015,
        4045
      ],
      "op": "MUL",
      "path": "20"
    },
    "1358": {
      "fn": "CLFactory.Init",
      "offset": [
        4015,
        4045
      ],
      "op": "OR",
      "path": "20"
    },
    "1359": {
      "fn": "CLFactory.Init",
      "offset": [
        4015,
        4045
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1360": {
      "fn": "CLFactory.Init",
      "offset": [
        4015,
        4045
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "1361": {
      "fn": "CLFactory.Init",
      "offset": [
        4015,
        4045
      ],
      "op": "POP",
      "path": "20"
    },
    "1362": {
      "fn": "CLFactory.Init",
      "offset": [
        4075,
        4093
      ],
      "op": "DUP3",
      "path": "20",
      "statement": 6
    },
    "1363": {
      "fn": "CLFactory.Init",
      "offset": [
        4055,
        4072
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x2"
    },
    "1365": {
      "fn": "CLFactory.Init",
      "offset": [
        4055,
        4072
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "1367": {
      "fn": "CLFactory.Init",
      "offset": [
        4055,
        4093
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x100"
    },
    "1370": {
      "fn": "CLFactory.Init",
      "offset": [
        4055,
        4093
      ],
      "op": "EXP",
      "path": "20"
    },
    "1371": {
      "fn": "CLFactory.Init",
      "offset": [
        4055,
        4093
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1372": {
      "fn": "CLFactory.Init",
      "offset": [
        4055,
        4093
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "1373": {
      "fn": "CLFactory.Init",
      "offset": [
        4055,
        4093
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1374": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1376": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1378": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1380": {
      "op": "SHL"
    },
    "1381": {
      "op": "SUB"
    },
    "1382": {
      "fn": "CLFactory.Init",
      "offset": [
        4055,
        4093
      ],
      "op": "MUL",
      "path": "20"
    },
    "1383": {
      "fn": "CLFactory.Init",
      "offset": [
        4055,
        4093
      ],
      "op": "NOT",
      "path": "20"
    },
    "1384": {
      "fn": "CLFactory.Init",
      "offset": [
        4055,
        4093
      ],
      "op": "AND",
      "path": "20"
    },
    "1385": {
      "fn": "CLFactory.Init",
      "offset": [
        4055,
        4093
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1386": {
      "fn": "CLFactory.Init",
      "offset": [
        4055,
        4093
      ],
      "op": "DUP4",
      "path": "20"
    },
    "1387": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1389": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1391": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1393": {
      "op": "SHL"
    },
    "1394": {
      "op": "SUB"
    },
    "1395": {
      "fn": "CLFactory.Init",
      "offset": [
        4055,
        4093
      ],
      "op": "AND",
      "path": "20"
    },
    "1396": {
      "fn": "CLFactory.Init",
      "offset": [
        4055,
        4093
      ],
      "op": "MUL",
      "path": "20"
    },
    "1397": {
      "fn": "CLFactory.Init",
      "offset": [
        4055,
        4093
      ],
      "op": "OR",
      "path": "20"
    },
    "1398": {
      "fn": "CLFactory.Init",
      "offset": [
        4055,
        4093
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1399": {
      "fn": "CLFactory.Init",
      "offset": [
        4055,
        4093
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "1400": {
      "fn": "CLFactory.Init",
      "offset": [
        4055,
        4093
      ],
      "op": "POP",
      "path": "20"
    },
    "1401": {
      "fn": "CLFactory.Init",
      "offset": [
        4128,
        4142
      ],
      "op": "DUP9",
      "path": "20",
      "statement": 7
    },
    "1402": {
      "fn": "CLFactory.Init",
      "offset": [
        4104,
        4117
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x8"
    },
    "1404": {
      "fn": "CLFactory.Init",
      "offset": [
        4104,
        4117
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "1406": {
      "fn": "CLFactory.Init",
      "offset": [
        4104,
        4144
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x100"
    },
    "1409": {
      "fn": "CLFactory.Init",
      "offset": [
        4104,
        4144
      ],
      "op": "EXP",
      "path": "20"
    },
    "1410": {
      "fn": "CLFactory.Init",
      "offset": [
        4104,
        4144
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1411": {
      "fn": "CLFactory.Init",
      "offset": [
        4104,
        4144
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "1412": {
      "fn": "CLFactory.Init",
      "offset": [
        4104,
        4144
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1413": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1415": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1417": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1419": {
      "op": "SHL"
    },
    "1420": {
      "op": "SUB"
    },
    "1421": {
      "fn": "CLFactory.Init",
      "offset": [
        4104,
        4144
      ],
      "op": "MUL",
      "path": "20"
    },
    "1422": {
      "fn": "CLFactory.Init",
      "offset": [
        4104,
        4144
      ],
      "op": "NOT",
      "path": "20"
    },
    "1423": {
      "fn": "CLFactory.Init",
      "offset": [
        4104,
        4144
      ],
      "op": "AND",
      "path": "20"
    },
    "1424": {
      "fn": "CLFactory.Init",
      "offset": [
        4104,
        4144
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1425": {
      "fn": "CLFactory.Init",
      "offset": [
        4104,
        4144
      ],
      "op": "DUP4",
      "path": "20"
    },
    "1426": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1428": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1430": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1432": {
      "op": "SHL"
    },
    "1433": {
      "op": "SUB"
    },
    "1434": {
      "fn": "CLFactory.Init",
      "offset": [
        4104,
        4144
      ],
      "op": "AND",
      "path": "20"
    },
    "1435": {
      "fn": "CLFactory.Init",
      "offset": [
        4104,
        4144
      ],
      "op": "MUL",
      "path": "20"
    },
    "1436": {
      "fn": "CLFactory.Init",
      "offset": [
        4104,
        4144
      ],
      "op": "OR",
      "path": "20"
    },
    "1437": {
      "fn": "CLFactory.Init",
      "offset": [
        4104,
        4144
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1438": {
      "fn": "CLFactory.Init",
      "offset": [
        4104,
        4144
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "1439": {
      "fn": "CLFactory.Init",
      "offset": [
        4104,
        4144
      ],
      "op": "POP",
      "path": "20"
    },
    "1440": {
      "fn": "CLFactory.Init",
      "offset": [
        4177,
        4190
      ],
      "op": "DUP8",
      "path": "20",
      "statement": 8
    },
    "1441": {
      "fn": "CLFactory.Init",
      "offset": [
        4154,
        4166
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x9"
    },
    "1443": {
      "fn": "CLFactory.Init",
      "offset": [
        4154,
        4166
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "1445": {
      "fn": "CLFactory.Init",
      "offset": [
        4154,
        4192
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x100"
    },
    "1448": {
      "fn": "CLFactory.Init",
      "offset": [
        4154,
        4192
      ],
      "op": "EXP",
      "path": "20"
    },
    "1449": {
      "fn": "CLFactory.Init",
      "offset": [
        4154,
        4192
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1450": {
      "fn": "CLFactory.Init",
      "offset": [
        4154,
        4192
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "1451": {
      "fn": "CLFactory.Init",
      "offset": [
        4154,
        4192
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1452": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1454": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1456": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1458": {
      "op": "SHL"
    },
    "1459": {
      "op": "SUB"
    },
    "1460": {
      "fn": "CLFactory.Init",
      "offset": [
        4154,
        4192
      ],
      "op": "MUL",
      "path": "20"
    },
    "1461": {
      "fn": "CLFactory.Init",
      "offset": [
        4154,
        4192
      ],
      "op": "NOT",
      "path": "20"
    },
    "1462": {
      "fn": "CLFactory.Init",
      "offset": [
        4154,
        4192
      ],
      "op": "AND",
      "path": "20"
    },
    "1463": {
      "fn": "CLFactory.Init",
      "offset": [
        4154,
        4192
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1464": {
      "fn": "CLFactory.Init",
      "offset": [
        4154,
        4192
      ],
      "op": "DUP4",
      "path": "20"
    },
    "1465": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1467": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1469": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1471": {
      "op": "SHL"
    },
    "1472": {
      "op": "SUB"
    },
    "1473": {
      "fn": "CLFactory.Init",
      "offset": [
        4154,
        4192
      ],
      "op": "AND",
      "path": "20"
    },
    "1474": {
      "fn": "CLFactory.Init",
      "offset": [
        4154,
        4192
      ],
      "op": "MUL",
      "path": "20"
    },
    "1475": {
      "fn": "CLFactory.Init",
      "offset": [
        4154,
        4192
      ],
      "op": "OR",
      "path": "20"
    },
    "1476": {
      "fn": "CLFactory.Init",
      "offset": [
        4154,
        4192
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1477": {
      "fn": "CLFactory.Init",
      "offset": [
        4154,
        4192
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "1478": {
      "fn": "CLFactory.Init",
      "offset": [
        4154,
        4192
      ],
      "op": "POP",
      "path": "20"
    },
    "1479": {
      "fn": "CLFactory.Init",
      "offset": [
        4229,
        4246
      ],
      "op": "DUP7",
      "path": "20",
      "statement": 9
    },
    "1480": {
      "fn": "CLFactory.Init",
      "offset": [
        4202,
        4218
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0xA"
    },
    "1482": {
      "fn": "CLFactory.Init",
      "offset": [
        4202,
        4218
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "1484": {
      "fn": "CLFactory.Init",
      "offset": [
        4202,
        4248
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x100"
    },
    "1487": {
      "fn": "CLFactory.Init",
      "offset": [
        4202,
        4248
      ],
      "op": "EXP",
      "path": "20"
    },
    "1488": {
      "fn": "CLFactory.Init",
      "offset": [
        4202,
        4248
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1489": {
      "fn": "CLFactory.Init",
      "offset": [
        4202,
        4248
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "1490": {
      "fn": "CLFactory.Init",
      "offset": [
        4202,
        4248
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1491": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1493": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1495": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1497": {
      "op": "SHL"
    },
    "1498": {
      "op": "SUB"
    },
    "1499": {
      "fn": "CLFactory.Init",
      "offset": [
        4202,
        4248
      ],
      "op": "MUL",
      "path": "20"
    },
    "1500": {
      "fn": "CLFactory.Init",
      "offset": [
        4202,
        4248
      ],
      "op": "NOT",
      "path": "20"
    },
    "1501": {
      "fn": "CLFactory.Init",
      "offset": [
        4202,
        4248
      ],
      "op": "AND",
      "path": "20"
    },
    "1502": {
      "fn": "CLFactory.Init",
      "offset": [
        4202,
        4248
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1503": {
      "fn": "CLFactory.Init",
      "offset": [
        4202,
        4248
      ],
      "op": "DUP4",
      "path": "20"
    },
    "1504": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1506": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1508": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1510": {
      "op": "SHL"
    },
    "1511": {
      "op": "SUB"
    },
    "1512": {
      "fn": "CLFactory.Init",
      "offset": [
        4202,
        4248
      ],
      "op": "AND",
      "path": "20"
    },
    "1513": {
      "fn": "CLFactory.Init",
      "offset": [
        4202,
        4248
      ],
      "op": "MUL",
      "path": "20"
    },
    "1514": {
      "fn": "CLFactory.Init",
      "offset": [
        4202,
        4248
      ],
      "op": "OR",
      "path": "20"
    },
    "1515": {
      "fn": "CLFactory.Init",
      "offset": [
        4202,
        4248
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1516": {
      "fn": "CLFactory.Init",
      "offset": [
        4202,
        4248
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "1517": {
      "fn": "CLFactory.Init",
      "offset": [
        4202,
        4248
      ],
      "op": "POP",
      "path": "20"
    },
    "1518": {
      "fn": "CLFactory.Init",
      "offset": [
        4285,
        4302
      ],
      "op": "DUP6",
      "path": "20",
      "statement": 10
    },
    "1519": {
      "fn": "CLFactory.Init",
      "offset": [
        4258,
        4274
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0xB"
    },
    "1521": {
      "fn": "CLFactory.Init",
      "offset": [
        4258,
        4274
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "1523": {
      "fn": "CLFactory.Init",
      "offset": [
        4258,
        4304
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x100"
    },
    "1526": {
      "fn": "CLFactory.Init",
      "offset": [
        4258,
        4304
      ],
      "op": "EXP",
      "path": "20"
    },
    "1527": {
      "fn": "CLFactory.Init",
      "offset": [
        4258,
        4304
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1528": {
      "fn": "CLFactory.Init",
      "offset": [
        4258,
        4304
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "1529": {
      "fn": "CLFactory.Init",
      "offset": [
        4258,
        4304
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1530": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1532": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1534": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1536": {
      "op": "SHL"
    },
    "1537": {
      "op": "SUB"
    },
    "1538": {
      "fn": "CLFactory.Init",
      "offset": [
        4258,
        4304
      ],
      "op": "MUL",
      "path": "20"
    },
    "1539": {
      "fn": "CLFactory.Init",
      "offset": [
        4258,
        4304
      ],
      "op": "NOT",
      "path": "20"
    },
    "1540": {
      "fn": "CLFactory.Init",
      "offset": [
        4258,
        4304
      ],
      "op": "AND",
      "path": "20"
    },
    "1541": {
      "fn": "CLFactory.Init",
      "offset": [
        4258,
        4304
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1542": {
      "fn": "CLFactory.Init",
      "offset": [
        4258,
        4304
      ],
      "op": "DUP4",
      "path": "20"
    },
    "1543": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1545": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1547": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1549": {
      "op": "SHL"
    },
    "1550": {
      "op": "SUB"
    },
    "1551": {
      "fn": "CLFactory.Init",
      "offset": [
        4258,
        4304
      ],
      "op": "AND",
      "path": "20"
    },
    "1552": {
      "fn": "CLFactory.Init",
      "offset": [
        4258,
        4304
      ],
      "op": "MUL",
      "path": "20"
    },
    "1553": {
      "fn": "CLFactory.Init",
      "offset": [
        4258,
        4304
      ],
      "op": "OR",
      "path": "20"
    },
    "1554": {
      "fn": "CLFactory.Init",
      "offset": [
        4258,
        4304
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1555": {
      "fn": "CLFactory.Init",
      "offset": [
        4258,
        4304
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "1556": {
      "fn": "CLFactory.Init",
      "offset": [
        4258,
        4304
      ],
      "op": "POP",
      "path": "20"
    },
    "1557": {
      "fn": "CLFactory.Init",
      "offset": [
        4332,
        4333
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 11,
      "value": "0x0"
    },
    "1559": {
      "fn": "CLFactory.Init",
      "offset": [
        4323,
        4329
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x1"
    },
    "1561": {
      "fn": "CLFactory.Init",
      "offset": [
        4323,
        4333
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1562": {
      "fn": "CLFactory.Init",
      "offset": [
        4323,
        4333
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1563": {
      "fn": "CLFactory.Init",
      "offset": [
        4323,
        4333
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "1564": {
      "fn": "CLFactory.Init",
      "offset": [
        4323,
        4333
      ],
      "op": "POP",
      "path": "20"
    },
    "1565": {
      "fn": "CLFactory.Init",
      "offset": [
        4380,
        4381
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 12,
      "value": "0x0"
    },
    "1567": {
      "fn": "CLFactory.Init",
      "offset": [
        4343,
        4349
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0xD"
    },
    "1569": {
      "fn": "CLFactory.Init",
      "offset": [
        4343,
        4359
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "1571": {
      "fn": "CLFactory.Init",
      "offset": [
        4351,
        4357
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x1"
    },
    "1573": {
      "fn": "CLFactory.Init",
      "offset": [
        4351,
        4357
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "1574": {
      "fn": "CLFactory.Init",
      "offset": [
        4343,
        4359
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1575": {
      "fn": "CLFactory.Init",
      "offset": [
        4343,
        4359
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1576": {
      "fn": "CLFactory.Init",
      "offset": [
        4343,
        4359
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "1578": {
      "fn": "CLFactory.Init",
      "offset": [
        4343,
        4359
      ],
      "op": "ADD",
      "path": "20"
    },
    "1579": {
      "fn": "CLFactory.Init",
      "offset": [
        4343,
        4359
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1580": {
      "fn": "CLFactory.Init",
      "offset": [
        4343,
        4359
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1581": {
      "fn": "CLFactory.Init",
      "offset": [
        4343,
        4359
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1582": {
      "fn": "CLFactory.Init",
      "offset": [
        4343,
        4359
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "1584": {
      "fn": "CLFactory.Init",
      "offset": [
        4343,
        4359
      ],
      "op": "ADD",
      "path": "20"
    },
    "1585": {
      "fn": "CLFactory.Init",
      "offset": [
        4343,
        4359
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "1587": {
      "fn": "CLFactory.Init",
      "offset": [
        4343,
        4359
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "1588": {
      "fn": "CLFactory.Init",
      "offset": [
        4343,
        4359
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "1590": {
      "fn": "CLFactory.Init",
      "offset": [
        4343,
        4384
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x100"
    },
    "1593": {
      "fn": "CLFactory.Init",
      "offset": [
        4343,
        4384
      ],
      "op": "EXP",
      "path": "20"
    },
    "1594": {
      "fn": "CLFactory.Init",
      "offset": [
        4343,
        4384
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1595": {
      "fn": "CLFactory.Init",
      "offset": [
        4343,
        4384
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "1596": {
      "fn": "CLFactory.Init",
      "offset": [
        4343,
        4384
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1597": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1599": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1601": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1603": {
      "op": "SHL"
    },
    "1604": {
      "op": "SUB"
    },
    "1605": {
      "fn": "CLFactory.Init",
      "offset": [
        4343,
        4384
      ],
      "op": "MUL",
      "path": "20"
    },
    "1606": {
      "fn": "CLFactory.Init",
      "offset": [
        4343,
        4384
      ],
      "op": "NOT",
      "path": "20"
    },
    "1607": {
      "fn": "CLFactory.Init",
      "offset": [
        4343,
        4384
      ],
      "op": "AND",
      "path": "20"
    },
    "1608": {
      "fn": "CLFactory.Init",
      "offset": [
        4343,
        4384
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1609": {
      "fn": "CLFactory.Init",
      "offset": [
        4343,
        4384
      ],
      "op": "DUP4",
      "path": "20"
    },
    "1610": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1612": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1614": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1616": {
      "op": "SHL"
    },
    "1617": {
      "op": "SUB"
    },
    "1618": {
      "fn": "CLFactory.Init",
      "offset": [
        4343,
        4384
      ],
      "op": "AND",
      "path": "20"
    },
    "1619": {
      "fn": "CLFactory.Init",
      "offset": [
        4343,
        4384
      ],
      "op": "MUL",
      "path": "20"
    },
    "1620": {
      "fn": "CLFactory.Init",
      "offset": [
        4343,
        4384
      ],
      "op": "OR",
      "path": "20"
    },
    "1621": {
      "fn": "CLFactory.Init",
      "offset": [
        4343,
        4384
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1622": {
      "fn": "CLFactory.Init",
      "offset": [
        4343,
        4384
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "1623": {
      "fn": "CLFactory.Init",
      "offset": [
        4343,
        4384
      ],
      "op": "POP",
      "path": "20"
    },
    "1624": {
      "fn": "CLFactory.Init",
      "offset": [
        4419,
        4425
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 13,
      "value": "0x1"
    },
    "1626": {
      "fn": "CLFactory.Init",
      "offset": [
        4419,
        4425
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "1627": {
      "fn": "CLFactory.Init",
      "offset": [
        4394,
        4402
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0xC"
    },
    "1629": {
      "fn": "CLFactory.Init",
      "offset": [
        4394,
        4416
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "1631": {
      "fn": "CLFactory.Init",
      "offset": [
        4412,
        4413
      ],
      "op": "DUP1",
      "path": "20"
    },
    "1632": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1634": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1636": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1638": {
      "op": "SHL"
    },
    "1639": {
      "op": "SUB"
    },
    "1640": {
      "fn": "CLFactory.Init",
      "offset": [
        4394,
        4416
      ],
      "op": "AND",
      "path": "20"
    },
    "1641": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1643": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1645": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1647": {
      "op": "SHL"
    },
    "1648": {
      "op": "SUB"
    },
    "1649": {
      "fn": "CLFactory.Init",
      "offset": [
        4394,
        4416
      ],
      "op": "AND",
      "path": "20"
    },
    "1650": {
      "fn": "CLFactory.Init",
      "offset": [
        4394,
        4416
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1651": {
      "fn": "CLFactory.Init",
      "offset": [
        4394,
        4416
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1652": {
      "fn": "CLFactory.Init",
      "offset": [
        4394,
        4416
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "1654": {
      "fn": "CLFactory.Init",
      "offset": [
        4394,
        4416
      ],
      "op": "ADD",
      "path": "20"
    },
    "1655": {
      "fn": "CLFactory.Init",
      "offset": [
        4394,
        4416
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1656": {
      "fn": "CLFactory.Init",
      "offset": [
        4394,
        4416
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1657": {
      "fn": "CLFactory.Init",
      "offset": [
        4394,
        4416
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1658": {
      "fn": "CLFactory.Init",
      "offset": [
        4394,
        4416
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "1660": {
      "fn": "CLFactory.Init",
      "offset": [
        4394,
        4416
      ],
      "op": "ADD",
      "path": "20"
    },
    "1661": {
      "fn": "CLFactory.Init",
      "offset": [
        4394,
        4416
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "1663": {
      "fn": "CLFactory.Init",
      "offset": [
        4394,
        4416
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "1664": {
      "fn": "CLFactory.Init",
      "offset": [
        4394,
        4425
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1665": {
      "fn": "CLFactory.Init",
      "offset": [
        4394,
        4425
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1666": {
      "fn": "CLFactory.Init",
      "offset": [
        4394,
        4425
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "1667": {
      "fn": "CLFactory.Init",
      "offset": [
        4394,
        4425
      ],
      "op": "POP",
      "path": "20"
    },
    "1668": {
      "fn": "CLFactory.Init",
      "offset": [
        4447,
        4456
      ],
      "op": "DUP2",
      "path": "20",
      "statement": 14
    },
    "1669": {
      "fn": "CLFactory.Init",
      "offset": [
        4436,
        4444
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x5"
    },
    "1671": {
      "fn": "CLFactory.Init",
      "offset": [
        4436,
        4444
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "1673": {
      "fn": "CLFactory.Init",
      "offset": [
        4436,
        4456
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x100"
    },
    "1676": {
      "fn": "CLFactory.Init",
      "offset": [
        4436,
        4456
      ],
      "op": "EXP",
      "path": "20"
    },
    "1677": {
      "fn": "CLFactory.Init",
      "offset": [
        4436,
        4456
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1678": {
      "fn": "CLFactory.Init",
      "offset": [
        4436,
        4456
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "1679": {
      "fn": "CLFactory.Init",
      "offset": [
        4436,
        4456
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1680": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1682": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1684": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1686": {
      "op": "SHL"
    },
    "1687": {
      "op": "SUB"
    },
    "1688": {
      "fn": "CLFactory.Init",
      "offset": [
        4436,
        4456
      ],
      "op": "MUL",
      "path": "20"
    },
    "1689": {
      "fn": "CLFactory.Init",
      "offset": [
        4436,
        4456
      ],
      "op": "NOT",
      "path": "20"
    },
    "1690": {
      "fn": "CLFactory.Init",
      "offset": [
        4436,
        4456
      ],
      "op": "AND",
      "path": "20"
    },
    "1691": {
      "fn": "CLFactory.Init",
      "offset": [
        4436,
        4456
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1692": {
      "fn": "CLFactory.Init",
      "offset": [
        4436,
        4456
      ],
      "op": "DUP4",
      "path": "20"
    },
    "1693": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1695": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1697": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1699": {
      "op": "SHL"
    },
    "1700": {
      "op": "SUB"
    },
    "1701": {
      "fn": "CLFactory.Init",
      "offset": [
        4436,
        4456
      ],
      "op": "AND",
      "path": "20"
    },
    "1702": {
      "fn": "CLFactory.Init",
      "offset": [
        4436,
        4456
      ],
      "op": "MUL",
      "path": "20"
    },
    "1703": {
      "fn": "CLFactory.Init",
      "offset": [
        4436,
        4456
      ],
      "op": "OR",
      "path": "20"
    },
    "1704": {
      "fn": "CLFactory.Init",
      "offset": [
        4436,
        4456
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1705": {
      "fn": "CLFactory.Init",
      "offset": [
        4436,
        4456
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "1706": {
      "fn": "CLFactory.Init",
      "offset": [
        4436,
        4456
      ],
      "op": "POP",
      "path": "20"
    },
    "1707": {
      "offset": [
        4585,
        4590
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x0"
    },
    "1709": {
      "offset": [
        4569,
        4582
      ],
      "op": "DUP1",
      "path": "10"
    },
    "1710": {
      "fn": "CLFactory.Init",
      "offset": [
        4569,
        4582
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x1"
    },
    "1712": {
      "offset": [
        4569,
        4590
      ],
      "op": "PUSH2",
      "path": "10",
      "value": "0x100"
    },
    "1715": {
      "fn": "CLFactory.Init",
      "offset": [
        4569,
        4590
      ],
      "op": "EXP",
      "path": "10"
    },
    "1716": {
      "fn": "CLFactory.Init",
      "offset": [
        4569,
        4590
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1717": {
      "fn": "CLFactory.Init",
      "offset": [
        4569,
        4590
      ],
      "op": "SLOAD",
      "path": "10"
    },
    "1718": {
      "fn": "CLFactory.Init",
      "offset": [
        4569,
        4590
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1719": {
      "fn": "CLFactory.Init",
      "offset": [
        4569,
        4590
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0xFF"
    },
    "1721": {
      "fn": "CLFactory.Init",
      "offset": [
        4569,
        4590
      ],
      "op": "MUL",
      "path": "10"
    },
    "1722": {
      "fn": "CLFactory.Init",
      "offset": [
        4569,
        4590
      ],
      "op": "NOT",
      "path": "10"
    },
    "1723": {
      "fn": "CLFactory.Init",
      "offset": [
        4569,
        4590
      ],
      "op": "AND",
      "path": "10"
    },
    "1724": {
      "fn": "CLFactory.Init",
      "offset": [
        4569,
        4590
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1725": {
      "fn": "CLFactory.Init",
      "offset": [
        4569,
        4590
      ],
      "op": "DUP4",
      "path": "10"
    },
    "1726": {
      "fn": "CLFactory.Init",
      "offset": [
        4569,
        4590
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "1727": {
      "fn": "CLFactory.Init",
      "offset": [
        4569,
        4590
      ],
      "op": "ISZERO",
      "path": "10"
    },
    "1728": {
      "fn": "CLFactory.Init",
      "offset": [
        4569,
        4590
      ],
      "op": "MUL",
      "path": "10"
    },
    "1729": {
      "fn": "CLFactory.Init",
      "offset": [
        4569,
        4590
      ],
      "op": "OR",
      "path": "10"
    },
    "1730": {
      "fn": "CLFactory.Init",
      "offset": [
        4569,
        4590
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1731": {
      "fn": "CLFactory.Init",
      "offset": [
        4569,
        4590
      ],
      "op": "SSTORE",
      "path": "10"
    },
    "1732": {
      "fn": "CLFactory.Init",
      "offset": [
        4569,
        4590
      ],
      "op": "POP",
      "path": "10"
    },
    "1733": {
      "offset": [
        4605,
        4625
      ],
      "op": "PUSH32",
      "path": "10",
      "value": "0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498"
    },
    "1766": {
      "offset": [
        4617,
        4624
      ],
      "op": "DUP2",
      "path": "10"
    },
    "1767": {
      "offset": [
        4605,
        4625
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1769": {
      "fn": "CLFactory.Init",
      "offset": [
        4605,
        4625
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1770": {
      "fn": "CLFactory.Init",
      "offset": [
        4605,
        4625
      ],
      "op": "PUSH3",
      "path": "10",
      "value": "0x6FD"
    },
    "1774": {
      "fn": "CLFactory.Init",
      "offset": [
        4605,
        4625
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "1775": {
      "fn": "CLFactory.Init",
      "offset": [
        4605,
        4625
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1776": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1778": {
      "op": "SWAP2"
    },
    "1779": {
      "op": "SWAP1"
    },
    "1780": {
      "op": "SWAP2"
    },
    "1781": {
      "op": "AND"
    },
    "1782": {
      "op": "DUP2"
    },
    "1783": {
      "op": "MSTORE"
    },
    "1784": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1786": {
      "op": "ADD"
    },
    "1787": {
      "op": "SWAP1"
    },
    "1788": {
      "op": "JUMP"
    },
    "1789": {
      "offset": [
        4605,
        4625
      ],
      "op": "JUMPDEST",
      "path": "10"
    },
    "1790": {
      "fn": "CLFactory.Init",
      "offset": [
        4605,
        4625
      ],
      "op": "PUSH1",
      "path": "10",
      "value": "0x40"
    },
    "1792": {
      "fn": "CLFactory.Init",
      "offset": [
        4605,
        4625
      ],
      "op": "MLOAD",
      "path": "10"
    },
    "1793": {
      "fn": "CLFactory.Init",
      "offset": [
        4605,
        4625
      ],
      "op": "DUP1",
      "path": "10"
    },
    "1794": {
      "fn": "CLFactory.Init",
      "offset": [
        4605,
        4625
      ],
      "op": "SWAP2",
      "path": "10"
    },
    "1795": {
      "fn": "CLFactory.Init",
      "offset": [
        4605,
        4625
      ],
      "op": "SUB",
      "path": "10"
    },
    "1796": {
      "fn": "CLFactory.Init",
      "offset": [
        4605,
        4625
      ],
      "op": "SWAP1",
      "path": "10"
    },
    "1797": {
      "fn": "CLFactory.Init",
      "offset": [
        4605,
        4625
      ],
      "op": "LOG1",
      "path": "10"
    },
    "1798": {
      "fn": "CLFactory.Init",
      "offset": [
        3445,
        4463
      ],
      "op": "POP",
      "path": "20"
    },
    "1799": {
      "fn": "CLFactory.Init",
      "offset": [
        3445,
        4463
      ],
      "op": "POP",
      "path": "20"
    },
    "1800": {
      "fn": "CLFactory.Init",
      "offset": [
        3445,
        4463
      ],
      "op": "POP",
      "path": "20"
    },
    "1801": {
      "fn": "CLFactory.Init",
      "offset": [
        3445,
        4463
      ],
      "op": "POP",
      "path": "20"
    },
    "1802": {
      "fn": "CLFactory.Init",
      "offset": [
        3445,
        4463
      ],
      "op": "POP",
      "path": "20"
    },
    "1803": {
      "fn": "CLFactory.Init",
      "offset": [
        3445,
        4463
      ],
      "op": "POP",
      "path": "20"
    },
    "1804": {
      "fn": "CLFactory.Init",
      "offset": [
        3445,
        4463
      ],
      "op": "POP",
      "path": "20"
    },
    "1805": {
      "fn": "CLFactory.Init",
      "offset": [
        3445,
        4463
      ],
      "op": "POP",
      "path": "20"
    },
    "1806": {
      "fn": "CLFactory.Init",
      "offset": [
        3445,
        4463
      ],
      "op": "POP",
      "path": "20"
    },
    "1807": {
      "fn": "CLFactory.Init",
      "offset": [
        3445,
        4463
      ],
      "op": "POP",
      "path": "20"
    },
    "1808": {
      "fn": "CLFactory.Init",
      "offset": [
        3445,
        4463
      ],
      "op": "POP",
      "path": "20"
    },
    "1809": {
      "fn": "CLFactory.Init",
      "jump": "o",
      "offset": [
        3445,
        4463
      ],
      "op": "JUMP",
      "path": "20"
    },
    "1810": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4966,
        6850
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "1811": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5258,
        5268
      ],
      "op": "CALLER",
      "path": "20"
    },
    "1812": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1814": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1816": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1818": {
      "op": "SHL"
    },
    "1819": {
      "op": "SUB"
    },
    "1820": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5283,
        5310
      ],
      "op": "DUP4",
      "path": "20"
    },
    "1821": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5283,
        5310
      ],
      "op": "AND",
      "path": "20"
    },
    "1822": {
      "branch": 32,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5283,
        5310
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "1823": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5279,
        5860
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x85D"
    },
    "1827": {
      "branch": 32,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5279,
        5860
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "1828": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5336,
        5346
      ],
      "op": "DUP2",
      "path": "20",
      "statement": 15
    },
    "1829": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5336,
        5353
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "1830": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5357,
        5359
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x41"
    },
    "1832": {
      "branch": 33,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5336,
        5359
      ],
      "op": "EQ",
      "path": "20"
    },
    "1833": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5327,
        5396
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x776"
    },
    "1837": {
      "branch": 33,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5327,
        5396
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "1838": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5327,
        5396
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "1840": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5327,
        5396
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "1841": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1845": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1847": {
      "op": "SHL"
    },
    "1848": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5327,
        5396
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1849": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5327,
        5396
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1850": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1852": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5327,
        5396
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "1854": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5327,
        5396
      ],
      "op": "DUP3",
      "path": "20"
    },
    "1855": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5327,
        5396
      ],
      "op": "ADD",
      "path": "20"
    },
    "1856": {
      "op": "MSTORE"
    },
    "1857": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1859": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1861": {
      "op": "DUP3"
    },
    "1862": {
      "op": "ADD"
    },
    "1863": {
      "op": "MSTORE"
    },
    "1864": {
      "op": "PUSH32",
      "value": "0x437265617465434C483A20426164207369676E6174757265206C656E67746800"
    },
    "1897": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1899": {
      "op": "DUP3"
    },
    "1900": {
      "op": "ADD"
    },
    "1901": {
      "op": "MSTORE"
    },
    "1902": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1904": {
      "op": "ADD"
    },
    "1905": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5327,
        5396
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x37D"
    },
    "1909": {
      "op": "JUMP"
    },
    "1910": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5327,
        5396
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "1911": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5474
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 16,
      "value": "0x6"
    },
    "1913": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5474
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "1914": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "1916": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "1917": {
      "op": "PUSH4",
      "value": "0x44D72583"
    },
    "1922": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1924": {
      "op": "SHL"
    },
    "1925": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1926": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "1927": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1929": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1931": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1933": {
      "op": "SHL"
    },
    "1934": {
      "op": "SUB"
    },
    "1935": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5474
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1936": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5474
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "1937": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5474
      ],
      "op": "AND",
      "path": "20"
    },
    "1938": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5474
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1939": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5489
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0x44D72583"
    },
    "1944": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5489
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1945": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x7B4"
    },
    "1949": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1950": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5511,
        5521
      ],
      "op": "DUP12",
      "path": "20"
    },
    "1951": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5511,
        5521
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1952": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5543,
        5556
      ],
      "op": "DUP12",
      "path": "20"
    },
    "1953": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5543,
        5556
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1954": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5578,
        5588
      ],
      "op": "DUP12",
      "path": "20"
    },
    "1955": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5578,
        5588
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1956": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5610,
        5626
      ],
      "op": "DUP12",
      "path": "20"
    },
    "1957": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5610,
        5626
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1958": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5648,
        5661
      ],
      "op": "DUP12",
      "path": "20"
    },
    "1959": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5648,
        5661
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1960": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5691,
        5695
      ],
      "op": "ADDRESS",
      "path": "20"
    },
    "1961": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5691,
        5695
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1962": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5718,
        5728
      ],
      "op": "DUP12",
      "path": "20"
    },
    "1963": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5718,
        5728
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "1964": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "1966": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "ADD",
      "path": "20"
    },
    "1967": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x10C3"
    },
    "1971": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        5465,
        5746
      ],
      "op": "JUMP",
      "path": "20"
    },
    "1972": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "1973": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "1975": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "1977": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "1978": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "DUP1",
      "path": "20"
    },
    "1979": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "DUP4",
      "path": "20"
    },
    "1980": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "SUB",
      "path": "20"
    },
    "1981": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "DUP2",
      "path": "20"
    },
    "1982": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "DUP7",
      "path": "20"
    },
    "1983": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "GAS",
      "path": "20"
    },
    "1984": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "STATICCALL",
      "path": "20"
    },
    "1985": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "1986": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "DUP1",
      "path": "20"
    },
    "1987": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "1988": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x7D2"
    },
    "1992": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "1993": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "RETURNDATASIZE",
      "path": "20"
    },
    "1994": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "1996": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "DUP1",
      "path": "20"
    },
    "1997": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "RETURNDATACOPY",
      "path": "20"
    },
    "1998": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "RETURNDATASIZE",
      "path": "20"
    },
    "1999": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "2001": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "REVERT",
      "path": "20"
    },
    "2002": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2003": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "POP",
      "path": "20"
    },
    "2004": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "POP",
      "path": "20"
    },
    "2005": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "POP",
      "path": "20"
    },
    "2006": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "POP",
      "path": "20"
    },
    "2007": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "2009": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2010": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "RETURNDATASIZE",
      "path": "20"
    },
    "2011": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x1F"
    },
    "2013": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "NOT",
      "path": "20"
    },
    "2014": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x1F"
    },
    "2016": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "DUP3",
      "path": "20"
    },
    "2017": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "ADD",
      "path": "20"
    },
    "2018": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "AND",
      "path": "20"
    },
    "2019": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "DUP3",
      "path": "20"
    },
    "2020": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "ADD",
      "path": "20"
    },
    "2021": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "DUP1",
      "path": "20"
    },
    "2022": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "2024": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2025": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "POP",
      "path": "20"
    },
    "2026": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2027": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "ADD",
      "path": "20"
    },
    "2028": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2029": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x7F8"
    },
    "2033": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2034": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2035": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x1128"
    },
    "2039": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        5465,
        5746
      ],
      "op": "JUMP",
      "path": "20"
    },
    "2040": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5746
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2041": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2043": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2045": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2047": {
      "op": "SHL"
    },
    "2048": {
      "op": "SUB"
    },
    "2049": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5448,
        5746
      ],
      "op": "AND",
      "path": "20"
    },
    "2050": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5448,
        5461
      ],
      "op": "DUP4",
      "path": "20"
    },
    "2051": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2053": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2055": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2057": {
      "op": "SHL"
    },
    "2058": {
      "op": "SUB"
    },
    "2059": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5448,
        5746
      ],
      "op": "AND",
      "path": "20"
    },
    "2060": {
      "branch": 34,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5448,
        5746
      ],
      "op": "EQ",
      "path": "20"
    },
    "2061": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5423,
        5808
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x85A"
    },
    "2065": {
      "branch": 34,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5423,
        5808
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "2066": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5423,
        5808
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "2068": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5423,
        5808
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2069": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2073": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2075": {
      "op": "SHL"
    },
    "2076": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5423,
        5808
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2077": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5423,
        5808
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2078": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2080": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5423,
        5808
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "2082": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5423,
        5808
      ],
      "op": "DUP3",
      "path": "20"
    },
    "2083": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5423,
        5808
      ],
      "op": "ADD",
      "path": "20"
    },
    "2084": {
      "op": "MSTORE"
    },
    "2085": {
      "op": "PUSH1",
      "value": "0x1C"
    },
    "2087": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2089": {
      "op": "DUP3"
    },
    "2090": {
      "op": "ADD"
    },
    "2091": {
      "op": "MSTORE"
    },
    "2092": {
      "op": "PUSH32",
      "value": "0x437265617465434C483A20496E76616C6964205369676E617475726500000000"
    },
    "2125": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2127": {
      "op": "DUP3"
    },
    "2128": {
      "op": "ADD"
    },
    "2129": {
      "op": "MSTORE"
    },
    "2130": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2132": {
      "op": "ADD"
    },
    "2133": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5423,
        5808
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x37D"
    },
    "2137": {
      "op": "JUMP"
    },
    "2138": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5423,
        5808
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2139": {
      "op": "POP"
    },
    "2140": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5836,
        5849
      ],
      "op": "DUP2",
      "path": "20",
      "statement": 17
    },
    "2141": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5279,
        5860
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2142": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5870,
        5898
      ],
      "op": "PUSH3",
      "path": "20",
      "statement": 18,
      "value": "0x868"
    },
    "2146": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5886,
        5896
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2147": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5870,
        5884
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0xA42"
    },
    "2151": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        5870,
        5898
      ],
      "op": "JUMP",
      "path": "20"
    },
    "2152": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5870,
        5898
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2153": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5964,
        5973
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x7"
    },
    "2155": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5964,
        5973
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "2156": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "2158": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "DUP1",
      "path": "20"
    },
    "2159": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2160": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0xE0"
    },
    "2162": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2163": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "ADD",
      "path": "20"
    },
    "2164": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "DUP3",
      "path": "20"
    },
    "2165": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2166": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6272,
        6289
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x2"
    },
    "2168": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6272,
        6289
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "2169": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2171": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2173": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2175": {
      "op": "SHL"
    },
    "2176": {
      "op": "SUB"
    },
    "2177": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6272,
        6289
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2178": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6272,
        6289
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2179": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6272,
        6289
      ],
      "op": "AND",
      "path": "20"
    },
    "2180": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "DUP3",
      "path": "20"
    },
    "2181": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2182": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6320,
        6324
      ],
      "op": "ADDRESS",
      "path": "20"
    },
    "2183": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "2185": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "DUP4",
      "path": "20"
    },
    "2186": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "ADD",
      "path": "20"
    },
    "2187": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2188": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6357,
        6366
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x6"
    },
    "2190": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6357,
        6366
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "2191": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6357,
        6366
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2192": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6357,
        6366
      ],
      "op": "AND",
      "path": "20"
    },
    "2193": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "DUP3",
      "path": "20"
    },
    "2194": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "DUP5",
      "path": "20"
    },
    "2195": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "ADD",
      "path": "20"
    },
    "2196": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2197": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6399,
        6412
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x8"
    },
    "2199": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6399,
        6412
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "2200": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6399,
        6412
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2201": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6399,
        6412
      ],
      "op": "AND",
      "path": "20"
    },
    "2202": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x60"
    },
    "2204": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "DUP4",
      "path": "20"
    },
    "2205": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "ADD",
      "path": "20"
    },
    "2206": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2207": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6445,
        6457
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x9"
    },
    "2209": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6445,
        6457
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "2210": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6445,
        6457
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2211": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6445,
        6457
      ],
      "op": "AND",
      "path": "20"
    },
    "2212": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x80"
    },
    "2214": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "DUP4",
      "path": "20"
    },
    "2215": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "ADD",
      "path": "20"
    },
    "2216": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2217": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6490,
        6506
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0xA"
    },
    "2219": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6490,
        6506
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "2220": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6490,
        6506
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2221": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6490,
        6506
      ],
      "op": "AND",
      "path": "20"
    },
    "2222": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0xA0"
    },
    "2224": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "DUP4",
      "path": "20"
    },
    "2225": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "ADD",
      "path": "20"
    },
    "2226": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2227": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "DUP8",
      "path": "20"
    },
    "2228": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2229": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "AND",
      "path": "20"
    },
    "2230": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0xC0"
    },
    "2232": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "DUP4",
      "path": "20"
    },
    "2233": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "ADD",
      "path": "20"
    },
    "2234": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2235": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2236": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2237": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5909,
        5925
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "2239": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5909,
        5925
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "2240": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5964,
        5973
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "2241": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5964,
        5973
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2242": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5964,
        5973
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "2243": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5964,
        5973
      ],
      "op": "AND",
      "path": "20"
    },
    "2244": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5964,
        5973
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2245": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x8DC"
    },
    "2249": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2250": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6099,
        6109
      ],
      "op": "DUP6",
      "path": "20"
    },
    "2251": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6099,
        6109
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2252": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6128,
        6138
      ],
      "op": "DUP14",
      "path": "20"
    },
    "2253": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6128,
        6138
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2254": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6156,
        6169
      ],
      "op": "DUP14",
      "path": "20"
    },
    "2255": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6156,
        6169
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2256": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6187,
        6197
      ],
      "op": "DUP14",
      "path": "20"
    },
    "2257": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6187,
        6197
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2258": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6215,
        6231
      ],
      "op": "DUP14",
      "path": "20"
    },
    "2259": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6215,
        6231
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2260": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x24"
    },
    "2262": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "ADD",
      "path": "20"
    },
    "2263": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x1148"
    },
    "2267": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        5989,
        6575
      ],
      "op": "JUMP",
      "path": "20"
    },
    "2268": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2269": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "2271": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "DUP1",
      "path": "20"
    },
    "2272": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2273": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2275": {
      "op": "NOT"
    },
    "2276": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2277": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "DUP5",
      "path": "20"
    },
    "2278": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "SUB",
      "path": "20"
    },
    "2279": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "ADD",
      "path": "20"
    },
    "2280": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2281": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2282": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2283": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2284": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2285": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "2287": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "DUP3",
      "path": "20"
    },
    "2288": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "ADD",
      "path": "20"
    },
    "2289": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "DUP1",
      "path": "20"
    },
    "2290": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2291": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2293": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2295": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2297": {
      "op": "SHL"
    },
    "2298": {
      "op": "SUB"
    },
    "2299": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "AND",
      "path": "20"
    },
    "2300": {
      "op": "PUSH4",
      "value": "0x5B4587E1"
    },
    "2305": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2307": {
      "op": "SHL"
    },
    "2308": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "OR",
      "path": "20"
    },
    "2309": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2310": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5989,
        6575
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2311": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5928,
        6585
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2312": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5928,
        6585
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x912"
    },
    "2316": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5928,
        6585
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2317": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5928,
        6585
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0xD4E"
    },
    "2321": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        5928,
        6585
      ],
      "op": "JUMP",
      "path": "20"
    },
    "2322": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5928,
        6585
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2323": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5928,
        6585
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x91F"
    },
    "2327": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5928,
        6585
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "2328": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5928,
        6585
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2329": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5928,
        6585
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2330": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5928,
        6585
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x11C5"
    },
    "2334": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        5928,
        6585
      ],
      "op": "JUMP",
      "path": "20"
    },
    "2335": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5928,
        6585
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2336": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5928,
        6585
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "2338": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5928,
        6585
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2339": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5928,
        6585
      ],
      "op": "DUP1",
      "path": "20"
    },
    "2340": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5928,
        6585
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2341": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5928,
        6585
      ],
      "op": "SUB",
      "path": "20"
    },
    "2342": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5928,
        6585
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2343": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5928,
        6585
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "2345": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5928,
        6585
      ],
      "op": "CREATE",
      "path": "20"
    },
    "2346": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5928,
        6585
      ],
      "op": "DUP1",
      "path": "20"
    },
    "2347": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5928,
        6585
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "2348": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5928,
        6585
      ],
      "op": "DUP1",
      "path": "20"
    },
    "2349": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5928,
        6585
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "2350": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5928,
        6585
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x93C"
    },
    "2354": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5928,
        6585
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "2355": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5928,
        6585
      ],
      "op": "RETURNDATASIZE",
      "path": "20"
    },
    "2356": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5928,
        6585
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "2358": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5928,
        6585
      ],
      "op": "DUP1",
      "path": "20"
    },
    "2359": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5928,
        6585
      ],
      "op": "RETURNDATACOPY",
      "path": "20"
    },
    "2360": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5928,
        6585
      ],
      "op": "RETURNDATASIZE",
      "path": "20"
    },
    "2361": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5928,
        6585
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "2363": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5928,
        6585
      ],
      "op": "REVERT",
      "path": "20"
    },
    "2364": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5928,
        6585
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2365": {
      "op": "POP"
    },
    "2366": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6596,
        6602
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 19,
      "value": "0x1"
    },
    "2368": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6596,
        6604
      ],
      "op": "DUP1",
      "path": "20"
    },
    "2369": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6596,
        6604
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "2370": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5909,
        6585
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2371": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5909,
        6585
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "2372": {
      "op": "POP"
    },
    "2373": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6596,
        6602
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "2375": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6596,
        6604
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x951"
    },
    "2379": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6596,
        6604
      ],
      "op": "DUP4",
      "path": "20"
    },
    "2380": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6596,
        6604
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x11F3"
    },
    "2384": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        6596,
        6604
      ],
      "op": "JUMP",
      "path": "20"
    },
    "2385": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6596,
        6604
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2386": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6596,
        6604
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2387": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6596,
        6604
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2388": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6596,
        6604
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "2389": {
      "op": "POP"
    },
    "2390": {
      "op": "POP"
    },
    "2391": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6622,
        6628
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 20,
      "value": "0x1"
    },
    "2393": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6622,
        6628
      ],
      "op": "DUP1",
      "path": "20"
    },
    "2394": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6622,
        6628
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "2395": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6614,
        6630
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "2397": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6614,
        6630
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2398": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6614,
        6630
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2399": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6614,
        6630
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2400": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6614,
        6620
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0xD"
    },
    "2402": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6614,
        6630
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "2404": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6614,
        6630
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2405": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6614,
        6630
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2406": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6614,
        6630
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2407": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6614,
        6630
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "2409": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6614,
        6630
      ],
      "op": "DUP1",
      "path": "20"
    },
    "2410": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6614,
        6630
      ],
      "op": "DUP4",
      "path": "20"
    },
    "2411": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6614,
        6630
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "2412": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6614,
        6662
      ],
      "op": "DUP1",
      "path": "20"
    },
    "2413": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6614,
        6662
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "2414": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2416": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2418": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2420": {
      "op": "SHL"
    },
    "2421": {
      "op": "SUB"
    },
    "2422": {
      "op": "NOT"
    },
    "2423": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6614,
        6662
      ],
      "op": "AND",
      "path": "20"
    },
    "2424": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2426": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2428": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2430": {
      "op": "SHL"
    },
    "2431": {
      "op": "SUB"
    },
    "2432": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6614,
        6662
      ],
      "op": "DUP8",
      "path": "20"
    },
    "2433": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6614,
        6662
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2434": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6614,
        6662
      ],
      "op": "AND",
      "path": "20"
    },
    "2435": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6614,
        6662
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2436": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6614,
        6662
      ],
      "op": "DUP3",
      "path": "20"
    },
    "2437": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6614,
        6662
      ],
      "op": "OR",
      "path": "20"
    },
    "2438": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6614,
        6662
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2439": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6614,
        6662
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "2440": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6614,
        6662
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "2441": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6704,
        6710
      ],
      "op": "SWAP5",
      "path": "20",
      "statement": 21
    },
    "2442": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6704,
        6710
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "2443": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6672,
        6701
      ],
      "op": "DUP6",
      "path": "20"
    },
    "2444": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6672,
        6701
      ],
      "op": "DUP6",
      "path": "20"
    },
    "2445": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6672,
        6701
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2446": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6672,
        6680
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0xC"
    },
    "2448": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6672,
        6701
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2449": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6672,
        6701
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "2450": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6672,
        6701
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2451": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6672,
        6701
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "2452": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6672,
        6701
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2453": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6672,
        6701
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2454": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6672,
        6701
      ],
      "op": "KECCAK256",
      "path": "20"
    },
    "2455": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6672,
        6710
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2456": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6672,
        6710
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2457": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6672,
        6710
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2458": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6672,
        6710
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "2459": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6734
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 22,
      "value": "0x8"
    },
    "2461": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6734
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "2462": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2463": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2464": {
      "op": "PUSH4",
      "value": "0x650938DB"
    },
    "2469": {
      "op": "PUSH1",
      "value": "0xE1"
    },
    "2471": {
      "op": "SHL"
    },
    "2472": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2473": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2474": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "2476": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2477": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "ADD",
      "path": "20"
    },
    "2478": {
      "op": "SWAP4"
    },
    "2479": {
      "op": "SWAP1"
    },
    "2480": {
      "op": "SWAP4"
    },
    "2481": {
      "op": "MSTORE"
    },
    "2482": {
      "op": "DUP5"
    },
    "2483": {
      "op": "DUP3"
    },
    "2484": {
      "op": "AND"
    },
    "2485": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2487": {
      "op": "DUP5"
    },
    "2488": {
      "op": "ADD"
    },
    "2489": {
      "op": "MSTORE"
    },
    "2490": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6734
      ],
      "op": "AND",
      "path": "20"
    },
    "2491": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6734
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2492": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6744
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xCA1271B6"
    },
    "2497": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6744
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2498": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2500": {
      "op": "ADD"
    },
    "2501": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "2503": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "2505": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2506": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "DUP1",
      "path": "20"
    },
    "2507": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "DUP4",
      "path": "20"
    },
    "2508": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "SUB",
      "path": "20"
    },
    "2509": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2510": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "2512": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "DUP8",
      "path": "20"
    },
    "2513": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "DUP1",
      "path": "20"
    },
    "2514": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "EXTCODESIZE",
      "path": "20"
    },
    "2515": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "2516": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "DUP1",
      "path": "20"
    },
    "2517": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "2518": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x9DF"
    },
    "2522": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "2523": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "2525": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "DUP1",
      "path": "20"
    },
    "2526": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "REVERT",
      "path": "20"
    },
    "2527": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2528": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "POP",
      "path": "20"
    },
    "2529": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "GAS",
      "path": "20"
    },
    "2530": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "CALL",
      "path": "20"
    },
    "2531": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "2532": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "DUP1",
      "path": "20"
    },
    "2533": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "2534": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x9F4"
    },
    "2538": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "2539": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "RETURNDATASIZE",
      "path": "20"
    },
    "2540": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "2542": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "DUP1",
      "path": "20"
    },
    "2543": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "RETURNDATACOPY",
      "path": "20"
    },
    "2544": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "RETURNDATASIZE",
      "path": "20"
    },
    "2545": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "2547": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "REVERT",
      "path": "20"
    },
    "2548": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2549": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "POP",
      "path": "20"
    },
    "2550": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "POP",
      "path": "20"
    },
    "2551": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "POP",
      "path": "20"
    },
    "2552": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6721,
        6777
      ],
      "op": "POP",
      "path": "20"
    },
    "2553": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6793,
        6843
      ],
      "op": "PUSH32",
      "path": "20",
      "statement": 23,
      "value": "0x6510209152E59FEB0A7445A97B24BC79BFCB456CA1D8BFF1E4980536C4E8CABB"
    },
    "2586": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6813,
        6819
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2587": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6823,
        6833
      ],
      "op": "DUP11",
      "path": "20"
    },
    "2588": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6835,
        6841
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x1"
    },
    "2590": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6835,
        6841
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "2591": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6793,
        6843
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "2593": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6793,
        6843
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2594": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6793,
        6843
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0xA2F"
    },
    "2598": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6793,
        6843
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "2599": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6793,
        6843
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "2600": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6793,
        6843
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2601": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6793,
        6843
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2602": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6793,
        6843
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x121D"
    },
    "2606": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        6793,
        6843
      ],
      "op": "JUMP",
      "path": "20"
    },
    "2607": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6793,
        6843
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2608": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6793,
        6843
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "2610": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6793,
        6843
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2611": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6793,
        6843
      ],
      "op": "DUP1",
      "path": "20"
    },
    "2612": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6793,
        6843
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2613": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6793,
        6843
      ],
      "op": "SUB",
      "path": "20"
    },
    "2614": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6793,
        6843
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2615": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        6793,
        6843
      ],
      "op": "LOG1",
      "path": "20"
    },
    "2616": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5227,
        6850
      ],
      "op": "POP",
      "path": "20"
    },
    "2617": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5227,
        6850
      ],
      "op": "POP",
      "path": "20"
    },
    "2618": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4966,
        6850
      ],
      "op": "POP",
      "path": "20"
    },
    "2619": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4966,
        6850
      ],
      "op": "POP",
      "path": "20"
    },
    "2620": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4966,
        6850
      ],
      "op": "POP",
      "path": "20"
    },
    "2621": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4966,
        6850
      ],
      "op": "POP",
      "path": "20"
    },
    "2622": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4966,
        6850
      ],
      "op": "POP",
      "path": "20"
    },
    "2623": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4966,
        6850
      ],
      "op": "POP",
      "path": "20"
    },
    "2624": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4966,
        6850
      ],
      "op": "POP",
      "path": "20"
    },
    "2625": {
      "fn": "CLFactory.CreateCLH",
      "jump": "o",
      "offset": [
        4966,
        6850
      ],
      "op": "JUMP",
      "path": "20"
    },
    "2626": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2506,
        2652
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2627": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2596
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 24,
      "value": "0xB"
    },
    "2629": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2596
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "2630": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "2632": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2633": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "2638": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2640": {
      "op": "SHL"
    },
    "2641": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2642": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2643": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2645": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2647": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2649": {
      "op": "SHL"
    },
    "2650": {
      "op": "SUB"
    },
    "2651": {
      "op": "DUP4"
    },
    "2652": {
      "op": "DUP2"
    },
    "2653": {
      "op": "AND"
    },
    "2654": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "2656": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "DUP4",
      "path": "20"
    },
    "2657": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "ADD",
      "path": "20"
    },
    "2658": {
      "op": "MSTORE"
    },
    "2659": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2596
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2660": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2596
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2661": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2596
      ],
      "op": "AND",
      "path": "20"
    },
    "2662": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2596
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2663": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2606
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0x70A08231"
    },
    "2668": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2606
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2669": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2671": {
      "op": "ADD"
    },
    "2672": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "2674": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "2676": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2677": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "DUP1",
      "path": "20"
    },
    "2678": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "DUP4",
      "path": "20"
    },
    "2679": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "SUB",
      "path": "20"
    },
    "2680": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2681": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "DUP7",
      "path": "20"
    },
    "2682": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "GAS",
      "path": "20"
    },
    "2683": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "STATICCALL",
      "path": "20"
    },
    "2684": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "2685": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "DUP1",
      "path": "20"
    },
    "2686": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "2687": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0xA8D"
    },
    "2691": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "2692": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "RETURNDATASIZE",
      "path": "20"
    },
    "2693": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "2695": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "DUP1",
      "path": "20"
    },
    "2696": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "RETURNDATACOPY",
      "path": "20"
    },
    "2697": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "RETURNDATASIZE",
      "path": "20"
    },
    "2698": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "2700": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "REVERT",
      "path": "20"
    },
    "2701": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2702": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "POP",
      "path": "20"
    },
    "2703": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "POP",
      "path": "20"
    },
    "2704": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "POP",
      "path": "20"
    },
    "2705": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "POP",
      "path": "20"
    },
    "2706": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "2708": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2709": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "RETURNDATASIZE",
      "path": "20"
    },
    "2710": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x1F"
    },
    "2712": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "NOT",
      "path": "20"
    },
    "2713": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x1F"
    },
    "2715": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "DUP3",
      "path": "20"
    },
    "2716": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "ADD",
      "path": "20"
    },
    "2717": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "AND",
      "path": "20"
    },
    "2718": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "DUP3",
      "path": "20"
    },
    "2719": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "ADD",
      "path": "20"
    },
    "2720": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "DUP1",
      "path": "20"
    },
    "2721": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "2723": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2724": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "POP",
      "path": "20"
    },
    "2725": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2726": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "ADD",
      "path": "20"
    },
    "2727": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2728": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0xAB3"
    },
    "2732": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2733": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2734": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x1253"
    },
    "2738": {
      "fn": "CLFactory.checkAccessNFT",
      "jump": "i",
      "offset": [
        2580,
        2617
      ],
      "op": "JUMP",
      "path": "20"
    },
    "2739": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2580,
        2617
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2740": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2566,
        2645
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0xAF9"
    },
    "2744": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2566,
        2645
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "2745": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2566,
        2645
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "2747": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2566,
        2645
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2748": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2752": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2754": {
      "op": "SHL"
    },
    "2755": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2566,
        2645
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2756": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2566,
        2645
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2757": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2759": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2566,
        2645
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "2761": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2566,
        2645
      ],
      "op": "DUP3",
      "path": "20"
    },
    "2762": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2566,
        2645
      ],
      "op": "ADD",
      "path": "20"
    },
    "2763": {
      "op": "MSTORE"
    },
    "2764": {
      "op": "PUSH1",
      "value": "0x15"
    },
    "2766": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2768": {
      "op": "DUP3"
    },
    "2769": {
      "op": "ADD"
    },
    "2770": {
      "op": "MSTORE"
    },
    "2771": {
      "op": "PUSH21",
      "value": "0x111BDB89DD081A185D99481058D8D95CDCC8139195"
    },
    "2793": {
      "op": "PUSH1",
      "value": "0x5A"
    },
    "2795": {
      "op": "SHL"
    },
    "2796": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2798": {
      "op": "DUP3"
    },
    "2799": {
      "op": "ADD"
    },
    "2800": {
      "op": "MSTORE"
    },
    "2801": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2803": {
      "op": "ADD"
    },
    "2804": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2566,
        2645
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x37D"
    },
    "2808": {
      "op": "JUMP"
    },
    "2809": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2566,
        2645
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2810": {
      "fn": "CLFactory.checkAccessNFT",
      "offset": [
        2506,
        2652
      ],
      "op": "POP",
      "path": "20"
    },
    "2811": {
      "fn": "CLFactory.checkAccessNFT",
      "jump": "o",
      "offset": [
        2506,
        2652
      ],
      "op": "JUMP",
      "path": "20"
    },
    "2812": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6915,
        7029
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2813": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7005
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 25,
      "value": "0x7"
    },
    "2815": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7005
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "2816": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "2818": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "DUP1",
      "path": "20"
    },
    "2819": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2820": {
      "op": "PUSH4",
      "value": "0x5C60DA1B"
    },
    "2825": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2827": {
      "op": "SHL"
    },
    "2828": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2829": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2830": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2831": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2832": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6970,
        6977
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "2834": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6970,
        6977
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "2835": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2837": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2839": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2841": {
      "op": "SHL"
    },
    "2842": {
      "op": "SUB"
    },
    "2843": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7005
      ],
      "op": "AND",
      "path": "20"
    },
    "2844": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7005
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2845": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7020
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0x5C60DA1B"
    },
    "2850": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7020
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2851": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "2853": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "DUP1",
      "path": "20"
    },
    "2854": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "DUP4",
      "path": "20"
    },
    "2855": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "ADD",
      "path": "20"
    },
    "2856": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "2857": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "2859": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "2860": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2861": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2862": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "DUP3",
      "path": "20"
    },
    "2863": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2864": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "SUB",
      "path": "20"
    },
    "2865": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "ADD",
      "path": "20"
    },
    "2866": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2867": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7005
      ],
      "op": "DUP7",
      "path": "20"
    },
    "2868": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "GAS",
      "path": "20"
    },
    "2869": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "STATICCALL",
      "path": "20"
    },
    "2870": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "2871": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "DUP1",
      "path": "20"
    },
    "2872": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "2873": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0xB47"
    },
    "2877": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "2878": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "RETURNDATASIZE",
      "path": "20"
    },
    "2879": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "2881": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "DUP1",
      "path": "20"
    },
    "2882": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "RETURNDATACOPY",
      "path": "20"
    },
    "2883": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "RETURNDATASIZE",
      "path": "20"
    },
    "2884": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "2886": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "REVERT",
      "path": "20"
    },
    "2887": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2888": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "POP",
      "path": "20"
    },
    "2889": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "POP",
      "path": "20"
    },
    "2890": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "POP",
      "path": "20"
    },
    "2891": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "POP",
      "path": "20"
    },
    "2892": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "2894": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2895": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "RETURNDATASIZE",
      "path": "20"
    },
    "2896": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x1F"
    },
    "2898": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "NOT",
      "path": "20"
    },
    "2899": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x1F"
    },
    "2901": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "DUP3",
      "path": "20"
    },
    "2902": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "ADD",
      "path": "20"
    },
    "2903": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "AND",
      "path": "20"
    },
    "2904": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "DUP3",
      "path": "20"
    },
    "2905": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "ADD",
      "path": "20"
    },
    "2906": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "DUP1",
      "path": "20"
    },
    "2907": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "2909": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2910": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "POP",
      "path": "20"
    },
    "2911": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2912": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "ADD",
      "path": "20"
    },
    "2913": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2914": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0xB6D"
    },
    "2918": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "2919": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2920": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x1128"
    },
    "2924": {
      "fn": "CLFactory.getCLHImplementation",
      "jump": "i",
      "offset": [
        6996,
        7022
      ],
      "op": "JUMP",
      "path": "20"
    },
    "2925": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6996,
        7022
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2926": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6989,
        7022
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2927": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6989,
        7022
      ],
      "op": "POP",
      "path": "20"
    },
    "2928": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6915,
        7029
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2929": {
      "fn": "CLFactory.getCLHImplementation",
      "jump": "o",
      "offset": [
        6915,
        7029
      ],
      "op": "JUMP",
      "path": "20"
    },
    "2930": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        7426,
        7687
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2931": {
      "offset": [
        2451,
        2459
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x5"
    },
    "2933": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        2451,
        2459
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "2934": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2936": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2938": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2940": {
      "op": "SHL"
    },
    "2941": {
      "op": "SUB"
    },
    "2942": {
      "offset": [
        2451,
        2459
      ],
      "op": "AND",
      "path": "20"
    },
    "2943": {
      "offset": [
        2437,
        2447
      ],
      "op": "CALLER",
      "path": "20"
    },
    "2944": {
      "offset": [
        2437,
        2459
      ],
      "op": "EQ",
      "path": "20"
    },
    "2945": {
      "offset": [
        2428,
        2482
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0xB9F"
    },
    "2949": {
      "offset": [
        2428,
        2482
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "2950": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        2428,
        2482
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "2952": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        2428,
        2482
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "2953": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2957": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2959": {
      "op": "SHL"
    },
    "2960": {
      "offset": [
        2428,
        2482
      ],
      "op": "DUP2",
      "path": "20"
    },
    "2961": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        2428,
        2482
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "2962": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        2428,
        2482
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "2964": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        2428,
        2482
      ],
      "op": "ADD",
      "path": "20"
    },
    "2965": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        2428,
        2482
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x37D"
    },
    "2969": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        2428,
        2482
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "2970": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        2428,
        2482
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x1048"
    },
    "2974": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "jump": "i",
      "offset": [
        2428,
        2482
      ],
      "op": "JUMP",
      "path": "20"
    },
    "2975": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        2428,
        2482
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "2976": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        7536,
        7553
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x3"
    },
    "2978": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        7536,
        7553
      ],
      "op": "DUP1",
      "path": "20"
    },
    "2979": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        7536,
        7553
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "2980": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2982": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2984": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2986": {
      "op": "SHL"
    },
    "2987": {
      "op": "SUB"
    },
    "2988": {
      "op": "NOT"
    },
    "2989": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        7563,
        7601
      ],
      "op": "DUP2",
      "path": "20",
      "statement": 26
    },
    "2990": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        7563,
        7601
      ],
      "op": "AND",
      "path": "20"
    },
    "2991": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2993": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2995": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2997": {
      "op": "SHL"
    },
    "2998": {
      "op": "SUB"
    },
    "2999": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        7563,
        7601
      ],
      "op": "DUP5",
      "path": "20"
    },
    "3000": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        7563,
        7601
      ],
      "op": "DUP2",
      "path": "20"
    },
    "3001": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        7563,
        7601
      ],
      "op": "AND",
      "path": "20"
    },
    "3002": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        7563,
        7601
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "3003": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        7563,
        7601
      ],
      "op": "DUP3",
      "path": "20"
    },
    "3004": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        7563,
        7601
      ],
      "op": "OR",
      "path": "20"
    },
    "3005": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        7563,
        7601
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3006": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        7563,
        7601
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "3007": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        7563,
        7601
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "3008": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        7616,
        7680
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 27,
      "value": "0x40"
    },
    "3010": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        7616,
        7680
      ],
      "op": "DUP1",
      "path": "20"
    },
    "3011": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        7616,
        7680
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "3012": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3014": {
      "op": "DUP1"
    },
    "3015": {
      "op": "DUP3"
    },
    "3016": {
      "op": "MSTORE"
    },
    "3017": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "3019": {
      "op": "SWAP1"
    },
    "3020": {
      "op": "DUP3"
    },
    "3021": {
      "op": "ADD"
    },
    "3022": {
      "op": "MSTORE"
    },
    "3023": {
      "op": "PUSH17",
      "value": "0x10D313155CD95C93585B9859D95B595B9D"
    },
    "3041": {
      "op": "PUSH1",
      "value": "0x7A"
    },
    "3043": {
      "op": "SHL"
    },
    "3044": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3046": {
      "op": "DUP3"
    },
    "3047": {
      "op": "ADD"
    },
    "3048": {
      "op": "MSTORE"
    },
    "3049": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        7536,
        7553
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "3050": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        7536,
        7553
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3051": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        7536,
        7553
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "3052": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        7536,
        7553
      ],
      "op": "AND",
      "path": "20"
    },
    "3053": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3055": {
      "op": "DUP5"
    },
    "3056": {
      "op": "ADD"
    },
    "3057": {
      "op": "DUP2"
    },
    "3058": {
      "op": "SWAP1"
    },
    "3059": {
      "op": "MSTORE"
    },
    "3060": {
      "op": "SWAP2"
    },
    "3061": {
      "op": "DUP4"
    },
    "3062": {
      "op": "ADD"
    },
    "3063": {
      "op": "MSTORE"
    },
    "3064": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        7536,
        7553
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3065": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3067": {
      "op": "DUP1"
    },
    "3068": {
      "op": "MLOAD"
    },
    "3069": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3071": {
      "op": "PUSH3",
      "value": "0x1B79"
    },
    "3075": {
      "op": "DUP4"
    },
    "3076": {
      "op": "CODECOPY"
    },
    "3077": {
      "op": "DUP2"
    },
    "3078": {
      "op": "MLOAD"
    },
    "3079": {
      "op": "SWAP2"
    },
    "3080": {
      "op": "MSTORE"
    },
    "3081": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        7616,
        7680
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3082": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3084": {
      "op": "ADD"
    },
    "3085": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        7616,
        7680
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x3EC"
    },
    "3089": {
      "op": "JUMP"
    },
    "3090": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7751,
        7984
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "3091": {
      "offset": [
        2451,
        2459
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x5"
    },
    "3093": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        2451,
        2459
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "3094": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3096": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3098": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3100": {
      "op": "SHL"
    },
    "3101": {
      "op": "SUB"
    },
    "3102": {
      "offset": [
        2451,
        2459
      ],
      "op": "AND",
      "path": "20"
    },
    "3103": {
      "offset": [
        2437,
        2447
      ],
      "op": "CALLER",
      "path": "20"
    },
    "3104": {
      "offset": [
        2437,
        2459
      ],
      "op": "EQ",
      "path": "20"
    },
    "3105": {
      "offset": [
        2428,
        2482
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0xC3F"
    },
    "3109": {
      "offset": [
        2428,
        2482
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "3110": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        2428,
        2482
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "3112": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        2428,
        2482
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "3113": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3117": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3119": {
      "op": "SHL"
    },
    "3120": {
      "offset": [
        2428,
        2482
      ],
      "op": "DUP2",
      "path": "20"
    },
    "3121": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        2428,
        2482
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "3122": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        2428,
        2482
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "3124": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        2428,
        2482
      ],
      "op": "ADD",
      "path": "20"
    },
    "3125": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        2428,
        2482
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x37D"
    },
    "3129": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        2428,
        2482
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3130": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        2428,
        2482
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x1048"
    },
    "3134": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "jump": "i",
      "offset": [
        2428,
        2482
      ],
      "op": "JUMP",
      "path": "20"
    },
    "3135": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        2428,
        2482
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "3136": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7853,
        7866
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "3138": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7853,
        7866
      ],
      "op": "DUP1",
      "path": "20"
    },
    "3139": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7853,
        7866
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "3140": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3142": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3144": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3146": {
      "op": "SHL"
    },
    "3147": {
      "op": "SUB"
    },
    "3148": {
      "op": "NOT"
    },
    "3149": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7876,
        7906
      ],
      "op": "DUP2",
      "path": "20",
      "statement": 28
    },
    "3150": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7876,
        7906
      ],
      "op": "AND",
      "path": "20"
    },
    "3151": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3153": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3155": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3157": {
      "op": "SHL"
    },
    "3158": {
      "op": "SUB"
    },
    "3159": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7876,
        7906
      ],
      "op": "DUP5",
      "path": "20"
    },
    "3160": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7876,
        7906
      ],
      "op": "DUP2",
      "path": "20"
    },
    "3161": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7876,
        7906
      ],
      "op": "AND",
      "path": "20"
    },
    "3162": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7876,
        7906
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "3163": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7876,
        7906
      ],
      "op": "DUP3",
      "path": "20"
    },
    "3164": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7876,
        7906
      ],
      "op": "OR",
      "path": "20"
    },
    "3165": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7876,
        7906
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3166": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7876,
        7906
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "3167": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7876,
        7906
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "3168": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7921,
        7977
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 29,
      "value": "0x40"
    },
    "3170": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7921,
        7977
      ],
      "op": "DUP1",
      "path": "20"
    },
    "3171": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7921,
        7977
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "3172": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3174": {
      "op": "DUP1"
    },
    "3175": {
      "op": "DUP3"
    },
    "3176": {
      "op": "MSTORE"
    },
    "3177": {
      "op": "PUSH1",
      "value": "0xD"
    },
    "3179": {
      "op": "SWAP1"
    },
    "3180": {
      "op": "DUP3"
    },
    "3181": {
      "op": "ADD"
    },
    "3182": {
      "op": "MSTORE"
    },
    "3183": {
      "op": "PUSH13",
      "value": "0x434C4C476F7665726E616E6365"
    },
    "3197": {
      "op": "PUSH1",
      "value": "0x98"
    },
    "3199": {
      "op": "SHL"
    },
    "3200": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3202": {
      "op": "DUP3"
    },
    "3203": {
      "op": "ADD"
    },
    "3204": {
      "op": "MSTORE"
    },
    "3205": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7853,
        7866
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "3206": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7853,
        7866
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3207": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7853,
        7866
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "3208": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7853,
        7866
      ],
      "op": "AND",
      "path": "20"
    },
    "3209": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3211": {
      "op": "DUP5"
    },
    "3212": {
      "op": "ADD"
    },
    "3213": {
      "op": "DUP2"
    },
    "3214": {
      "op": "SWAP1"
    },
    "3215": {
      "op": "MSTORE"
    },
    "3216": {
      "op": "SWAP2"
    },
    "3217": {
      "op": "DUP4"
    },
    "3218": {
      "op": "ADD"
    },
    "3219": {
      "op": "MSTORE"
    },
    "3220": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7853,
        7866
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3221": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3223": {
      "op": "DUP1"
    },
    "3224": {
      "op": "MLOAD"
    },
    "3225": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3227": {
      "op": "PUSH3",
      "value": "0x1B79"
    },
    "3231": {
      "op": "DUP4"
    },
    "3232": {
      "op": "CODECOPY"
    },
    "3233": {
      "op": "DUP2"
    },
    "3234": {
      "op": "MLOAD"
    },
    "3235": {
      "op": "SWAP2"
    },
    "3236": {
      "op": "MSTORE"
    },
    "3237": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7921,
        7977
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3238": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3240": {
      "op": "ADD"
    },
    "3241": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7921,
        7977
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x3EC"
    },
    "3245": {
      "op": "JUMP"
    },
    "3246": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        7097,
        7358
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "3247": {
      "offset": [
        2451,
        2459
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x5"
    },
    "3249": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        2451,
        2459
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "3250": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3252": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3254": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3256": {
      "op": "SHL"
    },
    "3257": {
      "op": "SUB"
    },
    "3258": {
      "offset": [
        2451,
        2459
      ],
      "op": "AND",
      "path": "20"
    },
    "3259": {
      "offset": [
        2437,
        2447
      ],
      "op": "CALLER",
      "path": "20"
    },
    "3260": {
      "offset": [
        2437,
        2459
      ],
      "op": "EQ",
      "path": "20"
    },
    "3261": {
      "offset": [
        2428,
        2482
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0xCDB"
    },
    "3265": {
      "offset": [
        2428,
        2482
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "3266": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        2428,
        2482
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "3268": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        2428,
        2482
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "3269": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3273": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3275": {
      "op": "SHL"
    },
    "3276": {
      "offset": [
        2428,
        2482
      ],
      "op": "DUP2",
      "path": "20"
    },
    "3277": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        2428,
        2482
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "3278": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        2428,
        2482
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "3280": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        2428,
        2482
      ],
      "op": "ADD",
      "path": "20"
    },
    "3281": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        2428,
        2482
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x37D"
    },
    "3285": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        2428,
        2482
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3286": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        2428,
        2482
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x1048"
    },
    "3290": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "jump": "i",
      "offset": [
        2428,
        2482
      ],
      "op": "JUMP",
      "path": "20"
    },
    "3291": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        2428,
        2482
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "3292": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        7207,
        7224
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x2"
    },
    "3294": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        7207,
        7224
      ],
      "op": "DUP1",
      "path": "20"
    },
    "3295": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        7207,
        7224
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "3296": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3298": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3300": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3302": {
      "op": "SHL"
    },
    "3303": {
      "op": "SUB"
    },
    "3304": {
      "op": "NOT"
    },
    "3305": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        7234,
        7272
      ],
      "op": "DUP2",
      "path": "20",
      "statement": 30
    },
    "3306": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        7234,
        7272
      ],
      "op": "AND",
      "path": "20"
    },
    "3307": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3309": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3311": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3313": {
      "op": "SHL"
    },
    "3314": {
      "op": "SUB"
    },
    "3315": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        7234,
        7272
      ],
      "op": "DUP5",
      "path": "20"
    },
    "3316": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        7234,
        7272
      ],
      "op": "DUP2",
      "path": "20"
    },
    "3317": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        7234,
        7272
      ],
      "op": "AND",
      "path": "20"
    },
    "3318": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        7234,
        7272
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "3319": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        7234,
        7272
      ],
      "op": "DUP3",
      "path": "20"
    },
    "3320": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        7234,
        7272
      ],
      "op": "OR",
      "path": "20"
    },
    "3321": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        7234,
        7272
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3322": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        7234,
        7272
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "3323": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        7234,
        7272
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "3324": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        7287,
        7351
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 31,
      "value": "0x40"
    },
    "3326": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        7287,
        7351
      ],
      "op": "DUP1",
      "path": "20"
    },
    "3327": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        7287,
        7351
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "3328": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3330": {
      "op": "DUP1"
    },
    "3331": {
      "op": "DUP3"
    },
    "3332": {
      "op": "MSTORE"
    },
    "3333": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "3335": {
      "op": "SWAP1"
    },
    "3336": {
      "op": "DUP3"
    },
    "3337": {
      "op": "ADD"
    },
    "3338": {
      "op": "MSTORE"
    },
    "3339": {
      "op": "PUSH17",
      "value": "0x86989886DEDCE6E8E4EAC6E8DEE486989"
    },
    "3357": {
      "op": "PUSH1",
      "value": "0x7B"
    },
    "3359": {
      "op": "SHL"
    },
    "3360": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3362": {
      "op": "DUP3"
    },
    "3363": {
      "op": "ADD"
    },
    "3364": {
      "op": "MSTORE"
    },
    "3365": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        7207,
        7224
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "3366": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        7207,
        7224
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3367": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        7207,
        7224
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "3368": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        7207,
        7224
      ],
      "op": "AND",
      "path": "20"
    },
    "3369": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3371": {
      "op": "DUP5"
    },
    "3372": {
      "op": "ADD"
    },
    "3373": {
      "op": "DUP2"
    },
    "3374": {
      "op": "SWAP1"
    },
    "3375": {
      "op": "MSTORE"
    },
    "3376": {
      "op": "SWAP2"
    },
    "3377": {
      "op": "DUP4"
    },
    "3378": {
      "op": "ADD"
    },
    "3379": {
      "op": "MSTORE"
    },
    "3380": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        7207,
        7224
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3381": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3383": {
      "op": "DUP1"
    },
    "3384": {
      "op": "MLOAD"
    },
    "3385": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3387": {
      "op": "PUSH3",
      "value": "0x1B79"
    },
    "3391": {
      "op": "DUP4"
    },
    "3392": {
      "op": "CODECOPY"
    },
    "3393": {
      "op": "DUP2"
    },
    "3394": {
      "op": "MLOAD"
    },
    "3395": {
      "op": "SWAP2"
    },
    "3396": {
      "op": "MSTORE"
    },
    "3397": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        7287,
        7351
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "3398": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3400": {
      "op": "ADD"
    },
    "3401": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        7287,
        7351
      ],
      "op": "PUSH3",
      "path": "20",
      "value": "0x3EC"
    },
    "3405": {
      "op": "JUMP"
    },
    "3406": {
      "op": "JUMPDEST"
    },
    "3407": {
      "op": "PUSH2",
      "value": "0x90B"
    },
    "3410": {
      "op": "DUP1"
    },
    "3411": {
      "op": "PUSH3",
      "value": "0x126E"
    },
    "3415": {
      "op": "DUP4"
    },
    "3416": {
      "op": "CODECOPY"
    },
    "3417": {
      "op": "ADD"
    },
    "3418": {
      "op": "SWAP1"
    },
    "3419": {
      "jump": "o",
      "op": "JUMP"
    },
    "3420": {
      "op": "JUMPDEST"
    },
    "3421": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3423": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3425": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3427": {
      "op": "SHL"
    },
    "3428": {
      "op": "SUB"
    },
    "3429": {
      "op": "DUP2"
    },
    "3430": {
      "op": "AND"
    },
    "3431": {
      "op": "DUP2"
    },
    "3432": {
      "op": "EQ"
    },
    "3433": {
      "op": "PUSH3",
      "value": "0xAF9"
    },
    "3437": {
      "op": "JUMPI"
    },
    "3438": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3440": {
      "op": "DUP1"
    },
    "3441": {
      "op": "REVERT"
    },
    "3442": {
      "op": "JUMPDEST"
    },
    "3443": {
      "op": "DUP1"
    },
    "3444": {
      "op": "CALLDATALOAD"
    },
    "3445": {
      "op": "PUSH3",
      "value": "0xD7F"
    },
    "3449": {
      "op": "DUP2"
    },
    "3450": {
      "op": "PUSH3",
      "value": "0xD5C"
    },
    "3454": {
      "jump": "i",
      "op": "JUMP"
    },
    "3455": {
      "op": "JUMPDEST"
    },
    "3456": {
      "op": "SWAP2"
    },
    "3457": {
      "op": "SWAP1"
    },
    "3458": {
      "op": "POP"
    },
    "3459": {
      "jump": "o",
      "op": "JUMP"
    },
    "3460": {
      "op": "JUMPDEST"
    },
    "3461": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3463": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3465": {
      "op": "DUP3"
    },
    "3466": {
      "op": "DUP5"
    },
    "3467": {
      "op": "SUB"
    },
    "3468": {
      "op": "SLT"
    },
    "3469": {
      "op": "ISZERO"
    },
    "3470": {
      "op": "PUSH3",
      "value": "0xD97"
    },
    "3474": {
      "op": "JUMPI"
    },
    "3475": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3477": {
      "op": "DUP1"
    },
    "3478": {
      "op": "REVERT"
    },
    "3479": {
      "op": "JUMPDEST"
    },
    "3480": {
      "op": "DUP2"
    },
    "3481": {
      "op": "CALLDATALOAD"
    },
    "3482": {
      "op": "PUSH3",
      "value": "0xDA4"
    },
    "3486": {
      "op": "DUP2"
    },
    "3487": {
      "op": "PUSH3",
      "value": "0xD5C"
    },
    "3491": {
      "jump": "i",
      "op": "JUMP"
    },
    "3492": {
      "op": "JUMPDEST"
    },
    "3493": {
      "op": "SWAP4"
    },
    "3494": {
      "op": "SWAP3"
    },
    "3495": {
      "op": "POP"
    },
    "3496": {
      "op": "POP"
    },
    "3497": {
      "op": "POP"
    },
    "3498": {
      "jump": "o",
      "op": "JUMP"
    },
    "3499": {
      "op": "JUMPDEST"
    },
    "3500": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3502": {
      "op": "DUP1"
    },
    "3503": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3505": {
      "op": "DUP1"
    },
    "3506": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3508": {
      "op": "DUP1"
    },
    "3509": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3511": {
      "op": "DUP1"
    },
    "3512": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3514": {
      "op": "DUP1"
    },
    "3515": {
      "op": "PUSH2",
      "value": "0x140"
    },
    "3518": {
      "op": "DUP12"
    },
    "3519": {
      "op": "DUP14"
    },
    "3520": {
      "op": "SUB"
    },
    "3521": {
      "op": "SLT"
    },
    "3522": {
      "op": "ISZERO"
    },
    "3523": {
      "op": "PUSH3",
      "value": "0xDCC"
    },
    "3527": {
      "op": "JUMPI"
    },
    "3528": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3530": {
      "op": "DUP1"
    },
    "3531": {
      "op": "REVERT"
    },
    "3532": {
      "op": "JUMPDEST"
    },
    "3533": {
      "op": "DUP11"
    },
    "3534": {
      "op": "CALLDATALOAD"
    },
    "3535": {
      "op": "PUSH3",
      "value": "0xDD9"
    },
    "3539": {
      "op": "DUP2"
    },
    "3540": {
      "op": "PUSH3",
      "value": "0xD5C"
    },
    "3544": {
      "jump": "i",
      "op": "JUMP"
    },
    "3545": {
      "op": "JUMPDEST"
    },
    "3546": {
      "op": "SWAP10"
    },
    "3547": {
      "op": "POP"
    },
    "3548": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3550": {
      "op": "DUP12"
    },
    "3551": {
      "op": "ADD"
    },
    "3552": {
      "op": "CALLDATALOAD"
    },
    "3553": {
      "op": "PUSH3",
      "value": "0xDEB"
    },
    "3557": {
      "op": "DUP2"
    },
    "3558": {
      "op": "PUSH3",
      "value": "0xD5C"
    },
    "3562": {
      "jump": "i",
      "op": "JUMP"
    },
    "3563": {
      "op": "JUMPDEST"
    },
    "3564": {
      "op": "SWAP9"
    },
    "3565": {
      "op": "POP"
    },
    "3566": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3568": {
      "op": "DUP12"
    },
    "3569": {
      "op": "ADD"
    },
    "3570": {
      "op": "CALLDATALOAD"
    },
    "3571": {
      "op": "PUSH3",
      "value": "0xDFD"
    },
    "3575": {
      "op": "DUP2"
    },
    "3576": {
      "op": "PUSH3",
      "value": "0xD5C"
    },
    "3580": {
      "jump": "i",
      "op": "JUMP"
    },
    "3581": {
      "op": "JUMPDEST"
    },
    "3582": {
      "op": "SWAP8"
    },
    "3583": {
      "op": "POP"
    },
    "3584": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3586": {
      "op": "DUP12"
    },
    "3587": {
      "op": "ADD"
    },
    "3588": {
      "op": "CALLDATALOAD"
    },
    "3589": {
      "op": "PUSH3",
      "value": "0xE0F"
    },
    "3593": {
      "op": "DUP2"
    },
    "3594": {
      "op": "PUSH3",
      "value": "0xD5C"
    },
    "3598": {
      "jump": "i",
      "op": "JUMP"
    },
    "3599": {
      "op": "JUMPDEST"
    },
    "3600": {
      "op": "SWAP7"
    },
    "3601": {
      "op": "POP"
    },
    "3602": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3604": {
      "op": "DUP12"
    },
    "3605": {
      "op": "ADD"
    },
    "3606": {
      "op": "CALLDATALOAD"
    },
    "3607": {
      "op": "PUSH3",
      "value": "0xE21"
    },
    "3611": {
      "op": "DUP2"
    },
    "3612": {
      "op": "PUSH3",
      "value": "0xD5C"
    },
    "3616": {
      "jump": "i",
      "op": "JUMP"
    },
    "3617": {
      "op": "JUMPDEST"
    },
    "3618": {
      "op": "SWAP6"
    },
    "3619": {
      "op": "POP"
    },
    "3620": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3622": {
      "op": "DUP12"
    },
    "3623": {
      "op": "ADD"
    },
    "3624": {
      "op": "CALLDATALOAD"
    },
    "3625": {
      "op": "PUSH3",
      "value": "0xE33"
    },
    "3629": {
      "op": "DUP2"
    },
    "3630": {
      "op": "PUSH3",
      "value": "0xD5C"
    },
    "3634": {
      "jump": "i",
      "op": "JUMP"
    },
    "3635": {
      "op": "JUMPDEST"
    },
    "3636": {
      "op": "SWAP5"
    },
    "3637": {
      "op": "POP"
    },
    "3638": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "3640": {
      "op": "DUP12"
    },
    "3641": {
      "op": "ADD"
    },
    "3642": {
      "op": "CALLDATALOAD"
    },
    "3643": {
      "op": "PUSH3",
      "value": "0xE45"
    },
    "3647": {
      "op": "DUP2"
    },
    "3648": {
      "op": "PUSH3",
      "value": "0xD5C"
    },
    "3652": {
      "jump": "i",
      "op": "JUMP"
    },
    "3653": {
      "op": "JUMPDEST"
    },
    "3654": {
      "op": "SWAP4"
    },
    "3655": {
      "op": "POP"
    },
    "3656": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3658": {
      "op": "DUP12"
    },
    "3659": {
      "op": "ADD"
    },
    "3660": {
      "op": "CALLDATALOAD"
    },
    "3661": {
      "op": "PUSH3",
      "value": "0xE57"
    },
    "3665": {
      "op": "DUP2"
    },
    "3666": {
      "op": "PUSH3",
      "value": "0xD5C"
    },
    "3670": {
      "jump": "i",
      "op": "JUMP"
    },
    "3671": {
      "op": "JUMPDEST"
    },
    "3672": {
      "op": "SWAP3"
    },
    "3673": {
      "op": "POP"
    },
    "3674": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "3677": {
      "op": "DUP12"
    },
    "3678": {
      "op": "ADD"
    },
    "3679": {
      "op": "CALLDATALOAD"
    },
    "3680": {
      "op": "PUSH3",
      "value": "0xE6A"
    },
    "3684": {
      "op": "DUP2"
    },
    "3685": {
      "op": "PUSH3",
      "value": "0xD5C"
    },
    "3689": {
      "jump": "i",
      "op": "JUMP"
    },
    "3690": {
      "op": "JUMPDEST"
    },
    "3691": {
      "op": "SWAP2"
    },
    "3692": {
      "op": "POP"
    },
    "3693": {
      "op": "PUSH2",
      "value": "0x120"
    },
    "3696": {
      "op": "DUP12"
    },
    "3697": {
      "op": "ADD"
    },
    "3698": {
      "op": "CALLDATALOAD"
    },
    "3699": {
      "op": "PUSH3",
      "value": "0xE7D"
    },
    "3703": {
      "op": "DUP2"
    },
    "3704": {
      "op": "PUSH3",
      "value": "0xD5C"
    },
    "3708": {
      "jump": "i",
      "op": "JUMP"
    },
    "3709": {
      "op": "JUMPDEST"
    },
    "3710": {
      "op": "DUP1"
    },
    "3711": {
      "op": "SWAP2"
    },
    "3712": {
      "op": "POP"
    },
    "3713": {
      "op": "POP"
    },
    "3714": {
      "op": "SWAP3"
    },
    "3715": {
      "op": "SWAP6"
    },
    "3716": {
      "op": "SWAP9"
    },
    "3717": {
      "op": "SWAP12"
    },
    "3718": {
      "op": "SWAP2"
    },
    "3719": {
      "op": "SWAP5"
    },
    "3720": {
      "op": "SWAP8"
    },
    "3721": {
      "op": "SWAP11"
    },
    "3722": {
      "op": "POP"
    },
    "3723": {
      "op": "SWAP3"
    },
    "3724": {
      "op": "SWAP6"
    },
    "3725": {
      "op": "SWAP9"
    },
    "3726": {
      "op": "POP"
    },
    "3727": {
      "jump": "o",
      "op": "JUMP"
    },
    "3728": {
      "op": "JUMPDEST"
    },
    "3729": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3731": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3733": {
      "op": "DUP3"
    },
    "3734": {
      "op": "DUP5"
    },
    "3735": {
      "op": "SUB"
    },
    "3736": {
      "op": "SLT"
    },
    "3737": {
      "op": "ISZERO"
    },
    "3738": {
      "op": "PUSH3",
      "value": "0xEA3"
    },
    "3742": {
      "op": "JUMPI"
    },
    "3743": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3745": {
      "op": "DUP1"
    },
    "3746": {
      "op": "REVERT"
    },
    "3747": {
      "op": "JUMPDEST"
    },
    "3748": {
      "op": "POP"
    },
    "3749": {
      "op": "CALLDATALOAD"
    },
    "3750": {
      "op": "SWAP2"
    },
    "3751": {
      "op": "SWAP1"
    },
    "3752": {
      "op": "POP"
    },
    "3753": {
      "jump": "o",
      "op": "JUMP"
    },
    "3754": {
      "op": "JUMPDEST"
    },
    "3755": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "3760": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3762": {
      "op": "SHL"
    },
    "3763": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3765": {
      "op": "MSTORE"
    },
    "3766": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "3768": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "3770": {
      "op": "MSTORE"
    },
    "3771": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3773": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3775": {
      "op": "REVERT"
    },
    "3776": {
      "op": "JUMPDEST"
    },
    "3777": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3779": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "3788": {
      "op": "DUP1"
    },
    "3789": {
      "op": "DUP5"
    },
    "3790": {
      "op": "GT"
    },
    "3791": {
      "op": "ISZERO"
    },
    "3792": {
      "op": "PUSH3",
      "value": "0xEDE"
    },
    "3796": {
      "op": "JUMPI"
    },
    "3797": {
      "op": "PUSH3",
      "value": "0xEDE"
    },
    "3801": {
      "op": "PUSH3",
      "value": "0xEAA"
    },
    "3805": {
      "jump": "i",
      "op": "JUMP"
    },
    "3806": {
      "op": "JUMPDEST"
    },
    "3807": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3809": {
      "op": "MLOAD"
    },
    "3810": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3812": {
      "op": "DUP6"
    },
    "3813": {
      "op": "ADD"
    },
    "3814": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3816": {
      "op": "NOT"
    },
    "3817": {
      "op": "SWAP1"
    },
    "3818": {
      "op": "DUP2"
    },
    "3819": {
      "op": "AND"
    },
    "3820": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "3822": {
      "op": "ADD"
    },
    "3823": {
      "op": "AND"
    },
    "3824": {
      "op": "DUP2"
    },
    "3825": {
      "op": "ADD"
    },
    "3826": {
      "op": "SWAP1"
    },
    "3827": {
      "op": "DUP3"
    },
    "3828": {
      "op": "DUP3"
    },
    "3829": {
      "op": "GT"
    },
    "3830": {
      "op": "DUP2"
    },
    "3831": {
      "op": "DUP4"
    },
    "3832": {
      "op": "LT"
    },
    "3833": {
      "op": "OR"
    },
    "3834": {
      "op": "ISZERO"
    },
    "3835": {
      "op": "PUSH3",
      "value": "0xF09"
    },
    "3839": {
      "op": "JUMPI"
    },
    "3840": {
      "op": "PUSH3",
      "value": "0xF09"
    },
    "3844": {
      "op": "PUSH3",
      "value": "0xEAA"
    },
    "3848": {
      "jump": "i",
      "op": "JUMP"
    },
    "3849": {
      "op": "JUMPDEST"
    },
    "3850": {
      "op": "DUP2"
    },
    "3851": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3853": {
      "op": "MSTORE"
    },
    "3854": {
      "op": "DUP1"
    },
    "3855": {
      "op": "SWAP4"
    },
    "3856": {
      "op": "POP"
    },
    "3857": {
      "op": "DUP6"
    },
    "3858": {
      "op": "DUP2"
    },
    "3859": {
      "op": "MSTORE"
    },
    "3860": {
      "op": "DUP7"
    },
    "3861": {
      "op": "DUP7"
    },
    "3862": {
      "op": "DUP7"
    },
    "3863": {
      "op": "ADD"
    },
    "3864": {
      "op": "GT"
    },
    "3865": {
      "op": "ISZERO"
    },
    "3866": {
      "op": "PUSH3",
      "value": "0xF23"
    },
    "3870": {
      "op": "JUMPI"
    },
    "3871": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3873": {
      "op": "DUP1"
    },
    "3874": {
      "op": "REVERT"
    },
    "3875": {
      "op": "JUMPDEST"
    },
    "3876": {
      "op": "DUP6"
    },
    "3877": {
      "op": "DUP6"
    },
    "3878": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3880": {
      "op": "DUP4"
    },
    "3881": {
      "op": "ADD"
    },
    "3882": {
      "op": "CALLDATACOPY"
    },
    "3883": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3885": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3887": {
      "op": "DUP8"
    },
    "3888": {
      "op": "DUP4"
    },
    "3889": {
      "op": "ADD"
    },
    "3890": {
      "op": "ADD"
    },
    "3891": {
      "op": "MSTORE"
    },
    "3892": {
      "op": "POP"
    },
    "3893": {
      "op": "POP"
    },
    "3894": {
      "op": "POP"
    },
    "3895": {
      "op": "SWAP4"
    },
    "3896": {
      "op": "SWAP3"
    },
    "3897": {
      "op": "POP"
    },
    "3898": {
      "op": "POP"
    },
    "3899": {
      "op": "POP"
    },
    "3900": {
      "jump": "o",
      "op": "JUMP"
    },
    "3901": {
      "op": "JUMPDEST"
    },
    "3902": {
      "op": "DUP1"
    },
    "3903": {
      "op": "CALLDATALOAD"
    },
    "3904": {
      "op": "DUP1"
    },
    "3905": {
      "op": "ISZERO"
    },
    "3906": {
      "op": "ISZERO"
    },
    "3907": {
      "op": "DUP2"
    },
    "3908": {
      "op": "EQ"
    },
    "3909": {
      "op": "PUSH3",
      "value": "0xD7F"
    },
    "3913": {
      "op": "JUMPI"
    },
    "3914": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3916": {
      "op": "DUP1"
    },
    "3917": {
      "op": "REVERT"
    },
    "3918": {
      "op": "JUMPDEST"
    },
    "3919": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3921": {
      "op": "DUP3"
    },
    "3922": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3924": {
      "op": "DUP4"
    },
    "3925": {
      "op": "ADD"
    },
    "3926": {
      "op": "SLT"
    },
    "3927": {
      "op": "PUSH3",
      "value": "0xF60"
    },
    "3931": {
      "op": "JUMPI"
    },
    "3932": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3934": {
      "op": "DUP1"
    },
    "3935": {
      "op": "REVERT"
    },
    "3936": {
      "op": "JUMPDEST"
    },
    "3937": {
      "op": "PUSH3",
      "value": "0xDA4"
    },
    "3941": {
      "op": "DUP4"
    },
    "3942": {
      "op": "DUP4"
    },
    "3943": {
      "op": "CALLDATALOAD"
    },
    "3944": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3946": {
      "op": "DUP6"
    },
    "3947": {
      "op": "ADD"
    },
    "3948": {
      "op": "PUSH3",
      "value": "0xEC0"
    },
    "3952": {
      "jump": "i",
      "op": "JUMP"
    },
    "3953": {
      "op": "JUMPDEST"
    },
    "3954": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3956": {
      "op": "DUP1"
    },
    "3957": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3959": {
      "op": "DUP1"
    },
    "3960": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3962": {
      "op": "DUP1"
    },
    "3963": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3965": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3967": {
      "op": "DUP9"
    },
    "3968": {
      "op": "DUP11"
    },
    "3969": {
      "op": "SUB"
    },
    "3970": {
      "op": "SLT"
    },
    "3971": {
      "op": "ISZERO"
    },
    "3972": {
      "op": "PUSH3",
      "value": "0xF8D"
    },
    "3976": {
      "op": "JUMPI"
    },
    "3977": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3979": {
      "op": "DUP1"
    },
    "3980": {
      "op": "REVERT"
    },
    "3981": {
      "op": "JUMPDEST"
    },
    "3982": {
      "op": "DUP8"
    },
    "3983": {
      "op": "CALLDATALOAD"
    },
    "3984": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "3993": {
      "op": "DUP1"
    },
    "3994": {
      "op": "DUP3"
    },
    "3995": {
      "op": "GT"
    },
    "3996": {
      "op": "ISZERO"
    },
    "3997": {
      "op": "PUSH3",
      "value": "0xFA6"
    },
    "4001": {
      "op": "JUMPI"
    },
    "4002": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4004": {
      "op": "DUP1"
    },
    "4005": {
      "op": "REVERT"
    },
    "4006": {
      "op": "JUMPDEST"
    },
    "4007": {
      "op": "DUP2"
    },
    "4008": {
      "op": "DUP11"
    },
    "4009": {
      "op": "ADD"
    },
    "4010": {
      "op": "SWAP2"
    },
    "4011": {
      "op": "POP"
    },
    "4012": {
      "op": "DUP11"
    },
    "4013": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4015": {
      "op": "DUP4"
    },
    "4016": {
      "op": "ADD"
    },
    "4017": {
      "op": "SLT"
    },
    "4018": {
      "op": "PUSH3",
      "value": "0xFBB"
    },
    "4022": {
      "op": "JUMPI"
    },
    "4023": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4025": {
      "op": "DUP1"
    },
    "4026": {
      "op": "REVERT"
    },
    "4027": {
      "op": "JUMPDEST"
    },
    "4028": {
      "op": "PUSH3",
      "value": "0xFCC"
    },
    "4032": {
      "op": "DUP12"
    },
    "4033": {
      "op": "DUP4"
    },
    "4034": {
      "op": "CALLDATALOAD"
    },
    "4035": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4037": {
      "op": "DUP6"
    },
    "4038": {
      "op": "ADD"
    },
    "4039": {
      "op": "PUSH3",
      "value": "0xEC0"
    },
    "4043": {
      "jump": "i",
      "op": "JUMP"
    },
    "4044": {
      "op": "JUMPDEST"
    },
    "4045": {
      "op": "SWAP9"
    },
    "4046": {
      "op": "POP"
    },
    "4047": {
      "op": "PUSH3",
      "value": "0xFDC"
    },
    "4051": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4053": {
      "op": "DUP12"
    },
    "4054": {
      "op": "ADD"
    },
    "4055": {
      "op": "PUSH3",
      "value": "0xF3D"
    },
    "4059": {
      "jump": "i",
      "op": "JUMP"
    },
    "4060": {
      "op": "JUMPDEST"
    },
    "4061": {
      "op": "SWAP8"
    },
    "4062": {
      "op": "POP"
    },
    "4063": {
      "op": "PUSH3",
      "value": "0xFEC"
    },
    "4067": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4069": {
      "op": "DUP12"
    },
    "4070": {
      "op": "ADD"
    },
    "4071": {
      "op": "PUSH3",
      "value": "0xF3D"
    },
    "4075": {
      "jump": "i",
      "op": "JUMP"
    },
    "4076": {
      "op": "JUMPDEST"
    },
    "4077": {
      "op": "SWAP7"
    },
    "4078": {
      "op": "POP"
    },
    "4079": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4081": {
      "op": "DUP11"
    },
    "4082": {
      "op": "ADD"
    },
    "4083": {
      "op": "CALLDATALOAD"
    },
    "4084": {
      "op": "SWAP6"
    },
    "4085": {
      "op": "POP"
    },
    "4086": {
      "op": "PUSH3",
      "value": "0x1003"
    },
    "4090": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4092": {
      "op": "DUP12"
    },
    "4093": {
      "op": "ADD"
    },
    "4094": {
      "op": "PUSH3",
      "value": "0xD72"
    },
    "4098": {
      "jump": "i",
      "op": "JUMP"
    },
    "4099": {
      "op": "JUMPDEST"
    },
    "4100": {
      "op": "SWAP5"
    },
    "4101": {
      "op": "POP"
    },
    "4102": {
      "op": "PUSH3",
      "value": "0x1013"
    },
    "4106": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4108": {
      "op": "DUP12"
    },
    "4109": {
      "op": "ADD"
    },
    "4110": {
      "op": "PUSH3",
      "value": "0xD72"
    },
    "4114": {
      "jump": "i",
      "op": "JUMP"
    },
    "4115": {
      "op": "JUMPDEST"
    },
    "4116": {
      "op": "SWAP4"
    },
    "4117": {
      "op": "POP"
    },
    "4118": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "4120": {
      "op": "DUP11"
    },
    "4121": {
      "op": "ADD"
    },
    "4122": {
      "op": "CALLDATALOAD"
    },
    "4123": {
      "op": "SWAP2"
    },
    "4124": {
      "op": "POP"
    },
    "4125": {
      "op": "DUP1"
    },
    "4126": {
      "op": "DUP3"
    },
    "4127": {
      "op": "GT"
    },
    "4128": {
      "op": "ISZERO"
    },
    "4129": {
      "op": "PUSH3",
      "value": "0x102A"
    },
    "4133": {
      "op": "JUMPI"
    },
    "4134": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4136": {
      "op": "DUP1"
    },
    "4137": {
      "op": "REVERT"
    },
    "4138": {
      "op": "JUMPDEST"
    },
    "4139": {
      "op": "POP"
    },
    "4140": {
      "op": "PUSH3",
      "value": "0x1039"
    },
    "4144": {
      "op": "DUP11"
    },
    "4145": {
      "op": "DUP3"
    },
    "4146": {
      "op": "DUP12"
    },
    "4147": {
      "op": "ADD"
    },
    "4148": {
      "op": "PUSH3",
      "value": "0xF4E"
    },
    "4152": {
      "jump": "i",
      "op": "JUMP"
    },
    "4153": {
      "op": "JUMPDEST"
    },
    "4154": {
      "op": "SWAP2"
    },
    "4155": {
      "op": "POP"
    },
    "4156": {
      "op": "POP"
    },
    "4157": {
      "op": "SWAP3"
    },
    "4158": {
      "op": "SWAP6"
    },
    "4159": {
      "op": "SWAP9"
    },
    "4160": {
      "op": "SWAP2"
    },
    "4161": {
      "op": "SWAP5"
    },
    "4162": {
      "op": "SWAP8"
    },
    "4163": {
      "op": "POP"
    },
    "4164": {
      "op": "SWAP3"
    },
    "4165": {
      "op": "SWAP6"
    },
    "4166": {
      "op": "POP"
    },
    "4167": {
      "jump": "o",
      "op": "JUMP"
    },
    "4168": {
      "op": "JUMPDEST"
    },
    "4169": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4171": {
      "op": "DUP1"
    },
    "4172": {
      "op": "DUP3"
    },
    "4173": {
      "op": "MSTORE"
    },
    "4174": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "4176": {
      "op": "SWAP1"
    },
    "4177": {
      "op": "DUP3"
    },
    "4178": {
      "op": "ADD"
    },
    "4179": {
      "op": "MSTORE"
    },
    "4180": {
      "op": "PUSH17",
      "value": "0x27B7363C9027BBB732B91037B31021A623"
    },
    "4198": {
      "op": "PUSH1",
      "value": "0x79"
    },
    "4200": {
      "op": "SHL"
    },
    "4201": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4203": {
      "op": "DUP3"
    },
    "4204": {
      "op": "ADD"
    },
    "4205": {
      "op": "MSTORE"
    },
    "4206": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4208": {
      "op": "ADD"
    },
    "4209": {
      "op": "SWAP1"
    },
    "4210": {
      "jump": "o",
      "op": "JUMP"
    },
    "4211": {
      "op": "JUMPDEST"
    },
    "4212": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4214": {
      "op": "DUP2"
    },
    "4215": {
      "op": "MLOAD"
    },
    "4216": {
      "op": "DUP1"
    },
    "4217": {
      "op": "DUP5"
    },
    "4218": {
      "op": "MSTORE"
    },
    "4219": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4221": {
      "op": "JUMPDEST"
    },
    "4222": {
      "op": "DUP2"
    },
    "4223": {
      "op": "DUP2"
    },
    "4224": {
      "op": "LT"
    },
    "4225": {
      "op": "ISZERO"
    },
    "4226": {
      "op": "PUSH3",
      "value": "0x109B"
    },
    "4230": {
      "op": "JUMPI"
    },
    "4231": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4233": {
      "op": "DUP2"
    },
    "4234": {
      "op": "DUP6"
    },
    "4235": {
      "op": "ADD"
    },
    "4236": {
      "op": "DUP2"
    },
    "4237": {
      "op": "ADD"
    },
    "4238": {
      "op": "MLOAD"
    },
    "4239": {
      "op": "DUP7"
    },
    "4240": {
      "op": "DUP4"
    },
    "4241": {
      "op": "ADD"
    },
    "4242": {
      "op": "DUP3"
    },
    "4243": {
      "op": "ADD"
    },
    "4244": {
      "op": "MSTORE"
    },
    "4245": {
      "op": "ADD"
    },
    "4246": {
      "op": "PUSH3",
      "value": "0x107D"
    },
    "4250": {
      "op": "JUMP"
    },
    "4251": {
      "op": "JUMPDEST"
    },
    "4252": {
      "op": "DUP2"
    },
    "4253": {
      "op": "DUP2"
    },
    "4254": {
      "op": "GT"
    },
    "4255": {
      "op": "ISZERO"
    },
    "4256": {
      "op": "PUSH3",
      "value": "0x10AE"
    },
    "4260": {
      "op": "JUMPI"
    },
    "4261": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4263": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4265": {
      "op": "DUP4"
    },
    "4266": {
      "op": "DUP8"
    },
    "4267": {
      "op": "ADD"
    },
    "4268": {
      "op": "ADD"
    },
    "4269": {
      "op": "MSTORE"
    },
    "4270": {
      "op": "JUMPDEST"
    },
    "4271": {
      "op": "POP"
    },
    "4272": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4274": {
      "op": "ADD"
    },
    "4275": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4277": {
      "op": "NOT"
    },
    "4278": {
      "op": "AND"
    },
    "4279": {
      "op": "SWAP3"
    },
    "4280": {
      "op": "SWAP1"
    },
    "4281": {
      "op": "SWAP3"
    },
    "4282": {
      "op": "ADD"
    },
    "4283": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4285": {
      "op": "ADD"
    },
    "4286": {
      "op": "SWAP3"
    },
    "4287": {
      "op": "SWAP2"
    },
    "4288": {
      "op": "POP"
    },
    "4289": {
      "op": "POP"
    },
    "4290": {
      "jump": "o",
      "op": "JUMP"
    },
    "4291": {
      "op": "JUMPDEST"
    },
    "4292": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4294": {
      "op": "DUP2"
    },
    "4295": {
      "op": "MSTORE"
    },
    "4296": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4298": {
      "op": "PUSH3",
      "value": "0x10D8"
    },
    "4302": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4304": {
      "op": "DUP4"
    },
    "4305": {
      "op": "ADD"
    },
    "4306": {
      "op": "DUP11"
    },
    "4307": {
      "op": "PUSH3",
      "value": "0x1073"
    },
    "4311": {
      "jump": "i",
      "op": "JUMP"
    },
    "4312": {
      "op": "JUMPDEST"
    },
    "4313": {
      "op": "DUP9"
    },
    "4314": {
      "op": "ISZERO"
    },
    "4315": {
      "op": "ISZERO"
    },
    "4316": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4318": {
      "op": "DUP5"
    },
    "4319": {
      "op": "ADD"
    },
    "4320": {
      "op": "MSTORE"
    },
    "4321": {
      "op": "DUP8"
    },
    "4322": {
      "op": "ISZERO"
    },
    "4323": {
      "op": "ISZERO"
    },
    "4324": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4326": {
      "op": "DUP5"
    },
    "4327": {
      "op": "ADD"
    },
    "4328": {
      "op": "MSTORE"
    },
    "4329": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4331": {
      "op": "DUP4"
    },
    "4332": {
      "op": "ADD"
    },
    "4333": {
      "op": "DUP8"
    },
    "4334": {
      "op": "SWAP1"
    },
    "4335": {
      "op": "MSTORE"
    },
    "4336": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4338": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4340": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4342": {
      "op": "SHL"
    },
    "4343": {
      "op": "SUB"
    },
    "4344": {
      "op": "DUP7"
    },
    "4345": {
      "op": "DUP2"
    },
    "4346": {
      "op": "AND"
    },
    "4347": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4349": {
      "op": "DUP6"
    },
    "4350": {
      "op": "ADD"
    },
    "4351": {
      "op": "MSTORE"
    },
    "4352": {
      "op": "DUP6"
    },
    "4353": {
      "op": "AND"
    },
    "4354": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4356": {
      "op": "DUP5"
    },
    "4357": {
      "op": "ADD"
    },
    "4358": {
      "op": "MSTORE"
    },
    "4359": {
      "op": "DUP3"
    },
    "4360": {
      "op": "DUP2"
    },
    "4361": {
      "op": "SUB"
    },
    "4362": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "4364": {
      "op": "DUP5"
    },
    "4365": {
      "op": "ADD"
    },
    "4366": {
      "op": "MSTORE"
    },
    "4367": {
      "op": "PUSH3",
      "value": "0x111A"
    },
    "4371": {
      "op": "DUP2"
    },
    "4372": {
      "op": "DUP6"
    },
    "4373": {
      "op": "PUSH3",
      "value": "0x1073"
    },
    "4377": {
      "jump": "i",
      "op": "JUMP"
    },
    "4378": {
      "op": "JUMPDEST"
    },
    "4379": {
      "op": "SWAP11"
    },
    "4380": {
      "op": "SWAP10"
    },
    "4381": {
      "op": "POP"
    },
    "4382": {
      "op": "POP"
    },
    "4383": {
      "op": "POP"
    },
    "4384": {
      "op": "POP"
    },
    "4385": {
      "op": "POP"
    },
    "4386": {
      "op": "POP"
    },
    "4387": {
      "op": "POP"
    },
    "4388": {
      "op": "POP"
    },
    "4389": {
      "op": "POP"
    },
    "4390": {
      "op": "POP"
    },
    "4391": {
      "jump": "o",
      "op": "JUMP"
    },
    "4392": {
      "op": "JUMPDEST"
    },
    "4393": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4395": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4397": {
      "op": "DUP3"
    },
    "4398": {
      "op": "DUP5"
    },
    "4399": {
      "op": "SUB"
    },
    "4400": {
      "op": "SLT"
    },
    "4401": {
      "op": "ISZERO"
    },
    "4402": {
      "op": "PUSH3",
      "value": "0x113B"
    },
    "4406": {
      "op": "JUMPI"
    },
    "4407": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4409": {
      "op": "DUP1"
    },
    "4410": {
      "op": "REVERT"
    },
    "4411": {
      "op": "JUMPDEST"
    },
    "4412": {
      "op": "DUP2"
    },
    "4413": {
      "op": "MLOAD"
    },
    "4414": {
      "op": "PUSH3",
      "value": "0xDA4"
    },
    "4418": {
      "op": "DUP2"
    },
    "4419": {
      "op": "PUSH3",
      "value": "0xD5C"
    },
    "4423": {
      "jump": "i",
      "op": "JUMP"
    },
    "4424": {
      "op": "JUMPDEST"
    },
    "4425": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4427": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4429": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4431": {
      "op": "SHL"
    },
    "4432": {
      "op": "SUB"
    },
    "4433": {
      "op": "DUP8"
    },
    "4434": {
      "op": "DUP2"
    },
    "4435": {
      "op": "AND"
    },
    "4436": {
      "op": "DUP3"
    },
    "4437": {
      "op": "MSTORE"
    },
    "4438": {
      "op": "PUSH2",
      "value": "0x180"
    },
    "4441": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4443": {
      "op": "DUP1"
    },
    "4444": {
      "op": "DUP5"
    },
    "4445": {
      "op": "ADD"
    },
    "4446": {
      "op": "DUP3"
    },
    "4447": {
      "op": "SWAP1"
    },
    "4448": {
      "op": "MSTORE"
    },
    "4449": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4451": {
      "op": "SWAP3"
    },
    "4452": {
      "op": "SWAP1"
    },
    "4453": {
      "op": "PUSH3",
      "value": "0x1172"
    },
    "4457": {
      "op": "DUP6"
    },
    "4458": {
      "op": "DUP5"
    },
    "4459": {
      "op": "ADD"
    },
    "4460": {
      "op": "DUP12"
    },
    "4461": {
      "op": "PUSH3",
      "value": "0x1073"
    },
    "4465": {
      "jump": "i",
      "op": "JUMP"
    },
    "4466": {
      "op": "JUMPDEST"
    },
    "4467": {
      "op": "SWAP4"
    },
    "4468": {
      "op": "POP"
    },
    "4469": {
      "op": "DUP9"
    },
    "4470": {
      "op": "ISZERO"
    },
    "4471": {
      "op": "ISZERO"
    },
    "4472": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4474": {
      "op": "DUP7"
    },
    "4475": {
      "op": "ADD"
    },
    "4476": {
      "op": "MSTORE"
    },
    "4477": {
      "op": "DUP8"
    },
    "4478": {
      "op": "ISZERO"
    },
    "4479": {
      "op": "ISZERO"
    },
    "4480": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4482": {
      "op": "DUP7"
    },
    "4483": {
      "op": "ADD"
    },
    "4484": {
      "op": "MSTORE"
    },
    "4485": {
      "op": "DUP7"
    },
    "4486": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4488": {
      "op": "DUP7"
    },
    "4489": {
      "op": "ADD"
    },
    "4490": {
      "op": "MSTORE"
    },
    "4491": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4493": {
      "op": "DUP6"
    },
    "4494": {
      "op": "ADD"
    },
    "4495": {
      "op": "SWAP3"
    },
    "4496": {
      "op": "POP"
    },
    "4497": {
      "op": "DUP6"
    },
    "4498": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4500": {
      "op": "JUMPDEST"
    },
    "4501": {
      "op": "PUSH1",
      "value": "0x7"
    },
    "4503": {
      "op": "DUP2"
    },
    "4504": {
      "op": "LT"
    },
    "4505": {
      "op": "ISZERO"
    },
    "4506": {
      "op": "PUSH3",
      "value": "0x11B5"
    },
    "4510": {
      "op": "JUMPI"
    },
    "4511": {
      "op": "DUP2"
    },
    "4512": {
      "op": "MLOAD"
    },
    "4513": {
      "op": "DUP5"
    },
    "4514": {
      "op": "AND"
    },
    "4515": {
      "op": "DUP6"
    },
    "4516": {
      "op": "MSTORE"
    },
    "4517": {
      "op": "SWAP4"
    },
    "4518": {
      "op": "DUP3"
    },
    "4519": {
      "op": "ADD"
    },
    "4520": {
      "op": "SWAP4"
    },
    "4521": {
      "op": "SWAP1"
    },
    "4522": {
      "op": "DUP3"
    },
    "4523": {
      "op": "ADD"
    },
    "4524": {
      "op": "SWAP1"
    },
    "4525": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4527": {
      "op": "ADD"
    },
    "4528": {
      "op": "PUSH3",
      "value": "0x1194"
    },
    "4532": {
      "op": "JUMP"
    },
    "4533": {
      "op": "JUMPDEST"
    },
    "4534": {
      "op": "POP"
    },
    "4535": {
      "op": "POP"
    },
    "4536": {
      "op": "POP"
    },
    "4537": {
      "op": "POP"
    },
    "4538": {
      "op": "POP"
    },
    "4539": {
      "op": "SWAP8"
    },
    "4540": {
      "op": "SWAP7"
    },
    "4541": {
      "op": "POP"
    },
    "4542": {
      "op": "POP"
    },
    "4543": {
      "op": "POP"
    },
    "4544": {
      "op": "POP"
    },
    "4545": {
      "op": "POP"
    },
    "4546": {
      "op": "POP"
    },
    "4547": {
      "op": "POP"
    },
    "4548": {
      "jump": "o",
      "op": "JUMP"
    },
    "4549": {
      "op": "JUMPDEST"
    },
    "4550": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4552": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4554": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4556": {
      "op": "SHL"
    },
    "4557": {
      "op": "SUB"
    },
    "4558": {
      "op": "DUP4"
    },
    "4559": {
      "op": "AND"
    },
    "4560": {
      "op": "DUP2"
    },
    "4561": {
      "op": "MSTORE"
    },
    "4562": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4564": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4566": {
      "op": "DUP3"
    },
    "4567": {
      "op": "ADD"
    },
    "4568": {
      "op": "DUP2"
    },
    "4569": {
      "op": "SWAP1"
    },
    "4570": {
      "op": "MSTORE"
    },
    "4571": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4573": {
      "op": "SWAP1"
    },
    "4574": {
      "op": "PUSH3",
      "value": "0x11EB"
    },
    "4578": {
      "op": "SWAP1"
    },
    "4579": {
      "op": "DUP4"
    },
    "4580": {
      "op": "ADD"
    },
    "4581": {
      "op": "DUP5"
    },
    "4582": {
      "op": "PUSH3",
      "value": "0x1073"
    },
    "4586": {
      "jump": "i",
      "op": "JUMP"
    },
    "4587": {
      "op": "JUMPDEST"
    },
    "4588": {
      "op": "SWAP5"
    },
    "4589": {
      "op": "SWAP4"
    },
    "4590": {
      "op": "POP"
    },
    "4591": {
      "op": "POP"
    },
    "4592": {
      "op": "POP"
    },
    "4593": {
      "op": "POP"
    },
    "4594": {
      "jump": "o",
      "op": "JUMP"
    },
    "4595": {
      "op": "JUMPDEST"
    },
    "4596": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4598": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4600": {
      "op": "NOT"
    },
    "4601": {
      "op": "DUP3"
    },
    "4602": {
      "op": "EQ"
    },
    "4603": {
      "op": "ISZERO"
    },
    "4604": {
      "op": "PUSH3",
      "value": "0x1216"
    },
    "4608": {
      "op": "JUMPI"
    },
    "4609": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4614": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4616": {
      "op": "SHL"
    },
    "4617": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4619": {
      "op": "MSTORE"
    },
    "4620": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "4622": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4624": {
      "op": "MSTORE"
    },
    "4625": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4627": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4629": {
      "op": "REVERT"
    },
    "4630": {
      "op": "JUMPDEST"
    },
    "4631": {
      "op": "POP"
    },
    "4632": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4634": {
      "op": "ADD"
    },
    "4635": {
      "op": "SWAP1"
    },
    "4636": {
      "jump": "o",
      "op": "JUMP"
    },
    "4637": {
      "op": "JUMPDEST"
    },
    "4638": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4640": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4642": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4644": {
      "op": "SHL"
    },
    "4645": {
      "op": "SUB"
    },
    "4646": {
      "op": "DUP5"
    },
    "4647": {
      "op": "AND"
    },
    "4648": {
      "op": "DUP2"
    },
    "4649": {
      "op": "MSTORE"
    },
    "4650": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4652": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4654": {
      "op": "DUP3"
    },
    "4655": {
      "op": "ADD"
    },
    "4656": {
      "op": "DUP2"
    },
    "4657": {
      "op": "SWAP1"
    },
    "4658": {
      "op": "MSTORE"
    },
    "4659": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4661": {
      "op": "SWAP1"
    },
    "4662": {
      "op": "PUSH3",
      "value": "0x1243"
    },
    "4666": {
      "op": "SWAP1"
    },
    "4667": {
      "op": "DUP4"
    },
    "4668": {
      "op": "ADD"
    },
    "4669": {
      "op": "DUP6"
    },
    "4670": {
      "op": "PUSH3",
      "value": "0x1073"
    },
    "4674": {
      "jump": "i",
      "op": "JUMP"
    },
    "4675": {
      "op": "JUMPDEST"
    },
    "4676": {
      "op": "SWAP1"
    },
    "4677": {
      "op": "POP"
    },
    "4678": {
      "op": "DUP3"
    },
    "4679": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4681": {
      "op": "DUP4"
    },
    "4682": {
      "op": "ADD"
    },
    "4683": {
      "op": "MSTORE"
    },
    "4684": {
      "op": "SWAP5"
    },
    "4685": {
      "op": "SWAP4"
    },
    "4686": {
      "op": "POP"
    },
    "4687": {
      "op": "POP"
    },
    "4688": {
      "op": "POP"
    },
    "4689": {
      "op": "POP"
    },
    "4690": {
      "jump": "o",
      "op": "JUMP"
    },
    "4691": {
      "op": "JUMPDEST"
    },
    "4692": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4694": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4696": {
      "op": "DUP3"
    },
    "4697": {
      "op": "DUP5"
    },
    "4698": {
      "op": "SUB"
    },
    "4699": {
      "op": "SLT"
    },
    "4700": {
      "op": "ISZERO"
    },
    "4701": {
      "op": "PUSH3",
      "value": "0x1266"
    },
    "4705": {
      "op": "JUMPI"
    },
    "4706": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4708": {
      "op": "DUP1"
    },
    "4709": {
      "op": "REVERT"
    },
    "4710": {
      "op": "JUMPDEST"
    },
    "4711": {
      "op": "POP"
    },
    "4712": {
      "op": "MLOAD"
    },
    "4713": {
      "op": "SWAP2"
    },
    "4714": {
      "op": "SWAP1"
    },
    "4715": {
      "op": "POP"
    },
    "4716": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "112728e02b612c416ac03eafe6c4d3e038a3becf",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.11;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"../../interfaces/ICLHouse.sol\";\nimport \"../../interfaces/ICLFactory.sol\";\nimport \"../CLProxy/CLBeacon.sol\";\nimport \"../CLProxy/CLPBeacon.sol\";\nimport \"../APICLH/CLHouseApi.sol\";\nimport \"../CLNFT/CLHNFT.sol\";\nimport \"../CLNFT/CLANFT.sol\";\n\n\n/// @title Crypto League House Factory\n/// @notice Create and config CLHouses\n/// @dev This contract is the standard way to create CLH\n/// @author Leonardo Urrego\ncontract CLFactory is ICLFactory, Initializable {\n    /// @notice Store the number of houses created\n    uint256 public numCLH;\n\n    /// @notice Proxy Contract to CLH Constructor logic\n    address public CLLConstructorCLH;\n\n    /// @notice Proxy Contract to functions for user management\n    address public CLLUserManagement;\n\n    /// @notice Proxy Contract to functions for Governance\n    address public CLLGovernance;\n\n    /// @notice Wallet address owner of the CLFactory\n    address public ownerCLF;\n\n    /// @notice Proxy Contract to CLHouse API\n    CLHouseApi public pxyApiCLH;\n\n    /// @notice Contract Object of the beacon (store the add)\n    /// @dev The beacon store the updated address of CLH\n    CLBeacon public beaconCLH;\n    \n    /// @notice Contract Proxy of NFT Manager\n    CLHNFT public pxyNFTManager;\n\n    /// @notice Contract Proxy of NFT Member\n    CLHNFT public pxyNFTMember;\n\n    /// @notice Contract Proxy of NFT Invitation\n    CLHNFT public pxyNFTInvitation;\n\n    /// @notice Contract Proxy of NFT AccessPass\n    CLANFT public pxyNFTAccessPass;\n\n    /// @notice Relation houseAddr with houseId\n    mapping( address => uint256 ) public mapIdCLH;\n    \n    /// @notice Mapping to store all the created houses\n    mapping( uint256 => ICLHouse ) public mapCLH;\n\n\n    /// @notice Event when house is created\n    /// @param houseAddr Address of the created house\n    /// @param houseName Name of the created house\n    /// @param houseId Id of CLH of the created house\n    event evtNewCLH( address houseAddr, string houseName, uint256 houseId );\n\n    /// @notice Event when a CL Contract address is updated\n    /// @param CLCName Name of contract var\n    /// @param oldAddress Old Address value of the var\n    /// @param newAddress New Address value of the var\n    event evtUpdateCLC( string CLCName, address oldAddress, address newAddress );\n\n    modifier onlyOwner() {\n        require( msg.sender == ownerCLF, \"Only Owner of CLF\" );\n        _;\n    }\n\n    function checkAccessNFT( address _wallet ) public {\n        require( 0 != pxyNFTAccessPass.balanceOf( _wallet ) , \"Don't have Access NFT\" );\n    }\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    /// @notice Config the CLFactory with the CL Logic Contracts\n    /// @param _beaconCLH Address Beacon CLH Contract\n    /// @param _pxyApiCLH Address of pxyApiCLH Contract\n    /// @param _pxyNFTManager Address of proxy Contract for NFT Manager\n    /// @param _pxyNFTMember Address of proxy Contract for NFT Member\n    /// @param _pxyNFTInvitation Address of proxy Contract for NFT Invitation\n    /// @param _CLLUserManagement Address Contract Logic for user management\n    /// @param _CLLGovernance Address Contract Logic for governance\n    /// @param _CLLConstructorCLH Address Contract with the Constructor logic\n    /// @param _ownerCLF Address Owner for this Contract\n    function Init(\n        address _beaconCLH,\n        address _pxyApiCLH,\n        address _pxyNFTManager,\n        address _pxyNFTMember,\n        address _pxyNFTInvitation,\n        address _pxyNFTAccessPass,\n        address _CLLUserManagement,\n        address _CLLGovernance,\n        address _CLLConstructorCLH,\n        address _ownerCLF\n    )\n        public\n        reinitializer( __UPGRADEABLE_CLF_VERSION__ )\n    {\n        beaconCLH = CLBeacon( _beaconCLH );\n        \n        pxyApiCLH = CLHouseApi( _pxyApiCLH );\n\n        CLLUserManagement = _CLLUserManagement;\n        CLLGovernance = _CLLGovernance;\n        CLLConstructorCLH = _CLLConstructorCLH;\n\n        pxyNFTManager = CLHNFT( _pxyNFTManager );\n        pxyNFTMember = CLHNFT( _pxyNFTMember );\n        pxyNFTInvitation = CLHNFT( _pxyNFTInvitation );\n        pxyNFTAccessPass = CLANFT( _pxyNFTAccessPass );\n        \n        numCLH = 0;\n        mapCLH[ numCLH ] = ICLHouse( address(0) );\n        mapIdCLH[ address(0) ] = numCLH;\n\n        ownerCLF = _ownerCLF;\n    }\n\n\n    /// @notice Create a new CLHouse proxy Contract\n    /// @param _houseName Name of the CLH\n    /// @param _housePrivate If is set to 1, the CLH is set to private\n    /// @param _houseOpen If is set to 1, the CLH is set to open\n    /// @param _govRuleMaxUsers Max users in the house\n    /// @param _whiteListNFT Address of NFT Collection for users invitation\n    /// @param _signerWallet Wallet address of the signer for OffChain Tx\n    /// @param _signature Signature for validate OffChain Tx\n    function CreateCLH(\n        string memory _houseName,\n        bool _housePrivate,\n        bool _houseOpen,\n        uint256 _govRuleMaxUsers,\n        address _whiteListNFT,\n        address _signerWallet,\n        bytes memory _signature\n    ) \n        public\n    {\n        address houseOwner = msg.sender;\n\n        if( _signerWallet != address(0) ) {\n            require( _signature.length == 65, \"CreateCLH: Bad signature length\" );\n            \n            require(\n                _signerWallet == pxyApiCLH.SignerOCNewCLH(\n                    _houseName,\n                    _housePrivate,\n                    _houseOpen,\n                    _govRuleMaxUsers,\n                    _whiteListNFT,\n                    address(this),\n                    _signature\n                ),\n                \"CreateCLH: Invalid Signature\"\n            );\n\n            houseOwner = _signerWallet;\n        }\n\n        checkAccessNFT( houseOwner );\n\n        CLPBeacon pxyCLH = new CLPBeacon(\n            address( beaconCLH ),\n            abi.encodeWithSignature(\n                \"Init(address,string,bool,bool,uint256,address[7])\",\n                houseOwner, \n                _houseName,\n                _housePrivate,\n                _houseOpen,\n                _govRuleMaxUsers,\n                [ \n                    CLLConstructorCLH,\n                    address( this ),\n                    address( pxyApiCLH ),\n                    address( pxyNFTManager ),\n                    address( pxyNFTMember ),\n                    address( pxyNFTInvitation ),\n                    _whiteListNFT\n                ]\n            )\n        );\n\n        numCLH++;\n        mapCLH[ numCLH ] = ICLHouse( address( pxyCLH ) );\n        mapIdCLH[ address( pxyCLH ) ] = numCLH;\n\n        pxyNFTManager.forceMint( address( pxyCLH ), houseOwner );\n\n        emit evtNewCLH( address( pxyCLH ), _houseName, numCLH );\n    }\n\n\n    /// @notice Get the address of the CLH contract logic\n    function getCLHImplementation() external view returns (address) {\n        return beaconCLH.implementation();\n    }\n\n    /// @notice Update the CLLConstructorCLH contract Address\n    function UpdateCLLConstructorCLH( address _CLLConstructorCLH ) external onlyOwner {\n        address oldAddr = CLLConstructorCLH;\n        CLLConstructorCLH = _CLLConstructorCLH;\n        emit evtUpdateCLC( \"CLLConstructorCLH\", oldAddr, _CLLConstructorCLH );\n    }\n\n    /// @notice Update the CLLUserManagement contract Address\n    function UpdateCLLUserManagement( address _CLLUserManagement ) external onlyOwner {\n        address oldAddr = CLLUserManagement;\n        CLLUserManagement = _CLLUserManagement;\n        emit evtUpdateCLC( \"CLLUserManagement\", oldAddr, _CLLUserManagement );\n    }\n\n    /// @notice Update the CLLGovernance contract Address\n    function UpdateCLLGovernance( address _CLLGovernance ) external onlyOwner {\n        address oldAddr = CLLGovernance;\n        CLLGovernance = _CLLGovernance;\n        emit evtUpdateCLC( \"CLLGovernance\", oldAddr, _CLLGovernance );\n    }\n\n    /// @notice Update the pxyApiCLH contract Address\n    function UpdateCLHAPI( address _pxyApiCLH ) external onlyOwner {\n        address oldAddr = address( pxyApiCLH );\n        pxyApiCLH = CLHouseApi( _pxyApiCLH );\n        emit evtUpdateCLC( \"pxyApiCLH\", oldAddr, _pxyApiCLH );\n    }\n}",
  "sourceMap": "533:7740:20:-:0;;;2711:53;;;;;;;;;-1:-1:-1;2735:22:20;:20;:22::i;:::-;533:7740;;5366:279:10;5434:13;;;;;;;5433:14;5425:66;;;;-1:-1:-1;;;5425:66:10;;216:2:35;5425:66:10;;;198:21:35;255:2;235:18;;;228:30;294:34;274:18;;;267:62;-1:-1:-1;;;345:18:35;;;338:37;392:19;;5425:66:10;;;;;;;;5505:12;;5520:15;5505:12;;;:30;5501:138;;;5551:12;:30;;-1:-1:-1;;5551:30:10;5566:15;5551:30;;;;;;5600:28;;564:36:35;;;5600:28:10;;552:2:35;537:18;5600:28:10;;;;;;;5501:138;5366:279::o;422:184:35:-;533:7740:20;;;;;;",
  "sourcePath": "contracts/CLFactory/CLFactory.sol",
  "type": "contract"
}