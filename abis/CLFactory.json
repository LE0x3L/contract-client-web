{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "houseAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "houseName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "houseId",
          "type": "uint256"
        }
      ],
      "name": "evtNewCLH",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "CLCName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "evtUpdateCLC",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CLHAPI",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLLConstructorCLH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLLGovernance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLLUserManagement",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_houseName",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_housePrivate",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_houseOpen",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "_govModel",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[3]",
          "name": "_govRules",
          "type": "uint256[3]"
        },
        {
          "internalType": "address[]",
          "name": "_ManagerWallets",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_gnosisSafe",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_whiteListNFT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_signerWallet",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "CreateCLH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_CLLUserManagement",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_CLLGovernance",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_CLLConstructorCLH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_CLHAPI",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_beacon",
          "type": "address"
        }
      ],
      "name": "Init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_CLHAPI",
          "type": "address"
        }
      ],
      "name": "UpdateCLHAPI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_CLLConstructorCLH",
          "type": "address"
        }
      ],
      "name": "UpdateCLLConstructorCLH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_CLLGovernance",
          "type": "address"
        }
      ],
      "name": "UpdateCLLGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_CLLUserManagement",
          "type": "address"
        }
      ],
      "name": "UpdateCLLUserManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beaconCLH",
      "outputs": [
        {
          "internalType": "contract CLBeacon",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCLHImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mapCLH",
      "outputs": [
        {
          "internalType": "contract ICLHouse",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mapIdCLH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numCLH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "/home/trecetp/.brownie/packages/OpenZeppelin/openzeppelin-contracts-upgradeable@4.7.3/contracts/access/OwnableUpgradeable.sol",
    "1": "/home/trecetp/.brownie/packages/OpenZeppelin/openzeppelin-contracts-upgradeable@4.7.3/contracts/proxy/utils/Initializable.sol",
    "3": "/home/trecetp/.brownie/packages/OpenZeppelin/openzeppelin-contracts-upgradeable@4.7.3/contracts/utils/ContextUpgradeable.sol",
    "46": "contracts/APICLH/CLHouseApi.sol",
    "48": "contracts/CLCore/CLTypes.sol",
    "49": "contracts/CLFactory/CLFactory.sol",
    "54": "contracts/CLProxy/CLBeacon.sol",
    "56": "contracts/CLProxy/CLProxyCLH.sol",
    "60": "interfaces/ICLFactory.sol",
    "61": "interfaces/ICLHouse.sol"
  },
  "ast": {
    "absolutePath": "contracts/CLFactory/CLFactory.sol",
    "exportedSymbols": {
      "Address": [
        10258
      ],
      "AddressUpgradeable": [
        12184
      ],
      "BeaconProxy": [
        6659
      ],
      "CLBeacon": [
        4903
      ],
      "CLFactory": [
        1813
      ],
      "CLHouseApi": [
        970
      ],
      "CLProxyCLH": [
        4945
      ],
      "Context": [
        10912
      ],
      "ContextUpgradeable": [
        9963
      ],
      "DebugDLGTCLL": [
        9580
      ],
      "ERC1967Upgrade": [
        10746
      ],
      "IBeacon": [
        10280
      ],
      "ICLFactory": [
        5735
      ],
      "ICLHouse": [
        5983
      ],
      "IERC1822Proxiable": [
        12231
      ],
      "Initializable": [
        9921
      ],
      "InvalidGovernanceType": [
        9574
      ],
      "Ownable": [
        7043
      ],
      "OwnableUpgradeable": [
        6115
      ],
      "Proxy": [
        10798
      ],
      "StorageSlot": [
        12291
      ],
      "UpgradeableBeacon": [
        6457
      ],
      "__CONTRACT_NAME_HASH__": [
        9606
      ],
      "__CONTRACT_VERSION_HASH__": [
        9611
      ],
      "__GOV_COMMITTEE__": [
        9596
      ],
      "__GOV_DICTATORSHIP__": [
        9591
      ],
      "__GOV_SIMPLE_MAJORITY__": [
        9601
      ],
      "__STR_EIP712DOMAIN_HASH__": [
        9619
      ],
      "__STR_OCBULKVOTE_HASH__": [
        9643
      ],
      "__STR_OCDELUSER_HASH__": [
        9659
      ],
      "__STR_OCINVIT_HASH__": [
        9627
      ],
      "__STR_OCNEWCLH_HASH__": [
        9675
      ],
      "__STR_OCNEWUSER_HASH__": [
        9651
      ],
      "__STR_OCREQUEST_HASH__": [
        9667
      ],
      "__STR_OCVOTE_HASH__": [
        9635
      ],
      "__UPGRADEABLE_CLF_VERSION__": [
        9586
      ],
      "__UPGRADEABLE_CLH_VERSION__": [
        9583
      ],
      "assetsEvent": [
        9689
      ],
      "eCLC": [
        9713
      ],
      "gRule": [
        9707
      ],
      "proposalEvent": [
        9693
      ],
      "proposalType": [
        9703
      ],
      "strDataGovRules": [
        9770
      ],
      "strDataTxAssets": [
        9767
      ],
      "strDataUser": [
        9758
      ],
      "strProposal": [
        9744
      ],
      "strUser": [
        9724
      ],
      "strVote": [
        9751
      ],
      "userEvent": [
        9682
      ]
    },
    "id": 1814,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1400,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".11"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:24:49"
      },
      {
        "absolutePath": "/home/trecetp/.brownie/packages/OpenZeppelin/openzeppelin-contracts-upgradeable@4.7.3/contracts/access/OwnableUpgradeable.sol",
        "file": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol",
        "id": 1401,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1814,
        "sourceUnit": 6116,
        "src": "58:85:49",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "interfaces/ICLHouse.sol",
        "file": "../../interfaces/ICLHouse.sol",
        "id": 1402,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1814,
        "sourceUnit": 5984,
        "src": "144:39:49",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "interfaces/ICLFactory.sol",
        "file": "../../interfaces/ICLFactory.sol",
        "id": 1403,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1814,
        "sourceUnit": 5736,
        "src": "184:41:49",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/CLProxy/CLBeacon.sol",
        "file": "../CLProxy/CLBeacon.sol",
        "id": 1404,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1814,
        "sourceUnit": 4904,
        "src": "226:33:49",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/CLProxy/CLProxyCLH.sol",
        "file": "../CLProxy/CLProxyCLH.sol",
        "id": 1405,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1814,
        "sourceUnit": 4946,
        "src": "260:35:49",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/APICLH/CLHouseApi.sol",
        "file": "../APICLH/CLHouseApi.sol",
        "id": 1406,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1814,
        "sourceUnit": 971,
        "src": "296:34:49",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 1408,
              "name": "ICLFactory",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 5735,
              "src": "518:10:49"
            },
            "id": 1409,
            "nodeType": "InheritanceSpecifier",
            "src": "518:10:49"
          },
          {
            "baseName": {
              "id": 1410,
              "name": "Initializable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 9921,
              "src": "530:13:49"
            },
            "id": 1411,
            "nodeType": "InheritanceSpecifier",
            "src": "530:13:49"
          },
          {
            "baseName": {
              "id": 1412,
              "name": "OwnableUpgradeable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 6115,
              "src": "545:18:49"
            },
            "id": 1413,
            "nodeType": "InheritanceSpecifier",
            "src": "545:18:49"
          }
        ],
        "canonicalName": "CLFactory",
        "contractDependencies": [
          4945
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 1407,
          "nodeType": "StructuredDocumentation",
          "src": "333:163:49",
          "text": "@title Crypto League House Factory\n @notice Create and config CLHouses\n @dev This contract is the standard way to create CLH\n @author Leonardo Urrego"
        },
        "fullyImplemented": true,
        "id": 1813,
        "linearizedBaseContracts": [
          1813,
          6115,
          9963,
          9921,
          5735
        ],
        "name": "CLFactory",
        "nameLocation": "505:9:49",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "baseFunctions": [
              5690
            ],
            "constant": false,
            "documentation": {
              "id": 1414,
              "nodeType": "StructuredDocumentation",
              "src": "570:46:49",
              "text": "@notice Store the number of houses created"
            },
            "functionSelector": "ee7a7d1b",
            "id": 1416,
            "mutability": "mutable",
            "name": "numCLH",
            "nameLocation": "636:6:49",
            "nodeType": "VariableDeclaration",
            "scope": 1813,
            "src": "621:21:49",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1415,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "621:7:49",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 1420,
            "mutability": "mutable",
            "name": "__gapUint256",
            "nameLocation": "661:12:49",
            "nodeType": "VariableDeclaration",
            "scope": 1813,
            "src": "649:24:49",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$10_storage",
              "typeString": "uint256[10]"
            },
            "typeName": {
              "baseType": {
                "id": 1417,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "649:7:49",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 1419,
              "length": {
                "hexValue": "3130",
                "id": 1418,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "657:2:49",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_10_by_1",
                  "typeString": "int_const 10"
                },
                "value": "10"
              },
              "nodeType": "ArrayTypeName",
              "src": "649:11:49",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$10_storage_ptr",
                "typeString": "uint256[10]"
              }
            },
            "visibility": "internal"
          },
          {
            "baseFunctions": [
              5661
            ],
            "constant": false,
            "documentation": {
              "id": 1421,
              "nodeType": "StructuredDocumentation",
              "src": "680:51:49",
              "text": "@notice Contract with the CLH Constructor logic"
            },
            "functionSelector": "594034e3",
            "id": 1423,
            "mutability": "mutable",
            "name": "CLLConstructorCLH",
            "nameLocation": "751:17:49",
            "nodeType": "VariableDeclaration",
            "scope": 1813,
            "src": "736:32:49",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1422,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "736:7:49",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5666
            ],
            "constant": false,
            "documentation": {
              "id": 1424,
              "nodeType": "StructuredDocumentation",
              "src": "775:59:49",
              "text": "@notice Contract with the functions for user management"
            },
            "functionSelector": "529382d5",
            "id": 1426,
            "mutability": "mutable",
            "name": "CLLUserManagement",
            "nameLocation": "854:17:49",
            "nodeType": "VariableDeclaration",
            "scope": 1813,
            "src": "839:32:49",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1425,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "839:7:49",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5671
            ],
            "constant": false,
            "documentation": {
              "id": 1427,
              "nodeType": "StructuredDocumentation",
              "src": "878:54:49",
              "text": "@notice Contract with the functions for Governance"
            },
            "functionSelector": "a327ab69",
            "id": 1429,
            "mutability": "mutable",
            "name": "CLLGovernance",
            "nameLocation": "952:13:49",
            "nodeType": "VariableDeclaration",
            "scope": 1813,
            "src": "937:28:49",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1428,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "937:7:49",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5656
            ],
            "constant": false,
            "documentation": {
              "id": 1430,
              "nodeType": "StructuredDocumentation",
              "src": "972:32:49",
              "text": "@notice Contract CLHouse API"
            },
            "functionSelector": "10790717",
            "id": 1432,
            "mutability": "mutable",
            "name": "CLHAPI",
            "nameLocation": "1024:6:49",
            "nodeType": "VariableDeclaration",
            "scope": 1813,
            "src": "1009:21:49",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1431,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1009:7:49",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 1436,
            "mutability": "mutable",
            "name": "__gapAddress",
            "nameLocation": "1049:12:49",
            "nodeType": "VariableDeclaration",
            "scope": 1813,
            "src": "1037:24:49",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_address_$10_storage",
              "typeString": "address[10]"
            },
            "typeName": {
              "baseType": {
                "id": 1433,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1037:7:49",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "id": 1435,
              "length": {
                "hexValue": "3130",
                "id": 1434,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "1045:2:49",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_10_by_1",
                  "typeString": "int_const 10"
                },
                "value": "10"
              },
              "nodeType": "ArrayTypeName",
              "src": "1037:11:49",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_address_$10_storage_ptr",
                "typeString": "address[10]"
              }
            },
            "visibility": "internal"
          },
          {
            "baseFunctions": [
              5677
            ],
            "constant": false,
            "documentation": {
              "id": 1437,
              "nodeType": "StructuredDocumentation",
              "src": "1068:114:49",
              "text": "@notice Contract Object of the beacon (store the add)\n @dev The beacon store the updated address of CLH"
            },
            "functionSelector": "c0828f63",
            "id": 1440,
            "mutability": "mutable",
            "name": "beaconCLH",
            "nameLocation": "1203:9:49",
            "nodeType": "VariableDeclaration",
            "scope": 1813,
            "src": "1187:25:49",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_CLBeacon_$4903",
              "typeString": "contract CLBeacon"
            },
            "typeName": {
              "id": 1439,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 1438,
                "name": "CLBeacon",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 4903,
                "src": "1187:8:49"
              },
              "referencedDeclaration": 4903,
              "src": "1187:8:49",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_CLBeacon_$4903",
                "typeString": "contract CLBeacon"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "documentation": {
              "id": 1441,
              "nodeType": "StructuredDocumentation",
              "src": "1223:43:49",
              "text": "@notice Relation houseAddr with houseId"
            },
            "functionSelector": "86bdfcac",
            "id": 1445,
            "mutability": "mutable",
            "name": "mapIdCLH",
            "nameLocation": "1308:8:49",
            "nodeType": "VariableDeclaration",
            "scope": 1813,
            "src": "1271:45:49",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
              "typeString": "mapping(address => uint256)"
            },
            "typeName": {
              "id": 1444,
              "keyType": {
                "id": 1442,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1280:7:49",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1271:29:49",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                "typeString": "mapping(address => uint256)"
              },
              "valueType": {
                "id": 1443,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1291:7:49",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5685
            ],
            "constant": false,
            "documentation": {
              "id": 1446,
              "nodeType": "StructuredDocumentation",
              "src": "1327:51:49",
              "text": "@notice Mapping to store all the created houses"
            },
            "functionSelector": "624d8774",
            "id": 1451,
            "mutability": "mutable",
            "name": "mapCLH",
            "nameLocation": "1419:6:49",
            "nodeType": "VariableDeclaration",
            "scope": 1813,
            "src": "1383:42:49",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_contract$_ICLHouse_$5983_$",
              "typeString": "mapping(uint256 => contract ICLHouse)"
            },
            "typeName": {
              "id": 1450,
              "keyType": {
                "id": 1447,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1391:7:49",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "1383:28:49",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_contract$_ICLHouse_$5983_$",
                "typeString": "mapping(uint256 => contract ICLHouse)"
              },
              "valueType": {
                "id": 1449,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 1448,
                  "name": "ICLHouse",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 5983,
                  "src": "1402:8:49"
                },
                "referencedDeclaration": 5983,
                "src": "1402:8:49",
                "typeDescriptions": {
                  "typeIdentifier": "t_contract$_ICLHouse_$5983",
                  "typeString": "contract ICLHouse"
                }
              }
            },
            "visibility": "public"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 1452,
              "nodeType": "StructuredDocumentation",
              "src": "1432:198:49",
              "text": "@notice Event when house is created\n @param houseAddr Address of the created house\n @param houseName Name of the created house\n @param houseId Id of CLH of the created house"
            },
            "id": 1460,
            "name": "evtNewCLH",
            "nameLocation": "1641:9:49",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1459,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1454,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "houseAddr",
                  "nameLocation": "1660:9:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1460,
                  "src": "1652:17:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1453,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1652:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1456,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "houseName",
                  "nameLocation": "1678:9:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1460,
                  "src": "1671:16:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1455,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1671:6:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1458,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "houseId",
                  "nameLocation": "1697:7:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1460,
                  "src": "1689:15:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1457,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1689:7:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1650:56:49"
            },
            "src": "1635:72:49"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 1461,
              "nodeType": "StructuredDocumentation",
              "src": "1713:209:49",
              "text": "@notice Event when a CL Contract address is updated\n @param CLCName Name of contract var\n @param oldAddress Old Address value of the var\n @param newAddress New Address value of the var"
            },
            "id": 1469,
            "name": "evtUpdateCLC",
            "nameLocation": "1933:12:49",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1468,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1463,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "CLCName",
                  "nameLocation": "1954:7:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1469,
                  "src": "1947:14:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1462,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1947:6:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1465,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "oldAddress",
                  "nameLocation": "1971:10:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1469,
                  "src": "1963:18:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1464,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1963:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1467,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "newAddress",
                  "nameLocation": "1991:10:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1469,
                  "src": "1983:18:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1466,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1983:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1945:58:49"
            },
            "src": "1927:77:49"
          },
          {
            "body": {
              "id": 1476,
              "nodeType": "Block",
              "src": "2077:39:49",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 1473,
                      "name": "_disableInitializers",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9920,
                      "src": "2087:20:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 1474,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2087:22:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1475,
                  "nodeType": "ExpressionStatement",
                  "src": "2087:22:49"
                }
              ]
            },
            "documentation": {
              "id": 1470,
              "nodeType": "StructuredDocumentation",
              "src": "2010:48:49",
              "text": "@custom:oz-upgrades-unsafe-allow constructor"
            },
            "id": 1477,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1471,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2074:2:49"
            },
            "returnParameters": {
              "id": 1472,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2077:0:49"
            },
            "scope": 1813,
            "src": "2063:53:49",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5708
            ],
            "body": {
              "id": 1543,
              "nodeType": "Block",
              "src": "2823:351:49",
              "statements": [
                {
                  "expression": {
                    "id": 1498,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1494,
                      "name": "beaconCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1440,
                      "src": "2833:9:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_CLBeacon_$4903",
                        "typeString": "contract CLBeacon"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 1496,
                          "name": "_beacon",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1488,
                          "src": "2855:7:49",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 1495,
                        "name": "CLBeacon",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4903,
                        "src": "2845:8:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_CLBeacon_$4903_$",
                          "typeString": "type(contract CLBeacon)"
                        }
                      },
                      "id": 1497,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2845:19:49",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_CLBeacon_$4903",
                        "typeString": "contract CLBeacon"
                      }
                    },
                    "src": "2833:31:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_CLBeacon_$4903",
                      "typeString": "contract CLBeacon"
                    }
                  },
                  "id": 1499,
                  "nodeType": "ExpressionStatement",
                  "src": "2833:31:49"
                },
                {
                  "expression": {
                    "id": 1502,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1500,
                      "name": "CLLUserManagement",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1426,
                      "src": "2875:17:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1501,
                      "name": "_CLLUserManagement",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1480,
                      "src": "2895:18:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2875:38:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1503,
                  "nodeType": "ExpressionStatement",
                  "src": "2875:38:49"
                },
                {
                  "expression": {
                    "id": 1506,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1504,
                      "name": "CLLGovernance",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1429,
                      "src": "2923:13:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1505,
                      "name": "_CLLGovernance",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1482,
                      "src": "2939:14:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2923:30:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1507,
                  "nodeType": "ExpressionStatement",
                  "src": "2923:30:49"
                },
                {
                  "expression": {
                    "id": 1510,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1508,
                      "name": "CLLConstructorCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1423,
                      "src": "2963:17:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1509,
                      "name": "_CLLConstructorCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1484,
                      "src": "2983:18:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2963:38:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1511,
                  "nodeType": "ExpressionStatement",
                  "src": "2963:38:49"
                },
                {
                  "expression": {
                    "id": 1514,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1512,
                      "name": "CLHAPI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1432,
                      "src": "3011:6:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1513,
                      "name": "_CLHAPI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1486,
                      "src": "3020:7:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "3011:16:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1515,
                  "nodeType": "ExpressionStatement",
                  "src": "3011:16:49"
                },
                {
                  "expression": {
                    "id": 1518,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1516,
                      "name": "numCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1416,
                      "src": "3038:6:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "30",
                      "id": 1517,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3047:1:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "3038:10:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1519,
                  "nodeType": "ExpressionStatement",
                  "src": "3038:10:49"
                },
                {
                  "expression": {
                    "id": 1529,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 1520,
                        "name": "mapCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1451,
                        "src": "3058:6:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_contract$_ICLHouse_$5983_$",
                          "typeString": "mapping(uint256 => contract ICLHouse)"
                        }
                      },
                      "id": 1522,
                      "indexExpression": {
                        "id": 1521,
                        "name": "numCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1416,
                        "src": "3066:6:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "3058:16:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ICLHouse_$5983",
                        "typeString": "contract ICLHouse"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 1526,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3095:1:49",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 1525,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "3087:7:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 1524,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "3087:7:49",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 1527,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3087:10:49",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 1523,
                        "name": "ICLHouse",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5983,
                        "src": "3077:8:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_ICLHouse_$5983_$",
                          "typeString": "type(contract ICLHouse)"
                        }
                      },
                      "id": 1528,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3077:22:49",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ICLHouse_$5983",
                        "typeString": "contract ICLHouse"
                      }
                    },
                    "src": "3058:41:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ICLHouse_$5983",
                      "typeString": "contract ICLHouse"
                    }
                  },
                  "id": 1530,
                  "nodeType": "ExpressionStatement",
                  "src": "3058:41:49"
                },
                {
                  "expression": {
                    "id": 1538,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 1531,
                        "name": "mapIdCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1445,
                        "src": "3109:8:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 1536,
                      "indexExpression": {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 1534,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3127:1:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 1533,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "3119:7:49",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 1532,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "3119:7:49",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 1535,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3119:10:49",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "3109:22:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1537,
                      "name": "numCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1416,
                      "src": "3134:6:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3109:31:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1539,
                  "nodeType": "ExpressionStatement",
                  "src": "3109:31:49"
                },
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 1540,
                      "name": "__Ownable_init",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6010,
                      "src": "3151:14:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 1541,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3151:16:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1542,
                  "nodeType": "ExpressionStatement",
                  "src": "3151:16:49"
                }
              ]
            },
            "documentation": {
              "id": 1478,
              "nodeType": "StructuredDocumentation",
              "src": "2122:450:49",
              "text": "@notice Config the CLFactory with the CL Logic Contracts\n @param _CLLUserManagement Address Contract Logic for user management\n @param _CLLGovernance Address Contract Logic for governance\n @param _CLLConstructorCLH Address Contract with the Constructor logic\n @param _CLHAPI Address of CLHAPI Contract\n @param _beacon Address Beacon Contract\n @dev The constructor create a default CLH with the houseId #0"
            },
            "functionSelector": "60b323c3",
            "id": 1544,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 1491,
                    "name": "__UPGRADEABLE_CLF_VERSION__",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 9586,
                    "src": "2789:27:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  }
                ],
                "id": 1492,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 1490,
                  "name": "reinitializer",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 9874,
                  "src": "2774:13:49"
                },
                "nodeType": "ModifierInvocation",
                "src": "2774:44:49"
              }
            ],
            "name": "Init",
            "nameLocation": "2586:4:49",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1489,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1480,
                  "mutability": "mutable",
                  "name": "_CLLUserManagement",
                  "nameLocation": "2608:18:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1544,
                  "src": "2600:26:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1479,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2600:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1482,
                  "mutability": "mutable",
                  "name": "_CLLGovernance",
                  "nameLocation": "2644:14:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1544,
                  "src": "2636:22:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1481,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2636:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1484,
                  "mutability": "mutable",
                  "name": "_CLLConstructorCLH",
                  "nameLocation": "2676:18:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1544,
                  "src": "2668:26:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1483,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2668:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1486,
                  "mutability": "mutable",
                  "name": "_CLHAPI",
                  "nameLocation": "2712:7:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1544,
                  "src": "2704:15:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1485,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2704:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1488,
                  "mutability": "mutable",
                  "name": "_beacon",
                  "nameLocation": "2737:7:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1544,
                  "src": "2729:15:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1487,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2729:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2590:160:49"
            },
            "returnParameters": {
              "id": 1493,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2823:0:49"
            },
            "scope": 1813,
            "src": "2577:597:49",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5734
            ],
            "body": {
              "id": 1708,
              "nodeType": "Block",
              "src": "4258:1713:49",
              "statements": [
                {
                  "assignments": [
                    1572
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1572,
                      "mutability": "mutable",
                      "name": "houseOwner",
                      "nameLocation": "4276:10:49",
                      "nodeType": "VariableDeclaration",
                      "scope": 1708,
                      "src": "4268:18:49",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1571,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4268:7:49",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1575,
                  "initialValue": {
                    "expression": {
                      "id": 1573,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -15,
                      "src": "4289:3:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 1574,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "src": "4289:10:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4268:31:49"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 1587,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 1583,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "id": 1579,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 1577,
                              "name": "__GOV_DICTATORSHIP__",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 9591,
                              "src": "4332:20:49",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "id": 1578,
                              "name": "_govModel",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1553,
                              "src": "4356:9:49",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "src": "4332:33:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "id": 1582,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 1580,
                              "name": "__GOV_COMMITTEE__",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 9596,
                              "src": "4381:17:49",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "id": 1581,
                              "name": "_govModel",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1553,
                              "src": "4402:9:49",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "src": "4381:30:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "4332:79:49",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          "id": 1586,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1584,
                            "name": "__GOV_SIMPLE_MAJORITY__",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 9601,
                            "src": "4427:23:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "id": 1585,
                            "name": "_govModel",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1553,
                            "src": "4454:9:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "src": "4427:36:49",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "4332:131:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "496e76616c696420476f7665726e616e63652054797065",
                        "id": 1588,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4478:25:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_214b95948b2fffc4708f5771e5883416970438828cb4a690e032cc55f38d94b1",
                          "typeString": "literal_string \"Invalid Governance Type\""
                        },
                        "value": "Invalid Governance Type"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_214b95948b2fffc4708f5771e5883416970438828cb4a690e032cc55f38d94b1",
                          "typeString": "literal_string \"Invalid Governance Type\""
                        }
                      ],
                      "id": 1576,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4310:7:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1589,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4310:203:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1590,
                  "nodeType": "ExpressionStatement",
                  "src": "4310:203:49"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 1596,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 1591,
                      "name": "_signerWallet",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1566,
                      "src": "4528:13:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "arguments": [
                        {
                          "hexValue": "30",
                          "id": 1594,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4553:1:49",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 1593,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "4545:7:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 1592,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4545:7:49",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 1595,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4545:10:49",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4528:27:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1643,
                  "nodeType": "IfStatement",
                  "src": "4524:727:49",
                  "trueBody": {
                    "id": 1642,
                    "nodeType": "Block",
                    "src": "4558:693:49",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1601,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 1598,
                                  "name": "_signature",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1568,
                                  "src": "4581:10:49",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                "id": 1599,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "src": "4581:17:49",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "hexValue": "3635",
                                "id": 1600,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "4602:2:49",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_65_by_1",
                                  "typeString": "int_const 65"
                                },
                                "value": "65"
                              },
                              "src": "4581:23:49",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "437265617465434c483a20426164207369676e6174757265206c656e677468",
                              "id": 1602,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4606:33:49",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_66546f6712041f6d05b5202f53cc0449a241460309628ff6f24130bbd6047f30",
                                "typeString": "literal_string \"CreateCLH: Bad signature length\""
                              },
                              "value": "CreateCLH: Bad signature length"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_66546f6712041f6d05b5202f53cc0449a241460309628ff6f24130bbd6047f30",
                                "typeString": "literal_string \"CreateCLH: Bad signature length\""
                              }
                            ],
                            "id": 1597,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "4572:7:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1603,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4572:69:49",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1604,
                        "nodeType": "ExpressionStatement",
                        "src": "4572:69:49"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 1634,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1606,
                                "name": "_signerWallet",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1566,
                                "src": "4693:13:49",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "id": 1611,
                                    "name": "_houseName",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1547,
                                    "src": "4767:10:49",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  },
                                  {
                                    "id": 1612,
                                    "name": "_housePrivate",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1549,
                                    "src": "4799:13:49",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "id": 1613,
                                    "name": "_houseOpen",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1551,
                                    "src": "4834:10:49",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "id": 1614,
                                    "name": "_govModel",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1553,
                                    "src": "4866:9:49",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  },
                                  {
                                    "baseExpression": {
                                      "id": 1615,
                                      "name": "_govRules",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1557,
                                      "src": "4897:9:49",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                                        "typeString": "uint256[3] memory"
                                      }
                                    },
                                    "id": 1617,
                                    "indexExpression": {
                                      "hexValue": "30",
                                      "id": 1616,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "4907:1:49",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "4897:12:49",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "baseExpression": {
                                      "id": 1618,
                                      "name": "_govRules",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1557,
                                      "src": "4931:9:49",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                                        "typeString": "uint256[3] memory"
                                      }
                                    },
                                    "id": 1620,
                                    "indexExpression": {
                                      "hexValue": "31",
                                      "id": 1619,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "4941:1:49",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_1_by_1",
                                        "typeString": "int_const 1"
                                      },
                                      "value": "1"
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "4931:12:49",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "baseExpression": {
                                      "id": 1621,
                                      "name": "_govRules",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1557,
                                      "src": "4965:9:49",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                                        "typeString": "uint256[3] memory"
                                      }
                                    },
                                    "id": 1623,
                                    "indexExpression": {
                                      "hexValue": "32",
                                      "id": 1622,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "4975:1:49",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_2_by_1",
                                        "typeString": "int_const 2"
                                      },
                                      "value": "2"
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "4965:12:49",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "id": 1624,
                                    "name": "_whiteListNFT",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1564,
                                    "src": "4999:13:49",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "baseExpression": {
                                      "id": 1625,
                                      "name": "_ManagerWallets",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1560,
                                      "src": "5034:15:49",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                        "typeString": "address[] memory"
                                      }
                                    },
                                    "id": 1627,
                                    "indexExpression": {
                                      "hexValue": "30",
                                      "id": 1626,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "5050:1:49",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "5034:18:49",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "id": 1630,
                                        "name": "this",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -28,
                                        "src": "5082:4:49",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_contract$_CLFactory_$1813",
                                          "typeString": "contract CLFactory"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_contract$_CLFactory_$1813",
                                          "typeString": "contract CLFactory"
                                        }
                                      ],
                                      "id": 1629,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "5074:7:49",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 1628,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "5074:7:49",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 1631,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "5074:13:49",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 1632,
                                    "name": "_signature",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1568,
                                    "src": "5109:10:49",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    },
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  ],
                                  "expression": {
                                    "arguments": [
                                      {
                                        "id": 1608,
                                        "name": "CLHAPI",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1432,
                                        "src": "4722:6:49",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      ],
                                      "id": 1607,
                                      "name": "CLHouseApi",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 970,
                                      "src": "4710:10:49",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_contract$_CLHouseApi_$970_$",
                                        "typeString": "type(contract CLHouseApi)"
                                      }
                                    },
                                    "id": 1609,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "4710:20:49",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_CLHouseApi_$970",
                                      "typeString": "contract CLHouseApi"
                                    }
                                  },
                                  "id": 1610,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "SignerOCNewCLH",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 969,
                                  "src": "4710:35:49",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_view$_t_string_memory_ptr_$_t_bool_$_t_bool_$_t_bytes32_$_t_uint256_$_t_uint256_$_t_uint256_$_t_address_$_t_address_$_t_address_$_t_bytes_memory_ptr_$returns$_t_address_$",
                                    "typeString": "function (string memory,bool,bool,bytes32,uint256,uint256,uint256,address,address,address,bytes memory) view external returns (address)"
                                  }
                                },
                                "id": 1633,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "4710:427:49",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "4693:444:49",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "437265617465434c483a20496e76616c6964205369676e6174757265",
                              "id": 1635,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5155:30:49",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_099f17192883e41fedd772ee8fa6333842f0019e00f69fd93b115b83fd0b3f05",
                                "typeString": "literal_string \"CreateCLH: Invalid Signature\""
                              },
                              "value": "CreateCLH: Invalid Signature"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_099f17192883e41fedd772ee8fa6333842f0019e00f69fd93b115b83fd0b3f05",
                                "typeString": "literal_string \"CreateCLH: Invalid Signature\""
                              }
                            ],
                            "id": 1605,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "4668:7:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1636,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4668:531:49",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1637,
                        "nodeType": "ExpressionStatement",
                        "src": "4668:531:49"
                      },
                      {
                        "expression": {
                          "id": 1640,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1638,
                            "name": "houseOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1572,
                            "src": "5214:10:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1639,
                            "name": "_signerWallet",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1566,
                            "src": "5227:13:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "5214:26:49",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 1641,
                        "nodeType": "ExpressionStatement",
                        "src": "5214:26:49"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    1646
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1646,
                      "mutability": "mutable",
                      "name": "pxyCLH",
                      "nameLocation": "5272:6:49",
                      "nodeType": "VariableDeclaration",
                      "scope": 1708,
                      "src": "5261:17:49",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_CLProxyCLH_$4945",
                        "typeString": "contract CLProxyCLH"
                      },
                      "typeName": {
                        "id": 1645,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1644,
                          "name": "CLProxyCLH",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 4945,
                          "src": "5261:10:49"
                        },
                        "referencedDeclaration": 4945,
                        "src": "5261:10:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_CLProxyCLH_$4945",
                          "typeString": "contract CLProxyCLH"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1675,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 1652,
                            "name": "beaconCLH",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1440,
                            "src": "5318:9:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_CLBeacon_$4903",
                              "typeString": "contract CLBeacon"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_CLBeacon_$4903",
                              "typeString": "contract CLBeacon"
                            }
                          ],
                          "id": 1651,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "5309:7:49",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 1650,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "5309:7:49",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 1653,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5309:20:49",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "hexValue": "496e697428616464726573732c737472696e672c626f6f6c2c626f6f6c2c627974657333322c75696e743235365b335d2c616464726573735b355d2c616464726573735b5d29",
                            "id": 1656,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5384:72:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_53d1ee2dbf3089c5708f7ecd48d185a2ec8aca4d25d3a995138b3748beef305a",
                              "typeString": "literal_string \"Init(address,string,bool,bool,bytes32,uint256[3],address[5],address[])\""
                            },
                            "value": "Init(address,string,bool,bool,bytes32,uint256[3],address[5],address[])"
                          },
                          {
                            "id": 1657,
                            "name": "houseOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1572,
                            "src": "5474:10:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 1658,
                            "name": "_houseName",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1547,
                            "src": "5503:10:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          {
                            "id": 1659,
                            "name": "_housePrivate",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1549,
                            "src": "5531:13:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "id": 1660,
                            "name": "_houseOpen",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1551,
                            "src": "5562:10:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "id": 1661,
                            "name": "_govModel",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1553,
                            "src": "5590:9:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "id": 1662,
                            "name": "_govRules",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1557,
                            "src": "5617:9:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                              "typeString": "uint256[3] memory"
                            }
                          },
                          {
                            "components": [
                              {
                                "id": 1663,
                                "name": "CLLConstructorCLH",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1423,
                                "src": "5646:17:49",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "arguments": [
                                  {
                                    "id": 1666,
                                    "name": "this",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -28,
                                    "src": "5673:4:49",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_CLFactory_$1813",
                                      "typeString": "contract CLFactory"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_CLFactory_$1813",
                                      "typeString": "contract CLFactory"
                                    }
                                  ],
                                  "id": 1665,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "5665:7:49",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 1664,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "5665:7:49",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 1667,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5665:13:49",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 1668,
                                "name": "CLHAPI",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1432,
                                "src": "5680:6:49",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 1669,
                                "name": "_gnosisSafe",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1562,
                                "src": "5688:11:49",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 1670,
                                "name": "_whiteListNFT",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1564,
                                "src": "5701:13:49",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "id": 1671,
                            "isConstant": false,
                            "isInlineArray": true,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "5644:72:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$5_memory_ptr",
                              "typeString": "address[5] memory"
                            }
                          },
                          {
                            "id": 1672,
                            "name": "_ManagerWallets",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1560,
                            "src": "5734:15:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                              "typeString": "address[] memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_53d1ee2dbf3089c5708f7ecd48d185a2ec8aca4d25d3a995138b3748beef305a",
                              "typeString": "literal_string \"Init(address,string,bool,bool,bytes32,uint256[3],address[5],address[])\""
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            },
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                              "typeString": "uint256[3] memory"
                            },
                            {
                              "typeIdentifier": "t_array$_t_address_$5_memory_ptr",
                              "typeString": "address[5] memory"
                            },
                            {
                              "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                              "typeString": "address[] memory"
                            }
                          ],
                          "expression": {
                            "id": 1654,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "5343:3:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 1655,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodeWithSignature",
                          "nodeType": "MemberAccess",
                          "src": "5343:23:49",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (string memory) pure returns (bytes memory)"
                          }
                        },
                        "id": 1673,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5343:420:49",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 1649,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "NewExpression",
                      "src": "5281:14:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_creation_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_contract$_CLProxyCLH_$4945_$",
                        "typeString": "function (address,bytes memory) returns (contract CLProxyCLH)"
                      },
                      "typeName": {
                        "id": 1648,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1647,
                          "name": "CLProxyCLH",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 4945,
                          "src": "5285:10:49"
                        },
                        "referencedDeclaration": 4945,
                        "src": "5285:10:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_CLProxyCLH_$4945",
                          "typeString": "contract CLProxyCLH"
                        }
                      }
                    },
                    "id": 1674,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5281:492:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_CLProxyCLH_$4945",
                      "typeString": "contract CLProxyCLH"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5261:512:49"
                },
                {
                  "expression": {
                    "id": 1677,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "++",
                    "prefix": false,
                    "src": "5784:8:49",
                    "subExpression": {
                      "id": 1676,
                      "name": "numCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1416,
                      "src": "5784:6:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1678,
                  "nodeType": "ExpressionStatement",
                  "src": "5784:8:49"
                },
                {
                  "expression": {
                    "id": 1688,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 1679,
                        "name": "mapCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1451,
                        "src": "5802:6:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_contract$_ICLHouse_$5983_$",
                          "typeString": "mapping(uint256 => contract ICLHouse)"
                        }
                      },
                      "id": 1681,
                      "indexExpression": {
                        "id": 1680,
                        "name": "numCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1416,
                        "src": "5810:6:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "5802:16:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ICLHouse_$5983",
                        "typeString": "contract ICLHouse"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "id": 1685,
                              "name": "pxyCLH",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1646,
                              "src": "5840:6:49",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_CLProxyCLH_$4945",
                                "typeString": "contract CLProxyCLH"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_CLProxyCLH_$4945",
                                "typeString": "contract CLProxyCLH"
                              }
                            ],
                            "id": 1684,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "5831:7:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 1683,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "5831:7:49",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 1686,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5831:17:49",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 1682,
                        "name": "ICLHouse",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5983,
                        "src": "5821:8:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_ICLHouse_$5983_$",
                          "typeString": "type(contract ICLHouse)"
                        }
                      },
                      "id": 1687,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5821:29:49",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ICLHouse_$5983",
                        "typeString": "contract ICLHouse"
                      }
                    },
                    "src": "5802:48:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ICLHouse_$5983",
                      "typeString": "contract ICLHouse"
                    }
                  },
                  "id": 1689,
                  "nodeType": "ExpressionStatement",
                  "src": "5802:48:49"
                },
                {
                  "expression": {
                    "id": 1697,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 1690,
                        "name": "mapIdCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1445,
                        "src": "5860:8:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 1695,
                      "indexExpression": {
                        "arguments": [
                          {
                            "id": 1693,
                            "name": "pxyCLH",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1646,
                            "src": "5879:6:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_CLProxyCLH_$4945",
                              "typeString": "contract CLProxyCLH"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_CLProxyCLH_$4945",
                              "typeString": "contract CLProxyCLH"
                            }
                          ],
                          "id": 1692,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "5870:7:49",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 1691,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "5870:7:49",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 1694,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5870:17:49",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "5860:29:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1696,
                      "name": "numCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1416,
                      "src": "5892:6:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5860:38:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1698,
                  "nodeType": "ExpressionStatement",
                  "src": "5860:38:49"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 1702,
                            "name": "pxyCLH",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1646,
                            "src": "5934:6:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_CLProxyCLH_$4945",
                              "typeString": "contract CLProxyCLH"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_CLProxyCLH_$4945",
                              "typeString": "contract CLProxyCLH"
                            }
                          ],
                          "id": 1701,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "5925:7:49",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 1700,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "5925:7:49",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 1703,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5925:17:49",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1704,
                        "name": "_houseName",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1547,
                        "src": "5944:10:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      {
                        "id": 1705,
                        "name": "numCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1416,
                        "src": "5956:6:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1699,
                      "name": "evtNewCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1460,
                      "src": "5914:9:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_string_memory_ptr_$_t_uint256_$returns$__$",
                        "typeString": "function (address,string memory,uint256)"
                      }
                    },
                    "id": 1706,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5914:50:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1707,
                  "nodeType": "EmitStatement",
                  "src": "5909:55:49"
                }
              ]
            },
            "documentation": {
              "id": 1545,
              "nodeType": "StructuredDocumentation",
              "src": "3181:710:49",
              "text": "@notice Deploy a new CLHouse\n @param _houseName Name of the CLH\n @param _housePrivate If is set to 1, the CLH is set to private\n @param _houseOpen If is set to 1, the CLH is set to open\n @param _govModel keccak256 hash of the governance model, see the __GOV_* constans\n @param _govRules Array for goverment rules see `enum gRule`\n @param _ManagerWallets Whitelist of address for invitate as managers\n @param _gnosisSafe Contract address of SAFE\n @param _signerWallet Wallet address of the signer for OffChain Tx\n @param _signature Signature for validate OffChain Tx\n @dev Some parameters wil be ignored depending on the governance model"
            },
            "functionSelector": "209bafec",
            "id": 1709,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "CreateCLH",
            "nameLocation": "3905:9:49",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1569,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1547,
                  "mutability": "mutable",
                  "name": "_houseName",
                  "nameLocation": "3938:10:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1709,
                  "src": "3924:24:49",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1546,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3924:6:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1549,
                  "mutability": "mutable",
                  "name": "_housePrivate",
                  "nameLocation": "3963:13:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1709,
                  "src": "3958:18:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1548,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3958:4:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1551,
                  "mutability": "mutable",
                  "name": "_houseOpen",
                  "nameLocation": "3991:10:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1709,
                  "src": "3986:15:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1550,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3986:4:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1553,
                  "mutability": "mutable",
                  "name": "_govModel",
                  "nameLocation": "4019:9:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1709,
                  "src": "4011:17:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1552,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4011:7:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1557,
                  "mutability": "mutable",
                  "name": "_govRules",
                  "nameLocation": "4056:9:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1709,
                  "src": "4038:27:49",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                    "typeString": "uint256[3]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1554,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "4038:7:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 1556,
                    "length": {
                      "hexValue": "33",
                      "id": 1555,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4046:1:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_3_by_1",
                        "typeString": "int_const 3"
                      },
                      "value": "3"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "4038:10:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$3_storage_ptr",
                      "typeString": "uint256[3]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1560,
                  "mutability": "mutable",
                  "name": "_ManagerWallets",
                  "nameLocation": "4092:15:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1709,
                  "src": "4075:32:49",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1558,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "4075:7:49",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 1559,
                    "nodeType": "ArrayTypeName",
                    "src": "4075:9:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1562,
                  "mutability": "mutable",
                  "name": "_gnosisSafe",
                  "nameLocation": "4125:11:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1709,
                  "src": "4117:19:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1561,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4117:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1564,
                  "mutability": "mutable",
                  "name": "_whiteListNFT",
                  "nameLocation": "4154:13:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1709,
                  "src": "4146:21:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1563,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4146:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1566,
                  "mutability": "mutable",
                  "name": "_signerWallet",
                  "nameLocation": "4185:13:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1709,
                  "src": "4177:21:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1565,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4177:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1568,
                  "mutability": "mutable",
                  "name": "_signature",
                  "nameLocation": "4221:10:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1709,
                  "src": "4208:23:49",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1567,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "4208:5:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3914:323:49"
            },
            "returnParameters": {
              "id": 1570,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4258:0:49"
            },
            "scope": 1813,
            "src": "3896:2075:49",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5695
            ],
            "body": {
              "id": 1719,
              "nodeType": "Block",
              "src": "6100:50:49",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 1715,
                        "name": "beaconCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1440,
                        "src": "6117:9:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_CLBeacon_$4903",
                          "typeString": "contract CLBeacon"
                        }
                      },
                      "id": 1716,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "implementation",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 6420,
                      "src": "6117:24:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
                        "typeString": "function () view external returns (address)"
                      }
                    },
                    "id": 1717,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6117:26:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 1714,
                  "id": 1718,
                  "nodeType": "Return",
                  "src": "6110:33:49"
                }
              ]
            },
            "documentation": {
              "id": 1710,
              "nodeType": "StructuredDocumentation",
              "src": "5978:53:49",
              "text": "@notice Get the address of the CLH contract logic"
            },
            "functionSelector": "a6b6ed3a",
            "id": 1720,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getCLHImplementation",
            "nameLocation": "6045:20:49",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1711,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6065:2:49"
            },
            "returnParameters": {
              "id": 1714,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1713,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1720,
                  "src": "6091:7:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1712,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6091:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6090:9:49"
            },
            "scope": 1813,
            "src": "6036:114:49",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1742,
              "nodeType": "Block",
              "src": "6300:179:49",
              "statements": [
                {
                  "assignments": [
                    1729
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1729,
                      "mutability": "mutable",
                      "name": "oldAddr",
                      "nameLocation": "6318:7:49",
                      "nodeType": "VariableDeclaration",
                      "scope": 1742,
                      "src": "6310:15:49",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1728,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "6310:7:49",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1731,
                  "initialValue": {
                    "id": 1730,
                    "name": "CLLConstructorCLH",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1423,
                    "src": "6328:17:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6310:35:49"
                },
                {
                  "expression": {
                    "id": 1734,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1732,
                      "name": "CLLConstructorCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1423,
                      "src": "6355:17:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1733,
                      "name": "_CLLConstructorCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1723,
                      "src": "6375:18:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "6355:38:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1735,
                  "nodeType": "ExpressionStatement",
                  "src": "6355:38:49"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "hexValue": "434c4c436f6e7374727563746f72434c48",
                        "id": 1737,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6422:19:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_21ca4107ae7c6046a1dcb965fe2f0c3235f996f64457d0aee953a67fec2a2477",
                          "typeString": "literal_string \"CLLConstructorCLH\""
                        },
                        "value": "CLLConstructorCLH"
                      },
                      {
                        "id": 1738,
                        "name": "oldAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1729,
                        "src": "6443:7:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1739,
                        "name": "_CLLConstructorCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1723,
                        "src": "6452:18:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_21ca4107ae7c6046a1dcb965fe2f0c3235f996f64457d0aee953a67fec2a2477",
                          "typeString": "literal_string \"CLLConstructorCLH\""
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 1736,
                      "name": "evtUpdateCLC",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1469,
                      "src": "6408:12:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_string_memory_ptr_$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (string memory,address,address)"
                      }
                    },
                    "id": 1740,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6408:64:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1741,
                  "nodeType": "EmitStatement",
                  "src": "6403:69:49"
                }
              ]
            },
            "documentation": {
              "id": 1721,
              "nodeType": "StructuredDocumentation",
              "src": "6156:57:49",
              "text": "@notice Update the CLLConstructorCLH contract Address"
            },
            "functionSelector": "f6f7a1b3",
            "id": 1743,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 1726,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 1725,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 6029,
                  "src": "6290:9:49"
                },
                "nodeType": "ModifierInvocation",
                "src": "6290:9:49"
              }
            ],
            "name": "UpdateCLLConstructorCLH",
            "nameLocation": "6227:23:49",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1724,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1723,
                  "mutability": "mutable",
                  "name": "_CLLConstructorCLH",
                  "nameLocation": "6260:18:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1743,
                  "src": "6252:26:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1722,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6252:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6250:30:49"
            },
            "returnParameters": {
              "id": 1727,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6300:0:49"
            },
            "scope": 1813,
            "src": "6218:261:49",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1765,
              "nodeType": "Block",
              "src": "6629:179:49",
              "statements": [
                {
                  "assignments": [
                    1752
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1752,
                      "mutability": "mutable",
                      "name": "oldAddr",
                      "nameLocation": "6647:7:49",
                      "nodeType": "VariableDeclaration",
                      "scope": 1765,
                      "src": "6639:15:49",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1751,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "6639:7:49",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1754,
                  "initialValue": {
                    "id": 1753,
                    "name": "CLLUserManagement",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1426,
                    "src": "6657:17:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6639:35:49"
                },
                {
                  "expression": {
                    "id": 1757,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1755,
                      "name": "CLLUserManagement",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1426,
                      "src": "6684:17:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1756,
                      "name": "_CLLUserManagement",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1746,
                      "src": "6704:18:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "6684:38:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1758,
                  "nodeType": "ExpressionStatement",
                  "src": "6684:38:49"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "hexValue": "434c4c557365724d616e6167656d656e74",
                        "id": 1760,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6751:19:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_8818be37b272861fc8aaea0e23015042e4fd23826d87079659169951e66dc62a",
                          "typeString": "literal_string \"CLLUserManagement\""
                        },
                        "value": "CLLUserManagement"
                      },
                      {
                        "id": 1761,
                        "name": "oldAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1752,
                        "src": "6772:7:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1762,
                        "name": "_CLLUserManagement",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1746,
                        "src": "6781:18:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_8818be37b272861fc8aaea0e23015042e4fd23826d87079659169951e66dc62a",
                          "typeString": "literal_string \"CLLUserManagement\""
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 1759,
                      "name": "evtUpdateCLC",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1469,
                      "src": "6737:12:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_string_memory_ptr_$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (string memory,address,address)"
                      }
                    },
                    "id": 1763,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6737:64:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1764,
                  "nodeType": "EmitStatement",
                  "src": "6732:69:49"
                }
              ]
            },
            "documentation": {
              "id": 1744,
              "nodeType": "StructuredDocumentation",
              "src": "6485:57:49",
              "text": "@notice Update the CLLUserManagement contract Address"
            },
            "functionSelector": "c1e45428",
            "id": 1766,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 1749,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 1748,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 6029,
                  "src": "6619:9:49"
                },
                "nodeType": "ModifierInvocation",
                "src": "6619:9:49"
              }
            ],
            "name": "UpdateCLLUserManagement",
            "nameLocation": "6556:23:49",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1747,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1746,
                  "mutability": "mutable",
                  "name": "_CLLUserManagement",
                  "nameLocation": "6589:18:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1766,
                  "src": "6581:26:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1745,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6581:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6579:30:49"
            },
            "returnParameters": {
              "id": 1750,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6629:0:49"
            },
            "scope": 1813,
            "src": "6547:261:49",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1788,
              "nodeType": "Block",
              "src": "6946:159:49",
              "statements": [
                {
                  "assignments": [
                    1775
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1775,
                      "mutability": "mutable",
                      "name": "oldAddr",
                      "nameLocation": "6964:7:49",
                      "nodeType": "VariableDeclaration",
                      "scope": 1788,
                      "src": "6956:15:49",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1774,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "6956:7:49",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1777,
                  "initialValue": {
                    "id": 1776,
                    "name": "CLLGovernance",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1429,
                    "src": "6974:13:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6956:31:49"
                },
                {
                  "expression": {
                    "id": 1780,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1778,
                      "name": "CLLGovernance",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1429,
                      "src": "6997:13:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1779,
                      "name": "_CLLGovernance",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1769,
                      "src": "7013:14:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "6997:30:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1781,
                  "nodeType": "ExpressionStatement",
                  "src": "6997:30:49"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "hexValue": "434c4c476f7665726e616e6365",
                        "id": 1783,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7056:15:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_5e0add186a65a03987845808813dd6258edab07c4a3ce5ebe4a055283e2a29f0",
                          "typeString": "literal_string \"CLLGovernance\""
                        },
                        "value": "CLLGovernance"
                      },
                      {
                        "id": 1784,
                        "name": "oldAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1775,
                        "src": "7073:7:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1785,
                        "name": "_CLLGovernance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1769,
                        "src": "7082:14:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_5e0add186a65a03987845808813dd6258edab07c4a3ce5ebe4a055283e2a29f0",
                          "typeString": "literal_string \"CLLGovernance\""
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 1782,
                      "name": "evtUpdateCLC",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1469,
                      "src": "7042:12:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_string_memory_ptr_$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (string memory,address,address)"
                      }
                    },
                    "id": 1786,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7042:56:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1787,
                  "nodeType": "EmitStatement",
                  "src": "7037:61:49"
                }
              ]
            },
            "documentation": {
              "id": 1767,
              "nodeType": "StructuredDocumentation",
              "src": "6814:53:49",
              "text": "@notice Update the CLLGovernance contract Address"
            },
            "functionSelector": "d742063c",
            "id": 1789,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 1772,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 1771,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 6029,
                  "src": "6936:9:49"
                },
                "nodeType": "ModifierInvocation",
                "src": "6936:9:49"
              }
            ],
            "name": "UpdateCLLGovernance",
            "nameLocation": "6881:19:49",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1770,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1769,
                  "mutability": "mutable",
                  "name": "_CLLGovernance",
                  "nameLocation": "6910:14:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1789,
                  "src": "6902:22:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1768,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6902:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6900:26:49"
            },
            "returnParameters": {
              "id": 1773,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6946:0:49"
            },
            "scope": 1813,
            "src": "6872:233:49",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1811,
              "nodeType": "Block",
              "src": "7222:124:49",
              "statements": [
                {
                  "assignments": [
                    1798
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1798,
                      "mutability": "mutable",
                      "name": "oldAddr",
                      "nameLocation": "7240:7:49",
                      "nodeType": "VariableDeclaration",
                      "scope": 1811,
                      "src": "7232:15:49",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1797,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "7232:7:49",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1800,
                  "initialValue": {
                    "id": 1799,
                    "name": "CLHAPI",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1432,
                    "src": "7250:6:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7232:24:49"
                },
                {
                  "expression": {
                    "id": 1803,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1801,
                      "name": "CLHAPI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1432,
                      "src": "7266:6:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1802,
                      "name": "_CLHAPI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1792,
                      "src": "7275:7:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "7266:16:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1804,
                  "nodeType": "ExpressionStatement",
                  "src": "7266:16:49"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "hexValue": "434c48415049",
                        "id": 1806,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7311:8:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_2b984e4543ba4bbb304d0949ad6233a06b8a82e7c8ff91036023cf7aa14ed431",
                          "typeString": "literal_string \"CLHAPI\""
                        },
                        "value": "CLHAPI"
                      },
                      {
                        "id": 1807,
                        "name": "oldAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1798,
                        "src": "7321:7:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1808,
                        "name": "_CLHAPI",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1792,
                        "src": "7330:7:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_2b984e4543ba4bbb304d0949ad6233a06b8a82e7c8ff91036023cf7aa14ed431",
                          "typeString": "literal_string \"CLHAPI\""
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 1805,
                      "name": "evtUpdateCLC",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1469,
                      "src": "7297:12:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_string_memory_ptr_$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (string memory,address,address)"
                      }
                    },
                    "id": 1809,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7297:42:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1810,
                  "nodeType": "EmitStatement",
                  "src": "7292:47:49"
                }
              ]
            },
            "documentation": {
              "id": 1790,
              "nodeType": "StructuredDocumentation",
              "src": "7111:46:49",
              "text": "@notice Update the CLHAPI contract Address"
            },
            "functionSelector": "4bc3959f",
            "id": 1812,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 1795,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 1794,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 6029,
                  "src": "7212:9:49"
                },
                "nodeType": "ModifierInvocation",
                "src": "7212:9:49"
              }
            ],
            "name": "UpdateCLHAPI",
            "nameLocation": "7171:12:49",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1793,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1792,
                  "mutability": "mutable",
                  "name": "_CLHAPI",
                  "nameLocation": "7193:7:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1812,
                  "src": "7185:15:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1791,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7185:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7183:19:49"
            },
            "returnParameters": {
              "id": 1796,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7222:0:49"
            },
            "scope": 1813,
            "src": "7162:184:49",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 1814,
        "src": "496:6852:49",
        "usedErrors": []
      }
    ],
    "src": "32:7316:49"
  },
  "bytecode": "608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b611d34806100ed6000396000f3fe60806040523480156200001157600080fd5b50600436106200012d5760003560e01c80638da5cb5b11620000af578063c1e45428116200007a578063c1e45428146200027e578063d742063c1462000295578063ee7a7d1b14620002ac578063f2fde38b14620002b6578063f6f7a1b314620002cd57600080fd5b80638da5cb5b146200023a578063a327ab69146200024c578063a6b6ed3a1462000260578063c0828f63146200026a57600080fd5b8063594034e311620000fc578063594034e314620001a757806360b323c314620001bb578063624d877414620001d2578063715018a614620001fe57806386bdfcac146200020857600080fd5b8063107907171462000132578063209bafec14620001635780634bc3959f146200017c578063529382d51462000193575b600080fd5b60735462000146906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6200017a6200017436600462000f00565b620002e4565b005b6200017a6200018d36600462001011565b62000742565b60715462000146906001600160a01b031681565b60705462000146906001600160a01b031681565b6200017a620001cc36600462001038565b620007bb565b62000146620001e3366004620010b4565b6080602052600090815260409020546001600160a01b031681565b6200017a62000958565b6200022b6200021936600462001011565b607f6020526000908152604090205481565b6040519081526020016200015a565b6033546001600160a01b031662000146565b60725462000146906001600160a01b031681565b6200014662000970565b607e5462000146906001600160a01b031681565b6200017a6200028f36600462001011565b620009e6565b6200017a620002a636600462001011565b62000a63565b6200022b60655481565b6200017a620002c736600462001011565b62000adc565b6200017a620002de36600462001011565b62000b5b565b337f0b93889d934070956c00846f50f9a10a747bd194bba2f2e78a86d0c02386fdb1881480620003335750877f16591a696fee5867425b3dee9fc0160a6c1baef77835bc3d204314106d639298145b806200035e5750877fa0786f6450d5fb3298b8425105c1b75e6e01a1ff86cdabea29909cdb0b4c83a7145b620003b05760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420476f7665726e616e6365205479706500000000000000000060448201526064015b60405180910390fd5b6001600160a01b0383161562000532578151604114620004135760405162461bcd60e51b815260206004820152601f60248201527f437265617465434c483a20426164207369676e6174757265206c656e677468006044820152606401620003a7565b6073546001600160a01b0316638b4bccca8c8c8c8c8c600060200201518d600160200201518e600260200201518c8f600081518110620004575762000457620010ce565b6020026020010151308d6040518c63ffffffff1660e01b8152600401620004899b9a9998979695949392919062001134565b602060405180830381865afa158015620004a7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004cd9190620011c0565b6001600160a01b0316836001600160a01b0316146200052f5760405162461bcd60e51b815260206004820152601c60248201527f437265617465434c483a20496e76616c6964205369676e6174757265000000006044820152606401620003a7565b50815b6000607e60009054906101000a90046001600160a01b0316828d8d8d8d8d6040518060a00160405280607060009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001306001600160a01b03166001600160a01b03168152602001607360009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020018e6001600160a01b03166001600160a01b031681526020018d6001600160a01b03166001600160a01b03168152508e604051602401620006159897969594939291906200125a565b60408051601f198184030181529181526020820180516001600160e01b03166353d1ee2d60e01b179052516200064b9062000cef565b62000658929190620012fa565b604051809103906000f08015801562000675573d6000803e3d6000fd5b506065805491925060006200068a8362001328565b91905055508060806000606554815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606554607f6000836001600160a01b03166001600160a01b03168152602001908152602001600020819055507f6510209152e59feb0a7445a97b24bc79bfcb456ca1d8bff1e4980536c4e8cabb818d6065546040516200072c9392919062001352565b60405180910390a1505050505050505050505050565b6200074c62000bd8565b607380546001600160a01b031981166001600160a01b0384811691821790935560408051606080825260069082015265434c4841504960d01b60808201529390921660208401819052918301529060008051602062001cdf8339815191529060a0015b60405180910390a15050565b600054600190610100900460ff16158015620007de575060005460ff8083169116105b620008435760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620003a7565b6000805461ffff191660ff831617610100178155607e80546001600160a01b038086166001600160a01b031992831617909255607180548a84169083161790556072805489841690831617905560708054888416908316179055607380549287169282169290921790915560658290558180527fae0c3f803428dd501929f276001a4b5fd1d262991bbb98e97b4b7d918a5af6dc80549091169055607f6020527f18b3a2798575d3a428c1f52e616a74b071539854e037e7d7c535365d474f4033556200090f62000c34565b6000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050505050565b6200096262000bd8565b6200096e600062000c68565b565b607e5460408051635c60da1b60e01b815290516000926001600160a01b031691635c60da1b9160048083019260209291908290030181865afa158015620009bb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009e19190620011c0565b905090565b620009f062000bd8565b607180546001600160a01b031981166001600160a01b038481169182179093556040805160608082526011908201527010d313155cd95c93585b9859d95b595b9d607a1b60808201529390921660208401819052918301529060008051602062001cdf8339815191529060a001620007af565b62000a6d62000bd8565b607280546001600160a01b031981166001600160a01b03848116918217909355604080516060808252600d908201526c434c4c476f7665726e616e636560981b60808201529390921660208401819052918301529060008051602062001cdf8339815191529060a001620007af565b62000ae662000bd8565b6001600160a01b03811662000b4d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620003a7565b62000b588162000c68565b50565b62000b6562000bd8565b607080546001600160a01b031981166001600160a01b0384811691821790935560408051606080825260119082015270086989886dedce6e8e4eac6e8dee486989607b1b60808201529390921660208401819052918301529060008051602062001cdf8339815191529060a001620007af565b6033546001600160a01b031633146200096e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620003a7565b600054610100900460ff1662000c5e5760405162461bcd60e51b8152600401620003a79062001388565b6200096e62000cba565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1662000ce45760405162461bcd60e51b8152600401620003a79062001388565b6200096e3362000c68565b61090b80620013d483390190565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171562000d3f5762000d3f62000cfd565b604052919050565b600082601f83011262000d5957600080fd5b813567ffffffffffffffff81111562000d765762000d7662000cfd565b62000d8b601f8201601f191660200162000d13565b81815284602083860101111562000da157600080fd5b816020850160208301376000918101602001919091529392505050565b8035801515811462000dcf57600080fd5b919050565b600082601f83011262000de657600080fd5b6040516060810181811067ffffffffffffffff8211171562000e0c5762000e0c62000cfd565b60405280606084018581111562000e2257600080fd5b845b8181101562000e3e57803583526020928301920162000e24565b509195945050505050565b6001600160a01b038116811462000b5857600080fd5b803562000dcf8162000e49565b600082601f83011262000e7e57600080fd5b8135602067ffffffffffffffff82111562000e9d5762000e9d62000cfd565b8160051b62000eae82820162000d13565b928352848101820192828101908785111562000ec957600080fd5b83870192505b8483101562000ef557823562000ee58162000e49565b8252918301919083019062000ecf565b979650505050505050565b6000806000806000806000806000806101808b8d03121562000f2157600080fd5b8a3567ffffffffffffffff8082111562000f3a57600080fd5b62000f488e838f0162000d47565b9b5062000f5860208e0162000dbe565b9a5062000f6860408e0162000dbe565b995060608d0135985062000f808e60808f0162000dd4565b975060e08d013591508082111562000f9757600080fd5b62000fa58e838f0162000e6c565b965062000fb66101008e0162000e5f565b955062000fc76101208e0162000e5f565b945062000fd86101408e0162000e5f565b93506101608d013591508082111562000ff057600080fd5b5062000fff8d828e0162000d47565b9150509295989b9194979a5092959850565b6000602082840312156200102457600080fd5b8135620010318162000e49565b9392505050565b600080600080600060a086880312156200105157600080fd5b85356200105e8162000e49565b94506020860135620010708162000e49565b93506040860135620010828162000e49565b92506060860135620010948162000e49565b91506080860135620010a68162000e49565b809150509295509295909350565b600060208284031215620010c757600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b818110156200110c57602081850181015186830182015201620010ee565b818111156200111f576000602083870101525b50601f01601f19169290920160200192915050565b60006101608083526200114a8184018f620010e4565b8d151560208501528c15156040850152606084018c9052608084018b905260a084018a905260c084018990526001600160a01b0388811660e086015287811661010086015286166101208501528381036101408501529050620011ae8185620010e4565b9e9d5050505050505050505050505050565b600060208284031215620011d357600080fd5b8151620010318162000e49565b8060005b60058110156200120e5781516001600160a01b0316845260209384019390910190600101620011e4565b50505050565b600081518084526020808501945080840160005b838110156200124f5781516001600160a01b03168752958201959082019060010162001228565b509495945050505050565b6001600160a01b03891681526101c0602080830182905260009190620012838483018c620010e4565b91508915156040850152881515606085015287608085015260a084018760005b6003811015620012c257815183529183019190830190600101620012a3565b50505050620012d6610100840186620011e0565b8281036101a0840152620012eb818562001214565b9b9a5050505050505050505050565b6001600160a01b03831681526040602082018190526000906200132090830184620010e4565b949350505050565b60006000198214156200134b57634e487b7160e01b600052601160045260246000fd5b5060010190565b6001600160a01b03841681526060602082018190526000906200137890830185620010e4565b9050826040830152949350505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fe608060405234801561001057600080fd5b5060405161090b38038061090b83398101604081905261002f91610467565b818161003d82826000610046565b50505050610591565b61004f83610111565b6040516001600160a01b038416907f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e90600090a26000825111806100905750805b1561010c5761010a836001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fa9190610527565b836102b460201b6100291760201c565b505b505050565b610124816102e060201b6100551760201c565b6101835760405162461bcd60e51b815260206004820152602560248201527f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b6101f7816001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e89190610527565b6102e060201b6100551760201c565b61025c5760405162461bcd60e51b815260206004820152603060248201527f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960448201526f1cc81b9bdd08184818dbdb9d1c9858dd60821b606482015260840161017a565b806102937fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5060001b6102ef60201b6100641760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b60606102d983836040518060600160405280602781526020016108e4602791396102f2565b9392505050565b6001600160a01b03163b151590565b90565b60606001600160a01b0384163b61035a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161017a565b600080856001600160a01b0316856040516103759190610542565b600060405180830381855af49150503d80600081146103b0576040519150601f19603f3d011682016040523d82523d6000602084013e6103b5565b606091505b5090925090506103c68282866103d0565b9695505050505050565b606083156103df5750816102d9565b8251156103ef5782518084602001fd5b8160405162461bcd60e51b815260040161017a919061055e565b80516001600160a01b038116811461042057600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561045657818101518382015260200161043e565b8381111561010a5750506000910152565b6000806040838503121561047a57600080fd5b61048383610409565b60208401519092506001600160401b03808211156104a057600080fd5b818501915085601f8301126104b457600080fd5b8151818111156104c6576104c6610425565b604051601f8201601f19908116603f011681019083821181831017156104ee576104ee610425565b8160405282815288602084870101111561050757600080fd5b61051883602083016020880161043b565b80955050505050509250929050565b60006020828403121561053957600080fd5b6102d982610409565b6000825161055481846020870161043b565b9190910192915050565b602081526000825180602084015261057d81604085016020870161043b565b601f01601f19169190910160400192915050565b610344806105a06000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610067565b610100565b565b606061004e83836040518060600160405280602781526020016102e860279139610124565b9392505050565b6001600160a01b03163b151590565b90565b600061009a7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50546001600160a01b031690565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fb919061023f565b905090565b3660008037600080366000845af43d6000803e80801561011f573d6000f35b3d6000fd5b60606001600160a01b0384163b6101915760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b0316856040516101ac9190610298565b600060405180830381855af49150503d80600081146101e7576040519150601f19603f3d011682016040523d82523d6000602084013e6101ec565b606091505b50915091506101fc828286610206565b9695505050505050565b6060831561021557508161004e565b8251156102255782518084602001fd5b8160405162461bcd60e51b815260040161018891906102b4565b60006020828403121561025157600080fd5b81516001600160a01b038116811461004e57600080fd5b60005b8381101561028357818101518382015260200161026b565b83811115610292576000848401525b50505050565b600082516102aa818460208701610268565b9190910192915050565b60208152600082518060208401526102d3816040850160208701610268565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220d04c336bf1d5ee0f5699fa74b9ed40e936469e51d6973a72d8aab6b3c84de87264736f6c634300080c0033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65648068a223bc38529864701ed6f372296d3ecb2aa9affe6c91cf94e2ae6dd577c8a2646970667358221220bfb0e274c68f2d6ba1f97913171eb0f50fb2c63880fd8110e859318241b7003064736f6c634300080c0033",
  "bytecodeSha1": "212dad12a53948480e3aabd2cc6c7e9a5d562613",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.12+commit.f00d7308"
  },
  "contractName": "CLFactory",
  "coverageMap": {
    "branches": {
      "0": {
        "OwnableUpgradeable._checkOwner": {
          "45": [
            1662,
            1685,
            true
          ]
        },
        "OwnableUpgradeable.transferOwnership": {
          "44": [
            2409,
            2431,
            true
          ]
        }
      },
      "1": {
        "CLFactory.Init": {
          "42": [
            4418,
            4431,
            false
          ]
        },
        "OwnableUpgradeable.__Ownable_init_unchained": {
          "43": [
            4910,
            4923,
            true
          ]
        }
      },
      "3": {},
      "46": {},
      "48": {},
      "49": {
        "CLFactory.CreateCLH": {
          "36": [
            4332,
            4365,
            true
          ],
          "37": [
            4381,
            4411,
            true
          ],
          "38": [
            4427,
            4463,
            true
          ],
          "39": [
            4528,
            4555,
            false
          ],
          "40": [
            4581,
            4604,
            true
          ],
          "41": [
            4693,
            5137,
            true
          ]
        }
      },
      "54": {},
      "56": {},
      "60": {},
      "61": {}
    },
    "statements": {
      "0": {
        "OwnableUpgradeable.__Ownable_init": {
          "32": [
            1065,
            1091
          ]
        },
        "OwnableUpgradeable.__Ownable_init_unchained": {
          "35": [
            1176,
            1208
          ]
        },
        "OwnableUpgradeable._checkOwner": {
          "31": [
            1654,
            1722
          ]
        },
        "OwnableUpgradeable._transferOwnership": {
          "33": [
            2781,
            2798
          ],
          "34": [
            2808,
            2853
          ]
        },
        "OwnableUpgradeable.owner": {
          "0": [
            1506,
            1519
          ]
        },
        "OwnableUpgradeable.renounceOwnership": {
          "20": [
            2135,
            2165
          ]
        },
        "OwnableUpgradeable.transferOwnership": {
          "26": [
            2401,
            2474
          ],
          "27": [
            2484,
            2512
          ]
        }
      },
      "1": {},
      "3": {
        "ContextUpgradeable._msgSender": {
          "30": [
            922,
            939
          ]
        }
      },
      "46": {},
      "48": {},
      "49": {
        "CLFactory.CreateCLH": {
          "1": [
            4310,
            4513
          ],
          "2": [
            4572,
            4641
          ],
          "3": [
            4668,
            5199
          ],
          "4": [
            5214,
            5240
          ],
          "5": [
            5784,
            5792
          ],
          "6": [
            5802,
            5850
          ],
          "7": [
            5860,
            5898
          ],
          "8": [
            5909,
            5964
          ]
        },
        "CLFactory.Init": {
          "11": [
            2833,
            2864
          ],
          "12": [
            2875,
            2913
          ],
          "13": [
            2923,
            2953
          ],
          "14": [
            2963,
            3001
          ],
          "15": [
            3011,
            3027
          ],
          "16": [
            3038,
            3048
          ],
          "17": [
            3058,
            3099
          ],
          "18": [
            3109,
            3140
          ],
          "19": [
            3151,
            3167
          ]
        },
        "CLFactory.UpdateCLHAPI": {
          "9": [
            7266,
            7282
          ],
          "10": [
            7292,
            7339
          ]
        },
        "CLFactory.UpdateCLLConstructorCLH": {
          "28": [
            6355,
            6393
          ],
          "29": [
            6403,
            6472
          ]
        },
        "CLFactory.UpdateCLLGovernance": {
          "24": [
            6997,
            7027
          ],
          "25": [
            7037,
            7098
          ]
        },
        "CLFactory.UpdateCLLUserManagement": {
          "22": [
            6684,
            6722
          ],
          "23": [
            6732,
            6801
          ]
        },
        "CLFactory.getCLHImplementation": {
          "21": [
            6110,
            6143
          ]
        }
      },
      "54": {},
      "56": {},
      "60": {},
      "61": {}
    }
  },
  "dependencies": [
    "CLBeacon",
    "CLHouseApi",
    "CLProxyCLH",
    "OpenZeppelin/openzeppelin-contracts-upgradeable@4.7.3/ContextUpgradeable",
    "ICLFactory",
    "ICLHouse",
    "OpenZeppelin/openzeppelin-contracts-upgradeable@4.7.3/Initializable",
    "OpenZeppelin/openzeppelin-contracts-upgradeable@4.7.3/OwnableUpgradeable"
  ],
  "deployedBytecode": "60806040523480156200001157600080fd5b50600436106200012d5760003560e01c80638da5cb5b11620000af578063c1e45428116200007a578063c1e45428146200027e578063d742063c1462000295578063ee7a7d1b14620002ac578063f2fde38b14620002b6578063f6f7a1b314620002cd57600080fd5b80638da5cb5b146200023a578063a327ab69146200024c578063a6b6ed3a1462000260578063c0828f63146200026a57600080fd5b8063594034e311620000fc578063594034e314620001a757806360b323c314620001bb578063624d877414620001d2578063715018a614620001fe57806386bdfcac146200020857600080fd5b8063107907171462000132578063209bafec14620001635780634bc3959f146200017c578063529382d51462000193575b600080fd5b60735462000146906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6200017a6200017436600462000f00565b620002e4565b005b6200017a6200018d36600462001011565b62000742565b60715462000146906001600160a01b031681565b60705462000146906001600160a01b031681565b6200017a620001cc36600462001038565b620007bb565b62000146620001e3366004620010b4565b6080602052600090815260409020546001600160a01b031681565b6200017a62000958565b6200022b6200021936600462001011565b607f6020526000908152604090205481565b6040519081526020016200015a565b6033546001600160a01b031662000146565b60725462000146906001600160a01b031681565b6200014662000970565b607e5462000146906001600160a01b031681565b6200017a6200028f36600462001011565b620009e6565b6200017a620002a636600462001011565b62000a63565b6200022b60655481565b6200017a620002c736600462001011565b62000adc565b6200017a620002de36600462001011565b62000b5b565b337f0b93889d934070956c00846f50f9a10a747bd194bba2f2e78a86d0c02386fdb1881480620003335750877f16591a696fee5867425b3dee9fc0160a6c1baef77835bc3d204314106d639298145b806200035e5750877fa0786f6450d5fb3298b8425105c1b75e6e01a1ff86cdabea29909cdb0b4c83a7145b620003b05760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420476f7665726e616e6365205479706500000000000000000060448201526064015b60405180910390fd5b6001600160a01b0383161562000532578151604114620004135760405162461bcd60e51b815260206004820152601f60248201527f437265617465434c483a20426164207369676e6174757265206c656e677468006044820152606401620003a7565b6073546001600160a01b0316638b4bccca8c8c8c8c8c600060200201518d600160200201518e600260200201518c8f600081518110620004575762000457620010ce565b6020026020010151308d6040518c63ffffffff1660e01b8152600401620004899b9a9998979695949392919062001134565b602060405180830381865afa158015620004a7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004cd9190620011c0565b6001600160a01b0316836001600160a01b0316146200052f5760405162461bcd60e51b815260206004820152601c60248201527f437265617465434c483a20496e76616c6964205369676e6174757265000000006044820152606401620003a7565b50815b6000607e60009054906101000a90046001600160a01b0316828d8d8d8d8d6040518060a00160405280607060009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001306001600160a01b03166001600160a01b03168152602001607360009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020018e6001600160a01b03166001600160a01b031681526020018d6001600160a01b03166001600160a01b03168152508e604051602401620006159897969594939291906200125a565b60408051601f198184030181529181526020820180516001600160e01b03166353d1ee2d60e01b179052516200064b9062000cef565b62000658929190620012fa565b604051809103906000f08015801562000675573d6000803e3d6000fd5b506065805491925060006200068a8362001328565b91905055508060806000606554815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606554607f6000836001600160a01b03166001600160a01b03168152602001908152602001600020819055507f6510209152e59feb0a7445a97b24bc79bfcb456ca1d8bff1e4980536c4e8cabb818d6065546040516200072c9392919062001352565b60405180910390a1505050505050505050505050565b6200074c62000bd8565b607380546001600160a01b031981166001600160a01b0384811691821790935560408051606080825260069082015265434c4841504960d01b60808201529390921660208401819052918301529060008051602062001cdf8339815191529060a0015b60405180910390a15050565b600054600190610100900460ff16158015620007de575060005460ff8083169116105b620008435760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620003a7565b6000805461ffff191660ff831617610100178155607e80546001600160a01b038086166001600160a01b031992831617909255607180548a84169083161790556072805489841690831617905560708054888416908316179055607380549287169282169290921790915560658290558180527fae0c3f803428dd501929f276001a4b5fd1d262991bbb98e97b4b7d918a5af6dc80549091169055607f6020527f18b3a2798575d3a428c1f52e616a74b071539854e037e7d7c535365d474f4033556200090f62000c34565b6000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050505050565b6200096262000bd8565b6200096e600062000c68565b565b607e5460408051635c60da1b60e01b815290516000926001600160a01b031691635c60da1b9160048083019260209291908290030181865afa158015620009bb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009e19190620011c0565b905090565b620009f062000bd8565b607180546001600160a01b031981166001600160a01b038481169182179093556040805160608082526011908201527010d313155cd95c93585b9859d95b595b9d607a1b60808201529390921660208401819052918301529060008051602062001cdf8339815191529060a001620007af565b62000a6d62000bd8565b607280546001600160a01b031981166001600160a01b03848116918217909355604080516060808252600d908201526c434c4c476f7665726e616e636560981b60808201529390921660208401819052918301529060008051602062001cdf8339815191529060a001620007af565b62000ae662000bd8565b6001600160a01b03811662000b4d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620003a7565b62000b588162000c68565b50565b62000b6562000bd8565b607080546001600160a01b031981166001600160a01b0384811691821790935560408051606080825260119082015270086989886dedce6e8e4eac6e8dee486989607b1b60808201529390921660208401819052918301529060008051602062001cdf8339815191529060a001620007af565b6033546001600160a01b031633146200096e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620003a7565b600054610100900460ff1662000c5e5760405162461bcd60e51b8152600401620003a79062001388565b6200096e62000cba565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1662000ce45760405162461bcd60e51b8152600401620003a79062001388565b6200096e3362000c68565b61090b80620013d483390190565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171562000d3f5762000d3f62000cfd565b604052919050565b600082601f83011262000d5957600080fd5b813567ffffffffffffffff81111562000d765762000d7662000cfd565b62000d8b601f8201601f191660200162000d13565b81815284602083860101111562000da157600080fd5b816020850160208301376000918101602001919091529392505050565b8035801515811462000dcf57600080fd5b919050565b600082601f83011262000de657600080fd5b6040516060810181811067ffffffffffffffff8211171562000e0c5762000e0c62000cfd565b60405280606084018581111562000e2257600080fd5b845b8181101562000e3e57803583526020928301920162000e24565b509195945050505050565b6001600160a01b038116811462000b5857600080fd5b803562000dcf8162000e49565b600082601f83011262000e7e57600080fd5b8135602067ffffffffffffffff82111562000e9d5762000e9d62000cfd565b8160051b62000eae82820162000d13565b928352848101820192828101908785111562000ec957600080fd5b83870192505b8483101562000ef557823562000ee58162000e49565b8252918301919083019062000ecf565b979650505050505050565b6000806000806000806000806000806101808b8d03121562000f2157600080fd5b8a3567ffffffffffffffff8082111562000f3a57600080fd5b62000f488e838f0162000d47565b9b5062000f5860208e0162000dbe565b9a5062000f6860408e0162000dbe565b995060608d0135985062000f808e60808f0162000dd4565b975060e08d013591508082111562000f9757600080fd5b62000fa58e838f0162000e6c565b965062000fb66101008e0162000e5f565b955062000fc76101208e0162000e5f565b945062000fd86101408e0162000e5f565b93506101608d013591508082111562000ff057600080fd5b5062000fff8d828e0162000d47565b9150509295989b9194979a5092959850565b6000602082840312156200102457600080fd5b8135620010318162000e49565b9392505050565b600080600080600060a086880312156200105157600080fd5b85356200105e8162000e49565b94506020860135620010708162000e49565b93506040860135620010828162000e49565b92506060860135620010948162000e49565b91506080860135620010a68162000e49565b809150509295509295909350565b600060208284031215620010c757600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b818110156200110c57602081850181015186830182015201620010ee565b818111156200111f576000602083870101525b50601f01601f19169290920160200192915050565b60006101608083526200114a8184018f620010e4565b8d151560208501528c15156040850152606084018c9052608084018b905260a084018a905260c084018990526001600160a01b0388811660e086015287811661010086015286166101208501528381036101408501529050620011ae8185620010e4565b9e9d5050505050505050505050505050565b600060208284031215620011d357600080fd5b8151620010318162000e49565b8060005b60058110156200120e5781516001600160a01b0316845260209384019390910190600101620011e4565b50505050565b600081518084526020808501945080840160005b838110156200124f5781516001600160a01b03168752958201959082019060010162001228565b509495945050505050565b6001600160a01b03891681526101c0602080830182905260009190620012838483018c620010e4565b91508915156040850152881515606085015287608085015260a084018760005b6003811015620012c257815183529183019190830190600101620012a3565b50505050620012d6610100840186620011e0565b8281036101a0840152620012eb818562001214565b9b9a5050505050505050505050565b6001600160a01b03831681526040602082018190526000906200132090830184620010e4565b949350505050565b60006000198214156200134b57634e487b7160e01b600052601160045260246000fd5b5060010190565b6001600160a01b03841681526060602082018190526000906200137890830185620010e4565b9050826040830152949350505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fe608060405234801561001057600080fd5b5060405161090b38038061090b83398101604081905261002f91610467565b818161003d82826000610046565b50505050610591565b61004f83610111565b6040516001600160a01b038416907f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e90600090a26000825111806100905750805b1561010c5761010a836001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fa9190610527565b836102b460201b6100291760201c565b505b505050565b610124816102e060201b6100551760201c565b6101835760405162461bcd60e51b815260206004820152602560248201527f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b6101f7816001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e89190610527565b6102e060201b6100551760201c565b61025c5760405162461bcd60e51b815260206004820152603060248201527f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960448201526f1cc81b9bdd08184818dbdb9d1c9858dd60821b606482015260840161017a565b806102937fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5060001b6102ef60201b6100641760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b60606102d983836040518060600160405280602781526020016108e4602791396102f2565b9392505050565b6001600160a01b03163b151590565b90565b60606001600160a01b0384163b61035a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161017a565b600080856001600160a01b0316856040516103759190610542565b600060405180830381855af49150503d80600081146103b0576040519150601f19603f3d011682016040523d82523d6000602084013e6103b5565b606091505b5090925090506103c68282866103d0565b9695505050505050565b606083156103df5750816102d9565b8251156103ef5782518084602001fd5b8160405162461bcd60e51b815260040161017a919061055e565b80516001600160a01b038116811461042057600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561045657818101518382015260200161043e565b8381111561010a5750506000910152565b6000806040838503121561047a57600080fd5b61048383610409565b60208401519092506001600160401b03808211156104a057600080fd5b818501915085601f8301126104b457600080fd5b8151818111156104c6576104c6610425565b604051601f8201601f19908116603f011681019083821181831017156104ee576104ee610425565b8160405282815288602084870101111561050757600080fd5b61051883602083016020880161043b565b80955050505050509250929050565b60006020828403121561053957600080fd5b6102d982610409565b6000825161055481846020870161043b565b9190910192915050565b602081526000825180602084015261057d81604085016020870161043b565b601f01601f19169190910160400192915050565b610344806105a06000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610067565b610100565b565b606061004e83836040518060600160405280602781526020016102e860279139610124565b9392505050565b6001600160a01b03163b151590565b90565b600061009a7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50546001600160a01b031690565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fb919061023f565b905090565b3660008037600080366000845af43d6000803e80801561011f573d6000f35b3d6000fd5b60606001600160a01b0384163b6101915760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b0316856040516101ac9190610298565b600060405180830381855af49150503d80600081146101e7576040519150601f19603f3d011682016040523d82523d6000602084013e6101ec565b606091505b50915091506101fc828286610206565b9695505050505050565b6060831561021557508161004e565b8251156102255782518084602001fd5b8160405162461bcd60e51b815260040161018891906102b4565b60006020828403121561025157600080fd5b81516001600160a01b038116811461004e57600080fd5b60005b8381101561028357818101518382015260200161026b565b83811115610292576000848401525b50505050565b600082516102aa818460208701610268565b9190910192915050565b60208152600082518060208401526102d3816040850160208701610268565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220d04c336bf1d5ee0f5699fa74b9ed40e936469e51d6973a72d8aab6b3c84de87264736f6c634300080c0033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65648068a223bc38529864701ed6f372296d3ecb2aa9affe6c91cf94e2ae6dd577c8a2646970667358221220bfb0e274c68f2d6ba1f97913171eb0f50fb2c63880fd8110e859318241b7003064736f6c634300080c0033",
  "deployedSourceMap": "496:6852:49:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1009:21;;;;;-1:-1:-1;;;;;1009:21:49;;;;;;-1:-1:-1;;;;;178:32:62;;;160:51;;148:2;133:18;1009:21:49;;;;;;;;3896:2075;;;;;;:::i;:::-;;:::i;:::-;;7162:184;;;;;;:::i;:::-;;:::i;839:32::-;;;;;-1:-1:-1;;;;;839:32:49;;;736;;;;;-1:-1:-1;;;;;736:32:49;;;2577:597;;;;;;:::i;:::-;;:::i;1383:42::-;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;1383:42:49;;;2071:101:0;;;:::i;1271:45:49:-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;5997:25:62;;;5985:2;5970:18;1271:45:49;5851:177:62;1441:85:0;1513:6;;-1:-1:-1;;;;;1513:6:0;1441:85;;937:28:49;;;;;-1:-1:-1;;;;;937:28:49;;;6036:114;;;:::i;1187:25::-;;;;;-1:-1:-1;;;;;1187:25:49;;;6547:261;;;;;;:::i;:::-;;:::i;6872:233::-;;;;;;:::i;:::-;;:::i;621:21::-;;;;;;2321:198:0;;;;;;:::i;:::-;;:::i;6218:261:49:-;;;;;;:::i;:::-;;:::i;3896:2075::-;4289:10;339:33:48;4332::49;;;:79;;;4402:9;411:30:48;4381::49;4332:79;:131;;;;4454:9;486:36:48;4427::49;4332:131;4310:203;;;;-1:-1:-1;;;4310:203:49;;6460:2:62;4310:203:49;;;6442:21:62;6499:2;6479:18;;;6472:30;6538:25;6518:18;;;6511:53;6581:18;;4310:203:49;;;;;;;;;-1:-1:-1;;;;;4528:27:49;;;4524:727;;4581:10;:17;4602:2;4581:23;4572:69;;;;-1:-1:-1;;;4572:69:49;;6812:2:62;4572:69:49;;;6794:21:62;6851:2;6831:18;;;6824:30;6890:33;6870:18;;;6863:61;6941:18;;4572:69:49;6610:355:62;4572:69:49;4722:6;;-1:-1:-1;;;;;4722:6:49;4710:35;4767:10;4799:13;4834:10;4866:9;4897;4722:6;4897:12;;;;4931:9;4941:1;4931:12;;;;4965:9;4975:1;4965:12;;;;4999:13;5034:15;5050:1;5034:18;;;;;;;;:::i;:::-;;;;;;;5082:4;5109:10;4710:427;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4693:444:49;:13;-1:-1:-1;;;;;4693:444:49;;4668:531;;;;-1:-1:-1;;;4668:531:49;;9178:2:62;4668:531:49;;;9160:21:62;9217:2;9197:18;;;9190:30;9256;9236:18;;;9229:58;9304:18;;4668:531:49;8976:352:62;4668:531:49;-1:-1:-1;5227:13:49;4524:727;5261:17;5318:9;;;;;;;;;-1:-1:-1;;;;;5318:9:49;5474:10;5503;5531:13;5562:10;5590:9;5617;5343:420;;;;;;;;5646:17;;;;;;;;;-1:-1:-1;;;;;5646:17:49;-1:-1:-1;;;;;5343:420:49;-1:-1:-1;;;;;5343:420:49;;;;;5673:4;-1:-1:-1;;;;;5343:420:49;-1:-1:-1;;;;;5343:420:49;;;;;5680:6;;;;;;;;;-1:-1:-1;;;;;5680:6:49;-1:-1:-1;;;;;5343:420:49;-1:-1:-1;;;;;5343:420:49;;;;;5688:11;-1:-1:-1;;;;;5343:420:49;-1:-1:-1;;;;;5343:420:49;;;;;5701:13;-1:-1:-1;;;;;5343:420:49;-1:-1:-1;;;;;5343:420:49;;;;5734:15;5343:420;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;5343:420:49;;;;;;;;;;;;;;-1:-1:-1;;;;;5343:420:49;-1:-1:-1;;;5343:420:49;;;5281:492;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5784:6:49;:8;;5261:512;;-1:-1:-1;5784:6:49;:8;;;:::i;:::-;;;;;;5840:6;5802;:16;5810:6;;5802:16;;;;;;;;;;;;:48;;;;;-1:-1:-1;;;;;5802:48:49;;;;;-1:-1:-1;;;;;5802:48:49;;;;;;5892:6;;5860:8;:29;5879:6;-1:-1:-1;;;;;5860:29:49;-1:-1:-1;;;;;5860:29:49;;;;;;;;;;;;:38;;;;5914:50;5934:6;5944:10;5956:6;;5914:50;;;;;;;;:::i;:::-;;;;;;;;4258:1713;;3896:2075;;;;;;;;;;:::o;7162:184::-;1334:13:0;:11;:13::i;:::-;7250:6:49::1;::::0;;-1:-1:-1;;;;;;7266:16:49;::::1;-1:-1:-1::0;;;;;7266:16:49;;::::1;::::0;;::::1;::::0;;;7297:42:::1;::::0;;12660:2:62;12642:21;;;12699:1;12679:18;;;12672:29;-1:-1:-1;;;12732:3:62;12717:19;;12710:37;7250:6:49;;;::::1;12852:4:62::0;12837:20;;12830:45;;;12891:18;;;12884:43;7250:6:49;-1:-1:-1;;;;;;;;;;;7297:42:49;12779:3:62;12764:19;7297:42:49::1;;;;;;;;7222:124;7162:184:::0;:::o;2577:597::-;4418:13:1;;295:1:48;;4418:13:1;;;;;4417:14;:40;;;;-1:-1:-1;4435:12:1;;:22;;;;:12;;:22;4417:40;4409:99;;;;-1:-1:-1;;;4409:99:1;;13140:2:62;4409:99:1;;;13122:21:62;13179:2;13159:18;;;13152:30;13218:34;13198:18;;;13191:62;-1:-1:-1;;;13269:18:62;;;13262:44;13323:19;;4409:99:1;12938:410:62;4409:99:1;4518:12;:22;;-1:-1:-1;;4550:20:1;4518:22;;;4550:20;4518:22;4550:20;;;2833:9:49::1;:31:::0;;-1:-1:-1;;;;;2833:31:49;;::::1;-1:-1:-1::0;;;;;;2833:31:49;;::::1;;::::0;;;2875:17:::1;:38:::0;;;;::::1;::::0;;::::1;;::::0;;2923:13:::1;:30:::0;;;;::::1;::::0;;::::1;;::::0;;2963:17:::1;:38:::0;;;;::::1;::::0;;::::1;;::::0;;3011:6:::1;:16:::0;;;;::::1;::::0;;::::1;::::0;;;::::1;::::0;;;3038:6:::1;:10:::0;;;3058:16;;;;:41;;;;::::1;::::0;;3109:8:::1;3058:16;3109:22:::0;;:31;3151:16:::1;:14;:16::i;:::-;4607:5:1::0;4591:21;;-1:-1:-1;;4591:21:1;;;4627:20;;13525:4:62;13513:17;;13495:36;;4627:20:1;;13483:2:62;13468:18;4627:20:1;;;;;;;2577:597:49;;;;;;:::o;2071:101:0:-;1334:13;:11;:13::i;:::-;2135:30:::1;2162:1;2135:18;:30::i;:::-;2071:101::o:0;6036:114:49:-;6117:9;;:26;;;-1:-1:-1;;;6117:26:49;;;;6091:7;;-1:-1:-1;;;;;6117:9:49;;:24;;:26;;;;;;;;;;;;;;:9;:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6110:33;;6036:114;:::o;6547:261::-;1334:13:0;:11;:13::i;:::-;6657:17:49::1;::::0;;-1:-1:-1;;;;;;6684:38:49;::::1;-1:-1:-1::0;;;;;6684:38:49;;::::1;::::0;;::::1;::::0;;;6737:64:::1;::::0;;13800:2:62;13782:21;;;13839:2;13819:18;;;13812:30;-1:-1:-1;;;13873:3:62;13858:19;;13851:48;6657:17:49;;;::::1;14004:4:62::0;13989:20;;13982:45;;;14043:18;;;14036:43;6657:17:49;-1:-1:-1;;;;;;;;;;;6737:64:49;13931:3:62;13916:19;6737:64:49::1;13542:543:62::0;6872:233:49;1334:13:0;:11;:13::i;:::-;6974::49::1;::::0;;-1:-1:-1;;;;;;6997:30:49;::::1;-1:-1:-1::0;;;;;6997:30:49;;::::1;::::0;;::::1;::::0;;;7042:56:::1;::::0;;14348:2:62;14330:21;;;14387:2;14367:18;;;14360:30;-1:-1:-1;;;14421:3:62;14406:19;;14399:44;6974:13:49;;;::::1;14548:4:62::0;14533:20;;14526:45;;;14587:18;;;14580:43;6974:13:49;-1:-1:-1;;;;;;;;;;;7042:56:49;14475:3:62;14460:19;7042:56:49::1;14090:539:62::0;2321:198:0;1334:13;:11;:13::i;:::-;-1:-1:-1;;;;;2409:22:0;::::1;2401:73;;;::::0;-1:-1:-1;;;2401:73:0;;14836:2:62;2401:73:0::1;::::0;::::1;14818:21:62::0;14875:2;14855:18;;;14848:30;14914:34;14894:18;;;14887:62;-1:-1:-1;;;14965:18:62;;;14958:36;15011:19;;2401:73:0::1;14634:402:62::0;2401:73:0::1;2484:28;2503:8;2484:18;:28::i;:::-;2321:198:::0;:::o;6218:261:49:-;1334:13:0;:11;:13::i;:::-;6328:17:49::1;::::0;;-1:-1:-1;;;;;;6355:38:49;::::1;-1:-1:-1::0;;;;;6355:38:49;;::::1;::::0;;::::1;::::0;;;6408:64:::1;::::0;;15299:2:62;15281:21;;;15338:2;15318:18;;;15311:30;-1:-1:-1;;;15372:3:62;15357:19;;15350:48;6328:17:49;;;::::1;15503:4:62::0;15488:20;;15481:45;;;15542:18;;;15535:43;6328:17:49;-1:-1:-1;;;;;;;;;;;6408:64:49;15430:3:62;15415:19;6408:64:49::1;15041:543:62::0;1599:130:0;1513:6;;-1:-1:-1;;;;;1513:6:0;929:10:3;1662:23:0;1654:68;;;;-1:-1:-1;;;1654:68:0;;15791:2:62;1654:68:0;;;15773:21:62;;;15810:18;;;15803:30;15869:34;15849:18;;;15842:62;15921:18;;1654:68:0;15589:356:62;1003:95:0;4910:13:1;;;;;;;4902:69;;;;-1:-1:-1;;;4902:69:1;;;;;;;:::i;:::-;1065:26:0::1;:24;:26::i;2673:187::-:0;2765:6;;;-1:-1:-1;;;;;2781:17:0;;;-1:-1:-1;;;;;;2781:17:0;;;;;;;2813:40;;2765:6;;;2781:17;2765:6;;2813:40;;2746:16;;2813:40;2736:124;2673:187;:::o;1104:111::-;4910:13:1;;;;;;;4902:69;;;;-1:-1:-1;;;4902:69:1;;;;;;;:::i;:::-;1176:32:0::1;929:10:3::0;1176:18:0::1;:32::i;-1:-1:-1:-:0;;;;;;;;:::o;222:127:62:-;283:10;278:3;274:20;271:1;264:31;314:4;311:1;304:15;338:4;335:1;328:15;354:275;425:2;419:9;490:2;471:13;;-1:-1:-1;;467:27:62;455:40;;525:18;510:34;;546:22;;;507:62;504:88;;;572:18;;:::i;:::-;608:2;601:22;354:275;;-1:-1:-1;354:275:62:o;634:531::-;677:5;730:3;723:4;715:6;711:17;707:27;697:55;;748:1;745;738:12;697:55;784:6;771:20;810:18;806:2;803:26;800:52;;;832:18;;:::i;:::-;876:55;919:2;900:13;;-1:-1:-1;;896:27:62;925:4;892:38;876:55;:::i;:::-;956:2;947:7;940:19;1002:3;995:4;990:2;982:6;978:15;974:26;971:35;968:55;;;1019:1;1016;1009:12;968:55;1084:2;1077:4;1069:6;1065:17;1058:4;1049:7;1045:18;1032:55;1132:1;1107:16;;;1125:4;1103:27;1096:38;;;;1111:7;634:531;-1:-1:-1;;;634:531:62:o;1170:160::-;1235:20;;1291:13;;1284:21;1274:32;;1264:60;;1320:1;1317;1310:12;1264:60;1170:160;;;:::o;1335:646::-;1385:5;1438:3;1431:4;1423:6;1419:17;1415:27;1405:55;;1456:1;1453;1446:12;1405:55;1489:2;1483:9;1531:2;1523:6;1519:15;1600:6;1588:10;1585:22;1564:18;1552:10;1549:34;1546:62;1543:88;;;1611:18;;:::i;:::-;1647:2;1640:22;1682:6;1723:2;1711:15;;1738;;;1735:35;;;1766:1;1763;1756:12;1735:35;1790:6;1805:146;1821:6;1816:3;1813:15;1805:146;;;1889:17;;1877:30;;1936:4;1927:14;;;;1838;1805:146;;;-1:-1:-1;1969:6:62;;1335:646;-1:-1:-1;;;;;1335:646:62:o;1986:131::-;-1:-1:-1;;;;;2061:31:62;;2051:42;;2041:70;;2107:1;2104;2097:12;2122:134;2190:20;;2219:31;2190:20;2219:31;:::i;2261:787::-;2315:5;2368:3;2361:4;2353:6;2349:17;2345:27;2335:55;;2386:1;2383;2376:12;2335:55;2422:6;2409:20;2448:4;2471:18;2467:2;2464:26;2461:52;;;2493:18;;:::i;:::-;2539:2;2536:1;2532:10;2562:28;2586:2;2582;2578:11;2562:28;:::i;:::-;2624:15;;;2694;;;2690:24;;;2655:12;;;;2726:15;;;2723:35;;;2754:1;2751;2744:12;2723:35;2790:2;2782:6;2778:15;2767:26;;2802:217;2818:6;2813:3;2810:15;2802:217;;;2898:3;2885:17;2915:31;2940:5;2915:31;:::i;:::-;2959:18;;2835:12;;;;2997;;;;2802:217;;;3037:5;2261:787;-1:-1:-1;;;;;;;2261:787:62:o;3053:1313::-;3254:6;3262;3270;3278;3286;3294;3302;3310;3318;3326;3379:3;3367:9;3358:7;3354:23;3350:33;3347:53;;;3396:1;3393;3386:12;3347:53;3436:9;3423:23;3465:18;3506:2;3498:6;3495:14;3492:34;;;3522:1;3519;3512:12;3492:34;3545:50;3587:7;3578:6;3567:9;3563:22;3545:50;:::i;:::-;3535:60;;3614:35;3645:2;3634:9;3630:18;3614:35;:::i;:::-;3604:45;;3668:35;3699:2;3688:9;3684:18;3668:35;:::i;:::-;3658:45;;3750:2;3739:9;3735:18;3722:32;3712:42;;3773:54;3819:7;3813:3;3802:9;3798:19;3773:54;:::i;:::-;3763:64;;3880:3;3869:9;3865:19;3852:33;3836:49;;3910:2;3900:8;3897:16;3894:36;;;3926:1;3923;3916:12;3894:36;3949:63;4004:7;3993:8;3982:9;3978:24;3949:63;:::i;:::-;3939:73;;4031:39;4065:3;4054:9;4050:19;4031:39;:::i;:::-;4021:49;;4089:39;4123:3;4112:9;4108:19;4089:39;:::i;:::-;4079:49;;4147:39;4181:3;4170:9;4166:19;4147:39;:::i;:::-;4137:49;;4239:3;4228:9;4224:19;4211:33;4195:49;;4269:2;4259:8;4256:16;4253:36;;;4285:1;4282;4275:12;4253:36;;4308:52;4352:7;4341:8;4330:9;4326:24;4308:52;:::i;:::-;4298:62;;;3053:1313;;;;;;;;;;;;;:::o;4371:247::-;4430:6;4483:2;4471:9;4462:7;4458:23;4454:32;4451:52;;;4499:1;4496;4489:12;4451:52;4538:9;4525:23;4557:31;4582:5;4557:31;:::i;:::-;4607:5;4371:247;-1:-1:-1;;;4371:247:62:o;4623:813::-;4718:6;4726;4734;4742;4750;4803:3;4791:9;4782:7;4778:23;4774:33;4771:53;;;4820:1;4817;4810:12;4771:53;4859:9;4846:23;4878:31;4903:5;4878:31;:::i;:::-;4928:5;-1:-1:-1;4985:2:62;4970:18;;4957:32;4998:33;4957:32;4998:33;:::i;:::-;5050:7;-1:-1:-1;5109:2:62;5094:18;;5081:32;5122:33;5081:32;5122:33;:::i;:::-;5174:7;-1:-1:-1;5233:2:62;5218:18;;5205:32;5246:33;5205:32;5246:33;:::i;:::-;5298:7;-1:-1:-1;5357:3:62;5342:19;;5329:33;5371;5329;5371;:::i;:::-;5423:7;5413:17;;;4623:813;;;;;;;;:::o;5441:180::-;5500:6;5553:2;5541:9;5532:7;5528:23;5524:32;5521:52;;;5569:1;5566;5559:12;5521:52;-1:-1:-1;5592:23:62;;5441:180;-1:-1:-1;5441:180:62:o;6970:127::-;7031:10;7026:3;7022:20;7019:1;7012:31;7062:4;7059:1;7052:15;7086:4;7083:1;7076:15;7102:472;7144:3;7182:5;7176:12;7209:6;7204:3;7197:19;7234:1;7244:162;7258:6;7255:1;7252:13;7244:162;;;7320:4;7376:13;;;7372:22;;7366:29;7348:11;;;7344:20;;7337:59;7273:12;7244:162;;;7424:6;7421:1;7418:13;7415:87;;;7490:1;7483:4;7474:6;7469:3;7465:16;7461:27;7454:38;7415:87;-1:-1:-1;7556:2:62;7535:15;-1:-1:-1;;7531:29:62;7522:39;;;;7563:4;7518:50;;7102:472;-1:-1:-1;;7102:472:62:o;7579:1136::-;7978:4;8007:3;8037:2;8026:9;8019:21;8063:45;8104:2;8093:9;8089:18;8081:6;8063:45;:::i;:::-;8151:14;;8144:22;8139:2;8124:18;;8117:50;8210:14;;8203:22;8198:2;8183:18;;8176:50;8257:2;8242:18;;8235:34;;;8300:3;8285:19;;8278:35;;;8344:3;8329:19;;8322:35;;;8388:3;8373:19;;8366:35;;;-1:-1:-1;;;;;8476:15:62;;;8470:3;8455:19;;8448:44;8529:15;;;8523:3;8508:19;;8501:44;8582:15;;8576:3;8561:19;;8554:44;8635:22;;;8629:3;8614:19;;8607:51;8049:59;-1:-1:-1;8675:34:62;8049:59;8693:7;8675:34;:::i;:::-;8667:42;7579:1136;-1:-1:-1;;;;;;;;;;;;;;7579:1136:62:o;8720:251::-;8790:6;8843:2;8831:9;8822:7;8818:23;8814:32;8811:52;;;8859:1;8856;8849:12;8811:52;8891:9;8885:16;8910:31;8935:5;8910:31;:::i;9333:352::-;9426:5;9449:1;9459:220;9473:4;9470:1;9467:11;9459:220;;;9536:13;;-1:-1:-1;;;;;9532:39:62;9520:52;;9595:4;9619:12;;;;9654:15;;;;9568:1;9486:9;9459:220;;;9463:3;;9333:352;;:::o;9690:461::-;9743:3;9781:5;9775:12;9808:6;9803:3;9796:19;9834:4;9863:2;9858:3;9854:12;9847:19;;9900:2;9893:5;9889:14;9921:1;9931:195;9945:6;9942:1;9939:13;9931:195;;;10010:13;;-1:-1:-1;;;;;10006:39:62;9994:52;;10066:12;;;;10101:15;;;;10042:1;9960:9;9931:195;;;-1:-1:-1;10142:3:62;;9690:461;-1:-1:-1;;;;;9690:461:62:o;10156:1291::-;-1:-1:-1;;;;;10653:32:62;;10635:51;;10623:3;10705:2;10723:18;;;10716:30;;;10594:4;;10623:3;10769:45;10795:18;;;10787:6;10769:45;:::i;:::-;10755:59;;10864:6;10857:14;10850:22;10845:2;10834:9;10830:18;10823:50;10923:6;10916:14;10909:22;10904:2;10893:9;10889:18;10882:50;10969:6;10963:3;10952:9;10948:19;10941:35;11011:3;11000:9;10996:19;11057:6;11081:1;11091:167;11105:4;11102:1;11099:11;11091:167;;;11164:13;;11152:26;;11198:12;;;;11233:15;;;;11125:1;11118:9;11091:167;;;11095:3;;;;11267:53;11315:3;11304:9;11300:19;11292:6;11267:53;:::i;:::-;11369:9;11361:6;11357:22;11351:3;11340:9;11336:19;11329:51;11397:44;11434:6;11426;11397:44;:::i;:::-;11389:52;10156:1291;-1:-1:-1;;;;;;;;;;;10156:1291:62:o;11452:315::-;-1:-1:-1;;;;;11627:32:62;;11609:51;;11696:2;11691;11676:18;;11669:30;;;-1:-1:-1;;11716:45:62;;11742:18;;11734:6;11716:45;:::i;:::-;11708:53;11452:315;-1:-1:-1;;;;11452:315:62:o;11772:232::-;11811:3;-1:-1:-1;;11832:17:62;;11829:140;;;11891:10;11886:3;11882:20;11879:1;11872:31;11926:4;11923:1;11916:15;11954:4;11951:1;11944:15;11829:140;-1:-1:-1;11996:1:62;11985:13;;11772:232::o;12009:388::-;-1:-1:-1;;;;;12214:32:62;;12196:51;;12283:2;12278;12263:18;;12256:30;;;-1:-1:-1;;12303:45:62;;12329:18;;12321:6;12303:45;:::i;:::-;12295:53;;12384:6;12379:2;12368:9;12364:18;12357:34;12009:388;;;;;;:::o;15950:407::-;16152:2;16134:21;;;16191:2;16171:18;;;16164:30;16230:34;16225:2;16210:18;;16203:62;-1:-1:-1;;;16296:2:62;16281:18;;16274:41;16347:3;16332:19;;15950:407::o",
  "language": "Solidity",
  "natspec": {
    "author": "Leonardo Urrego",
    "details": "This contract is the standard way to create CLH",
    "events": {
      "evtNewCLH(address,string,uint256)": {
        "params": {
          "houseAddr": "Address of the created house",
          "houseId": "Id of CLH of the created house",
          "houseName": "Name of the created house"
        }
      },
      "evtUpdateCLC(string,address,address)": {
        "params": {
          "CLCName": "Name of contract var",
          "newAddress": "New Address value of the var",
          "oldAddress": "Old Address value of the var"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "CLHAPI()": {
        "notice": "Contract CLHouse API"
      },
      "CLLConstructorCLH()": {
        "notice": "Contract with the CLH Constructor logic"
      },
      "CLLGovernance()": {
        "notice": "Contract with the functions for Governance"
      },
      "CLLUserManagement()": {
        "notice": "Contract with the functions for user management"
      },
      "CreateCLH(string,bool,bool,bytes32,uint256[3],address[],address,address,address,bytes)": {
        "details": "Some parameters wil be ignored depending on the governance model",
        "notice": "Deploy a new CLHouse",
        "params": {
          "_ManagerWallets": "Whitelist of address for invitate as managers",
          "_gnosisSafe": "Contract address of SAFE",
          "_govModel": "keccak256 hash of the governance model, see the __GOV_* constans",
          "_govRules": "Array for goverment rules see `enum gRule`",
          "_houseName": "Name of the CLH",
          "_houseOpen": "If is set to 1, the CLH is set to open",
          "_housePrivate": "If is set to 1, the CLH is set to private",
          "_signature": "Signature for validate OffChain Tx",
          "_signerWallet": "Wallet address of the signer for OffChain Tx"
        }
      },
      "Init(address,address,address,address,address)": {
        "details": "The constructor create a default CLH with the houseId #0",
        "notice": "Config the CLFactory with the CL Logic Contracts",
        "params": {
          "_CLHAPI": "Address of CLHAPI Contract",
          "_CLLConstructorCLH": "Address Contract with the Constructor logic",
          "_CLLGovernance": "Address Contract Logic for governance",
          "_CLLUserManagement": "Address Contract Logic for user management",
          "_beacon": "Address Beacon Contract"
        }
      },
      "UpdateCLHAPI(address)": {
        "notice": "Update the CLHAPI contract Address"
      },
      "UpdateCLLConstructorCLH(address)": {
        "notice": "Update the CLLConstructorCLH contract Address"
      },
      "UpdateCLLGovernance(address)": {
        "notice": "Update the CLLGovernance contract Address"
      },
      "UpdateCLLUserManagement(address)": {
        "notice": "Update the CLLUserManagement contract Address"
      },
      "beaconCLH()": {
        "notice": "Contract Object of the beacon (store the add)"
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getCLHImplementation()": {
        "notice": "Get the address of the CLH contract logic"
      },
      "mapCLH(uint256)": {
        "notice": "Mapping to store all the created houses"
      },
      "mapIdCLH(address)": {
        "notice": "Relation houseAddr with houseId"
      },
      "numCLH()": {
        "notice": "Store the number of houses created"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "notice": "Create and config CLHouses",
    "stateVariables": {
      "beaconCLH": {
        "details": "The beacon store the updated address of CLH"
      }
    },
    "title": "Crypto League House Factory",
    "version": 1
  },
  "offset": [
    496,
    7348
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH3 0x12D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH3 0xAF JUMPI DUP1 PUSH4 0xC1E45428 GT PUSH3 0x7A JUMPI DUP1 PUSH4 0xC1E45428 EQ PUSH3 0x27E JUMPI DUP1 PUSH4 0xD742063C EQ PUSH3 0x295 JUMPI DUP1 PUSH4 0xEE7A7D1B EQ PUSH3 0x2AC JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH3 0x2B6 JUMPI DUP1 PUSH4 0xF6F7A1B3 EQ PUSH3 0x2CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH3 0x23A JUMPI DUP1 PUSH4 0xA327AB69 EQ PUSH3 0x24C JUMPI DUP1 PUSH4 0xA6B6ED3A EQ PUSH3 0x260 JUMPI DUP1 PUSH4 0xC0828F63 EQ PUSH3 0x26A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x594034E3 GT PUSH3 0xFC JUMPI DUP1 PUSH4 0x594034E3 EQ PUSH3 0x1A7 JUMPI DUP1 PUSH4 0x60B323C3 EQ PUSH3 0x1BB JUMPI DUP1 PUSH4 0x624D8774 EQ PUSH3 0x1D2 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH3 0x1FE JUMPI DUP1 PUSH4 0x86BDFCAC EQ PUSH3 0x208 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x10790717 EQ PUSH3 0x132 JUMPI DUP1 PUSH4 0x209BAFEC EQ PUSH3 0x163 JUMPI DUP1 PUSH4 0x4BC3959F EQ PUSH3 0x17C JUMPI DUP1 PUSH4 0x529382D5 EQ PUSH3 0x193 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x73 SLOAD PUSH3 0x146 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH3 0x17A PUSH3 0x174 CALLDATASIZE PUSH1 0x4 PUSH3 0xF00 JUMP JUMPDEST PUSH3 0x2E4 JUMP JUMPDEST STOP JUMPDEST PUSH3 0x17A PUSH3 0x18D CALLDATASIZE PUSH1 0x4 PUSH3 0x1011 JUMP JUMPDEST PUSH3 0x742 JUMP JUMPDEST PUSH1 0x71 SLOAD PUSH3 0x146 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x70 SLOAD PUSH3 0x146 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH3 0x17A PUSH3 0x1CC CALLDATASIZE PUSH1 0x4 PUSH3 0x1038 JUMP JUMPDEST PUSH3 0x7BB JUMP JUMPDEST PUSH3 0x146 PUSH3 0x1E3 CALLDATASIZE PUSH1 0x4 PUSH3 0x10B4 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH3 0x17A PUSH3 0x958 JUMP JUMPDEST PUSH3 0x22B PUSH3 0x219 CALLDATASIZE PUSH1 0x4 PUSH3 0x1011 JUMP JUMPDEST PUSH1 0x7F PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x15A JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x146 JUMP JUMPDEST PUSH1 0x72 SLOAD PUSH3 0x146 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH3 0x146 PUSH3 0x970 JUMP JUMPDEST PUSH1 0x7E SLOAD PUSH3 0x146 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH3 0x17A PUSH3 0x28F CALLDATASIZE PUSH1 0x4 PUSH3 0x1011 JUMP JUMPDEST PUSH3 0x9E6 JUMP JUMPDEST PUSH3 0x17A PUSH3 0x2A6 CALLDATASIZE PUSH1 0x4 PUSH3 0x1011 JUMP JUMPDEST PUSH3 0xA63 JUMP JUMPDEST PUSH3 0x22B PUSH1 0x65 SLOAD DUP2 JUMP JUMPDEST PUSH3 0x17A PUSH3 0x2C7 CALLDATASIZE PUSH1 0x4 PUSH3 0x1011 JUMP JUMPDEST PUSH3 0xADC JUMP JUMPDEST PUSH3 0x17A PUSH3 0x2DE CALLDATASIZE PUSH1 0x4 PUSH3 0x1011 JUMP JUMPDEST PUSH3 0xB5B JUMP JUMPDEST CALLER PUSH32 0xB93889D934070956C00846F50F9A10A747BD194BBA2F2E78A86D0C02386FDB1 DUP9 EQ DUP1 PUSH3 0x333 JUMPI POP DUP8 PUSH32 0x16591A696FEE5867425B3DEE9FC0160A6C1BAEF77835BC3D204314106D639298 EQ JUMPDEST DUP1 PUSH3 0x35E JUMPI POP DUP8 PUSH32 0xA0786F6450D5FB3298B8425105C1B75E6E01A1FF86CDABEA29909CDB0B4C83A7 EQ JUMPDEST PUSH3 0x3B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696420476F7665726E616E63652054797065000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH3 0x532 JUMPI DUP2 MLOAD PUSH1 0x41 EQ PUSH3 0x413 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x437265617465434C483A20426164207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x3A7 JUMP JUMPDEST PUSH1 0x73 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x8B4BCCCA DUP13 DUP13 DUP13 DUP13 DUP13 PUSH1 0x0 PUSH1 0x20 MUL ADD MLOAD DUP14 PUSH1 0x1 PUSH1 0x20 MUL ADD MLOAD DUP15 PUSH1 0x2 PUSH1 0x20 MUL ADD MLOAD DUP13 DUP16 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH3 0x457 JUMPI PUSH3 0x457 PUSH3 0x10CE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD ADDRESS DUP14 PUSH1 0x40 MLOAD DUP13 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x489 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x1134 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x4A7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x4CD SWAP2 SWAP1 PUSH3 0x11C0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH3 0x52F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x437265617465434C483A20496E76616C6964205369676E617475726500000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x3A7 JUMP JUMPDEST POP DUP2 JUMPDEST PUSH1 0x0 PUSH1 0x7E PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 DUP14 DUP14 DUP14 DUP14 DUP14 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x70 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x73 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP15 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP14 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP DUP15 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH3 0x615 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x125A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x53D1EE2D PUSH1 0xE0 SHL OR SWAP1 MSTORE MLOAD PUSH3 0x64B SWAP1 PUSH3 0xCEF JUMP JUMPDEST PUSH3 0x658 SWAP3 SWAP2 SWAP1 PUSH3 0x12FA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x675 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x65 DUP1 SLOAD SWAP2 SWAP3 POP PUSH1 0x0 PUSH3 0x68A DUP4 PUSH3 0x1328 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP DUP1 PUSH1 0x80 PUSH1 0x0 PUSH1 0x65 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x65 SLOAD PUSH1 0x7F PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH32 0x6510209152E59FEB0A7445A97B24BC79BFCB456CA1D8BFF1E4980536C4E8CABB DUP2 DUP14 PUSH1 0x65 SLOAD PUSH1 0x40 MLOAD PUSH3 0x72C SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x1352 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH3 0x74C PUSH3 0xBD8 JUMP JUMPDEST PUSH1 0x73 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 MSTORE PUSH1 0x6 SWAP1 DUP3 ADD MSTORE PUSH6 0x434C48415049 PUSH1 0xD0 SHL PUSH1 0x80 DUP3 ADD MSTORE SWAP4 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD DUP2 SWAP1 MSTORE SWAP2 DUP4 ADD MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x1CDF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0xA0 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH3 0x7DE JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF DUP1 DUP4 AND SWAP2 AND LT JUMPDEST PUSH3 0x843 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x3A7 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH1 0xFF DUP4 AND OR PUSH2 0x100 OR DUP2 SSTORE PUSH1 0x7E DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 0x71 DUP1 SLOAD DUP11 DUP5 AND SWAP1 DUP4 AND OR SWAP1 SSTORE PUSH1 0x72 DUP1 SLOAD DUP10 DUP5 AND SWAP1 DUP4 AND OR SWAP1 SSTORE PUSH1 0x70 DUP1 SLOAD DUP9 DUP5 AND SWAP1 DUP4 AND OR SWAP1 SSTORE PUSH1 0x73 DUP1 SLOAD SWAP3 DUP8 AND SWAP3 DUP3 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE PUSH1 0x65 DUP3 SWAP1 SSTORE DUP2 DUP1 MSTORE PUSH32 0xAE0C3F803428DD501929F276001A4B5FD1D262991BBB98E97B4B7D918A5AF6DC DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 0x7F PUSH1 0x20 MSTORE PUSH32 0x18B3A2798575D3A428C1F52E616A74B071539854E037E7D7C535365D474F4033 SSTORE PUSH3 0x90F PUSH3 0xC34 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0xFF DUP3 AND DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH3 0x962 PUSH3 0xBD8 JUMP JUMPDEST PUSH3 0x96E PUSH1 0x0 PUSH3 0xC68 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x7E SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x5C60DA1B PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x5C60DA1B SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x9BB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x9E1 SWAP2 SWAP1 PUSH3 0x11C0 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH3 0x9F0 PUSH3 0xBD8 JUMP JUMPDEST PUSH1 0x71 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x10D313155CD95C93585B9859D95B595B9D PUSH1 0x7A SHL PUSH1 0x80 DUP3 ADD MSTORE SWAP4 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD DUP2 SWAP1 MSTORE SWAP2 DUP4 ADD MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x1CDF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0xA0 ADD PUSH3 0x7AF JUMP JUMPDEST PUSH3 0xA6D PUSH3 0xBD8 JUMP JUMPDEST PUSH1 0x72 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH13 0x434C4C476F7665726E616E6365 PUSH1 0x98 SHL PUSH1 0x80 DUP3 ADD MSTORE SWAP4 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD DUP2 SWAP1 MSTORE SWAP2 DUP4 ADD MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x1CDF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0xA0 ADD PUSH3 0x7AF JUMP JUMPDEST PUSH3 0xAE6 PUSH3 0xBD8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0xB4D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x3A7 JUMP JUMPDEST PUSH3 0xB58 DUP2 PUSH3 0xC68 JUMP JUMPDEST POP JUMP JUMPDEST PUSH3 0xB65 PUSH3 0xBD8 JUMP JUMPDEST PUSH1 0x70 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x86989886DEDCE6E8E4EAC6E8DEE486989 PUSH1 0x7B SHL PUSH1 0x80 DUP3 ADD MSTORE SWAP4 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD DUP2 SWAP1 MSTORE SWAP2 DUP4 ADD MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x1CDF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0xA0 ADD PUSH3 0x7AF JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH3 0x96E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x3A7 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH3 0xC5E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x3A7 SWAP1 PUSH3 0x1388 JUMP JUMPDEST PUSH3 0x96E PUSH3 0xCBA JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH3 0xCE4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x3A7 SWAP1 PUSH3 0x1388 JUMP JUMPDEST PUSH3 0x96E CALLER PUSH3 0xC68 JUMP JUMPDEST PUSH2 0x90B DUP1 PUSH3 0x13D4 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0xD3F JUMPI PUSH3 0xD3F PUSH3 0xCFD JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0xD59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0xD76 JUMPI PUSH3 0xD76 PUSH3 0xCFD JUMP JUMPDEST PUSH3 0xD8B PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH3 0xD13 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH3 0xDA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH3 0xDCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0xDE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0xE0C JUMPI PUSH3 0xE0C PUSH3 0xCFD JUMP JUMPDEST PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP5 ADD DUP6 DUP2 GT ISZERO PUSH3 0xE22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0xE3E JUMPI DUP1 CALLDATALOAD DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH3 0xE24 JUMP JUMPDEST POP SWAP2 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0xB58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH3 0xDCF DUP2 PUSH3 0xE49 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0xE7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0xE9D JUMPI PUSH3 0xE9D PUSH3 0xCFD JUMP JUMPDEST DUP2 PUSH1 0x5 SHL PUSH3 0xEAE DUP3 DUP3 ADD PUSH3 0xD13 JUMP JUMPDEST SWAP3 DUP4 MSTORE DUP5 DUP2 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP1 DUP8 DUP6 GT ISZERO PUSH3 0xEC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP8 ADD SWAP3 POP JUMPDEST DUP5 DUP4 LT ISZERO PUSH3 0xEF5 JUMPI DUP3 CALLDATALOAD PUSH3 0xEE5 DUP2 PUSH3 0xE49 JUMP JUMPDEST DUP3 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH3 0xECF JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x180 DUP12 DUP14 SUB SLT ISZERO PUSH3 0xF21 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP11 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH3 0xF3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0xF48 DUP15 DUP4 DUP16 ADD PUSH3 0xD47 JUMP JUMPDEST SWAP12 POP PUSH3 0xF58 PUSH1 0x20 DUP15 ADD PUSH3 0xDBE JUMP JUMPDEST SWAP11 POP PUSH3 0xF68 PUSH1 0x40 DUP15 ADD PUSH3 0xDBE JUMP JUMPDEST SWAP10 POP PUSH1 0x60 DUP14 ADD CALLDATALOAD SWAP9 POP PUSH3 0xF80 DUP15 PUSH1 0x80 DUP16 ADD PUSH3 0xDD4 JUMP JUMPDEST SWAP8 POP PUSH1 0xE0 DUP14 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0xF97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0xFA5 DUP15 DUP4 DUP16 ADD PUSH3 0xE6C JUMP JUMPDEST SWAP7 POP PUSH3 0xFB6 PUSH2 0x100 DUP15 ADD PUSH3 0xE5F JUMP JUMPDEST SWAP6 POP PUSH3 0xFC7 PUSH2 0x120 DUP15 ADD PUSH3 0xE5F JUMP JUMPDEST SWAP5 POP PUSH3 0xFD8 PUSH2 0x140 DUP15 ADD PUSH3 0xE5F JUMP JUMPDEST SWAP4 POP PUSH2 0x160 DUP14 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0xFF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0xFFF DUP14 DUP3 DUP15 ADD PUSH3 0xD47 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP12 SWAP2 SWAP5 SWAP8 SWAP11 POP SWAP3 SWAP6 SWAP9 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1024 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH3 0x1031 DUP2 PUSH3 0xE49 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH3 0x1051 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH3 0x105E DUP2 PUSH3 0xE49 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH3 0x1070 DUP2 PUSH3 0xE49 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH3 0x1082 DUP2 PUSH3 0xE49 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH3 0x1094 DUP2 PUSH3 0xE49 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH3 0x10A6 DUP2 PUSH3 0xE49 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x10C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x110C JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH3 0x10EE JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH3 0x111F JUMPI PUSH1 0x0 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x160 DUP1 DUP4 MSTORE PUSH3 0x114A DUP2 DUP5 ADD DUP16 PUSH3 0x10E4 JUMP JUMPDEST DUP14 ISZERO ISZERO PUSH1 0x20 DUP6 ADD MSTORE DUP13 ISZERO ISZERO PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD DUP13 SWAP1 MSTORE PUSH1 0x80 DUP5 ADD DUP12 SWAP1 MSTORE PUSH1 0xA0 DUP5 ADD DUP11 SWAP1 MSTORE PUSH1 0xC0 DUP5 ADD DUP10 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 DUP2 AND PUSH1 0xE0 DUP7 ADD MSTORE DUP8 DUP2 AND PUSH2 0x100 DUP7 ADD MSTORE DUP7 AND PUSH2 0x120 DUP6 ADD MSTORE DUP4 DUP2 SUB PUSH2 0x140 DUP6 ADD MSTORE SWAP1 POP PUSH3 0x11AE DUP2 DUP6 PUSH3 0x10E4 JUMP JUMPDEST SWAP15 SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x11D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x1031 DUP2 PUSH3 0xE49 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH3 0x120E JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0x11E4 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x124F JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0x1228 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP2 MSTORE PUSH2 0x1C0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH3 0x1283 DUP5 DUP4 ADD DUP13 PUSH3 0x10E4 JUMP JUMPDEST SWAP2 POP DUP10 ISZERO ISZERO PUSH1 0x40 DUP6 ADD MSTORE DUP9 ISZERO ISZERO PUSH1 0x60 DUP6 ADD MSTORE DUP8 PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD DUP8 PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH3 0x12C2 JUMPI DUP2 MLOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0x12A3 JUMP JUMPDEST POP POP POP POP PUSH3 0x12D6 PUSH2 0x100 DUP5 ADD DUP7 PUSH3 0x11E0 JUMP JUMPDEST DUP3 DUP2 SUB PUSH2 0x1A0 DUP5 ADD MSTORE PUSH3 0x12EB DUP2 DUP6 PUSH3 0x1214 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH3 0x1320 SWAP1 DUP4 ADD DUP5 PUSH3 0x10E4 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH3 0x134B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH3 0x1378 SWAP1 DUP4 ADD DUP6 PUSH3 0x10E4 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x90B CODESIZE SUB DUP1 PUSH2 0x90B DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x467 JUMP JUMPDEST DUP2 DUP2 PUSH2 0x3D DUP3 DUP3 PUSH1 0x0 PUSH2 0x46 JUMP JUMPDEST POP POP POP POP PUSH2 0x591 JUMP JUMPDEST PUSH2 0x4F DUP4 PUSH2 0x111 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH32 0x1CF3B03A6CF19FA2BABA4DF148E9DCABEDEA7F8A5C07840E207E5C089BE95D3E SWAP1 PUSH1 0x0 SWAP1 LOG2 PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x90 JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0x10C JUMPI PUSH2 0x10A DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5C60DA1B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFA SWAP2 SWAP1 PUSH2 0x527 JUMP JUMPDEST DUP4 PUSH2 0x2B4 PUSH1 0x20 SHL PUSH2 0x29 OR PUSH1 0x20 SHR JUMP JUMPDEST POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x124 DUP2 PUSH2 0x2E0 PUSH1 0x20 SHL PUSH2 0x55 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x183 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720626561636F6E206973206E6F74206120636F6E PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x1D1C9858DD PUSH1 0xDA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1F7 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5C60DA1B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1C4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E8 SWAP2 SWAP1 PUSH2 0x527 JUMP JUMPDEST PUSH2 0x2E0 PUSH1 0x20 SHL PUSH2 0x55 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x25C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A20626561636F6E20696D706C656D656E746174696F6E2069 PUSH1 0x44 DUP3 ADD MSTORE PUSH16 0x1CC81B9BDD08184818DBDB9D1C9858DD PUSH1 0x82 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x17A JUMP JUMPDEST DUP1 PUSH2 0x293 PUSH32 0xA3F0AD74E5423AEBFD80D3EF4346578335A9A72AEAEE59FF6CB3582B35133D50 PUSH1 0x0 SHL PUSH2 0x2EF PUSH1 0x20 SHL PUSH2 0x64 OR PUSH1 0x20 SHR JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2D9 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8E4 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x2F2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE PUSH2 0x35A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x17A JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x375 SWAP2 SWAP1 PUSH2 0x542 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3B0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3B5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x3C6 DUP3 DUP3 DUP7 PUSH2 0x3D0 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x3DF JUMPI POP DUP2 PUSH2 0x2D9 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x3EF JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17A SWAP2 SWAP1 PUSH2 0x55E JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x420 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x456 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x43E JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x10A JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x47A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x483 DUP4 PUSH2 0x409 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x4A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x4C6 JUMPI PUSH2 0x4C6 PUSH2 0x425 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x4EE JUMPI PUSH2 0x4EE PUSH2 0x425 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x507 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x518 DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x43B JUMP JUMPDEST DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x539 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2D9 DUP3 PUSH2 0x409 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x554 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x43B JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x57D DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x43B JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x344 DUP1 PUSH2 0x5A0 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE PUSH2 0x13 JUMPI PUSH2 0x11 PUSH2 0x17 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x11 JUMPDEST PUSH2 0x27 PUSH2 0x22 PUSH2 0x67 JUMP JUMPDEST PUSH2 0x100 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4E DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2E8 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x124 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9A PUSH32 0xA3F0AD74E5423AEBFD80D3EF4346578335A9A72AEAEE59FF6CB3582B35133D50 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5C60DA1B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x23F JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 DUP1 ISZERO PUSH2 0x11F JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE PUSH2 0x191 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x1AC SWAP2 SWAP1 PUSH2 0x298 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1E7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1EC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1FC DUP3 DUP3 DUP7 PUSH2 0x206 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x215 JUMPI POP DUP2 PUSH2 0x4E JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x225 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x188 SWAP2 SWAP1 PUSH2 0x2B4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x251 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x283 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x26B JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x292 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2AA DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x268 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2D3 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x268 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x70667358221220D04C33 PUSH12 0xF1D5EE0F5699FA74B9ED40E9 CALLDATASIZE CHAINID SWAP15 MLOAD 0xD6 SWAP8 GASPRICE PUSH19 0xD8AAB6B3C84DE87264736F6C634300080C0033 COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C65648068 LOG2 0x23 0xBC CODESIZE MSTORE SWAP9 PUSH5 0x701ED6F372 0x29 PUSH14 0x3ECB2AA9AFFE6C91CF94E2AE6DD5 PUSH24 0xC8A2646970667358221220BFB0E274C68F2D6BA1F9791317 0x1E 0xB0 CREATE2 0xF 0xB2 0xC6 CODESIZE DUP1 REVERT DUP2 LT 0xE8 MSIZE BALANCE DUP3 COINBASE 0xB7 STOP ADDRESS PUSH5 0x736F6C6343 STOP ADDMOD 0xC STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        496,
        7348
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "5": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "CALLVALUE",
      "path": "49"
    },
    "6": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "DUP1",
      "path": "49"
    },
    "7": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "8": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x11"
    },
    "12": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "13": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "15": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "DUP1",
      "path": "49"
    },
    "16": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "REVERT",
      "path": "49"
    },
    "17": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "18": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "POP",
      "path": "49"
    },
    "19": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "21": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "CALLDATASIZE",
      "path": "49"
    },
    "22": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "LT",
      "path": "49"
    },
    "23": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x12D"
    },
    "27": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "28": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "30": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "CALLDATALOAD",
      "path": "49"
    },
    "31": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0xE0"
    },
    "33": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "SHR",
      "path": "49"
    },
    "34": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "DUP1",
      "path": "49"
    },
    "35": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x8DA5CB5B"
    },
    "40": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "GT",
      "path": "49"
    },
    "41": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0xAF"
    },
    "45": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "46": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "DUP1",
      "path": "49"
    },
    "47": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0xC1E45428"
    },
    "52": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "GT",
      "path": "49"
    },
    "53": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x7A"
    },
    "57": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "58": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "DUP1",
      "path": "49"
    },
    "59": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0xC1E45428"
    },
    "64": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "EQ",
      "path": "49"
    },
    "65": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x27E"
    },
    "69": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "70": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "DUP1",
      "path": "49"
    },
    "71": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0xD742063C"
    },
    "76": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "EQ",
      "path": "49"
    },
    "77": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x295"
    },
    "81": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "82": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "DUP1",
      "path": "49"
    },
    "83": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0xEE7A7D1B"
    },
    "88": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "EQ",
      "path": "49"
    },
    "89": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x2AC"
    },
    "93": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "94": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "DUP1",
      "path": "49"
    },
    "95": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0xF2FDE38B"
    },
    "100": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "EQ",
      "path": "49"
    },
    "101": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x2B6"
    },
    "105": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "106": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "DUP1",
      "path": "49"
    },
    "107": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0xF6F7A1B3"
    },
    "112": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "EQ",
      "path": "49"
    },
    "113": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x2CD"
    },
    "117": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "118": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "120": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "DUP1",
      "path": "49"
    },
    "121": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "REVERT",
      "path": "49"
    },
    "122": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "123": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "DUP1",
      "path": "49"
    },
    "124": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x8DA5CB5B"
    },
    "129": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "EQ",
      "path": "49"
    },
    "130": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x23A"
    },
    "134": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "135": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "DUP1",
      "path": "49"
    },
    "136": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0xA327AB69"
    },
    "141": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "EQ",
      "path": "49"
    },
    "142": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x24C"
    },
    "146": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "147": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "DUP1",
      "path": "49"
    },
    "148": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0xA6B6ED3A"
    },
    "153": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "EQ",
      "path": "49"
    },
    "154": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x260"
    },
    "158": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "159": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "DUP1",
      "path": "49"
    },
    "160": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0xC0828F63"
    },
    "165": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "EQ",
      "path": "49"
    },
    "166": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x26A"
    },
    "170": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "171": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "173": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "DUP1",
      "path": "49"
    },
    "174": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "REVERT",
      "path": "49"
    },
    "175": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "176": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "DUP1",
      "path": "49"
    },
    "177": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x594034E3"
    },
    "182": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "GT",
      "path": "49"
    },
    "183": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0xFC"
    },
    "187": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "188": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "DUP1",
      "path": "49"
    },
    "189": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x594034E3"
    },
    "194": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "EQ",
      "path": "49"
    },
    "195": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x1A7"
    },
    "199": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "200": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "DUP1",
      "path": "49"
    },
    "201": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x60B323C3"
    },
    "206": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "EQ",
      "path": "49"
    },
    "207": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x1BB"
    },
    "211": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "212": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "DUP1",
      "path": "49"
    },
    "213": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x624D8774"
    },
    "218": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "EQ",
      "path": "49"
    },
    "219": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x1D2"
    },
    "223": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "224": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "DUP1",
      "path": "49"
    },
    "225": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x715018A6"
    },
    "230": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "EQ",
      "path": "49"
    },
    "231": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x1FE"
    },
    "235": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "236": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "DUP1",
      "path": "49"
    },
    "237": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x86BDFCAC"
    },
    "242": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "EQ",
      "path": "49"
    },
    "243": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x208"
    },
    "247": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "248": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "250": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "DUP1",
      "path": "49"
    },
    "251": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "REVERT",
      "path": "49"
    },
    "252": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "253": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "DUP1",
      "path": "49"
    },
    "254": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x10790717"
    },
    "259": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "EQ",
      "path": "49"
    },
    "260": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x132"
    },
    "264": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "265": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "DUP1",
      "path": "49"
    },
    "266": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x209BAFEC"
    },
    "271": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "EQ",
      "path": "49"
    },
    "272": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x163"
    },
    "276": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "277": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "DUP1",
      "path": "49"
    },
    "278": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x4BC3959F"
    },
    "283": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "EQ",
      "path": "49"
    },
    "284": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x17C"
    },
    "288": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "289": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "DUP1",
      "path": "49"
    },
    "290": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x529382D5"
    },
    "295": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "EQ",
      "path": "49"
    },
    "296": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x193"
    },
    "300": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "301": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "302": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "304": {
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "DUP1",
      "path": "49"
    },
    "305": {
      "first_revert": true,
      "fn": null,
      "offset": [
        496,
        7348
      ],
      "op": "REVERT",
      "path": "49"
    },
    "306": {
      "offset": [
        1009,
        1030
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "307": {
      "fn": null,
      "offset": [
        1009,
        1030
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x73"
    },
    "309": {
      "fn": null,
      "offset": [
        1009,
        1030
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "310": {
      "fn": null,
      "offset": [
        1009,
        1030
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x146"
    },
    "314": {
      "fn": null,
      "offset": [
        1009,
        1030
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "315": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "317": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "319": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "321": {
      "op": "SHL"
    },
    "322": {
      "op": "SUB"
    },
    "323": {
      "offset": [
        1009,
        1030
      ],
      "op": "AND",
      "path": "49"
    },
    "324": {
      "fn": null,
      "offset": [
        1009,
        1030
      ],
      "op": "DUP2",
      "path": "49"
    },
    "325": {
      "fn": null,
      "offset": [
        1009,
        1030
      ],
      "op": "JUMP",
      "path": "49"
    },
    "326": {
      "fn": null,
      "offset": [
        1009,
        1030
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "327": {
      "fn": null,
      "offset": [
        1009,
        1030
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "329": {
      "fn": null,
      "offset": [
        1009,
        1030
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "330": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "332": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "334": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "336": {
      "op": "SHL"
    },
    "337": {
      "op": "SUB"
    },
    "338": {
      "op": "SWAP1"
    },
    "339": {
      "op": "SWAP2"
    },
    "340": {
      "op": "AND"
    },
    "341": {
      "op": "DUP2"
    },
    "342": {
      "op": "MSTORE"
    },
    "343": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "345": {
      "op": "ADD"
    },
    "346": {
      "offset": [
        1009,
        1030
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "347": {
      "fn": null,
      "offset": [
        1009,
        1030
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "349": {
      "fn": null,
      "offset": [
        1009,
        1030
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "350": {
      "fn": null,
      "offset": [
        1009,
        1030
      ],
      "op": "DUP1",
      "path": "49"
    },
    "351": {
      "fn": null,
      "offset": [
        1009,
        1030
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "352": {
      "fn": null,
      "offset": [
        1009,
        1030
      ],
      "op": "SUB",
      "path": "49"
    },
    "353": {
      "fn": null,
      "offset": [
        1009,
        1030
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "354": {
      "fn": null,
      "offset": [
        1009,
        1030
      ],
      "op": "RETURN",
      "path": "49"
    },
    "355": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5971
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "356": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5971
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x17A"
    },
    "360": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5971
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x174"
    },
    "364": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5971
      ],
      "op": "CALLDATASIZE",
      "path": "49"
    },
    "365": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5971
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "367": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5971
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0xF00"
    },
    "371": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        3896,
        5971
      ],
      "op": "JUMP",
      "path": "49"
    },
    "372": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5971
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "373": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5971
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x2E4"
    },
    "377": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        3896,
        5971
      ],
      "op": "JUMP",
      "path": "49"
    },
    "378": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5971
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "379": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5971
      ],
      "op": "STOP",
      "path": "49"
    },
    "380": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7162,
        7346
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "381": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7162,
        7346
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x17A"
    },
    "385": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7162,
        7346
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x18D"
    },
    "389": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7162,
        7346
      ],
      "op": "CALLDATASIZE",
      "path": "49"
    },
    "390": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7162,
        7346
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "392": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7162,
        7346
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x1011"
    },
    "396": {
      "fn": "CLFactory.UpdateCLHAPI",
      "jump": "i",
      "offset": [
        7162,
        7346
      ],
      "op": "JUMP",
      "path": "49"
    },
    "397": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7162,
        7346
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "398": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7162,
        7346
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x742"
    },
    "402": {
      "fn": "CLFactory.UpdateCLHAPI",
      "jump": "i",
      "offset": [
        7162,
        7346
      ],
      "op": "JUMP",
      "path": "49"
    },
    "403": {
      "offset": [
        839,
        871
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "404": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        839,
        871
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x71"
    },
    "406": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        839,
        871
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "407": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        839,
        871
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x146"
    },
    "411": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        839,
        871
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "412": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "414": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "416": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "418": {
      "op": "SHL"
    },
    "419": {
      "op": "SUB"
    },
    "420": {
      "offset": [
        839,
        871
      ],
      "op": "AND",
      "path": "49"
    },
    "421": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        839,
        871
      ],
      "op": "DUP2",
      "path": "49"
    },
    "422": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        839,
        871
      ],
      "op": "JUMP",
      "path": "49"
    },
    "423": {
      "offset": [
        736,
        768
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "424": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        736,
        768
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x70"
    },
    "426": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        736,
        768
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "427": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        736,
        768
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x146"
    },
    "431": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        736,
        768
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "432": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "434": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "436": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "438": {
      "op": "SHL"
    },
    "439": {
      "op": "SUB"
    },
    "440": {
      "offset": [
        736,
        768
      ],
      "op": "AND",
      "path": "49"
    },
    "441": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        736,
        768
      ],
      "op": "DUP2",
      "path": "49"
    },
    "442": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        736,
        768
      ],
      "op": "JUMP",
      "path": "49"
    },
    "443": {
      "fn": "CLFactory.Init",
      "offset": [
        2577,
        3174
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "444": {
      "fn": "CLFactory.Init",
      "offset": [
        2577,
        3174
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x17A"
    },
    "448": {
      "fn": "CLFactory.Init",
      "offset": [
        2577,
        3174
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x1CC"
    },
    "452": {
      "fn": "CLFactory.Init",
      "offset": [
        2577,
        3174
      ],
      "op": "CALLDATASIZE",
      "path": "49"
    },
    "453": {
      "fn": "CLFactory.Init",
      "offset": [
        2577,
        3174
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "455": {
      "fn": "CLFactory.Init",
      "offset": [
        2577,
        3174
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x1038"
    },
    "459": {
      "fn": "CLFactory.Init",
      "jump": "i",
      "offset": [
        2577,
        3174
      ],
      "op": "JUMP",
      "path": "49"
    },
    "460": {
      "fn": "CLFactory.Init",
      "offset": [
        2577,
        3174
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "461": {
      "fn": "CLFactory.Init",
      "offset": [
        2577,
        3174
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x7BB"
    },
    "465": {
      "fn": "CLFactory.Init",
      "jump": "i",
      "offset": [
        2577,
        3174
      ],
      "op": "JUMP",
      "path": "49"
    },
    "466": {
      "offset": [
        1383,
        1425
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "467": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x146"
    },
    "471": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x1E3"
    },
    "475": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "CALLDATASIZE",
      "path": "49"
    },
    "476": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "478": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x10B4"
    },
    "482": {
      "fn": "CLFactory.Init",
      "jump": "i",
      "offset": [
        1383,
        1425
      ],
      "op": "JUMP",
      "path": "49"
    },
    "483": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "484": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x80"
    },
    "486": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x20"
    },
    "488": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "489": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "491": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "492": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "DUP2",
      "path": "49"
    },
    "493": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "494": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "496": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "497": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "KECCAK256",
      "path": "49"
    },
    "498": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "499": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "501": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "503": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "505": {
      "op": "SHL"
    },
    "506": {
      "op": "SUB"
    },
    "507": {
      "offset": [
        1383,
        1425
      ],
      "op": "AND",
      "path": "49"
    },
    "508": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "DUP2",
      "path": "49"
    },
    "509": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "JUMP",
      "path": "49"
    },
    "510": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        2071,
        2172
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "511": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        2071,
        2172
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0x17A"
    },
    "515": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        2071,
        2172
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0x958"
    },
    "519": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "jump": "i",
      "offset": [
        2071,
        2172
      ],
      "op": "JUMP",
      "path": "0"
    },
    "520": {
      "offset": [
        1271,
        1316
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "521": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x22B"
    },
    "525": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x219"
    },
    "529": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "CALLDATASIZE",
      "path": "49"
    },
    "530": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "532": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x1011"
    },
    "536": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "jump": "i",
      "offset": [
        1271,
        1316
      ],
      "op": "JUMP",
      "path": "49"
    },
    "537": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "538": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x7F"
    },
    "540": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x20"
    },
    "542": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "543": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "545": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "546": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "DUP2",
      "path": "49"
    },
    "547": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "548": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "550": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "551": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "KECCAK256",
      "path": "49"
    },
    "552": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "553": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "DUP2",
      "path": "49"
    },
    "554": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "JUMP",
      "path": "49"
    },
    "555": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "556": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "558": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "559": {
      "op": "SWAP1"
    },
    "560": {
      "op": "DUP2"
    },
    "561": {
      "op": "MSTORE"
    },
    "562": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "564": {
      "op": "ADD"
    },
    "565": {
      "offset": [
        1271,
        1316
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x15A"
    },
    "569": {
      "op": "JUMP"
    },
    "570": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1441,
        1526
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "571": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1513,
        1519
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 0,
      "value": "0x33"
    },
    "573": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1513,
        1519
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "574": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "576": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "578": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "580": {
      "op": "SHL"
    },
    "581": {
      "op": "SUB"
    },
    "582": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1513,
        1519
      ],
      "op": "AND",
      "path": "0"
    },
    "583": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1441,
        1526
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0x146"
    },
    "587": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1441,
        1526
      ],
      "op": "JUMP",
      "path": "0"
    },
    "588": {
      "offset": [
        937,
        965
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "589": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        937,
        965
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x72"
    },
    "591": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        937,
        965
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "592": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        937,
        965
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x146"
    },
    "596": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        937,
        965
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "597": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "599": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "601": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "603": {
      "op": "SHL"
    },
    "604": {
      "op": "SUB"
    },
    "605": {
      "offset": [
        937,
        965
      ],
      "op": "AND",
      "path": "49"
    },
    "606": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        937,
        965
      ],
      "op": "DUP2",
      "path": "49"
    },
    "607": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        937,
        965
      ],
      "op": "JUMP",
      "path": "49"
    },
    "608": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6150
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "609": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6150
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x146"
    },
    "613": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6150
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x970"
    },
    "617": {
      "fn": "CLFactory.getCLHImplementation",
      "jump": "i",
      "offset": [
        6036,
        6150
      ],
      "op": "JUMP",
      "path": "49"
    },
    "618": {
      "offset": [
        1187,
        1212
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "619": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        1187,
        1212
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x7E"
    },
    "621": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        1187,
        1212
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "622": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        1187,
        1212
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x146"
    },
    "626": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        1187,
        1212
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "627": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "629": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "631": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "633": {
      "op": "SHL"
    },
    "634": {
      "op": "SUB"
    },
    "635": {
      "offset": [
        1187,
        1212
      ],
      "op": "AND",
      "path": "49"
    },
    "636": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        1187,
        1212
      ],
      "op": "DUP2",
      "path": "49"
    },
    "637": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        1187,
        1212
      ],
      "op": "JUMP",
      "path": "49"
    },
    "638": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6547,
        6808
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "639": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6547,
        6808
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x17A"
    },
    "643": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6547,
        6808
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x28F"
    },
    "647": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6547,
        6808
      ],
      "op": "CALLDATASIZE",
      "path": "49"
    },
    "648": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6547,
        6808
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "650": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6547,
        6808
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x1011"
    },
    "654": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "jump": "i",
      "offset": [
        6547,
        6808
      ],
      "op": "JUMP",
      "path": "49"
    },
    "655": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6547,
        6808
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "656": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6547,
        6808
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x9E6"
    },
    "660": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "jump": "i",
      "offset": [
        6547,
        6808
      ],
      "op": "JUMP",
      "path": "49"
    },
    "661": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6872,
        7105
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "662": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6872,
        7105
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x17A"
    },
    "666": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6872,
        7105
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x2A6"
    },
    "670": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6872,
        7105
      ],
      "op": "CALLDATASIZE",
      "path": "49"
    },
    "671": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6872,
        7105
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "673": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6872,
        7105
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x1011"
    },
    "677": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "jump": "i",
      "offset": [
        6872,
        7105
      ],
      "op": "JUMP",
      "path": "49"
    },
    "678": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6872,
        7105
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "679": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6872,
        7105
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0xA63"
    },
    "683": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "jump": "i",
      "offset": [
        6872,
        7105
      ],
      "op": "JUMP",
      "path": "49"
    },
    "684": {
      "offset": [
        621,
        642
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "685": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        621,
        642
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x22B"
    },
    "689": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        621,
        642
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x65"
    },
    "691": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        621,
        642
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "692": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        621,
        642
      ],
      "op": "DUP2",
      "path": "49"
    },
    "693": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        621,
        642
      ],
      "op": "JUMP",
      "path": "49"
    },
    "694": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2321,
        2519
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "695": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2321,
        2519
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0x17A"
    },
    "699": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2321,
        2519
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0x2C7"
    },
    "703": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2321,
        2519
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "704": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2321,
        2519
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "706": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2321,
        2519
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0x1011"
    },
    "710": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "jump": "i",
      "offset": [
        2321,
        2519
      ],
      "op": "JUMP",
      "path": "0"
    },
    "711": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2321,
        2519
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "712": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2321,
        2519
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0xADC"
    },
    "716": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "jump": "i",
      "offset": [
        2321,
        2519
      ],
      "op": "JUMP",
      "path": "0"
    },
    "717": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6218,
        6479
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "718": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6218,
        6479
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x17A"
    },
    "722": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6218,
        6479
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x2DE"
    },
    "726": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6218,
        6479
      ],
      "op": "CALLDATASIZE",
      "path": "49"
    },
    "727": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6218,
        6479
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "729": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6218,
        6479
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x1011"
    },
    "733": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "jump": "i",
      "offset": [
        6218,
        6479
      ],
      "op": "JUMP",
      "path": "49"
    },
    "734": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6218,
        6479
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "735": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6218,
        6479
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0xB5B"
    },
    "739": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "jump": "i",
      "offset": [
        6218,
        6479
      ],
      "op": "JUMP",
      "path": "49"
    },
    "740": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5971
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "741": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4289,
        4299
      ],
      "op": "CALLER",
      "path": "49"
    },
    "742": {
      "offset": [
        339,
        372
      ],
      "op": "PUSH32",
      "path": "48",
      "value": "0xB93889D934070956C00846F50F9A10A747BD194BBA2F2E78A86D0C02386FDB1"
    },
    "775": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4332,
        4365
      ],
      "op": "DUP9",
      "path": "49",
      "statement": 1
    },
    "776": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4332,
        4365
      ],
      "op": "EQ",
      "path": "49"
    },
    "777": {
      "branch": 36,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4332,
        4365
      ],
      "op": "DUP1",
      "path": "49"
    },
    "778": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4332,
        4411
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x333"
    },
    "782": {
      "branch": 36,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4332,
        4411
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "783": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4332,
        4411
      ],
      "op": "POP",
      "path": "49"
    },
    "784": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4402,
        4411
      ],
      "op": "DUP8",
      "path": "49"
    },
    "785": {
      "offset": [
        411,
        441
      ],
      "op": "PUSH32",
      "path": "48",
      "value": "0x16591A696FEE5867425B3DEE9FC0160A6C1BAEF77835BC3D204314106D639298"
    },
    "818": {
      "branch": 37,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4381,
        4411
      ],
      "op": "EQ",
      "path": "49"
    },
    "819": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4332,
        4411
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "820": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4332,
        4463
      ],
      "op": "DUP1",
      "path": "49"
    },
    "821": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4332,
        4463
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x35E"
    },
    "825": {
      "branch": 37,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4332,
        4463
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "826": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4332,
        4463
      ],
      "op": "POP",
      "path": "49"
    },
    "827": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4454,
        4463
      ],
      "op": "DUP8",
      "path": "49"
    },
    "828": {
      "offset": [
        486,
        522
      ],
      "op": "PUSH32",
      "path": "48",
      "value": "0xA0786F6450D5FB3298B8425105C1B75E6E01A1FF86CDABEA29909CDB0B4C83A7"
    },
    "861": {
      "branch": 38,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4427,
        4463
      ],
      "op": "EQ",
      "path": "49"
    },
    "862": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4332,
        4463
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "863": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4310,
        4513
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x3B0"
    },
    "867": {
      "branch": 38,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4310,
        4513
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "868": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4310,
        4513
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "870": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4310,
        4513
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "871": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "875": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "877": {
      "op": "SHL"
    },
    "878": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4310,
        4513
      ],
      "op": "DUP2",
      "path": "49"
    },
    "879": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4310,
        4513
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "880": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "882": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4310,
        4513
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "884": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4310,
        4513
      ],
      "op": "DUP3",
      "path": "49"
    },
    "885": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4310,
        4513
      ],
      "op": "ADD",
      "path": "49"
    },
    "886": {
      "op": "MSTORE"
    },
    "887": {
      "op": "PUSH1",
      "value": "0x17"
    },
    "889": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "891": {
      "op": "DUP3"
    },
    "892": {
      "op": "ADD"
    },
    "893": {
      "op": "MSTORE"
    },
    "894": {
      "op": "PUSH32",
      "value": "0x496E76616C696420476F7665726E616E63652054797065000000000000000000"
    },
    "927": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "929": {
      "op": "DUP3"
    },
    "930": {
      "op": "ADD"
    },
    "931": {
      "op": "MSTORE"
    },
    "932": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "934": {
      "op": "ADD"
    },
    "935": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4310,
        4513
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "936": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4310,
        4513
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "938": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4310,
        4513
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "939": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4310,
        4513
      ],
      "op": "DUP1",
      "path": "49"
    },
    "940": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4310,
        4513
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "941": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4310,
        4513
      ],
      "op": "SUB",
      "path": "49"
    },
    "942": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4310,
        4513
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "943": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4310,
        4513
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "49"
    },
    "944": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4310,
        4513
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "945": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "947": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "949": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "951": {
      "op": "SHL"
    },
    "952": {
      "op": "SUB"
    },
    "953": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4528,
        4555
      ],
      "op": "DUP4",
      "path": "49"
    },
    "954": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4528,
        4555
      ],
      "op": "AND",
      "path": "49"
    },
    "955": {
      "branch": 39,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4528,
        4555
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "956": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4524,
        5251
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x532"
    },
    "960": {
      "branch": 39,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4524,
        5251
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "961": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4581,
        4591
      ],
      "op": "DUP2",
      "path": "49",
      "statement": 2
    },
    "962": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4581,
        4598
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "963": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4602,
        4604
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x41"
    },
    "965": {
      "branch": 40,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4581,
        4604
      ],
      "op": "EQ",
      "path": "49"
    },
    "966": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4572,
        4641
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x413"
    },
    "970": {
      "branch": 40,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4572,
        4641
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "971": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4572,
        4641
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "973": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4572,
        4641
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "974": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "978": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "980": {
      "op": "SHL"
    },
    "981": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4572,
        4641
      ],
      "op": "DUP2",
      "path": "49"
    },
    "982": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4572,
        4641
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "983": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "985": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4572,
        4641
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "987": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4572,
        4641
      ],
      "op": "DUP3",
      "path": "49"
    },
    "988": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4572,
        4641
      ],
      "op": "ADD",
      "path": "49"
    },
    "989": {
      "op": "MSTORE"
    },
    "990": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "992": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "994": {
      "op": "DUP3"
    },
    "995": {
      "op": "ADD"
    },
    "996": {
      "op": "MSTORE"
    },
    "997": {
      "op": "PUSH32",
      "value": "0x437265617465434C483A20426164207369676E6174757265206C656E67746800"
    },
    "1030": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1032": {
      "op": "DUP3"
    },
    "1033": {
      "op": "ADD"
    },
    "1034": {
      "op": "MSTORE"
    },
    "1035": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1037": {
      "op": "ADD"
    },
    "1038": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4572,
        4641
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x3A7"
    },
    "1042": {
      "op": "JUMP"
    },
    "1043": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4572,
        4641
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1044": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4722,
        4728
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 3,
      "value": "0x73"
    },
    "1046": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4722,
        4728
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "1047": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1049": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1051": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1053": {
      "op": "SHL"
    },
    "1054": {
      "op": "SUB"
    },
    "1055": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4722,
        4728
      ],
      "op": "AND",
      "path": "49"
    },
    "1056": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        4745
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x8B4BCCCA"
    },
    "1061": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4767,
        4777
      ],
      "op": "DUP13",
      "path": "49"
    },
    "1062": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4799,
        4812
      ],
      "op": "DUP13",
      "path": "49"
    },
    "1063": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4834,
        4844
      ],
      "op": "DUP13",
      "path": "49"
    },
    "1064": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4866,
        4875
      ],
      "op": "DUP13",
      "path": "49"
    },
    "1065": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4897,
        4906
      ],
      "op": "DUP13",
      "path": "49"
    },
    "1066": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4722,
        4728
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1068": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4897,
        4909
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x20"
    },
    "1070": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4897,
        4909
      ],
      "op": "MUL",
      "path": "49"
    },
    "1071": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4897,
        4909
      ],
      "op": "ADD",
      "path": "49"
    },
    "1072": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4897,
        4909
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1073": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4931,
        4940
      ],
      "op": "DUP14",
      "path": "49"
    },
    "1074": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4941,
        4942
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x1"
    },
    "1076": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4931,
        4943
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x20"
    },
    "1078": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4931,
        4943
      ],
      "op": "MUL",
      "path": "49"
    },
    "1079": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4931,
        4943
      ],
      "op": "ADD",
      "path": "49"
    },
    "1080": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4931,
        4943
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1081": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4965,
        4974
      ],
      "op": "DUP15",
      "path": "49"
    },
    "1082": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4975,
        4976
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x2"
    },
    "1084": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4965,
        4977
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x20"
    },
    "1086": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4965,
        4977
      ],
      "op": "MUL",
      "path": "49"
    },
    "1087": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4965,
        4977
      ],
      "op": "ADD",
      "path": "49"
    },
    "1088": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4965,
        4977
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1089": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4999,
        5012
      ],
      "op": "DUP13",
      "path": "49"
    },
    "1090": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5034,
        5049
      ],
      "op": "DUP16",
      "path": "49"
    },
    "1091": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5050,
        5051
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1093": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5034,
        5052
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1094": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5034,
        5052
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1095": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5034,
        5052
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1096": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5034,
        5052
      ],
      "op": "LT",
      "path": "49"
    },
    "1097": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5034,
        5052
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x457"
    },
    "1101": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5034,
        5052
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "1102": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5034,
        5052
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x457"
    },
    "1106": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5034,
        5052
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x10CE"
    },
    "1110": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        5034,
        5052
      ],
      "op": "JUMP",
      "path": "49"
    },
    "1111": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5034,
        5052
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1112": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5034,
        5052
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x20"
    },
    "1114": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5034,
        5052
      ],
      "op": "MUL",
      "path": "49"
    },
    "1115": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5034,
        5052
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x20"
    },
    "1117": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5034,
        5052
      ],
      "op": "ADD",
      "path": "49"
    },
    "1118": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5034,
        5052
      ],
      "op": "ADD",
      "path": "49"
    },
    "1119": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5034,
        5052
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1120": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5082,
        5086
      ],
      "op": "ADDRESS",
      "path": "49"
    },
    "1121": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5109,
        5119
      ],
      "op": "DUP14",
      "path": "49"
    },
    "1122": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "1124": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1125": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "DUP13",
      "path": "49"
    },
    "1126": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0xFFFFFFFF"
    },
    "1131": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "AND",
      "path": "49"
    },
    "1132": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0xE0"
    },
    "1134": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "SHL",
      "path": "49"
    },
    "1135": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1136": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "1137": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "1139": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "ADD",
      "path": "49"
    },
    "1140": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x489"
    },
    "1144": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "SWAP12",
      "path": "49"
    },
    "1145": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "SWAP11",
      "path": "49"
    },
    "1146": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "SWAP10",
      "path": "49"
    },
    "1147": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "SWAP9",
      "path": "49"
    },
    "1148": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "SWAP8",
      "path": "49"
    },
    "1149": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "SWAP7",
      "path": "49"
    },
    "1150": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "SWAP6",
      "path": "49"
    },
    "1151": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "SWAP5",
      "path": "49"
    },
    "1152": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "SWAP4",
      "path": "49"
    },
    "1153": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "1154": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "1155": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1156": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x1134"
    },
    "1160": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        4710,
        5137
      ],
      "op": "JUMP",
      "path": "49"
    },
    "1161": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1162": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x20"
    },
    "1164": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "1166": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1167": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1168": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "DUP4",
      "path": "49"
    },
    "1169": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "SUB",
      "path": "49"
    },
    "1170": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1171": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "DUP7",
      "path": "49"
    },
    "1172": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "GAS",
      "path": "49"
    },
    "1173": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "STATICCALL",
      "path": "49"
    },
    "1174": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "1175": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1176": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "1177": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x4A7"
    },
    "1181": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "1182": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "RETURNDATASIZE",
      "path": "49"
    },
    "1183": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1185": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1186": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "RETURNDATACOPY",
      "path": "49"
    },
    "1187": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "RETURNDATASIZE",
      "path": "49"
    },
    "1188": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1190": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "REVERT",
      "path": "49"
    },
    "1191": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1192": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "POP",
      "path": "49"
    },
    "1193": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "POP",
      "path": "49"
    },
    "1194": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "POP",
      "path": "49"
    },
    "1195": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "POP",
      "path": "49"
    },
    "1196": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "1198": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1199": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "RETURNDATASIZE",
      "path": "49"
    },
    "1200": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x1F"
    },
    "1202": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "NOT",
      "path": "49"
    },
    "1203": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x1F"
    },
    "1205": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "DUP3",
      "path": "49"
    },
    "1206": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "ADD",
      "path": "49"
    },
    "1207": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "AND",
      "path": "49"
    },
    "1208": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "DUP3",
      "path": "49"
    },
    "1209": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "ADD",
      "path": "49"
    },
    "1210": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1211": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "1213": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "1214": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "POP",
      "path": "49"
    },
    "1215": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1216": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "ADD",
      "path": "49"
    },
    "1217": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1218": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x4CD"
    },
    "1222": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "1223": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1224": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x11C0"
    },
    "1228": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        4710,
        5137
      ],
      "op": "JUMP",
      "path": "49"
    },
    "1229": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        5137
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1230": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1232": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1234": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1236": {
      "op": "SHL"
    },
    "1237": {
      "op": "SUB"
    },
    "1238": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4693,
        5137
      ],
      "op": "AND",
      "path": "49"
    },
    "1239": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4693,
        4706
      ],
      "op": "DUP4",
      "path": "49"
    },
    "1240": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1242": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1244": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1246": {
      "op": "SHL"
    },
    "1247": {
      "op": "SUB"
    },
    "1248": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4693,
        5137
      ],
      "op": "AND",
      "path": "49"
    },
    "1249": {
      "branch": 41,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4693,
        5137
      ],
      "op": "EQ",
      "path": "49"
    },
    "1250": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4668,
        5199
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x52F"
    },
    "1254": {
      "branch": 41,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4668,
        5199
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "1255": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4668,
        5199
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "1257": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4668,
        5199
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1258": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1262": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1264": {
      "op": "SHL"
    },
    "1265": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4668,
        5199
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1266": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4668,
        5199
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "1267": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1269": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4668,
        5199
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "1271": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4668,
        5199
      ],
      "op": "DUP3",
      "path": "49"
    },
    "1272": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4668,
        5199
      ],
      "op": "ADD",
      "path": "49"
    },
    "1273": {
      "op": "MSTORE"
    },
    "1274": {
      "op": "PUSH1",
      "value": "0x1C"
    },
    "1276": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1278": {
      "op": "DUP3"
    },
    "1279": {
      "op": "ADD"
    },
    "1280": {
      "op": "MSTORE"
    },
    "1281": {
      "op": "PUSH32",
      "value": "0x437265617465434C483A20496E76616C6964205369676E617475726500000000"
    },
    "1314": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1316": {
      "op": "DUP3"
    },
    "1317": {
      "op": "ADD"
    },
    "1318": {
      "op": "MSTORE"
    },
    "1319": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1321": {
      "op": "ADD"
    },
    "1322": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4668,
        5199
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x3A7"
    },
    "1326": {
      "op": "JUMP"
    },
    "1327": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4668,
        5199
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1328": {
      "op": "POP"
    },
    "1329": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5227,
        5240
      ],
      "op": "DUP2",
      "path": "49",
      "statement": 4
    },
    "1330": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4524,
        5251
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1331": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5261,
        5278
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1333": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5318,
        5327
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x7E"
    },
    "1335": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5318,
        5327
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1337": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5318,
        5327
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1338": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5318,
        5327
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "1339": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5318,
        5327
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1340": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5318,
        5327
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x100"
    },
    "1343": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5318,
        5327
      ],
      "op": "EXP",
      "path": "49"
    },
    "1344": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5318,
        5327
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1345": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5318,
        5327
      ],
      "op": "DIV",
      "path": "49"
    },
    "1346": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1348": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1350": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1352": {
      "op": "SHL"
    },
    "1353": {
      "op": "SUB"
    },
    "1354": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5318,
        5327
      ],
      "op": "AND",
      "path": "49"
    },
    "1355": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5474,
        5484
      ],
      "op": "DUP3",
      "path": "49"
    },
    "1356": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5503,
        5513
      ],
      "op": "DUP14",
      "path": "49"
    },
    "1357": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5531,
        5544
      ],
      "op": "DUP14",
      "path": "49"
    },
    "1358": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5562,
        5572
      ],
      "op": "DUP14",
      "path": "49"
    },
    "1359": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5590,
        5599
      ],
      "op": "DUP14",
      "path": "49"
    },
    "1360": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5617,
        5626
      ],
      "op": "DUP14",
      "path": "49"
    },
    "1361": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "1363": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1364": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1365": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0xA0"
    },
    "1367": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "ADD",
      "path": "49"
    },
    "1368": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "1370": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "1371": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1372": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5646,
        5663
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x70"
    },
    "1374": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5646,
        5663
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1376": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5646,
        5663
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1377": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5646,
        5663
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "1378": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5646,
        5663
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1379": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5646,
        5663
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x100"
    },
    "1382": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5646,
        5663
      ],
      "op": "EXP",
      "path": "49"
    },
    "1383": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5646,
        5663
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1384": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5646,
        5663
      ],
      "op": "DIV",
      "path": "49"
    },
    "1385": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1387": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1389": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1391": {
      "op": "SHL"
    },
    "1392": {
      "op": "SUB"
    },
    "1393": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5646,
        5663
      ],
      "op": "AND",
      "path": "49"
    },
    "1394": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1396": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1398": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1400": {
      "op": "SHL"
    },
    "1401": {
      "op": "SUB"
    },
    "1402": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "AND",
      "path": "49"
    },
    "1403": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1405": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1407": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1409": {
      "op": "SHL"
    },
    "1410": {
      "op": "SUB"
    },
    "1411": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "AND",
      "path": "49"
    },
    "1412": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1413": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "1414": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x20"
    },
    "1416": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "ADD",
      "path": "49"
    },
    "1417": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5673,
        5677
      ],
      "op": "ADDRESS",
      "path": "49"
    },
    "1418": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1420": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1422": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1424": {
      "op": "SHL"
    },
    "1425": {
      "op": "SUB"
    },
    "1426": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "AND",
      "path": "49"
    },
    "1427": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1429": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1431": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1433": {
      "op": "SHL"
    },
    "1434": {
      "op": "SUB"
    },
    "1435": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "AND",
      "path": "49"
    },
    "1436": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1437": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "1438": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x20"
    },
    "1440": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "ADD",
      "path": "49"
    },
    "1441": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5680,
        5686
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x73"
    },
    "1443": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5680,
        5686
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1445": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5680,
        5686
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1446": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5680,
        5686
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "1447": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5680,
        5686
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1448": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5680,
        5686
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x100"
    },
    "1451": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5680,
        5686
      ],
      "op": "EXP",
      "path": "49"
    },
    "1452": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5680,
        5686
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1453": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5680,
        5686
      ],
      "op": "DIV",
      "path": "49"
    },
    "1454": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1456": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1458": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1460": {
      "op": "SHL"
    },
    "1461": {
      "op": "SUB"
    },
    "1462": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5680,
        5686
      ],
      "op": "AND",
      "path": "49"
    },
    "1463": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1465": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1467": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1469": {
      "op": "SHL"
    },
    "1470": {
      "op": "SUB"
    },
    "1471": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "AND",
      "path": "49"
    },
    "1472": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1474": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1476": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1478": {
      "op": "SHL"
    },
    "1479": {
      "op": "SUB"
    },
    "1480": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "AND",
      "path": "49"
    },
    "1481": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1482": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "1483": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x20"
    },
    "1485": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "ADD",
      "path": "49"
    },
    "1486": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5688,
        5699
      ],
      "op": "DUP15",
      "path": "49"
    },
    "1487": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1489": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1491": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1493": {
      "op": "SHL"
    },
    "1494": {
      "op": "SUB"
    },
    "1495": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "AND",
      "path": "49"
    },
    "1496": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1498": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1500": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1502": {
      "op": "SHL"
    },
    "1503": {
      "op": "SUB"
    },
    "1504": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "AND",
      "path": "49"
    },
    "1505": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1506": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "1507": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x20"
    },
    "1509": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "ADD",
      "path": "49"
    },
    "1510": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5701,
        5714
      ],
      "op": "DUP14",
      "path": "49"
    },
    "1511": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1513": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1515": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1517": {
      "op": "SHL"
    },
    "1518": {
      "op": "SUB"
    },
    "1519": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "AND",
      "path": "49"
    },
    "1520": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1522": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1524": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1526": {
      "op": "SHL"
    },
    "1527": {
      "op": "SUB"
    },
    "1528": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "AND",
      "path": "49"
    },
    "1529": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1530": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "1531": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "POP",
      "path": "49"
    },
    "1532": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5734,
        5749
      ],
      "op": "DUP15",
      "path": "49"
    },
    "1533": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "1535": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1536": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x24"
    },
    "1538": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "ADD",
      "path": "49"
    },
    "1539": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x615"
    },
    "1543": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "SWAP9",
      "path": "49"
    },
    "1544": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "SWAP8",
      "path": "49"
    },
    "1545": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "SWAP7",
      "path": "49"
    },
    "1546": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "SWAP6",
      "path": "49"
    },
    "1547": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "SWAP5",
      "path": "49"
    },
    "1548": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "SWAP4",
      "path": "49"
    },
    "1549": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "1550": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "1551": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1552": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x125A"
    },
    "1556": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        5343,
        5763
      ],
      "op": "JUMP",
      "path": "49"
    },
    "1557": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1558": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "1560": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1561": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1562": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1564": {
      "op": "NOT"
    },
    "1565": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1566": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "DUP5",
      "path": "49"
    },
    "1567": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "SUB",
      "path": "49"
    },
    "1568": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "ADD",
      "path": "49"
    },
    "1569": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1570": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "1571": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "1572": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1573": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "1574": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x20"
    },
    "1576": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "DUP3",
      "path": "49"
    },
    "1577": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "ADD",
      "path": "49"
    },
    "1578": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1579": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1580": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1582": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1584": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1586": {
      "op": "SHL"
    },
    "1587": {
      "op": "SUB"
    },
    "1588": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "AND",
      "path": "49"
    },
    "1589": {
      "op": "PUSH4",
      "value": "0x53D1EE2D"
    },
    "1594": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1596": {
      "op": "SHL"
    },
    "1597": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "OR",
      "path": "49"
    },
    "1598": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1599": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5343,
        5763
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "1600": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5281,
        5773
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1601": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5281,
        5773
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x64B"
    },
    "1605": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5281,
        5773
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1606": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5281,
        5773
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0xCEF"
    },
    "1610": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        5281,
        5773
      ],
      "op": "JUMP",
      "path": "49"
    },
    "1611": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5281,
        5773
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1612": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5281,
        5773
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x658"
    },
    "1616": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5281,
        5773
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "1617": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5281,
        5773
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "1618": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5281,
        5773
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1619": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5281,
        5773
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x12FA"
    },
    "1623": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        5281,
        5773
      ],
      "op": "JUMP",
      "path": "49"
    },
    "1624": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5281,
        5773
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1625": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5281,
        5773
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "1627": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5281,
        5773
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1628": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5281,
        5773
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1629": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5281,
        5773
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "1630": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5281,
        5773
      ],
      "op": "SUB",
      "path": "49"
    },
    "1631": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5281,
        5773
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1632": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5281,
        5773
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1634": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5281,
        5773
      ],
      "op": "CREATE",
      "path": "49"
    },
    "1635": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5281,
        5773
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1636": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5281,
        5773
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "1637": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5281,
        5773
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1638": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5281,
        5773
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "1639": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5281,
        5773
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x675"
    },
    "1643": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5281,
        5773
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "1644": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5281,
        5773
      ],
      "op": "RETURNDATASIZE",
      "path": "49"
    },
    "1645": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5281,
        5773
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1647": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5281,
        5773
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1648": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5281,
        5773
      ],
      "op": "RETURNDATACOPY",
      "path": "49"
    },
    "1649": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5281,
        5773
      ],
      "op": "RETURNDATASIZE",
      "path": "49"
    },
    "1650": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5281,
        5773
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1652": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5281,
        5773
      ],
      "op": "REVERT",
      "path": "49"
    },
    "1653": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5281,
        5773
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1654": {
      "op": "POP"
    },
    "1655": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5784,
        5790
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 5,
      "value": "0x65"
    },
    "1657": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5784,
        5792
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1658": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5784,
        5792
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "1659": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5261,
        5773
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "1660": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5261,
        5773
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "1661": {
      "op": "POP"
    },
    "1662": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5784,
        5790
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1664": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5784,
        5792
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x68A"
    },
    "1668": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5784,
        5792
      ],
      "op": "DUP4",
      "path": "49"
    },
    "1669": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5784,
        5792
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x1328"
    },
    "1673": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        5784,
        5792
      ],
      "op": "JUMP",
      "path": "49"
    },
    "1674": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5784,
        5792
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1675": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5784,
        5792
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "1676": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5784,
        5792
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1677": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5784,
        5792
      ],
      "op": "POP",
      "path": "49"
    },
    "1678": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5784,
        5792
      ],
      "op": "SSTORE",
      "path": "49"
    },
    "1679": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5784,
        5792
      ],
      "op": "POP",
      "path": "49"
    },
    "1680": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5840,
        5846
      ],
      "op": "DUP1",
      "path": "49",
      "statement": 6
    },
    "1681": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5802,
        5808
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x80"
    },
    "1683": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5802,
        5818
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1685": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5810,
        5816
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x65"
    },
    "1687": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5810,
        5816
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "1688": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5802,
        5818
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1689": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5802,
        5818
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "1690": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5802,
        5818
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x20"
    },
    "1692": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5802,
        5818
      ],
      "op": "ADD",
      "path": "49"
    },
    "1693": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5802,
        5818
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1694": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5802,
        5818
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1695": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5802,
        5818
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "1696": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5802,
        5818
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x20"
    },
    "1698": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5802,
        5818
      ],
      "op": "ADD",
      "path": "49"
    },
    "1699": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5802,
        5818
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1701": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5802,
        5818
      ],
      "op": "KECCAK256",
      "path": "49"
    },
    "1702": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5802,
        5818
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1704": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5802,
        5850
      ],
      "op": "PUSH2",
      "path": "49",
      "value": "0x100"
    },
    "1707": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5802,
        5850
      ],
      "op": "EXP",
      "path": "49"
    },
    "1708": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5802,
        5850
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1709": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5802,
        5850
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "1710": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5802,
        5850
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1711": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1713": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1715": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1717": {
      "op": "SHL"
    },
    "1718": {
      "op": "SUB"
    },
    "1719": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5802,
        5850
      ],
      "op": "MUL",
      "path": "49"
    },
    "1720": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5802,
        5850
      ],
      "op": "NOT",
      "path": "49"
    },
    "1721": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5802,
        5850
      ],
      "op": "AND",
      "path": "49"
    },
    "1722": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5802,
        5850
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1723": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5802,
        5850
      ],
      "op": "DUP4",
      "path": "49"
    },
    "1724": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1726": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1728": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1730": {
      "op": "SHL"
    },
    "1731": {
      "op": "SUB"
    },
    "1732": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5802,
        5850
      ],
      "op": "AND",
      "path": "49"
    },
    "1733": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5802,
        5850
      ],
      "op": "MUL",
      "path": "49"
    },
    "1734": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5802,
        5850
      ],
      "op": "OR",
      "path": "49"
    },
    "1735": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5802,
        5850
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1736": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5802,
        5850
      ],
      "op": "SSTORE",
      "path": "49"
    },
    "1737": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5802,
        5850
      ],
      "op": "POP",
      "path": "49"
    },
    "1738": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5892,
        5898
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 7,
      "value": "0x65"
    },
    "1740": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5892,
        5898
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "1741": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5860,
        5868
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x7F"
    },
    "1743": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5860,
        5889
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1745": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5879,
        5885
      ],
      "op": "DUP4",
      "path": "49"
    },
    "1746": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1748": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1750": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1752": {
      "op": "SHL"
    },
    "1753": {
      "op": "SUB"
    },
    "1754": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5860,
        5889
      ],
      "op": "AND",
      "path": "49"
    },
    "1755": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1757": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1759": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1761": {
      "op": "SHL"
    },
    "1762": {
      "op": "SUB"
    },
    "1763": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5860,
        5889
      ],
      "op": "AND",
      "path": "49"
    },
    "1764": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5860,
        5889
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1765": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5860,
        5889
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "1766": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5860,
        5889
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x20"
    },
    "1768": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5860,
        5889
      ],
      "op": "ADD",
      "path": "49"
    },
    "1769": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5860,
        5889
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1770": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5860,
        5889
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1771": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5860,
        5889
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "1772": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5860,
        5889
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x20"
    },
    "1774": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5860,
        5889
      ],
      "op": "ADD",
      "path": "49"
    },
    "1775": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5860,
        5889
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1777": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5860,
        5889
      ],
      "op": "KECCAK256",
      "path": "49"
    },
    "1778": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5860,
        5898
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1779": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5860,
        5898
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1780": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5860,
        5898
      ],
      "op": "SSTORE",
      "path": "49"
    },
    "1781": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5860,
        5898
      ],
      "op": "POP",
      "path": "49"
    },
    "1782": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5914,
        5964
      ],
      "op": "PUSH32",
      "path": "49",
      "statement": 8,
      "value": "0x6510209152E59FEB0A7445A97B24BC79BFCB456CA1D8BFF1E4980536C4E8CABB"
    },
    "1815": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5934,
        5940
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1816": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5944,
        5954
      ],
      "op": "DUP14",
      "path": "49"
    },
    "1817": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5956,
        5962
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x65"
    },
    "1819": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5956,
        5962
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "1820": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5914,
        5964
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "1822": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5914,
        5964
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1823": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5914,
        5964
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x72C"
    },
    "1827": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5914,
        5964
      ],
      "op": "SWAP4",
      "path": "49"
    },
    "1828": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5914,
        5964
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "1829": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5914,
        5964
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "1830": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5914,
        5964
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1831": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5914,
        5964
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x1352"
    },
    "1835": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        5914,
        5964
      ],
      "op": "JUMP",
      "path": "49"
    },
    "1836": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5914,
        5964
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1837": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5914,
        5964
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "1839": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5914,
        5964
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1840": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5914,
        5964
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1841": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5914,
        5964
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "1842": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5914,
        5964
      ],
      "op": "SUB",
      "path": "49"
    },
    "1843": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5914,
        5964
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1844": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5914,
        5964
      ],
      "op": "LOG1",
      "path": "49"
    },
    "1845": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4258,
        5971
      ],
      "op": "POP",
      "path": "49"
    },
    "1846": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4258,
        5971
      ],
      "op": "POP",
      "path": "49"
    },
    "1847": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5971
      ],
      "op": "POP",
      "path": "49"
    },
    "1848": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5971
      ],
      "op": "POP",
      "path": "49"
    },
    "1849": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5971
      ],
      "op": "POP",
      "path": "49"
    },
    "1850": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5971
      ],
      "op": "POP",
      "path": "49"
    },
    "1851": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5971
      ],
      "op": "POP",
      "path": "49"
    },
    "1852": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5971
      ],
      "op": "POP",
      "path": "49"
    },
    "1853": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5971
      ],
      "op": "POP",
      "path": "49"
    },
    "1854": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5971
      ],
      "op": "POP",
      "path": "49"
    },
    "1855": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5971
      ],
      "op": "POP",
      "path": "49"
    },
    "1856": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5971
      ],
      "op": "POP",
      "path": "49"
    },
    "1857": {
      "fn": "CLFactory.CreateCLH",
      "jump": "o",
      "offset": [
        3896,
        5971
      ],
      "op": "JUMP",
      "path": "49"
    },
    "1858": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7162,
        7346
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1859": {
      "offset": [
        1334,
        1347
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0x74C"
    },
    "1863": {
      "offset": [
        1334,
        1345
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0xBD8"
    },
    "1867": {
      "jump": "i",
      "offset": [
        1334,
        1347
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1868": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        1334,
        1347
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1869": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7250,
        7256
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x73"
    },
    "1871": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7250,
        7256
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1872": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7250,
        7256
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "1873": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1875": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1877": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1879": {
      "op": "SHL"
    },
    "1880": {
      "op": "SUB"
    },
    "1881": {
      "op": "NOT"
    },
    "1882": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7266,
        7282
      ],
      "op": "DUP2",
      "path": "49",
      "statement": 9
    },
    "1883": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7266,
        7282
      ],
      "op": "AND",
      "path": "49"
    },
    "1884": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1886": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1888": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1890": {
      "op": "SHL"
    },
    "1891": {
      "op": "SUB"
    },
    "1892": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7266,
        7282
      ],
      "op": "DUP5",
      "path": "49"
    },
    "1893": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7266,
        7282
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1894": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7266,
        7282
      ],
      "op": "AND",
      "path": "49"
    },
    "1895": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7266,
        7282
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "1896": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7266,
        7282
      ],
      "op": "DUP3",
      "path": "49"
    },
    "1897": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7266,
        7282
      ],
      "op": "OR",
      "path": "49"
    },
    "1898": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7266,
        7282
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1899": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7266,
        7282
      ],
      "op": "SWAP4",
      "path": "49"
    },
    "1900": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7266,
        7282
      ],
      "op": "SSTORE",
      "path": "49"
    },
    "1901": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7297,
        7339
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 10,
      "value": "0x40"
    },
    "1903": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7297,
        7339
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1904": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7297,
        7339
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1905": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1907": {
      "op": "DUP1"
    },
    "1908": {
      "op": "DUP3"
    },
    "1909": {
      "op": "MSTORE"
    },
    "1910": {
      "op": "PUSH1",
      "value": "0x6"
    },
    "1912": {
      "op": "SWAP1"
    },
    "1913": {
      "op": "DUP3"
    },
    "1914": {
      "op": "ADD"
    },
    "1915": {
      "op": "MSTORE"
    },
    "1916": {
      "op": "PUSH6",
      "value": "0x434C48415049"
    },
    "1923": {
      "op": "PUSH1",
      "value": "0xD0"
    },
    "1925": {
      "op": "SHL"
    },
    "1926": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "1928": {
      "op": "DUP3"
    },
    "1929": {
      "op": "ADD"
    },
    "1930": {
      "op": "MSTORE"
    },
    "1931": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7250,
        7256
      ],
      "op": "SWAP4",
      "path": "49"
    },
    "1932": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7250,
        7256
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1933": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7250,
        7256
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "1934": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7250,
        7256
      ],
      "op": "AND",
      "path": "49"
    },
    "1935": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1937": {
      "op": "DUP5"
    },
    "1938": {
      "op": "ADD"
    },
    "1939": {
      "op": "DUP2"
    },
    "1940": {
      "op": "SWAP1"
    },
    "1941": {
      "op": "MSTORE"
    },
    "1942": {
      "op": "SWAP2"
    },
    "1943": {
      "op": "DUP4"
    },
    "1944": {
      "op": "ADD"
    },
    "1945": {
      "op": "MSTORE"
    },
    "1946": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7250,
        7256
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1947": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1949": {
      "op": "DUP1"
    },
    "1950": {
      "op": "MLOAD"
    },
    "1951": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1953": {
      "op": "PUSH3",
      "value": "0x1CDF"
    },
    "1957": {
      "op": "DUP4"
    },
    "1958": {
      "op": "CODECOPY"
    },
    "1959": {
      "op": "DUP2"
    },
    "1960": {
      "op": "MLOAD"
    },
    "1961": {
      "op": "SWAP2"
    },
    "1962": {
      "op": "MSTORE"
    },
    "1963": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7297,
        7339
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1964": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1966": {
      "op": "ADD"
    },
    "1967": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7297,
        7339
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1968": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7297,
        7339
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "1970": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7297,
        7339
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1971": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7297,
        7339
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1972": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7297,
        7339
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "1973": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7297,
        7339
      ],
      "op": "SUB",
      "path": "49"
    },
    "1974": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7297,
        7339
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1975": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7297,
        7339
      ],
      "op": "LOG1",
      "path": "49"
    },
    "1976": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7222,
        7346
      ],
      "op": "POP",
      "path": "49"
    },
    "1977": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7162,
        7346
      ],
      "op": "POP",
      "path": "49"
    },
    "1978": {
      "fn": "CLFactory.UpdateCLHAPI",
      "jump": "o",
      "offset": [
        7162,
        7346
      ],
      "op": "JUMP",
      "path": "49"
    },
    "1979": {
      "fn": "CLFactory.Init",
      "offset": [
        2577,
        3174
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1980": {
      "offset": [
        4418,
        4431
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1982": {
      "fn": "CLFactory.Init",
      "offset": [
        4418,
        4431
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1983": {
      "offset": [
        295,
        296
      ],
      "op": "PUSH1",
      "path": "48",
      "value": "0x1"
    },
    "1985": {
      "fn": "CLFactory.Init",
      "offset": [
        295,
        296
      ],
      "op": "SWAP1",
      "path": "48"
    },
    "1986": {
      "offset": [
        4418,
        4431
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x100"
    },
    "1989": {
      "fn": "CLFactory.Init",
      "offset": [
        4418,
        4431
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1990": {
      "fn": "CLFactory.Init",
      "offset": [
        4418,
        4431
      ],
      "op": "DIV",
      "path": "1"
    },
    "1991": {
      "fn": "CLFactory.Init",
      "offset": [
        4418,
        4431
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "1993": {
      "branch": 42,
      "fn": "CLFactory.Init",
      "offset": [
        4418,
        4431
      ],
      "op": "AND",
      "path": "1"
    },
    "1994": {
      "offset": [
        4417,
        4431
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1995": {
      "offset": [
        4417,
        4457
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1996": {
      "fn": "CLFactory.Init",
      "offset": [
        4417,
        4457
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1997": {
      "fn": "CLFactory.Init",
      "offset": [
        4417,
        4457
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0x7DE"
    },
    "2001": {
      "branch": 42,
      "offset": [
        4417,
        4457
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "2002": {
      "op": "POP"
    },
    "2003": {
      "offset": [
        4435,
        4447
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2005": {
      "fn": "CLFactory.Init",
      "offset": [
        4435,
        4447
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "2006": {
      "offset": [
        4435,
        4457
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "2008": {
      "fn": "CLFactory.Init",
      "offset": [
        4435,
        4457
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2009": {
      "fn": "CLFactory.Init",
      "offset": [
        4435,
        4457
      ],
      "op": "DUP4",
      "path": "1"
    },
    "2010": {
      "fn": "CLFactory.Init",
      "offset": [
        4435,
        4457
      ],
      "op": "AND",
      "path": "1"
    },
    "2011": {
      "offset": [
        4435,
        4447
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2012": {
      "fn": "CLFactory.Init",
      "offset": [
        4435,
        4447
      ],
      "op": "AND",
      "path": "1"
    },
    "2013": {
      "offset": [
        4435,
        4457
      ],
      "op": "LT",
      "path": "1"
    },
    "2014": {
      "offset": [
        4417,
        4457
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2015": {
      "offset": [
        4409,
        4508
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0x843"
    },
    "2019": {
      "offset": [
        4409,
        4508
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "2020": {
      "fn": "CLFactory.Init",
      "offset": [
        4409,
        4508
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2022": {
      "fn": "CLFactory.Init",
      "offset": [
        4409,
        4508
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2023": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2027": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2029": {
      "op": "SHL"
    },
    "2030": {
      "offset": [
        4409,
        4508
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2031": {
      "fn": "CLFactory.Init",
      "offset": [
        4409,
        4508
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2032": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2034": {
      "offset": [
        4409,
        4508
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "2036": {
      "fn": "CLFactory.Init",
      "offset": [
        4409,
        4508
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2037": {
      "fn": "CLFactory.Init",
      "offset": [
        4409,
        4508
      ],
      "op": "ADD",
      "path": "1"
    },
    "2038": {
      "op": "MSTORE"
    },
    "2039": {
      "op": "PUSH1",
      "value": "0x2E"
    },
    "2041": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2043": {
      "op": "DUP3"
    },
    "2044": {
      "op": "ADD"
    },
    "2045": {
      "op": "MSTORE"
    },
    "2046": {
      "op": "PUSH32",
      "value": "0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561"
    },
    "2079": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2081": {
      "op": "DUP3"
    },
    "2082": {
      "op": "ADD"
    },
    "2083": {
      "op": "MSTORE"
    },
    "2084": {
      "op": "PUSH14",
      "value": "0x191E481A5B9A5D1A585B1A5E9959"
    },
    "2099": {
      "op": "PUSH1",
      "value": "0x92"
    },
    "2101": {
      "op": "SHL"
    },
    "2102": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2104": {
      "op": "DUP3"
    },
    "2105": {
      "op": "ADD"
    },
    "2106": {
      "op": "MSTORE"
    },
    "2107": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2109": {
      "op": "ADD"
    },
    "2110": {
      "offset": [
        4409,
        4508
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0x3A7"
    },
    "2114": {
      "op": "JUMP"
    },
    "2115": {
      "offset": [
        4409,
        4508
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2116": {
      "offset": [
        4518,
        4530
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2118": {
      "offset": [
        4518,
        4540
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2119": {
      "fn": "CLFactory.Init",
      "offset": [
        4518,
        4540
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "2120": {
      "op": "PUSH2",
      "value": "0xFFFF"
    },
    "2123": {
      "op": "NOT"
    },
    "2124": {
      "offset": [
        4550,
        4570
      ],
      "op": "AND",
      "path": "1"
    },
    "2125": {
      "offset": [
        4518,
        4540
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "2127": {
      "fn": "CLFactory.Init",
      "offset": [
        4518,
        4540
      ],
      "op": "DUP4",
      "path": "1"
    },
    "2128": {
      "fn": "CLFactory.Init",
      "offset": [
        4518,
        4540
      ],
      "op": "AND",
      "path": "1"
    },
    "2129": {
      "offset": [
        4550,
        4570
      ],
      "op": "OR",
      "path": "1"
    },
    "2130": {
      "offset": [
        4518,
        4540
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x100"
    },
    "2133": {
      "offset": [
        4550,
        4570
      ],
      "op": "OR",
      "path": "1"
    },
    "2134": {
      "fn": "CLFactory.Init",
      "offset": [
        4550,
        4570
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2135": {
      "fn": "CLFactory.Init",
      "offset": [
        4550,
        4570
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "2136": {
      "fn": "CLFactory.Init",
      "offset": [
        2833,
        2842
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 11,
      "value": "0x7E"
    },
    "2138": {
      "fn": "CLFactory.Init",
      "offset": [
        2833,
        2864
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2139": {
      "fn": "CLFactory.Init",
      "offset": [
        2833,
        2864
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "2140": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2142": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2144": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2146": {
      "op": "SHL"
    },
    "2147": {
      "op": "SUB"
    },
    "2148": {
      "fn": "CLFactory.Init",
      "offset": [
        2833,
        2864
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2149": {
      "fn": "CLFactory.Init",
      "offset": [
        2833,
        2864
      ],
      "op": "DUP7",
      "path": "49"
    },
    "2150": {
      "fn": "CLFactory.Init",
      "offset": [
        2833,
        2864
      ],
      "op": "AND",
      "path": "49"
    },
    "2151": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2153": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2155": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2157": {
      "op": "SHL"
    },
    "2158": {
      "op": "SUB"
    },
    "2159": {
      "op": "NOT"
    },
    "2160": {
      "fn": "CLFactory.Init",
      "offset": [
        2833,
        2864
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "2161": {
      "fn": "CLFactory.Init",
      "offset": [
        2833,
        2864
      ],
      "op": "DUP4",
      "path": "49"
    },
    "2162": {
      "fn": "CLFactory.Init",
      "offset": [
        2833,
        2864
      ],
      "op": "AND",
      "path": "49"
    },
    "2163": {
      "fn": "CLFactory.Init",
      "offset": [
        2833,
        2864
      ],
      "op": "OR",
      "path": "49"
    },
    "2164": {
      "fn": "CLFactory.Init",
      "offset": [
        2833,
        2864
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2165": {
      "fn": "CLFactory.Init",
      "offset": [
        2833,
        2864
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "2166": {
      "fn": "CLFactory.Init",
      "offset": [
        2833,
        2864
      ],
      "op": "SSTORE",
      "path": "49"
    },
    "2167": {
      "fn": "CLFactory.Init",
      "offset": [
        2875,
        2892
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 12,
      "value": "0x71"
    },
    "2169": {
      "fn": "CLFactory.Init",
      "offset": [
        2875,
        2913
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2170": {
      "fn": "CLFactory.Init",
      "offset": [
        2875,
        2913
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "2171": {
      "fn": "CLFactory.Init",
      "offset": [
        2875,
        2913
      ],
      "op": "DUP11",
      "path": "49"
    },
    "2172": {
      "fn": "CLFactory.Init",
      "offset": [
        2875,
        2913
      ],
      "op": "DUP5",
      "path": "49"
    },
    "2173": {
      "fn": "CLFactory.Init",
      "offset": [
        2875,
        2913
      ],
      "op": "AND",
      "path": "49"
    },
    "2174": {
      "fn": "CLFactory.Init",
      "offset": [
        2875,
        2913
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2175": {
      "fn": "CLFactory.Init",
      "offset": [
        2875,
        2913
      ],
      "op": "DUP4",
      "path": "49"
    },
    "2176": {
      "fn": "CLFactory.Init",
      "offset": [
        2875,
        2913
      ],
      "op": "AND",
      "path": "49"
    },
    "2177": {
      "fn": "CLFactory.Init",
      "offset": [
        2875,
        2913
      ],
      "op": "OR",
      "path": "49"
    },
    "2178": {
      "fn": "CLFactory.Init",
      "offset": [
        2875,
        2913
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2179": {
      "fn": "CLFactory.Init",
      "offset": [
        2875,
        2913
      ],
      "op": "SSTORE",
      "path": "49"
    },
    "2180": {
      "fn": "CLFactory.Init",
      "offset": [
        2923,
        2936
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 13,
      "value": "0x72"
    },
    "2182": {
      "fn": "CLFactory.Init",
      "offset": [
        2923,
        2953
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2183": {
      "fn": "CLFactory.Init",
      "offset": [
        2923,
        2953
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "2184": {
      "fn": "CLFactory.Init",
      "offset": [
        2923,
        2953
      ],
      "op": "DUP10",
      "path": "49"
    },
    "2185": {
      "fn": "CLFactory.Init",
      "offset": [
        2923,
        2953
      ],
      "op": "DUP5",
      "path": "49"
    },
    "2186": {
      "fn": "CLFactory.Init",
      "offset": [
        2923,
        2953
      ],
      "op": "AND",
      "path": "49"
    },
    "2187": {
      "fn": "CLFactory.Init",
      "offset": [
        2923,
        2953
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2188": {
      "fn": "CLFactory.Init",
      "offset": [
        2923,
        2953
      ],
      "op": "DUP4",
      "path": "49"
    },
    "2189": {
      "fn": "CLFactory.Init",
      "offset": [
        2923,
        2953
      ],
      "op": "AND",
      "path": "49"
    },
    "2190": {
      "fn": "CLFactory.Init",
      "offset": [
        2923,
        2953
      ],
      "op": "OR",
      "path": "49"
    },
    "2191": {
      "fn": "CLFactory.Init",
      "offset": [
        2923,
        2953
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2192": {
      "fn": "CLFactory.Init",
      "offset": [
        2923,
        2953
      ],
      "op": "SSTORE",
      "path": "49"
    },
    "2193": {
      "fn": "CLFactory.Init",
      "offset": [
        2963,
        2980
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 14,
      "value": "0x70"
    },
    "2195": {
      "fn": "CLFactory.Init",
      "offset": [
        2963,
        3001
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2196": {
      "fn": "CLFactory.Init",
      "offset": [
        2963,
        3001
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "2197": {
      "fn": "CLFactory.Init",
      "offset": [
        2963,
        3001
      ],
      "op": "DUP9",
      "path": "49"
    },
    "2198": {
      "fn": "CLFactory.Init",
      "offset": [
        2963,
        3001
      ],
      "op": "DUP5",
      "path": "49"
    },
    "2199": {
      "fn": "CLFactory.Init",
      "offset": [
        2963,
        3001
      ],
      "op": "AND",
      "path": "49"
    },
    "2200": {
      "fn": "CLFactory.Init",
      "offset": [
        2963,
        3001
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2201": {
      "fn": "CLFactory.Init",
      "offset": [
        2963,
        3001
      ],
      "op": "DUP4",
      "path": "49"
    },
    "2202": {
      "fn": "CLFactory.Init",
      "offset": [
        2963,
        3001
      ],
      "op": "AND",
      "path": "49"
    },
    "2203": {
      "fn": "CLFactory.Init",
      "offset": [
        2963,
        3001
      ],
      "op": "OR",
      "path": "49"
    },
    "2204": {
      "fn": "CLFactory.Init",
      "offset": [
        2963,
        3001
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2205": {
      "fn": "CLFactory.Init",
      "offset": [
        2963,
        3001
      ],
      "op": "SSTORE",
      "path": "49"
    },
    "2206": {
      "fn": "CLFactory.Init",
      "offset": [
        3011,
        3017
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 15,
      "value": "0x73"
    },
    "2208": {
      "fn": "CLFactory.Init",
      "offset": [
        3011,
        3027
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2209": {
      "fn": "CLFactory.Init",
      "offset": [
        3011,
        3027
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "2210": {
      "fn": "CLFactory.Init",
      "offset": [
        3011,
        3027
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "2211": {
      "fn": "CLFactory.Init",
      "offset": [
        3011,
        3027
      ],
      "op": "DUP8",
      "path": "49"
    },
    "2212": {
      "fn": "CLFactory.Init",
      "offset": [
        3011,
        3027
      ],
      "op": "AND",
      "path": "49"
    },
    "2213": {
      "fn": "CLFactory.Init",
      "offset": [
        3011,
        3027
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "2214": {
      "fn": "CLFactory.Init",
      "offset": [
        3011,
        3027
      ],
      "op": "DUP3",
      "path": "49"
    },
    "2215": {
      "fn": "CLFactory.Init",
      "offset": [
        3011,
        3027
      ],
      "op": "AND",
      "path": "49"
    },
    "2216": {
      "fn": "CLFactory.Init",
      "offset": [
        3011,
        3027
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "2217": {
      "fn": "CLFactory.Init",
      "offset": [
        3011,
        3027
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2218": {
      "fn": "CLFactory.Init",
      "offset": [
        3011,
        3027
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "2219": {
      "fn": "CLFactory.Init",
      "offset": [
        3011,
        3027
      ],
      "op": "OR",
      "path": "49"
    },
    "2220": {
      "fn": "CLFactory.Init",
      "offset": [
        3011,
        3027
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2221": {
      "fn": "CLFactory.Init",
      "offset": [
        3011,
        3027
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "2222": {
      "fn": "CLFactory.Init",
      "offset": [
        3011,
        3027
      ],
      "op": "SSTORE",
      "path": "49"
    },
    "2223": {
      "fn": "CLFactory.Init",
      "offset": [
        3038,
        3044
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 16,
      "value": "0x65"
    },
    "2225": {
      "fn": "CLFactory.Init",
      "offset": [
        3038,
        3048
      ],
      "op": "DUP3",
      "path": "49"
    },
    "2226": {
      "fn": "CLFactory.Init",
      "offset": [
        3038,
        3048
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2227": {
      "fn": "CLFactory.Init",
      "offset": [
        3038,
        3048
      ],
      "op": "SSTORE",
      "path": "49"
    },
    "2228": {
      "fn": "CLFactory.Init",
      "offset": [
        3058,
        3074
      ],
      "op": "DUP2",
      "path": "49",
      "statement": 17
    },
    "2229": {
      "fn": "CLFactory.Init",
      "offset": [
        3058,
        3074
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2230": {
      "fn": "CLFactory.Init",
      "offset": [
        3058,
        3074
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "2231": {
      "fn": "CLFactory.Init",
      "offset": [
        3058,
        3074
      ],
      "op": "PUSH32",
      "path": "49",
      "value": "0xAE0C3F803428DD501929F276001A4B5FD1D262991BBB98E97B4B7D918A5AF6DC"
    },
    "2264": {
      "fn": "CLFactory.Init",
      "offset": [
        3058,
        3099
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2265": {
      "fn": "CLFactory.Init",
      "offset": [
        3058,
        3099
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "2266": {
      "fn": "CLFactory.Init",
      "offset": [
        3058,
        3099
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2267": {
      "fn": "CLFactory.Init",
      "offset": [
        3058,
        3099
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "2268": {
      "fn": "CLFactory.Init",
      "offset": [
        3058,
        3099
      ],
      "op": "AND",
      "path": "49"
    },
    "2269": {
      "fn": "CLFactory.Init",
      "offset": [
        3058,
        3099
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2270": {
      "fn": "CLFactory.Init",
      "offset": [
        3058,
        3099
      ],
      "op": "SSTORE",
      "path": "49"
    },
    "2271": {
      "fn": "CLFactory.Init",
      "offset": [
        3109,
        3117
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 18,
      "value": "0x7F"
    },
    "2273": {
      "fn": "CLFactory.Init",
      "offset": [
        3058,
        3074
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x20"
    },
    "2275": {
      "fn": "CLFactory.Init",
      "offset": [
        3109,
        3131
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "2276": {
      "fn": "CLFactory.Init",
      "offset": [
        3109,
        3131
      ],
      "op": "PUSH32",
      "path": "49",
      "value": "0x18B3A2798575D3A428C1F52E616A74B071539854E037E7D7C535365D474F4033"
    },
    "2309": {
      "fn": "CLFactory.Init",
      "offset": [
        3109,
        3140
      ],
      "op": "SSTORE",
      "path": "49"
    },
    "2310": {
      "fn": "CLFactory.Init",
      "offset": [
        3151,
        3167
      ],
      "op": "PUSH3",
      "path": "49",
      "statement": 19,
      "value": "0x90F"
    },
    "2314": {
      "fn": "CLFactory.Init",
      "offset": [
        3151,
        3165
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0xC34"
    },
    "2318": {
      "fn": "CLFactory.Init",
      "jump": "i",
      "offset": [
        3151,
        3167
      ],
      "op": "JUMP",
      "path": "49"
    },
    "2319": {
      "fn": "CLFactory.Init",
      "offset": [
        3151,
        3167
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "2320": {
      "offset": [
        4607,
        4612
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2322": {
      "offset": [
        4591,
        4612
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2323": {
      "fn": "CLFactory.Init",
      "offset": [
        4591,
        4612
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "2324": {
      "op": "PUSH2",
      "value": "0xFF00"
    },
    "2327": {
      "op": "NOT"
    },
    "2328": {
      "offset": [
        4591,
        4612
      ],
      "op": "AND",
      "path": "1"
    },
    "2329": {
      "fn": "CLFactory.Init",
      "offset": [
        4591,
        4612
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2330": {
      "fn": "CLFactory.Init",
      "offset": [
        4591,
        4612
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "2331": {
      "offset": [
        4627,
        4647
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2333": {
      "fn": "CLFactory.Init",
      "offset": [
        4627,
        4647
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2334": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "2336": {
      "op": "DUP3"
    },
    "2337": {
      "op": "AND"
    },
    "2338": {
      "op": "DUP2"
    },
    "2339": {
      "op": "MSTORE"
    },
    "2340": {
      "offset": [
        4627,
        4647
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498"
    },
    "2373": {
      "fn": "CLFactory.Init",
      "offset": [
        4627,
        4647
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2374": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2376": {
      "op": "ADD"
    },
    "2377": {
      "offset": [
        4627,
        4647
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2379": {
      "fn": "CLFactory.Init",
      "offset": [
        4627,
        4647
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2380": {
      "fn": "CLFactory.Init",
      "offset": [
        4627,
        4647
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2381": {
      "fn": "CLFactory.Init",
      "offset": [
        4627,
        4647
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2382": {
      "fn": "CLFactory.Init",
      "offset": [
        4627,
        4647
      ],
      "op": "SUB",
      "path": "1"
    },
    "2383": {
      "fn": "CLFactory.Init",
      "offset": [
        4627,
        4647
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2384": {
      "fn": "CLFactory.Init",
      "offset": [
        4627,
        4647
      ],
      "op": "LOG1",
      "path": "1"
    },
    "2385": {
      "fn": "CLFactory.Init",
      "offset": [
        2577,
        3174
      ],
      "op": "POP",
      "path": "49"
    },
    "2386": {
      "fn": "CLFactory.Init",
      "offset": [
        2577,
        3174
      ],
      "op": "POP",
      "path": "49"
    },
    "2387": {
      "fn": "CLFactory.Init",
      "offset": [
        2577,
        3174
      ],
      "op": "POP",
      "path": "49"
    },
    "2388": {
      "fn": "CLFactory.Init",
      "offset": [
        2577,
        3174
      ],
      "op": "POP",
      "path": "49"
    },
    "2389": {
      "fn": "CLFactory.Init",
      "offset": [
        2577,
        3174
      ],
      "op": "POP",
      "path": "49"
    },
    "2390": {
      "fn": "CLFactory.Init",
      "offset": [
        2577,
        3174
      ],
      "op": "POP",
      "path": "49"
    },
    "2391": {
      "fn": "CLFactory.Init",
      "jump": "o",
      "offset": [
        2577,
        3174
      ],
      "op": "JUMP",
      "path": "49"
    },
    "2392": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        2071,
        2172
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2393": {
      "offset": [
        1334,
        1347
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0x962"
    },
    "2397": {
      "offset": [
        1334,
        1345
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0xBD8"
    },
    "2401": {
      "jump": "i",
      "offset": [
        1334,
        1347
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2402": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1334,
        1347
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2403": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        2135,
        2165
      ],
      "op": "PUSH3",
      "path": "0",
      "statement": 20,
      "value": "0x96E"
    },
    "2407": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        2162,
        2163
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "2409": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        2135,
        2153
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0xC68"
    },
    "2413": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "jump": "i",
      "offset": [
        2135,
        2165
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2414": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        2135,
        2165
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2415": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "jump": "o",
      "offset": [
        2071,
        2172
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2416": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6150
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "2417": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6126
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 21,
      "value": "0x7E"
    },
    "2419": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6126
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "2420": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "2422": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2423": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "2424": {
      "op": "PUSH4",
      "value": "0x5C60DA1B"
    },
    "2429": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2431": {
      "op": "SHL"
    },
    "2432": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "DUP2",
      "path": "49"
    },
    "2433": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "2434": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2435": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "2436": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6091,
        6098
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "2438": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6091,
        6098
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "2439": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2441": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2443": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2445": {
      "op": "SHL"
    },
    "2446": {
      "op": "SUB"
    },
    "2447": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6126
      ],
      "op": "AND",
      "path": "49"
    },
    "2448": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6126
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "2449": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6141
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x5C60DA1B"
    },
    "2454": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6141
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "2455": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "2457": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2458": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "DUP4",
      "path": "49"
    },
    "2459": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "ADD",
      "path": "49"
    },
    "2460": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "2461": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x20"
    },
    "2463": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "2464": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "2465": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2466": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "DUP3",
      "path": "49"
    },
    "2467": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2468": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "SUB",
      "path": "49"
    },
    "2469": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "ADD",
      "path": "49"
    },
    "2470": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "DUP2",
      "path": "49"
    },
    "2471": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6126
      ],
      "op": "DUP7",
      "path": "49"
    },
    "2472": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "GAS",
      "path": "49"
    },
    "2473": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "STATICCALL",
      "path": "49"
    },
    "2474": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "2475": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2476": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "2477": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x9BB"
    },
    "2481": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "2482": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "RETURNDATASIZE",
      "path": "49"
    },
    "2483": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "2485": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2486": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "RETURNDATACOPY",
      "path": "49"
    },
    "2487": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "RETURNDATASIZE",
      "path": "49"
    },
    "2488": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "2490": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "REVERT",
      "path": "49"
    },
    "2491": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "2492": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "POP",
      "path": "49"
    },
    "2493": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "POP",
      "path": "49"
    },
    "2494": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "POP",
      "path": "49"
    },
    "2495": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "POP",
      "path": "49"
    },
    "2496": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "2498": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "2499": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "RETURNDATASIZE",
      "path": "49"
    },
    "2500": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x1F"
    },
    "2502": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "NOT",
      "path": "49"
    },
    "2503": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x1F"
    },
    "2505": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "DUP3",
      "path": "49"
    },
    "2506": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "ADD",
      "path": "49"
    },
    "2507": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "AND",
      "path": "49"
    },
    "2508": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "DUP3",
      "path": "49"
    },
    "2509": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "ADD",
      "path": "49"
    },
    "2510": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2511": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "2513": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "2514": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "POP",
      "path": "49"
    },
    "2515": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "DUP2",
      "path": "49"
    },
    "2516": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "ADD",
      "path": "49"
    },
    "2517": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2518": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x9E1"
    },
    "2522": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "2523": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2524": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x11C0"
    },
    "2528": {
      "fn": "CLFactory.getCLHImplementation",
      "jump": "i",
      "offset": [
        6117,
        6143
      ],
      "op": "JUMP",
      "path": "49"
    },
    "2529": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6117,
        6143
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "2530": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6110,
        6143
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2531": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6110,
        6143
      ],
      "op": "POP",
      "path": "49"
    },
    "2532": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6150
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2533": {
      "fn": "CLFactory.getCLHImplementation",
      "jump": "o",
      "offset": [
        6036,
        6150
      ],
      "op": "JUMP",
      "path": "49"
    },
    "2534": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6547,
        6808
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "2535": {
      "offset": [
        1334,
        1347
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0x9F0"
    },
    "2539": {
      "offset": [
        1334,
        1345
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0xBD8"
    },
    "2543": {
      "jump": "i",
      "offset": [
        1334,
        1347
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2544": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        1334,
        1347
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2545": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6657,
        6674
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x71"
    },
    "2547": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6657,
        6674
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2548": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6657,
        6674
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "2549": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2551": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2553": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2555": {
      "op": "SHL"
    },
    "2556": {
      "op": "SUB"
    },
    "2557": {
      "op": "NOT"
    },
    "2558": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6684,
        6722
      ],
      "op": "DUP2",
      "path": "49",
      "statement": 22
    },
    "2559": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6684,
        6722
      ],
      "op": "AND",
      "path": "49"
    },
    "2560": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2562": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2564": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2566": {
      "op": "SHL"
    },
    "2567": {
      "op": "SUB"
    },
    "2568": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6684,
        6722
      ],
      "op": "DUP5",
      "path": "49"
    },
    "2569": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6684,
        6722
      ],
      "op": "DUP2",
      "path": "49"
    },
    "2570": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6684,
        6722
      ],
      "op": "AND",
      "path": "49"
    },
    "2571": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6684,
        6722
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "2572": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6684,
        6722
      ],
      "op": "DUP3",
      "path": "49"
    },
    "2573": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6684,
        6722
      ],
      "op": "OR",
      "path": "49"
    },
    "2574": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6684,
        6722
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2575": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6684,
        6722
      ],
      "op": "SWAP4",
      "path": "49"
    },
    "2576": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6684,
        6722
      ],
      "op": "SSTORE",
      "path": "49"
    },
    "2577": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6737,
        6801
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 23,
      "value": "0x40"
    },
    "2579": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6737,
        6801
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2580": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6737,
        6801
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "2581": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2583": {
      "op": "DUP1"
    },
    "2584": {
      "op": "DUP3"
    },
    "2585": {
      "op": "MSTORE"
    },
    "2586": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "2588": {
      "op": "SWAP1"
    },
    "2589": {
      "op": "DUP3"
    },
    "2590": {
      "op": "ADD"
    },
    "2591": {
      "op": "MSTORE"
    },
    "2592": {
      "op": "PUSH17",
      "value": "0x10D313155CD95C93585B9859D95B595B9D"
    },
    "2610": {
      "op": "PUSH1",
      "value": "0x7A"
    },
    "2612": {
      "op": "SHL"
    },
    "2613": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2615": {
      "op": "DUP3"
    },
    "2616": {
      "op": "ADD"
    },
    "2617": {
      "op": "MSTORE"
    },
    "2618": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6657,
        6674
      ],
      "op": "SWAP4",
      "path": "49"
    },
    "2619": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6657,
        6674
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2620": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6657,
        6674
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "2621": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6657,
        6674
      ],
      "op": "AND",
      "path": "49"
    },
    "2622": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2624": {
      "op": "DUP5"
    },
    "2625": {
      "op": "ADD"
    },
    "2626": {
      "op": "DUP2"
    },
    "2627": {
      "op": "SWAP1"
    },
    "2628": {
      "op": "MSTORE"
    },
    "2629": {
      "op": "SWAP2"
    },
    "2630": {
      "op": "DUP4"
    },
    "2631": {
      "op": "ADD"
    },
    "2632": {
      "op": "MSTORE"
    },
    "2633": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6657,
        6674
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2634": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2636": {
      "op": "DUP1"
    },
    "2637": {
      "op": "MLOAD"
    },
    "2638": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2640": {
      "op": "PUSH3",
      "value": "0x1CDF"
    },
    "2644": {
      "op": "DUP4"
    },
    "2645": {
      "op": "CODECOPY"
    },
    "2646": {
      "op": "DUP2"
    },
    "2647": {
      "op": "MLOAD"
    },
    "2648": {
      "op": "SWAP2"
    },
    "2649": {
      "op": "MSTORE"
    },
    "2650": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6737,
        6801
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2651": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2653": {
      "op": "ADD"
    },
    "2654": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6737,
        6801
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x7AF"
    },
    "2658": {
      "op": "JUMP"
    },
    "2659": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6872,
        7105
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "2660": {
      "offset": [
        1334,
        1347
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0xA6D"
    },
    "2664": {
      "offset": [
        1334,
        1345
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0xBD8"
    },
    "2668": {
      "jump": "i",
      "offset": [
        1334,
        1347
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2669": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        1334,
        1347
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2670": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6974,
        6987
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x72"
    },
    "2672": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6974,
        6987
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2673": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6974,
        6987
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "2674": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2676": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2678": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2680": {
      "op": "SHL"
    },
    "2681": {
      "op": "SUB"
    },
    "2682": {
      "op": "NOT"
    },
    "2683": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6997,
        7027
      ],
      "op": "DUP2",
      "path": "49",
      "statement": 24
    },
    "2684": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6997,
        7027
      ],
      "op": "AND",
      "path": "49"
    },
    "2685": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2687": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2689": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2691": {
      "op": "SHL"
    },
    "2692": {
      "op": "SUB"
    },
    "2693": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6997,
        7027
      ],
      "op": "DUP5",
      "path": "49"
    },
    "2694": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6997,
        7027
      ],
      "op": "DUP2",
      "path": "49"
    },
    "2695": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6997,
        7027
      ],
      "op": "AND",
      "path": "49"
    },
    "2696": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6997,
        7027
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "2697": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6997,
        7027
      ],
      "op": "DUP3",
      "path": "49"
    },
    "2698": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6997,
        7027
      ],
      "op": "OR",
      "path": "49"
    },
    "2699": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6997,
        7027
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2700": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6997,
        7027
      ],
      "op": "SWAP4",
      "path": "49"
    },
    "2701": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6997,
        7027
      ],
      "op": "SSTORE",
      "path": "49"
    },
    "2702": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7042,
        7098
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 25,
      "value": "0x40"
    },
    "2704": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7042,
        7098
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2705": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7042,
        7098
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "2706": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2708": {
      "op": "DUP1"
    },
    "2709": {
      "op": "DUP3"
    },
    "2710": {
      "op": "MSTORE"
    },
    "2711": {
      "op": "PUSH1",
      "value": "0xD"
    },
    "2713": {
      "op": "SWAP1"
    },
    "2714": {
      "op": "DUP3"
    },
    "2715": {
      "op": "ADD"
    },
    "2716": {
      "op": "MSTORE"
    },
    "2717": {
      "op": "PUSH13",
      "value": "0x434C4C476F7665726E616E6365"
    },
    "2731": {
      "op": "PUSH1",
      "value": "0x98"
    },
    "2733": {
      "op": "SHL"
    },
    "2734": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2736": {
      "op": "DUP3"
    },
    "2737": {
      "op": "ADD"
    },
    "2738": {
      "op": "MSTORE"
    },
    "2739": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6974,
        6987
      ],
      "op": "SWAP4",
      "path": "49"
    },
    "2740": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6974,
        6987
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2741": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6974,
        6987
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "2742": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6974,
        6987
      ],
      "op": "AND",
      "path": "49"
    },
    "2743": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2745": {
      "op": "DUP5"
    },
    "2746": {
      "op": "ADD"
    },
    "2747": {
      "op": "DUP2"
    },
    "2748": {
      "op": "SWAP1"
    },
    "2749": {
      "op": "MSTORE"
    },
    "2750": {
      "op": "SWAP2"
    },
    "2751": {
      "op": "DUP4"
    },
    "2752": {
      "op": "ADD"
    },
    "2753": {
      "op": "MSTORE"
    },
    "2754": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6974,
        6987
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2755": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2757": {
      "op": "DUP1"
    },
    "2758": {
      "op": "MLOAD"
    },
    "2759": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2761": {
      "op": "PUSH3",
      "value": "0x1CDF"
    },
    "2765": {
      "op": "DUP4"
    },
    "2766": {
      "op": "CODECOPY"
    },
    "2767": {
      "op": "DUP2"
    },
    "2768": {
      "op": "MLOAD"
    },
    "2769": {
      "op": "SWAP2"
    },
    "2770": {
      "op": "MSTORE"
    },
    "2771": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7042,
        7098
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2772": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2774": {
      "op": "ADD"
    },
    "2775": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        7042,
        7098
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x7AF"
    },
    "2779": {
      "op": "JUMP"
    },
    "2780": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2321,
        2519
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2781": {
      "offset": [
        1334,
        1347
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0xAE6"
    },
    "2785": {
      "offset": [
        1334,
        1345
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0xBD8"
    },
    "2789": {
      "jump": "i",
      "offset": [
        1334,
        1347
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2790": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        1334,
        1347
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2791": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2793": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2795": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2797": {
      "op": "SHL"
    },
    "2798": {
      "op": "SUB"
    },
    "2799": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2409,
        2431
      ],
      "op": "DUP2",
      "path": "0",
      "statement": 26
    },
    "2800": {
      "branch": 44,
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2409,
        2431
      ],
      "op": "AND",
      "path": "0"
    },
    "2801": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2401,
        2474
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0xB4D"
    },
    "2805": {
      "branch": 44,
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2401,
        2474
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2806": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2401,
        2474
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2808": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2401,
        2474
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2809": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2813": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2815": {
      "op": "SHL"
    },
    "2816": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2401,
        2474
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2817": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2401,
        2474
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2818": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2820": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2401,
        2474
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2822": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2401,
        2474
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2823": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2401,
        2474
      ],
      "op": "ADD",
      "path": "0"
    },
    "2824": {
      "op": "MSTORE"
    },
    "2825": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "2827": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2829": {
      "op": "DUP3"
    },
    "2830": {
      "op": "ADD"
    },
    "2831": {
      "op": "MSTORE"
    },
    "2832": {
      "op": "PUSH32",
      "value": "0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
    },
    "2865": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2867": {
      "op": "DUP3"
    },
    "2868": {
      "op": "ADD"
    },
    "2869": {
      "op": "MSTORE"
    },
    "2870": {
      "op": "PUSH6",
      "value": "0x646472657373"
    },
    "2877": {
      "op": "PUSH1",
      "value": "0xD0"
    },
    "2879": {
      "op": "SHL"
    },
    "2880": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2882": {
      "op": "DUP3"
    },
    "2883": {
      "op": "ADD"
    },
    "2884": {
      "op": "MSTORE"
    },
    "2885": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2887": {
      "op": "ADD"
    },
    "2888": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2401,
        2474
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0x3A7"
    },
    "2892": {
      "op": "JUMP"
    },
    "2893": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2401,
        2474
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2894": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2484,
        2512
      ],
      "op": "PUSH3",
      "path": "0",
      "statement": 27,
      "value": "0xB58"
    },
    "2898": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2503,
        2511
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2899": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2484,
        2502
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0xC68"
    },
    "2903": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "jump": "i",
      "offset": [
        2484,
        2512
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2904": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2484,
        2512
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2905": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2321,
        2519
      ],
      "op": "POP",
      "path": "0"
    },
    "2906": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "jump": "o",
      "offset": [
        2321,
        2519
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2907": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6218,
        6479
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "2908": {
      "offset": [
        1334,
        1347
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0xB65"
    },
    "2912": {
      "offset": [
        1334,
        1345
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0xBD8"
    },
    "2916": {
      "jump": "i",
      "offset": [
        1334,
        1347
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2917": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        1334,
        1347
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2918": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6328,
        6345
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x70"
    },
    "2920": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6328,
        6345
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2921": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6328,
        6345
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "2922": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2924": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2926": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2928": {
      "op": "SHL"
    },
    "2929": {
      "op": "SUB"
    },
    "2930": {
      "op": "NOT"
    },
    "2931": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6355,
        6393
      ],
      "op": "DUP2",
      "path": "49",
      "statement": 28
    },
    "2932": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6355,
        6393
      ],
      "op": "AND",
      "path": "49"
    },
    "2933": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2935": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2937": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2939": {
      "op": "SHL"
    },
    "2940": {
      "op": "SUB"
    },
    "2941": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6355,
        6393
      ],
      "op": "DUP5",
      "path": "49"
    },
    "2942": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6355,
        6393
      ],
      "op": "DUP2",
      "path": "49"
    },
    "2943": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6355,
        6393
      ],
      "op": "AND",
      "path": "49"
    },
    "2944": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6355,
        6393
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "2945": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6355,
        6393
      ],
      "op": "DUP3",
      "path": "49"
    },
    "2946": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6355,
        6393
      ],
      "op": "OR",
      "path": "49"
    },
    "2947": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6355,
        6393
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2948": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6355,
        6393
      ],
      "op": "SWAP4",
      "path": "49"
    },
    "2949": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6355,
        6393
      ],
      "op": "SSTORE",
      "path": "49"
    },
    "2950": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6408,
        6472
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 29,
      "value": "0x40"
    },
    "2952": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6408,
        6472
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2953": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6408,
        6472
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "2954": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2956": {
      "op": "DUP1"
    },
    "2957": {
      "op": "DUP3"
    },
    "2958": {
      "op": "MSTORE"
    },
    "2959": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "2961": {
      "op": "SWAP1"
    },
    "2962": {
      "op": "DUP3"
    },
    "2963": {
      "op": "ADD"
    },
    "2964": {
      "op": "MSTORE"
    },
    "2965": {
      "op": "PUSH17",
      "value": "0x86989886DEDCE6E8E4EAC6E8DEE486989"
    },
    "2983": {
      "op": "PUSH1",
      "value": "0x7B"
    },
    "2985": {
      "op": "SHL"
    },
    "2986": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2988": {
      "op": "DUP3"
    },
    "2989": {
      "op": "ADD"
    },
    "2990": {
      "op": "MSTORE"
    },
    "2991": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6328,
        6345
      ],
      "op": "SWAP4",
      "path": "49"
    },
    "2992": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6328,
        6345
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2993": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6328,
        6345
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "2994": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6328,
        6345
      ],
      "op": "AND",
      "path": "49"
    },
    "2995": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2997": {
      "op": "DUP5"
    },
    "2998": {
      "op": "ADD"
    },
    "2999": {
      "op": "DUP2"
    },
    "3000": {
      "op": "SWAP1"
    },
    "3001": {
      "op": "MSTORE"
    },
    "3002": {
      "op": "SWAP2"
    },
    "3003": {
      "op": "DUP4"
    },
    "3004": {
      "op": "ADD"
    },
    "3005": {
      "op": "MSTORE"
    },
    "3006": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6328,
        6345
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "3007": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3009": {
      "op": "DUP1"
    },
    "3010": {
      "op": "MLOAD"
    },
    "3011": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3013": {
      "op": "PUSH3",
      "value": "0x1CDF"
    },
    "3017": {
      "op": "DUP4"
    },
    "3018": {
      "op": "CODECOPY"
    },
    "3019": {
      "op": "DUP2"
    },
    "3020": {
      "op": "MLOAD"
    },
    "3021": {
      "op": "SWAP2"
    },
    "3022": {
      "op": "MSTORE"
    },
    "3023": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6408,
        6472
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "3024": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3026": {
      "op": "ADD"
    },
    "3027": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6408,
        6472
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x7AF"
    },
    "3031": {
      "op": "JUMP"
    },
    "3032": {
      "fn": "OwnableUpgradeable._checkOwner",
      "offset": [
        1599,
        1729
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3033": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1513,
        1519
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x33"
    },
    "3035": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1513,
        1519
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3036": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3038": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3040": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3042": {
      "op": "SHL"
    },
    "3043": {
      "op": "SUB"
    },
    "3044": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1513,
        1519
      ],
      "op": "AND",
      "path": "0"
    },
    "3045": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        929,
        939
      ],
      "op": "CALLER",
      "path": "3",
      "statement": 30
    },
    "3046": {
      "branch": 45,
      "fn": "OwnableUpgradeable._checkOwner",
      "offset": [
        1662,
        1685
      ],
      "op": "EQ",
      "path": "0",
      "statement": 31
    },
    "3047": {
      "fn": "OwnableUpgradeable._checkOwner",
      "offset": [
        1654,
        1722
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0x96E"
    },
    "3051": {
      "branch": 45,
      "fn": "OwnableUpgradeable._checkOwner",
      "offset": [
        1654,
        1722
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "3052": {
      "fn": "OwnableUpgradeable._checkOwner",
      "offset": [
        1654,
        1722
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "3054": {
      "fn": "OwnableUpgradeable._checkOwner",
      "offset": [
        1654,
        1722
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3055": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3059": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3061": {
      "op": "SHL"
    },
    "3062": {
      "fn": "OwnableUpgradeable._checkOwner",
      "offset": [
        1654,
        1722
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3063": {
      "fn": "OwnableUpgradeable._checkOwner",
      "offset": [
        1654,
        1722
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "3064": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3066": {
      "fn": "OwnableUpgradeable._checkOwner",
      "offset": [
        1654,
        1722
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "3068": {
      "fn": "OwnableUpgradeable._checkOwner",
      "offset": [
        1654,
        1722
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3069": {
      "fn": "OwnableUpgradeable._checkOwner",
      "offset": [
        1654,
        1722
      ],
      "op": "ADD",
      "path": "0"
    },
    "3070": {
      "op": "DUP2"
    },
    "3071": {
      "op": "SWAP1"
    },
    "3072": {
      "op": "MSTORE"
    },
    "3073": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3075": {
      "op": "DUP3"
    },
    "3076": {
      "op": "ADD"
    },
    "3077": {
      "op": "MSTORE"
    },
    "3078": {
      "op": "PUSH32",
      "value": "0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
    },
    "3111": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3113": {
      "op": "DUP3"
    },
    "3114": {
      "op": "ADD"
    },
    "3115": {
      "op": "MSTORE"
    },
    "3116": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3118": {
      "op": "ADD"
    },
    "3119": {
      "fn": "OwnableUpgradeable._checkOwner",
      "offset": [
        1654,
        1722
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0x3A7"
    },
    "3123": {
      "op": "JUMP"
    },
    "3124": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        1003,
        1098
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3125": {
      "offset": [
        4910,
        4923
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3127": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4910,
        4923
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "3128": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4910,
        4923
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x100"
    },
    "3131": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4910,
        4923
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3132": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4910,
        4923
      ],
      "op": "DIV",
      "path": "1"
    },
    "3133": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4910,
        4923
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "3135": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4910,
        4923
      ],
      "op": "AND",
      "path": "1"
    },
    "3136": {
      "offset": [
        4902,
        4971
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0xC5E"
    },
    "3140": {
      "offset": [
        4902,
        4971
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "3141": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4902,
        4971
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3143": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4902,
        4971
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3144": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3148": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3150": {
      "op": "SHL"
    },
    "3151": {
      "offset": [
        4902,
        4971
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3152": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4902,
        4971
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3153": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4902,
        4971
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "3155": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4902,
        4971
      ],
      "op": "ADD",
      "path": "1"
    },
    "3156": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4902,
        4971
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0x3A7"
    },
    "3160": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4902,
        4971
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3161": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4902,
        4971
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0x1388"
    },
    "3165": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "jump": "i",
      "offset": [
        4902,
        4971
      ],
      "op": "JUMP",
      "path": "1"
    },
    "3166": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4902,
        4971
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3167": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        1065,
        1091
      ],
      "op": "PUSH3",
      "path": "0",
      "statement": 32,
      "value": "0x96E"
    },
    "3171": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        1065,
        1089
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0xCBA"
    },
    "3175": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "jump": "i",
      "offset": [
        1065,
        1091
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3176": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2673,
        2860
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3177": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2765,
        2771
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x33"
    },
    "3179": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2765,
        2771
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3180": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2765,
        2771
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3181": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3183": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3185": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3187": {
      "op": "SHL"
    },
    "3188": {
      "op": "SUB"
    },
    "3189": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2781,
        2798
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 33
    },
    "3190": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2781,
        2798
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3191": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2781,
        2798
      ],
      "op": "AND",
      "path": "0"
    },
    "3192": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3194": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3196": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3198": {
      "op": "SHL"
    },
    "3199": {
      "op": "SUB"
    },
    "3200": {
      "op": "NOT"
    },
    "3201": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2781,
        2798
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3202": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2781,
        2798
      ],
      "op": "AND",
      "path": "0"
    },
    "3203": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2781,
        2798
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3204": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2781,
        2798
      ],
      "op": "OR",
      "path": "0"
    },
    "3205": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2781,
        2798
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3206": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2781,
        2798
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "3207": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2781,
        2798
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "3208": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2813,
        2853
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 34,
      "value": "0x40"
    },
    "3210": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2813,
        2853
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3211": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2765,
        2771
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3212": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2765,
        2771
      ],
      "op": "AND",
      "path": "0"
    },
    "3213": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2765,
        2771
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3214": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2781,
        2798
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3215": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2765,
        2771
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3216": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2765,
        2771
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3217": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2813,
        2853
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
    },
    "3250": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2813,
        2853
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3251": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2746,
        2762
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3253": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2746,
        2762
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3254": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2813,
        2853
      ],
      "op": "LOG3",
      "path": "0"
    },
    "3255": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2736,
        2860
      ],
      "op": "POP",
      "path": "0"
    },
    "3256": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2673,
        2860
      ],
      "op": "POP",
      "path": "0"
    },
    "3257": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "jump": "o",
      "offset": [
        2673,
        2860
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3258": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        1104,
        1215
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3259": {
      "offset": [
        4910,
        4923
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3261": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4910,
        4923
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "3262": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4910,
        4923
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x100"
    },
    "3265": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4910,
        4923
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3266": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4910,
        4923
      ],
      "op": "DIV",
      "path": "1"
    },
    "3267": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4910,
        4923
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "3269": {
      "branch": 43,
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4910,
        4923
      ],
      "op": "AND",
      "path": "1"
    },
    "3270": {
      "offset": [
        4902,
        4971
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0xCE4"
    },
    "3274": {
      "branch": 43,
      "offset": [
        4902,
        4971
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "3275": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4902,
        4971
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3277": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4902,
        4971
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3278": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3282": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3284": {
      "op": "SHL"
    },
    "3285": {
      "offset": [
        4902,
        4971
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3286": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4902,
        4971
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3287": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4902,
        4971
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "3289": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4902,
        4971
      ],
      "op": "ADD",
      "path": "1"
    },
    "3290": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4902,
        4971
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0x3A7"
    },
    "3294": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4902,
        4971
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3295": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4902,
        4971
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0x1388"
    },
    "3299": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "jump": "i",
      "offset": [
        4902,
        4971
      ],
      "op": "JUMP",
      "path": "1"
    },
    "3300": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4902,
        4971
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3301": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        1176,
        1208
      ],
      "op": "PUSH3",
      "path": "0",
      "statement": 35,
      "value": "0x96E"
    },
    "3305": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        929,
        939
      ],
      "op": "CALLER",
      "path": "3"
    },
    "3306": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        1176,
        1194
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0xC68"
    },
    "3310": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "jump": "i",
      "offset": [
        1176,
        1208
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3311": {
      "op": "JUMPDEST"
    },
    "3312": {
      "op": "PUSH2",
      "value": "0x90B"
    },
    "3315": {
      "op": "DUP1"
    },
    "3316": {
      "op": "PUSH3",
      "value": "0x13D4"
    },
    "3320": {
      "op": "DUP4"
    },
    "3321": {
      "op": "CODECOPY"
    },
    "3322": {
      "op": "ADD"
    },
    "3323": {
      "op": "SWAP1"
    },
    "3324": {
      "jump": "o",
      "op": "JUMP"
    },
    "3325": {
      "op": "JUMPDEST"
    },
    "3326": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "3331": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3333": {
      "op": "SHL"
    },
    "3334": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3336": {
      "op": "MSTORE"
    },
    "3337": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "3339": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "3341": {
      "op": "MSTORE"
    },
    "3342": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3344": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3346": {
      "op": "REVERT"
    },
    "3347": {
      "op": "JUMPDEST"
    },
    "3348": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3350": {
      "op": "MLOAD"
    },
    "3351": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3353": {
      "op": "DUP3"
    },
    "3354": {
      "op": "ADD"
    },
    "3355": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3357": {
      "op": "NOT"
    },
    "3358": {
      "op": "AND"
    },
    "3359": {
      "op": "DUP2"
    },
    "3360": {
      "op": "ADD"
    },
    "3361": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "3370": {
      "op": "DUP2"
    },
    "3371": {
      "op": "GT"
    },
    "3372": {
      "op": "DUP3"
    },
    "3373": {
      "op": "DUP3"
    },
    "3374": {
      "op": "LT"
    },
    "3375": {
      "op": "OR"
    },
    "3376": {
      "op": "ISZERO"
    },
    "3377": {
      "op": "PUSH3",
      "value": "0xD3F"
    },
    "3381": {
      "op": "JUMPI"
    },
    "3382": {
      "op": "PUSH3",
      "value": "0xD3F"
    },
    "3386": {
      "op": "PUSH3",
      "value": "0xCFD"
    },
    "3390": {
      "jump": "i",
      "op": "JUMP"
    },
    "3391": {
      "op": "JUMPDEST"
    },
    "3392": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3394": {
      "op": "MSTORE"
    },
    "3395": {
      "op": "SWAP2"
    },
    "3396": {
      "op": "SWAP1"
    },
    "3397": {
      "op": "POP"
    },
    "3398": {
      "jump": "o",
      "op": "JUMP"
    },
    "3399": {
      "op": "JUMPDEST"
    },
    "3400": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3402": {
      "op": "DUP3"
    },
    "3403": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3405": {
      "op": "DUP4"
    },
    "3406": {
      "op": "ADD"
    },
    "3407": {
      "op": "SLT"
    },
    "3408": {
      "op": "PUSH3",
      "value": "0xD59"
    },
    "3412": {
      "op": "JUMPI"
    },
    "3413": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3415": {
      "op": "DUP1"
    },
    "3416": {
      "op": "REVERT"
    },
    "3417": {
      "op": "JUMPDEST"
    },
    "3418": {
      "op": "DUP2"
    },
    "3419": {
      "op": "CALLDATALOAD"
    },
    "3420": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "3429": {
      "op": "DUP2"
    },
    "3430": {
      "op": "GT"
    },
    "3431": {
      "op": "ISZERO"
    },
    "3432": {
      "op": "PUSH3",
      "value": "0xD76"
    },
    "3436": {
      "op": "JUMPI"
    },
    "3437": {
      "op": "PUSH3",
      "value": "0xD76"
    },
    "3441": {
      "op": "PUSH3",
      "value": "0xCFD"
    },
    "3445": {
      "jump": "i",
      "op": "JUMP"
    },
    "3446": {
      "op": "JUMPDEST"
    },
    "3447": {
      "op": "PUSH3",
      "value": "0xD8B"
    },
    "3451": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3453": {
      "op": "DUP3"
    },
    "3454": {
      "op": "ADD"
    },
    "3455": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3457": {
      "op": "NOT"
    },
    "3458": {
      "op": "AND"
    },
    "3459": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3461": {
      "op": "ADD"
    },
    "3462": {
      "op": "PUSH3",
      "value": "0xD13"
    },
    "3466": {
      "jump": "i",
      "op": "JUMP"
    },
    "3467": {
      "op": "JUMPDEST"
    },
    "3468": {
      "op": "DUP2"
    },
    "3469": {
      "op": "DUP2"
    },
    "3470": {
      "op": "MSTORE"
    },
    "3471": {
      "op": "DUP5"
    },
    "3472": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3474": {
      "op": "DUP4"
    },
    "3475": {
      "op": "DUP7"
    },
    "3476": {
      "op": "ADD"
    },
    "3477": {
      "op": "ADD"
    },
    "3478": {
      "op": "GT"
    },
    "3479": {
      "op": "ISZERO"
    },
    "3480": {
      "op": "PUSH3",
      "value": "0xDA1"
    },
    "3484": {
      "op": "JUMPI"
    },
    "3485": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3487": {
      "op": "DUP1"
    },
    "3488": {
      "op": "REVERT"
    },
    "3489": {
      "op": "JUMPDEST"
    },
    "3490": {
      "op": "DUP2"
    },
    "3491": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3493": {
      "op": "DUP6"
    },
    "3494": {
      "op": "ADD"
    },
    "3495": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3497": {
      "op": "DUP4"
    },
    "3498": {
      "op": "ADD"
    },
    "3499": {
      "op": "CALLDATACOPY"
    },
    "3500": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3502": {
      "op": "SWAP2"
    },
    "3503": {
      "op": "DUP2"
    },
    "3504": {
      "op": "ADD"
    },
    "3505": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3507": {
      "op": "ADD"
    },
    "3508": {
      "op": "SWAP2"
    },
    "3509": {
      "op": "SWAP1"
    },
    "3510": {
      "op": "SWAP2"
    },
    "3511": {
      "op": "MSTORE"
    },
    "3512": {
      "op": "SWAP4"
    },
    "3513": {
      "op": "SWAP3"
    },
    "3514": {
      "op": "POP"
    },
    "3515": {
      "op": "POP"
    },
    "3516": {
      "op": "POP"
    },
    "3517": {
      "jump": "o",
      "op": "JUMP"
    },
    "3518": {
      "op": "JUMPDEST"
    },
    "3519": {
      "op": "DUP1"
    },
    "3520": {
      "op": "CALLDATALOAD"
    },
    "3521": {
      "op": "DUP1"
    },
    "3522": {
      "op": "ISZERO"
    },
    "3523": {
      "op": "ISZERO"
    },
    "3524": {
      "op": "DUP2"
    },
    "3525": {
      "op": "EQ"
    },
    "3526": {
      "op": "PUSH3",
      "value": "0xDCF"
    },
    "3530": {
      "op": "JUMPI"
    },
    "3531": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3533": {
      "op": "DUP1"
    },
    "3534": {
      "op": "REVERT"
    },
    "3535": {
      "op": "JUMPDEST"
    },
    "3536": {
      "op": "SWAP2"
    },
    "3537": {
      "op": "SWAP1"
    },
    "3538": {
      "op": "POP"
    },
    "3539": {
      "jump": "o",
      "op": "JUMP"
    },
    "3540": {
      "op": "JUMPDEST"
    },
    "3541": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3543": {
      "op": "DUP3"
    },
    "3544": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3546": {
      "op": "DUP4"
    },
    "3547": {
      "op": "ADD"
    },
    "3548": {
      "op": "SLT"
    },
    "3549": {
      "op": "PUSH3",
      "value": "0xDE6"
    },
    "3553": {
      "op": "JUMPI"
    },
    "3554": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3556": {
      "op": "DUP1"
    },
    "3557": {
      "op": "REVERT"
    },
    "3558": {
      "op": "JUMPDEST"
    },
    "3559": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3561": {
      "op": "MLOAD"
    },
    "3562": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3564": {
      "op": "DUP2"
    },
    "3565": {
      "op": "ADD"
    },
    "3566": {
      "op": "DUP2"
    },
    "3567": {
      "op": "DUP2"
    },
    "3568": {
      "op": "LT"
    },
    "3569": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "3578": {
      "op": "DUP3"
    },
    "3579": {
      "op": "GT"
    },
    "3580": {
      "op": "OR"
    },
    "3581": {
      "op": "ISZERO"
    },
    "3582": {
      "op": "PUSH3",
      "value": "0xE0C"
    },
    "3586": {
      "op": "JUMPI"
    },
    "3587": {
      "op": "PUSH3",
      "value": "0xE0C"
    },
    "3591": {
      "op": "PUSH3",
      "value": "0xCFD"
    },
    "3595": {
      "jump": "i",
      "op": "JUMP"
    },
    "3596": {
      "op": "JUMPDEST"
    },
    "3597": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3599": {
      "op": "MSTORE"
    },
    "3600": {
      "op": "DUP1"
    },
    "3601": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3603": {
      "op": "DUP5"
    },
    "3604": {
      "op": "ADD"
    },
    "3605": {
      "op": "DUP6"
    },
    "3606": {
      "op": "DUP2"
    },
    "3607": {
      "op": "GT"
    },
    "3608": {
      "op": "ISZERO"
    },
    "3609": {
      "op": "PUSH3",
      "value": "0xE22"
    },
    "3613": {
      "op": "JUMPI"
    },
    "3614": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3616": {
      "op": "DUP1"
    },
    "3617": {
      "op": "REVERT"
    },
    "3618": {
      "op": "JUMPDEST"
    },
    "3619": {
      "op": "DUP5"
    },
    "3620": {
      "op": "JUMPDEST"
    },
    "3621": {
      "op": "DUP2"
    },
    "3622": {
      "op": "DUP2"
    },
    "3623": {
      "op": "LT"
    },
    "3624": {
      "op": "ISZERO"
    },
    "3625": {
      "op": "PUSH3",
      "value": "0xE3E"
    },
    "3629": {
      "op": "JUMPI"
    },
    "3630": {
      "op": "DUP1"
    },
    "3631": {
      "op": "CALLDATALOAD"
    },
    "3632": {
      "op": "DUP4"
    },
    "3633": {
      "op": "MSTORE"
    },
    "3634": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3636": {
      "op": "SWAP3"
    },
    "3637": {
      "op": "DUP4"
    },
    "3638": {
      "op": "ADD"
    },
    "3639": {
      "op": "SWAP3"
    },
    "3640": {
      "op": "ADD"
    },
    "3641": {
      "op": "PUSH3",
      "value": "0xE24"
    },
    "3645": {
      "op": "JUMP"
    },
    "3646": {
      "op": "JUMPDEST"
    },
    "3647": {
      "op": "POP"
    },
    "3648": {
      "op": "SWAP2"
    },
    "3649": {
      "op": "SWAP6"
    },
    "3650": {
      "op": "SWAP5"
    },
    "3651": {
      "op": "POP"
    },
    "3652": {
      "op": "POP"
    },
    "3653": {
      "op": "POP"
    },
    "3654": {
      "op": "POP"
    },
    "3655": {
      "op": "POP"
    },
    "3656": {
      "jump": "o",
      "op": "JUMP"
    },
    "3657": {
      "op": "JUMPDEST"
    },
    "3658": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3660": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3662": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3664": {
      "op": "SHL"
    },
    "3665": {
      "op": "SUB"
    },
    "3666": {
      "op": "DUP2"
    },
    "3667": {
      "op": "AND"
    },
    "3668": {
      "op": "DUP2"
    },
    "3669": {
      "op": "EQ"
    },
    "3670": {
      "op": "PUSH3",
      "value": "0xB58"
    },
    "3674": {
      "op": "JUMPI"
    },
    "3675": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3677": {
      "op": "DUP1"
    },
    "3678": {
      "op": "REVERT"
    },
    "3679": {
      "op": "JUMPDEST"
    },
    "3680": {
      "op": "DUP1"
    },
    "3681": {
      "op": "CALLDATALOAD"
    },
    "3682": {
      "op": "PUSH3",
      "value": "0xDCF"
    },
    "3686": {
      "op": "DUP2"
    },
    "3687": {
      "op": "PUSH3",
      "value": "0xE49"
    },
    "3691": {
      "jump": "i",
      "op": "JUMP"
    },
    "3692": {
      "op": "JUMPDEST"
    },
    "3693": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3695": {
      "op": "DUP3"
    },
    "3696": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3698": {
      "op": "DUP4"
    },
    "3699": {
      "op": "ADD"
    },
    "3700": {
      "op": "SLT"
    },
    "3701": {
      "op": "PUSH3",
      "value": "0xE7E"
    },
    "3705": {
      "op": "JUMPI"
    },
    "3706": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3708": {
      "op": "DUP1"
    },
    "3709": {
      "op": "REVERT"
    },
    "3710": {
      "op": "JUMPDEST"
    },
    "3711": {
      "op": "DUP2"
    },
    "3712": {
      "op": "CALLDATALOAD"
    },
    "3713": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3715": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "3724": {
      "op": "DUP3"
    },
    "3725": {
      "op": "GT"
    },
    "3726": {
      "op": "ISZERO"
    },
    "3727": {
      "op": "PUSH3",
      "value": "0xE9D"
    },
    "3731": {
      "op": "JUMPI"
    },
    "3732": {
      "op": "PUSH3",
      "value": "0xE9D"
    },
    "3736": {
      "op": "PUSH3",
      "value": "0xCFD"
    },
    "3740": {
      "jump": "i",
      "op": "JUMP"
    },
    "3741": {
      "op": "JUMPDEST"
    },
    "3742": {
      "op": "DUP2"
    },
    "3743": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "3745": {
      "op": "SHL"
    },
    "3746": {
      "op": "PUSH3",
      "value": "0xEAE"
    },
    "3750": {
      "op": "DUP3"
    },
    "3751": {
      "op": "DUP3"
    },
    "3752": {
      "op": "ADD"
    },
    "3753": {
      "op": "PUSH3",
      "value": "0xD13"
    },
    "3757": {
      "jump": "i",
      "op": "JUMP"
    },
    "3758": {
      "op": "JUMPDEST"
    },
    "3759": {
      "op": "SWAP3"
    },
    "3760": {
      "op": "DUP4"
    },
    "3761": {
      "op": "MSTORE"
    },
    "3762": {
      "op": "DUP5"
    },
    "3763": {
      "op": "DUP2"
    },
    "3764": {
      "op": "ADD"
    },
    "3765": {
      "op": "DUP3"
    },
    "3766": {
      "op": "ADD"
    },
    "3767": {
      "op": "SWAP3"
    },
    "3768": {
      "op": "DUP3"
    },
    "3769": {
      "op": "DUP2"
    },
    "3770": {
      "op": "ADD"
    },
    "3771": {
      "op": "SWAP1"
    },
    "3772": {
      "op": "DUP8"
    },
    "3773": {
      "op": "DUP6"
    },
    "3774": {
      "op": "GT"
    },
    "3775": {
      "op": "ISZERO"
    },
    "3776": {
      "op": "PUSH3",
      "value": "0xEC9"
    },
    "3780": {
      "op": "JUMPI"
    },
    "3781": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3783": {
      "op": "DUP1"
    },
    "3784": {
      "op": "REVERT"
    },
    "3785": {
      "op": "JUMPDEST"
    },
    "3786": {
      "op": "DUP4"
    },
    "3787": {
      "op": "DUP8"
    },
    "3788": {
      "op": "ADD"
    },
    "3789": {
      "op": "SWAP3"
    },
    "3790": {
      "op": "POP"
    },
    "3791": {
      "op": "JUMPDEST"
    },
    "3792": {
      "op": "DUP5"
    },
    "3793": {
      "op": "DUP4"
    },
    "3794": {
      "op": "LT"
    },
    "3795": {
      "op": "ISZERO"
    },
    "3796": {
      "op": "PUSH3",
      "value": "0xEF5"
    },
    "3800": {
      "op": "JUMPI"
    },
    "3801": {
      "op": "DUP3"
    },
    "3802": {
      "op": "CALLDATALOAD"
    },
    "3803": {
      "op": "PUSH3",
      "value": "0xEE5"
    },
    "3807": {
      "op": "DUP2"
    },
    "3808": {
      "op": "PUSH3",
      "value": "0xE49"
    },
    "3812": {
      "jump": "i",
      "op": "JUMP"
    },
    "3813": {
      "op": "JUMPDEST"
    },
    "3814": {
      "op": "DUP3"
    },
    "3815": {
      "op": "MSTORE"
    },
    "3816": {
      "op": "SWAP2"
    },
    "3817": {
      "op": "DUP4"
    },
    "3818": {
      "op": "ADD"
    },
    "3819": {
      "op": "SWAP2"
    },
    "3820": {
      "op": "SWAP1"
    },
    "3821": {
      "op": "DUP4"
    },
    "3822": {
      "op": "ADD"
    },
    "3823": {
      "op": "SWAP1"
    },
    "3824": {
      "op": "PUSH3",
      "value": "0xECF"
    },
    "3828": {
      "op": "JUMP"
    },
    "3829": {
      "op": "JUMPDEST"
    },
    "3830": {
      "op": "SWAP8"
    },
    "3831": {
      "op": "SWAP7"
    },
    "3832": {
      "op": "POP"
    },
    "3833": {
      "op": "POP"
    },
    "3834": {
      "op": "POP"
    },
    "3835": {
      "op": "POP"
    },
    "3836": {
      "op": "POP"
    },
    "3837": {
      "op": "POP"
    },
    "3838": {
      "op": "POP"
    },
    "3839": {
      "jump": "o",
      "op": "JUMP"
    },
    "3840": {
      "op": "JUMPDEST"
    },
    "3841": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3843": {
      "op": "DUP1"
    },
    "3844": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3846": {
      "op": "DUP1"
    },
    "3847": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3849": {
      "op": "DUP1"
    },
    "3850": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3852": {
      "op": "DUP1"
    },
    "3853": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3855": {
      "op": "DUP1"
    },
    "3856": {
      "op": "PUSH2",
      "value": "0x180"
    },
    "3859": {
      "op": "DUP12"
    },
    "3860": {
      "op": "DUP14"
    },
    "3861": {
      "op": "SUB"
    },
    "3862": {
      "op": "SLT"
    },
    "3863": {
      "op": "ISZERO"
    },
    "3864": {
      "op": "PUSH3",
      "value": "0xF21"
    },
    "3868": {
      "op": "JUMPI"
    },
    "3869": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3871": {
      "op": "DUP1"
    },
    "3872": {
      "op": "REVERT"
    },
    "3873": {
      "op": "JUMPDEST"
    },
    "3874": {
      "op": "DUP11"
    },
    "3875": {
      "op": "CALLDATALOAD"
    },
    "3876": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "3885": {
      "op": "DUP1"
    },
    "3886": {
      "op": "DUP3"
    },
    "3887": {
      "op": "GT"
    },
    "3888": {
      "op": "ISZERO"
    },
    "3889": {
      "op": "PUSH3",
      "value": "0xF3A"
    },
    "3893": {
      "op": "JUMPI"
    },
    "3894": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3896": {
      "op": "DUP1"
    },
    "3897": {
      "op": "REVERT"
    },
    "3898": {
      "op": "JUMPDEST"
    },
    "3899": {
      "op": "PUSH3",
      "value": "0xF48"
    },
    "3903": {
      "op": "DUP15"
    },
    "3904": {
      "op": "DUP4"
    },
    "3905": {
      "op": "DUP16"
    },
    "3906": {
      "op": "ADD"
    },
    "3907": {
      "op": "PUSH3",
      "value": "0xD47"
    },
    "3911": {
      "jump": "i",
      "op": "JUMP"
    },
    "3912": {
      "op": "JUMPDEST"
    },
    "3913": {
      "op": "SWAP12"
    },
    "3914": {
      "op": "POP"
    },
    "3915": {
      "op": "PUSH3",
      "value": "0xF58"
    },
    "3919": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3921": {
      "op": "DUP15"
    },
    "3922": {
      "op": "ADD"
    },
    "3923": {
      "op": "PUSH3",
      "value": "0xDBE"
    },
    "3927": {
      "jump": "i",
      "op": "JUMP"
    },
    "3928": {
      "op": "JUMPDEST"
    },
    "3929": {
      "op": "SWAP11"
    },
    "3930": {
      "op": "POP"
    },
    "3931": {
      "op": "PUSH3",
      "value": "0xF68"
    },
    "3935": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3937": {
      "op": "DUP15"
    },
    "3938": {
      "op": "ADD"
    },
    "3939": {
      "op": "PUSH3",
      "value": "0xDBE"
    },
    "3943": {
      "jump": "i",
      "op": "JUMP"
    },
    "3944": {
      "op": "JUMPDEST"
    },
    "3945": {
      "op": "SWAP10"
    },
    "3946": {
      "op": "POP"
    },
    "3947": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3949": {
      "op": "DUP14"
    },
    "3950": {
      "op": "ADD"
    },
    "3951": {
      "op": "CALLDATALOAD"
    },
    "3952": {
      "op": "SWAP9"
    },
    "3953": {
      "op": "POP"
    },
    "3954": {
      "op": "PUSH3",
      "value": "0xF80"
    },
    "3958": {
      "op": "DUP15"
    },
    "3959": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3961": {
      "op": "DUP16"
    },
    "3962": {
      "op": "ADD"
    },
    "3963": {
      "op": "PUSH3",
      "value": "0xDD4"
    },
    "3967": {
      "jump": "i",
      "op": "JUMP"
    },
    "3968": {
      "op": "JUMPDEST"
    },
    "3969": {
      "op": "SWAP8"
    },
    "3970": {
      "op": "POP"
    },
    "3971": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3973": {
      "op": "DUP14"
    },
    "3974": {
      "op": "ADD"
    },
    "3975": {
      "op": "CALLDATALOAD"
    },
    "3976": {
      "op": "SWAP2"
    },
    "3977": {
      "op": "POP"
    },
    "3978": {
      "op": "DUP1"
    },
    "3979": {
      "op": "DUP3"
    },
    "3980": {
      "op": "GT"
    },
    "3981": {
      "op": "ISZERO"
    },
    "3982": {
      "op": "PUSH3",
      "value": "0xF97"
    },
    "3986": {
      "op": "JUMPI"
    },
    "3987": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3989": {
      "op": "DUP1"
    },
    "3990": {
      "op": "REVERT"
    },
    "3991": {
      "op": "JUMPDEST"
    },
    "3992": {
      "op": "PUSH3",
      "value": "0xFA5"
    },
    "3996": {
      "op": "DUP15"
    },
    "3997": {
      "op": "DUP4"
    },
    "3998": {
      "op": "DUP16"
    },
    "3999": {
      "op": "ADD"
    },
    "4000": {
      "op": "PUSH3",
      "value": "0xE6C"
    },
    "4004": {
      "jump": "i",
      "op": "JUMP"
    },
    "4005": {
      "op": "JUMPDEST"
    },
    "4006": {
      "op": "SWAP7"
    },
    "4007": {
      "op": "POP"
    },
    "4008": {
      "op": "PUSH3",
      "value": "0xFB6"
    },
    "4012": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "4015": {
      "op": "DUP15"
    },
    "4016": {
      "op": "ADD"
    },
    "4017": {
      "op": "PUSH3",
      "value": "0xE5F"
    },
    "4021": {
      "jump": "i",
      "op": "JUMP"
    },
    "4022": {
      "op": "JUMPDEST"
    },
    "4023": {
      "op": "SWAP6"
    },
    "4024": {
      "op": "POP"
    },
    "4025": {
      "op": "PUSH3",
      "value": "0xFC7"
    },
    "4029": {
      "op": "PUSH2",
      "value": "0x120"
    },
    "4032": {
      "op": "DUP15"
    },
    "4033": {
      "op": "ADD"
    },
    "4034": {
      "op": "PUSH3",
      "value": "0xE5F"
    },
    "4038": {
      "jump": "i",
      "op": "JUMP"
    },
    "4039": {
      "op": "JUMPDEST"
    },
    "4040": {
      "op": "SWAP5"
    },
    "4041": {
      "op": "POP"
    },
    "4042": {
      "op": "PUSH3",
      "value": "0xFD8"
    },
    "4046": {
      "op": "PUSH2",
      "value": "0x140"
    },
    "4049": {
      "op": "DUP15"
    },
    "4050": {
      "op": "ADD"
    },
    "4051": {
      "op": "PUSH3",
      "value": "0xE5F"
    },
    "4055": {
      "jump": "i",
      "op": "JUMP"
    },
    "4056": {
      "op": "JUMPDEST"
    },
    "4057": {
      "op": "SWAP4"
    },
    "4058": {
      "op": "POP"
    },
    "4059": {
      "op": "PUSH2",
      "value": "0x160"
    },
    "4062": {
      "op": "DUP14"
    },
    "4063": {
      "op": "ADD"
    },
    "4064": {
      "op": "CALLDATALOAD"
    },
    "4065": {
      "op": "SWAP2"
    },
    "4066": {
      "op": "POP"
    },
    "4067": {
      "op": "DUP1"
    },
    "4068": {
      "op": "DUP3"
    },
    "4069": {
      "op": "GT"
    },
    "4070": {
      "op": "ISZERO"
    },
    "4071": {
      "op": "PUSH3",
      "value": "0xFF0"
    },
    "4075": {
      "op": "JUMPI"
    },
    "4076": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4078": {
      "op": "DUP1"
    },
    "4079": {
      "op": "REVERT"
    },
    "4080": {
      "op": "JUMPDEST"
    },
    "4081": {
      "op": "POP"
    },
    "4082": {
      "op": "PUSH3",
      "value": "0xFFF"
    },
    "4086": {
      "op": "DUP14"
    },
    "4087": {
      "op": "DUP3"
    },
    "4088": {
      "op": "DUP15"
    },
    "4089": {
      "op": "ADD"
    },
    "4090": {
      "op": "PUSH3",
      "value": "0xD47"
    },
    "4094": {
      "jump": "i",
      "op": "JUMP"
    },
    "4095": {
      "op": "JUMPDEST"
    },
    "4096": {
      "op": "SWAP2"
    },
    "4097": {
      "op": "POP"
    },
    "4098": {
      "op": "POP"
    },
    "4099": {
      "op": "SWAP3"
    },
    "4100": {
      "op": "SWAP6"
    },
    "4101": {
      "op": "SWAP9"
    },
    "4102": {
      "op": "SWAP12"
    },
    "4103": {
      "op": "SWAP2"
    },
    "4104": {
      "op": "SWAP5"
    },
    "4105": {
      "op": "SWAP8"
    },
    "4106": {
      "op": "SWAP11"
    },
    "4107": {
      "op": "POP"
    },
    "4108": {
      "op": "SWAP3"
    },
    "4109": {
      "op": "SWAP6"
    },
    "4110": {
      "op": "SWAP9"
    },
    "4111": {
      "op": "POP"
    },
    "4112": {
      "jump": "o",
      "op": "JUMP"
    },
    "4113": {
      "op": "JUMPDEST"
    },
    "4114": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4116": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4118": {
      "op": "DUP3"
    },
    "4119": {
      "op": "DUP5"
    },
    "4120": {
      "op": "SUB"
    },
    "4121": {
      "op": "SLT"
    },
    "4122": {
      "op": "ISZERO"
    },
    "4123": {
      "op": "PUSH3",
      "value": "0x1024"
    },
    "4127": {
      "op": "JUMPI"
    },
    "4128": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4130": {
      "op": "DUP1"
    },
    "4131": {
      "op": "REVERT"
    },
    "4132": {
      "op": "JUMPDEST"
    },
    "4133": {
      "op": "DUP2"
    },
    "4134": {
      "op": "CALLDATALOAD"
    },
    "4135": {
      "op": "PUSH3",
      "value": "0x1031"
    },
    "4139": {
      "op": "DUP2"
    },
    "4140": {
      "op": "PUSH3",
      "value": "0xE49"
    },
    "4144": {
      "jump": "i",
      "op": "JUMP"
    },
    "4145": {
      "op": "JUMPDEST"
    },
    "4146": {
      "op": "SWAP4"
    },
    "4147": {
      "op": "SWAP3"
    },
    "4148": {
      "op": "POP"
    },
    "4149": {
      "op": "POP"
    },
    "4150": {
      "op": "POP"
    },
    "4151": {
      "jump": "o",
      "op": "JUMP"
    },
    "4152": {
      "op": "JUMPDEST"
    },
    "4153": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4155": {
      "op": "DUP1"
    },
    "4156": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4158": {
      "op": "DUP1"
    },
    "4159": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4161": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4163": {
      "op": "DUP7"
    },
    "4164": {
      "op": "DUP9"
    },
    "4165": {
      "op": "SUB"
    },
    "4166": {
      "op": "SLT"
    },
    "4167": {
      "op": "ISZERO"
    },
    "4168": {
      "op": "PUSH3",
      "value": "0x1051"
    },
    "4172": {
      "op": "JUMPI"
    },
    "4173": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4175": {
      "op": "DUP1"
    },
    "4176": {
      "op": "REVERT"
    },
    "4177": {
      "op": "JUMPDEST"
    },
    "4178": {
      "op": "DUP6"
    },
    "4179": {
      "op": "CALLDATALOAD"
    },
    "4180": {
      "op": "PUSH3",
      "value": "0x105E"
    },
    "4184": {
      "op": "DUP2"
    },
    "4185": {
      "op": "PUSH3",
      "value": "0xE49"
    },
    "4189": {
      "jump": "i",
      "op": "JUMP"
    },
    "4190": {
      "op": "JUMPDEST"
    },
    "4191": {
      "op": "SWAP5"
    },
    "4192": {
      "op": "POP"
    },
    "4193": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4195": {
      "op": "DUP7"
    },
    "4196": {
      "op": "ADD"
    },
    "4197": {
      "op": "CALLDATALOAD"
    },
    "4198": {
      "op": "PUSH3",
      "value": "0x1070"
    },
    "4202": {
      "op": "DUP2"
    },
    "4203": {
      "op": "PUSH3",
      "value": "0xE49"
    },
    "4207": {
      "jump": "i",
      "op": "JUMP"
    },
    "4208": {
      "op": "JUMPDEST"
    },
    "4209": {
      "op": "SWAP4"
    },
    "4210": {
      "op": "POP"
    },
    "4211": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4213": {
      "op": "DUP7"
    },
    "4214": {
      "op": "ADD"
    },
    "4215": {
      "op": "CALLDATALOAD"
    },
    "4216": {
      "op": "PUSH3",
      "value": "0x1082"
    },
    "4220": {
      "op": "DUP2"
    },
    "4221": {
      "op": "PUSH3",
      "value": "0xE49"
    },
    "4225": {
      "jump": "i",
      "op": "JUMP"
    },
    "4226": {
      "op": "JUMPDEST"
    },
    "4227": {
      "op": "SWAP3"
    },
    "4228": {
      "op": "POP"
    },
    "4229": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4231": {
      "op": "DUP7"
    },
    "4232": {
      "op": "ADD"
    },
    "4233": {
      "op": "CALLDATALOAD"
    },
    "4234": {
      "op": "PUSH3",
      "value": "0x1094"
    },
    "4238": {
      "op": "DUP2"
    },
    "4239": {
      "op": "PUSH3",
      "value": "0xE49"
    },
    "4243": {
      "jump": "i",
      "op": "JUMP"
    },
    "4244": {
      "op": "JUMPDEST"
    },
    "4245": {
      "op": "SWAP2"
    },
    "4246": {
      "op": "POP"
    },
    "4247": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4249": {
      "op": "DUP7"
    },
    "4250": {
      "op": "ADD"
    },
    "4251": {
      "op": "CALLDATALOAD"
    },
    "4252": {
      "op": "PUSH3",
      "value": "0x10A6"
    },
    "4256": {
      "op": "DUP2"
    },
    "4257": {
      "op": "PUSH3",
      "value": "0xE49"
    },
    "4261": {
      "jump": "i",
      "op": "JUMP"
    },
    "4262": {
      "op": "JUMPDEST"
    },
    "4263": {
      "op": "DUP1"
    },
    "4264": {
      "op": "SWAP2"
    },
    "4265": {
      "op": "POP"
    },
    "4266": {
      "op": "POP"
    },
    "4267": {
      "op": "SWAP3"
    },
    "4268": {
      "op": "SWAP6"
    },
    "4269": {
      "op": "POP"
    },
    "4270": {
      "op": "SWAP3"
    },
    "4271": {
      "op": "SWAP6"
    },
    "4272": {
      "op": "SWAP1"
    },
    "4273": {
      "op": "SWAP4"
    },
    "4274": {
      "op": "POP"
    },
    "4275": {
      "jump": "o",
      "op": "JUMP"
    },
    "4276": {
      "op": "JUMPDEST"
    },
    "4277": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4279": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4281": {
      "op": "DUP3"
    },
    "4282": {
      "op": "DUP5"
    },
    "4283": {
      "op": "SUB"
    },
    "4284": {
      "op": "SLT"
    },
    "4285": {
      "op": "ISZERO"
    },
    "4286": {
      "op": "PUSH3",
      "value": "0x10C7"
    },
    "4290": {
      "op": "JUMPI"
    },
    "4291": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4293": {
      "op": "DUP1"
    },
    "4294": {
      "op": "REVERT"
    },
    "4295": {
      "op": "JUMPDEST"
    },
    "4296": {
      "op": "POP"
    },
    "4297": {
      "op": "CALLDATALOAD"
    },
    "4298": {
      "op": "SWAP2"
    },
    "4299": {
      "op": "SWAP1"
    },
    "4300": {
      "op": "POP"
    },
    "4301": {
      "jump": "o",
      "op": "JUMP"
    },
    "4302": {
      "op": "JUMPDEST"
    },
    "4303": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4308": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4310": {
      "op": "SHL"
    },
    "4311": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4313": {
      "op": "MSTORE"
    },
    "4314": {
      "op": "PUSH1",
      "value": "0x32"
    },
    "4316": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4318": {
      "op": "MSTORE"
    },
    "4319": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4321": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4323": {
      "op": "REVERT"
    },
    "4324": {
      "op": "JUMPDEST"
    },
    "4325": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4327": {
      "op": "DUP2"
    },
    "4328": {
      "op": "MLOAD"
    },
    "4329": {
      "op": "DUP1"
    },
    "4330": {
      "op": "DUP5"
    },
    "4331": {
      "op": "MSTORE"
    },
    "4332": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4334": {
      "op": "JUMPDEST"
    },
    "4335": {
      "op": "DUP2"
    },
    "4336": {
      "op": "DUP2"
    },
    "4337": {
      "op": "LT"
    },
    "4338": {
      "op": "ISZERO"
    },
    "4339": {
      "op": "PUSH3",
      "value": "0x110C"
    },
    "4343": {
      "op": "JUMPI"
    },
    "4344": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4346": {
      "op": "DUP2"
    },
    "4347": {
      "op": "DUP6"
    },
    "4348": {
      "op": "ADD"
    },
    "4349": {
      "op": "DUP2"
    },
    "4350": {
      "op": "ADD"
    },
    "4351": {
      "op": "MLOAD"
    },
    "4352": {
      "op": "DUP7"
    },
    "4353": {
      "op": "DUP4"
    },
    "4354": {
      "op": "ADD"
    },
    "4355": {
      "op": "DUP3"
    },
    "4356": {
      "op": "ADD"
    },
    "4357": {
      "op": "MSTORE"
    },
    "4358": {
      "op": "ADD"
    },
    "4359": {
      "op": "PUSH3",
      "value": "0x10EE"
    },
    "4363": {
      "op": "JUMP"
    },
    "4364": {
      "op": "JUMPDEST"
    },
    "4365": {
      "op": "DUP2"
    },
    "4366": {
      "op": "DUP2"
    },
    "4367": {
      "op": "GT"
    },
    "4368": {
      "op": "ISZERO"
    },
    "4369": {
      "op": "PUSH3",
      "value": "0x111F"
    },
    "4373": {
      "op": "JUMPI"
    },
    "4374": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4376": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4378": {
      "op": "DUP4"
    },
    "4379": {
      "op": "DUP8"
    },
    "4380": {
      "op": "ADD"
    },
    "4381": {
      "op": "ADD"
    },
    "4382": {
      "op": "MSTORE"
    },
    "4383": {
      "op": "JUMPDEST"
    },
    "4384": {
      "op": "POP"
    },
    "4385": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4387": {
      "op": "ADD"
    },
    "4388": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4390": {
      "op": "NOT"
    },
    "4391": {
      "op": "AND"
    },
    "4392": {
      "op": "SWAP3"
    },
    "4393": {
      "op": "SWAP1"
    },
    "4394": {
      "op": "SWAP3"
    },
    "4395": {
      "op": "ADD"
    },
    "4396": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4398": {
      "op": "ADD"
    },
    "4399": {
      "op": "SWAP3"
    },
    "4400": {
      "op": "SWAP2"
    },
    "4401": {
      "op": "POP"
    },
    "4402": {
      "op": "POP"
    },
    "4403": {
      "jump": "o",
      "op": "JUMP"
    },
    "4404": {
      "op": "JUMPDEST"
    },
    "4405": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4407": {
      "op": "PUSH2",
      "value": "0x160"
    },
    "4410": {
      "op": "DUP1"
    },
    "4411": {
      "op": "DUP4"
    },
    "4412": {
      "op": "MSTORE"
    },
    "4413": {
      "op": "PUSH3",
      "value": "0x114A"
    },
    "4417": {
      "op": "DUP2"
    },
    "4418": {
      "op": "DUP5"
    },
    "4419": {
      "op": "ADD"
    },
    "4420": {
      "op": "DUP16"
    },
    "4421": {
      "op": "PUSH3",
      "value": "0x10E4"
    },
    "4425": {
      "jump": "i",
      "op": "JUMP"
    },
    "4426": {
      "op": "JUMPDEST"
    },
    "4427": {
      "op": "DUP14"
    },
    "4428": {
      "op": "ISZERO"
    },
    "4429": {
      "op": "ISZERO"
    },
    "4430": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4432": {
      "op": "DUP6"
    },
    "4433": {
      "op": "ADD"
    },
    "4434": {
      "op": "MSTORE"
    },
    "4435": {
      "op": "DUP13"
    },
    "4436": {
      "op": "ISZERO"
    },
    "4437": {
      "op": "ISZERO"
    },
    "4438": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4440": {
      "op": "DUP6"
    },
    "4441": {
      "op": "ADD"
    },
    "4442": {
      "op": "MSTORE"
    },
    "4443": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4445": {
      "op": "DUP5"
    },
    "4446": {
      "op": "ADD"
    },
    "4447": {
      "op": "DUP13"
    },
    "4448": {
      "op": "SWAP1"
    },
    "4449": {
      "op": "MSTORE"
    },
    "4450": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4452": {
      "op": "DUP5"
    },
    "4453": {
      "op": "ADD"
    },
    "4454": {
      "op": "DUP12"
    },
    "4455": {
      "op": "SWAP1"
    },
    "4456": {
      "op": "MSTORE"
    },
    "4457": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4459": {
      "op": "DUP5"
    },
    "4460": {
      "op": "ADD"
    },
    "4461": {
      "op": "DUP11"
    },
    "4462": {
      "op": "SWAP1"
    },
    "4463": {
      "op": "MSTORE"
    },
    "4464": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "4466": {
      "op": "DUP5"
    },
    "4467": {
      "op": "ADD"
    },
    "4468": {
      "op": "DUP10"
    },
    "4469": {
      "op": "SWAP1"
    },
    "4470": {
      "op": "MSTORE"
    },
    "4471": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4473": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4475": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4477": {
      "op": "SHL"
    },
    "4478": {
      "op": "SUB"
    },
    "4479": {
      "op": "DUP9"
    },
    "4480": {
      "op": "DUP2"
    },
    "4481": {
      "op": "AND"
    },
    "4482": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4484": {
      "op": "DUP7"
    },
    "4485": {
      "op": "ADD"
    },
    "4486": {
      "op": "MSTORE"
    },
    "4487": {
      "op": "DUP8"
    },
    "4488": {
      "op": "DUP2"
    },
    "4489": {
      "op": "AND"
    },
    "4490": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "4493": {
      "op": "DUP7"
    },
    "4494": {
      "op": "ADD"
    },
    "4495": {
      "op": "MSTORE"
    },
    "4496": {
      "op": "DUP7"
    },
    "4497": {
      "op": "AND"
    },
    "4498": {
      "op": "PUSH2",
      "value": "0x120"
    },
    "4501": {
      "op": "DUP6"
    },
    "4502": {
      "op": "ADD"
    },
    "4503": {
      "op": "MSTORE"
    },
    "4504": {
      "op": "DUP4"
    },
    "4505": {
      "op": "DUP2"
    },
    "4506": {
      "op": "SUB"
    },
    "4507": {
      "op": "PUSH2",
      "value": "0x140"
    },
    "4510": {
      "op": "DUP6"
    },
    "4511": {
      "op": "ADD"
    },
    "4512": {
      "op": "MSTORE"
    },
    "4513": {
      "op": "SWAP1"
    },
    "4514": {
      "op": "POP"
    },
    "4515": {
      "op": "PUSH3",
      "value": "0x11AE"
    },
    "4519": {
      "op": "DUP2"
    },
    "4520": {
      "op": "DUP6"
    },
    "4521": {
      "op": "PUSH3",
      "value": "0x10E4"
    },
    "4525": {
      "jump": "i",
      "op": "JUMP"
    },
    "4526": {
      "op": "JUMPDEST"
    },
    "4527": {
      "op": "SWAP15"
    },
    "4528": {
      "op": "SWAP14"
    },
    "4529": {
      "op": "POP"
    },
    "4530": {
      "op": "POP"
    },
    "4531": {
      "op": "POP"
    },
    "4532": {
      "op": "POP"
    },
    "4533": {
      "op": "POP"
    },
    "4534": {
      "op": "POP"
    },
    "4535": {
      "op": "POP"
    },
    "4536": {
      "op": "POP"
    },
    "4537": {
      "op": "POP"
    },
    "4538": {
      "op": "POP"
    },
    "4539": {
      "op": "POP"
    },
    "4540": {
      "op": "POP"
    },
    "4541": {
      "op": "POP"
    },
    "4542": {
      "op": "POP"
    },
    "4543": {
      "jump": "o",
      "op": "JUMP"
    },
    "4544": {
      "op": "JUMPDEST"
    },
    "4545": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4547": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4549": {
      "op": "DUP3"
    },
    "4550": {
      "op": "DUP5"
    },
    "4551": {
      "op": "SUB"
    },
    "4552": {
      "op": "SLT"
    },
    "4553": {
      "op": "ISZERO"
    },
    "4554": {
      "op": "PUSH3",
      "value": "0x11D3"
    },
    "4558": {
      "op": "JUMPI"
    },
    "4559": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4561": {
      "op": "DUP1"
    },
    "4562": {
      "op": "REVERT"
    },
    "4563": {
      "op": "JUMPDEST"
    },
    "4564": {
      "op": "DUP2"
    },
    "4565": {
      "op": "MLOAD"
    },
    "4566": {
      "op": "PUSH3",
      "value": "0x1031"
    },
    "4570": {
      "op": "DUP2"
    },
    "4571": {
      "op": "PUSH3",
      "value": "0xE49"
    },
    "4575": {
      "jump": "i",
      "op": "JUMP"
    },
    "4576": {
      "op": "JUMPDEST"
    },
    "4577": {
      "op": "DUP1"
    },
    "4578": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4580": {
      "op": "JUMPDEST"
    },
    "4581": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "4583": {
      "op": "DUP2"
    },
    "4584": {
      "op": "LT"
    },
    "4585": {
      "op": "ISZERO"
    },
    "4586": {
      "op": "PUSH3",
      "value": "0x120E"
    },
    "4590": {
      "op": "JUMPI"
    },
    "4591": {
      "op": "DUP2"
    },
    "4592": {
      "op": "MLOAD"
    },
    "4593": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4595": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4597": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4599": {
      "op": "SHL"
    },
    "4600": {
      "op": "SUB"
    },
    "4601": {
      "op": "AND"
    },
    "4602": {
      "op": "DUP5"
    },
    "4603": {
      "op": "MSTORE"
    },
    "4604": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4606": {
      "op": "SWAP4"
    },
    "4607": {
      "op": "DUP5"
    },
    "4608": {
      "op": "ADD"
    },
    "4609": {
      "op": "SWAP4"
    },
    "4610": {
      "op": "SWAP1"
    },
    "4611": {
      "op": "SWAP2"
    },
    "4612": {
      "op": "ADD"
    },
    "4613": {
      "op": "SWAP1"
    },
    "4614": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4616": {
      "op": "ADD"
    },
    "4617": {
      "op": "PUSH3",
      "value": "0x11E4"
    },
    "4621": {
      "op": "JUMP"
    },
    "4622": {
      "op": "JUMPDEST"
    },
    "4623": {
      "op": "POP"
    },
    "4624": {
      "op": "POP"
    },
    "4625": {
      "op": "POP"
    },
    "4626": {
      "op": "POP"
    },
    "4627": {
      "jump": "o",
      "op": "JUMP"
    },
    "4628": {
      "op": "JUMPDEST"
    },
    "4629": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4631": {
      "op": "DUP2"
    },
    "4632": {
      "op": "MLOAD"
    },
    "4633": {
      "op": "DUP1"
    },
    "4634": {
      "op": "DUP5"
    },
    "4635": {
      "op": "MSTORE"
    },
    "4636": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4638": {
      "op": "DUP1"
    },
    "4639": {
      "op": "DUP6"
    },
    "4640": {
      "op": "ADD"
    },
    "4641": {
      "op": "SWAP5"
    },
    "4642": {
      "op": "POP"
    },
    "4643": {
      "op": "DUP1"
    },
    "4644": {
      "op": "DUP5"
    },
    "4645": {
      "op": "ADD"
    },
    "4646": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4648": {
      "op": "JUMPDEST"
    },
    "4649": {
      "op": "DUP4"
    },
    "4650": {
      "op": "DUP2"
    },
    "4651": {
      "op": "LT"
    },
    "4652": {
      "op": "ISZERO"
    },
    "4653": {
      "op": "PUSH3",
      "value": "0x124F"
    },
    "4657": {
      "op": "JUMPI"
    },
    "4658": {
      "op": "DUP2"
    },
    "4659": {
      "op": "MLOAD"
    },
    "4660": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4662": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4664": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4666": {
      "op": "SHL"
    },
    "4667": {
      "op": "SUB"
    },
    "4668": {
      "op": "AND"
    },
    "4669": {
      "op": "DUP8"
    },
    "4670": {
      "op": "MSTORE"
    },
    "4671": {
      "op": "SWAP6"
    },
    "4672": {
      "op": "DUP3"
    },
    "4673": {
      "op": "ADD"
    },
    "4674": {
      "op": "SWAP6"
    },
    "4675": {
      "op": "SWAP1"
    },
    "4676": {
      "op": "DUP3"
    },
    "4677": {
      "op": "ADD"
    },
    "4678": {
      "op": "SWAP1"
    },
    "4679": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4681": {
      "op": "ADD"
    },
    "4682": {
      "op": "PUSH3",
      "value": "0x1228"
    },
    "4686": {
      "op": "JUMP"
    },
    "4687": {
      "op": "JUMPDEST"
    },
    "4688": {
      "op": "POP"
    },
    "4689": {
      "op": "SWAP5"
    },
    "4690": {
      "op": "SWAP6"
    },
    "4691": {
      "op": "SWAP5"
    },
    "4692": {
      "op": "POP"
    },
    "4693": {
      "op": "POP"
    },
    "4694": {
      "op": "POP"
    },
    "4695": {
      "op": "POP"
    },
    "4696": {
      "op": "POP"
    },
    "4697": {
      "jump": "o",
      "op": "JUMP"
    },
    "4698": {
      "op": "JUMPDEST"
    },
    "4699": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4701": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4703": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4705": {
      "op": "SHL"
    },
    "4706": {
      "op": "SUB"
    },
    "4707": {
      "op": "DUP10"
    },
    "4708": {
      "op": "AND"
    },
    "4709": {
      "op": "DUP2"
    },
    "4710": {
      "op": "MSTORE"
    },
    "4711": {
      "op": "PUSH2",
      "value": "0x1C0"
    },
    "4714": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4716": {
      "op": "DUP1"
    },
    "4717": {
      "op": "DUP4"
    },
    "4718": {
      "op": "ADD"
    },
    "4719": {
      "op": "DUP3"
    },
    "4720": {
      "op": "SWAP1"
    },
    "4721": {
      "op": "MSTORE"
    },
    "4722": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4724": {
      "op": "SWAP2"
    },
    "4725": {
      "op": "SWAP1"
    },
    "4726": {
      "op": "PUSH3",
      "value": "0x1283"
    },
    "4730": {
      "op": "DUP5"
    },
    "4731": {
      "op": "DUP4"
    },
    "4732": {
      "op": "ADD"
    },
    "4733": {
      "op": "DUP13"
    },
    "4734": {
      "op": "PUSH3",
      "value": "0x10E4"
    },
    "4738": {
      "jump": "i",
      "op": "JUMP"
    },
    "4739": {
      "op": "JUMPDEST"
    },
    "4740": {
      "op": "SWAP2"
    },
    "4741": {
      "op": "POP"
    },
    "4742": {
      "op": "DUP10"
    },
    "4743": {
      "op": "ISZERO"
    },
    "4744": {
      "op": "ISZERO"
    },
    "4745": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4747": {
      "op": "DUP6"
    },
    "4748": {
      "op": "ADD"
    },
    "4749": {
      "op": "MSTORE"
    },
    "4750": {
      "op": "DUP9"
    },
    "4751": {
      "op": "ISZERO"
    },
    "4752": {
      "op": "ISZERO"
    },
    "4753": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4755": {
      "op": "DUP6"
    },
    "4756": {
      "op": "ADD"
    },
    "4757": {
      "op": "MSTORE"
    },
    "4758": {
      "op": "DUP8"
    },
    "4759": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4761": {
      "op": "DUP6"
    },
    "4762": {
      "op": "ADD"
    },
    "4763": {
      "op": "MSTORE"
    },
    "4764": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4766": {
      "op": "DUP5"
    },
    "4767": {
      "op": "ADD"
    },
    "4768": {
      "op": "DUP8"
    },
    "4769": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4771": {
      "op": "JUMPDEST"
    },
    "4772": {
      "op": "PUSH1",
      "value": "0x3"
    },
    "4774": {
      "op": "DUP2"
    },
    "4775": {
      "op": "LT"
    },
    "4776": {
      "op": "ISZERO"
    },
    "4777": {
      "op": "PUSH3",
      "value": "0x12C2"
    },
    "4781": {
      "op": "JUMPI"
    },
    "4782": {
      "op": "DUP2"
    },
    "4783": {
      "op": "MLOAD"
    },
    "4784": {
      "op": "DUP4"
    },
    "4785": {
      "op": "MSTORE"
    },
    "4786": {
      "op": "SWAP2"
    },
    "4787": {
      "op": "DUP4"
    },
    "4788": {
      "op": "ADD"
    },
    "4789": {
      "op": "SWAP2"
    },
    "4790": {
      "op": "SWAP1"
    },
    "4791": {
      "op": "DUP4"
    },
    "4792": {
      "op": "ADD"
    },
    "4793": {
      "op": "SWAP1"
    },
    "4794": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4796": {
      "op": "ADD"
    },
    "4797": {
      "op": "PUSH3",
      "value": "0x12A3"
    },
    "4801": {
      "op": "JUMP"
    },
    "4802": {
      "op": "JUMPDEST"
    },
    "4803": {
      "op": "POP"
    },
    "4804": {
      "op": "POP"
    },
    "4805": {
      "op": "POP"
    },
    "4806": {
      "op": "POP"
    },
    "4807": {
      "op": "PUSH3",
      "value": "0x12D6"
    },
    "4811": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "4814": {
      "op": "DUP5"
    },
    "4815": {
      "op": "ADD"
    },
    "4816": {
      "op": "DUP7"
    },
    "4817": {
      "op": "PUSH3",
      "value": "0x11E0"
    },
    "4821": {
      "jump": "i",
      "op": "JUMP"
    },
    "4822": {
      "op": "JUMPDEST"
    },
    "4823": {
      "op": "DUP3"
    },
    "4824": {
      "op": "DUP2"
    },
    "4825": {
      "op": "SUB"
    },
    "4826": {
      "op": "PUSH2",
      "value": "0x1A0"
    },
    "4829": {
      "op": "DUP5"
    },
    "4830": {
      "op": "ADD"
    },
    "4831": {
      "op": "MSTORE"
    },
    "4832": {
      "op": "PUSH3",
      "value": "0x12EB"
    },
    "4836": {
      "op": "DUP2"
    },
    "4837": {
      "op": "DUP6"
    },
    "4838": {
      "op": "PUSH3",
      "value": "0x1214"
    },
    "4842": {
      "jump": "i",
      "op": "JUMP"
    },
    "4843": {
      "op": "JUMPDEST"
    },
    "4844": {
      "op": "SWAP12"
    },
    "4845": {
      "op": "SWAP11"
    },
    "4846": {
      "op": "POP"
    },
    "4847": {
      "op": "POP"
    },
    "4848": {
      "op": "POP"
    },
    "4849": {
      "op": "POP"
    },
    "4850": {
      "op": "POP"
    },
    "4851": {
      "op": "POP"
    },
    "4852": {
      "op": "POP"
    },
    "4853": {
      "op": "POP"
    },
    "4854": {
      "op": "POP"
    },
    "4855": {
      "op": "POP"
    },
    "4856": {
      "op": "POP"
    },
    "4857": {
      "jump": "o",
      "op": "JUMP"
    },
    "4858": {
      "op": "JUMPDEST"
    },
    "4859": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4861": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4863": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4865": {
      "op": "SHL"
    },
    "4866": {
      "op": "SUB"
    },
    "4867": {
      "op": "DUP4"
    },
    "4868": {
      "op": "AND"
    },
    "4869": {
      "op": "DUP2"
    },
    "4870": {
      "op": "MSTORE"
    },
    "4871": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4873": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4875": {
      "op": "DUP3"
    },
    "4876": {
      "op": "ADD"
    },
    "4877": {
      "op": "DUP2"
    },
    "4878": {
      "op": "SWAP1"
    },
    "4879": {
      "op": "MSTORE"
    },
    "4880": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4882": {
      "op": "SWAP1"
    },
    "4883": {
      "op": "PUSH3",
      "value": "0x1320"
    },
    "4887": {
      "op": "SWAP1"
    },
    "4888": {
      "op": "DUP4"
    },
    "4889": {
      "op": "ADD"
    },
    "4890": {
      "op": "DUP5"
    },
    "4891": {
      "op": "PUSH3",
      "value": "0x10E4"
    },
    "4895": {
      "jump": "i",
      "op": "JUMP"
    },
    "4896": {
      "op": "JUMPDEST"
    },
    "4897": {
      "op": "SWAP5"
    },
    "4898": {
      "op": "SWAP4"
    },
    "4899": {
      "op": "POP"
    },
    "4900": {
      "op": "POP"
    },
    "4901": {
      "op": "POP"
    },
    "4902": {
      "op": "POP"
    },
    "4903": {
      "jump": "o",
      "op": "JUMP"
    },
    "4904": {
      "op": "JUMPDEST"
    },
    "4905": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4907": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4909": {
      "op": "NOT"
    },
    "4910": {
      "op": "DUP3"
    },
    "4911": {
      "op": "EQ"
    },
    "4912": {
      "op": "ISZERO"
    },
    "4913": {
      "op": "PUSH3",
      "value": "0x134B"
    },
    "4917": {
      "op": "JUMPI"
    },
    "4918": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4923": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4925": {
      "op": "SHL"
    },
    "4926": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4928": {
      "op": "MSTORE"
    },
    "4929": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "4931": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4933": {
      "op": "MSTORE"
    },
    "4934": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4936": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4938": {
      "op": "REVERT"
    },
    "4939": {
      "op": "JUMPDEST"
    },
    "4940": {
      "op": "POP"
    },
    "4941": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4943": {
      "op": "ADD"
    },
    "4944": {
      "op": "SWAP1"
    },
    "4945": {
      "jump": "o",
      "op": "JUMP"
    },
    "4946": {
      "op": "JUMPDEST"
    },
    "4947": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4949": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4951": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4953": {
      "op": "SHL"
    },
    "4954": {
      "op": "SUB"
    },
    "4955": {
      "op": "DUP5"
    },
    "4956": {
      "op": "AND"
    },
    "4957": {
      "op": "DUP2"
    },
    "4958": {
      "op": "MSTORE"
    },
    "4959": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4961": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4963": {
      "op": "DUP3"
    },
    "4964": {
      "op": "ADD"
    },
    "4965": {
      "op": "DUP2"
    },
    "4966": {
      "op": "SWAP1"
    },
    "4967": {
      "op": "MSTORE"
    },
    "4968": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4970": {
      "op": "SWAP1"
    },
    "4971": {
      "op": "PUSH3",
      "value": "0x1378"
    },
    "4975": {
      "op": "SWAP1"
    },
    "4976": {
      "op": "DUP4"
    },
    "4977": {
      "op": "ADD"
    },
    "4978": {
      "op": "DUP6"
    },
    "4979": {
      "op": "PUSH3",
      "value": "0x10E4"
    },
    "4983": {
      "jump": "i",
      "op": "JUMP"
    },
    "4984": {
      "op": "JUMPDEST"
    },
    "4985": {
      "op": "SWAP1"
    },
    "4986": {
      "op": "POP"
    },
    "4987": {
      "op": "DUP3"
    },
    "4988": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4990": {
      "op": "DUP4"
    },
    "4991": {
      "op": "ADD"
    },
    "4992": {
      "op": "MSTORE"
    },
    "4993": {
      "op": "SWAP5"
    },
    "4994": {
      "op": "SWAP4"
    },
    "4995": {
      "op": "POP"
    },
    "4996": {
      "op": "POP"
    },
    "4997": {
      "op": "POP"
    },
    "4998": {
      "op": "POP"
    },
    "4999": {
      "jump": "o",
      "op": "JUMP"
    },
    "5000": {
      "op": "JUMPDEST"
    },
    "5001": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5003": {
      "op": "DUP1"
    },
    "5004": {
      "op": "DUP3"
    },
    "5005": {
      "op": "MSTORE"
    },
    "5006": {
      "op": "PUSH1",
      "value": "0x2B"
    },
    "5008": {
      "op": "SWAP1"
    },
    "5009": {
      "op": "DUP3"
    },
    "5010": {
      "op": "ADD"
    },
    "5011": {
      "op": "MSTORE"
    },
    "5012": {
      "op": "PUSH32",
      "value": "0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069"
    },
    "5045": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5047": {
      "op": "DUP3"
    },
    "5048": {
      "op": "ADD"
    },
    "5049": {
      "op": "MSTORE"
    },
    "5050": {
      "op": "PUSH11",
      "value": "0x6E697469616C697A696E67"
    },
    "5062": {
      "op": "PUSH1",
      "value": "0xA8"
    },
    "5064": {
      "op": "SHL"
    },
    "5065": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "5067": {
      "op": "DUP3"
    },
    "5068": {
      "op": "ADD"
    },
    "5069": {
      "op": "MSTORE"
    },
    "5070": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "5072": {
      "op": "ADD"
    },
    "5073": {
      "op": "SWAP1"
    },
    "5074": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "3ba30b62b5290dfb6b112b2dbc6fb305f57858a2",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.11;\n\nimport \"@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\";\nimport \"../../interfaces/ICLHouse.sol\";\nimport \"../../interfaces/ICLFactory.sol\";\nimport \"../CLProxy/CLBeacon.sol\";\nimport \"../CLProxy/CLProxyCLH.sol\";\nimport \"../APICLH/CLHouseApi.sol\";\n\n\n/// @title Crypto League House Factory\n/// @notice Create and config CLHouses\n/// @dev This contract is the standard way to create CLH\n/// @author Leonardo Urrego\ncontract CLFactory is ICLFactory, Initializable, OwnableUpgradeable {\n    /// @notice Store the number of houses created\n    uint256 public numCLH;\n\n    uint256[10] __gapUint256;\n\n    /// @notice Contract with the CLH Constructor logic\n    address public CLLConstructorCLH;\n\n    /// @notice Contract with the functions for user management\n    address public CLLUserManagement;\n\n    /// @notice Contract with the functions for Governance\n    address public CLLGovernance;\n\n    /// @notice Contract CLHouse API\n    address public CLHAPI;\n\n    address[10] __gapAddress;\n\n    /// @notice Contract Object of the beacon (store the add)\n    /// @dev The beacon store the updated address of CLH\n    CLBeacon public beaconCLH;\n    \n    /// @notice Relation houseAddr with houseId\n    mapping( address => uint256 ) public mapIdCLH;\n    \n    /// @notice Mapping to store all the created houses\n    mapping(uint256 => ICLHouse) public mapCLH;\n\n    /// @notice Event when house is created\n    /// @param houseAddr Address of the created house\n    /// @param houseName Name of the created house\n    /// @param houseId Id of CLH of the created house\n    event evtNewCLH( address houseAddr, string houseName, uint256 houseId );\n\n    /// @notice Event when a CL Contract address is updated\n    /// @param CLCName Name of contract var\n    /// @param oldAddress Old Address value of the var\n    /// @param newAddress New Address value of the var\n    event evtUpdateCLC( string CLCName, address oldAddress, address newAddress );\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    /// @notice Config the CLFactory with the CL Logic Contracts\n    /// @param _CLLUserManagement Address Contract Logic for user management\n    /// @param _CLLGovernance Address Contract Logic for governance\n    /// @param _CLLConstructorCLH Address Contract with the Constructor logic\n    /// @param _CLHAPI Address of CLHAPI Contract\n    /// @param _beacon Address Beacon Contract\n    /// @dev The constructor create a default CLH with the houseId #0\n    function Init(\n        address _CLLUserManagement,\n        address _CLLGovernance,\n        address _CLLConstructorCLH,\n        address _CLHAPI,\n        address _beacon\n    )\n        public\n        reinitializer( __UPGRADEABLE_CLF_VERSION__ )\n    {\n        beaconCLH = CLBeacon( _beacon );\n\n        CLLUserManagement = _CLLUserManagement;\n        CLLGovernance = _CLLGovernance;\n        CLLConstructorCLH = _CLLConstructorCLH;\n        CLHAPI = _CLHAPI;\n\n        numCLH = 0;\n        mapCLH[ numCLH ] = ICLHouse( address(0) );\n        mapIdCLH[ address(0) ] = numCLH;\n\n        __Ownable_init();\n    }\n\n\n    /// @notice Deploy a new CLHouse\n    /// @param _houseName Name of the CLH\n    /// @param _housePrivate If is set to 1, the CLH is set to private\n    /// @param _houseOpen If is set to 1, the CLH is set to open\n    /// @param _govModel keccak256 hash of the governance model, see the __GOV_* constans\n    /// @param _govRules Array for goverment rules see `enum gRule`\n    /// @param _ManagerWallets Whitelist of address for invitate as managers\n    /// @param _gnosisSafe Contract address of SAFE\n    /// @param _signerWallet Wallet address of the signer for OffChain Tx\n    /// @param _signature Signature for validate OffChain Tx\n    /// @dev Some parameters wil be ignored depending on the governance model\n    function CreateCLH(\n        string memory _houseName,\n        bool _housePrivate,\n        bool _houseOpen,\n        bytes32 _govModel,\n        uint256[3] memory _govRules,\n        address[] memory _ManagerWallets,\n        address _gnosisSafe,\n        address _whiteListNFT,\n        address _signerWallet,\n        bytes memory _signature\n    ) \n        public\n    {\n        address houseOwner = msg.sender;\n\n        require( \n            __GOV_DICTATORSHIP__ == _govModel ||\n            __GOV_COMMITTEE__ == _govModel ||\n            __GOV_SIMPLE_MAJORITY__ == _govModel ,\n            \"Invalid Governance Type\"\n        );\n\n        if( _signerWallet != address(0) ) {\n            require( _signature.length == 65, \"CreateCLH: Bad signature length\" );\n            \n            require(\n                _signerWallet == CLHouseApi( CLHAPI ).SignerOCNewCLH(\n                    _houseName,\n                    _housePrivate,\n                    _houseOpen,\n                    _govModel,\n                    _govRules[0],\n                    _govRules[1],\n                    _govRules[2],\n                    _whiteListNFT,\n                    _ManagerWallets[0],\n                    address(this),\n                    _signature\n                ),\n                \"CreateCLH: Invalid Signature\"\n            );\n\n            houseOwner = _signerWallet;\n        }\n\n        CLProxyCLH pxyCLH = new CLProxyCLH(\n            address( beaconCLH ),\n            abi.encodeWithSignature(\n                \"Init(address,string,bool,bool,bytes32,uint256[3],address[5],address[])\",\n                houseOwner, \n                _houseName,\n                _housePrivate,\n                _houseOpen,\n                _govModel,\n                _govRules,\n                [ CLLConstructorCLH, address(this), CLHAPI, _gnosisSafe, _whiteListNFT ],\n                _ManagerWallets\n            )\n        );\n\n        numCLH++;\n        mapCLH[ numCLH ] = ICLHouse( address( pxyCLH ) );\n        mapIdCLH[ address( pxyCLH ) ] = numCLH;\n\n        emit evtNewCLH( address( pxyCLH ), _houseName, numCLH );\n    }\n\n\n    /// @notice Get the address of the CLH contract logic\n    function getCLHImplementation() external view returns (address) {\n        return beaconCLH.implementation();\n    }\n\n    /// @notice Update the CLLConstructorCLH contract Address\n    function UpdateCLLConstructorCLH( address _CLLConstructorCLH ) external onlyOwner {\n        address oldAddr = CLLConstructorCLH;\n        CLLConstructorCLH = _CLLConstructorCLH;\n        emit evtUpdateCLC( \"CLLConstructorCLH\", oldAddr, _CLLConstructorCLH );\n    }\n\n    /// @notice Update the CLLUserManagement contract Address\n    function UpdateCLLUserManagement( address _CLLUserManagement ) external onlyOwner {\n        address oldAddr = CLLUserManagement;\n        CLLUserManagement = _CLLUserManagement;\n        emit evtUpdateCLC( \"CLLUserManagement\", oldAddr, _CLLUserManagement );\n    }\n\n    /// @notice Update the CLLGovernance contract Address\n    function UpdateCLLGovernance( address _CLLGovernance ) external onlyOwner {\n        address oldAddr = CLLGovernance;\n        CLLGovernance = _CLLGovernance;\n        emit evtUpdateCLC( \"CLLGovernance\", oldAddr, _CLLGovernance );\n    }\n\n    /// @notice Update the CLHAPI contract Address\n    function UpdateCLHAPI( address _CLHAPI ) external onlyOwner {\n        address oldAddr = CLHAPI;\n        CLHAPI = _CLHAPI;\n        emit evtUpdateCLC( \"CLHAPI\", oldAddr, _CLHAPI );\n    }\n}",
  "sourceMap": "496:6852:49:-:0;;;2063:53;;;;;;;;;-1:-1:-1;2087:22:49;:20;:22::i;:::-;496:6852;;5388:279:1;5456:13;;;;;;;5455:14;5447:66;;;;-1:-1:-1;;;5447:66:1;;216:2:62;5447:66:1;;;198:21:62;255:2;235:18;;;228:30;294:34;274:18;;;267:62;-1:-1:-1;;;345:18:62;;;338:37;392:19;;5447:66:1;;;;;;;;5527:12;;5542:15;5527:12;;;:30;5523:138;;;5573:12;:30;;-1:-1:-1;;5573:30:1;5588:15;5573:30;;;;;;5622:28;;564:36:62;;;5622:28:1;;552:2:62;537:18;5622:28:1;;;;;;;5523:138;5388:279::o;422:184:62:-;496:6852:49;;;;;;",
  "sourcePath": "contracts/CLFactory/CLFactory.sol",
  "type": "contract"
}