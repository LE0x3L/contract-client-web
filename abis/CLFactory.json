{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "houseAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "houseName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "houseId",
          "type": "uint256"
        }
      ],
      "name": "evtHouseCreation",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CLHAPI",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLLConstructorCLH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLLGovernance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLLUserManagement",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_houseName",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_housePrivate",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_houseOpen",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "_govModel",
          "type": "bytes32"
        },
        {
          "internalType": "uint8[3]",
          "name": "_govRules",
          "type": "uint8[3]"
        },
        {
          "internalType": "address[]",
          "name": "_ManagerWallets",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_gnosisSafe",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_signerWallet",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "CreateCLH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_CLLUserManagement",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_CLLGovernance",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_CLLConstructorCLH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_CLHAPI",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_beacon",
          "type": "address"
        }
      ],
      "name": "Init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beaconCLH",
      "outputs": [
        {
          "internalType": "contract CLBeacon",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mapCLH",
      "outputs": [
        {
          "internalType": "contract ICLHouse",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mapIdCLH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numCLH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "14": "/home/trecetp/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.7.3/contracts/proxy/utils/Initializable.sol",
    "41": "contracts/CLHouse/CLFactory.sol",
    "44": "contracts/CLHouse/CLHouseApi.sol",
    "48": "contracts/CLHouse/CLProxy.sol",
    "50": "contracts/CLHouse/CLTypes.sol",
    "52": "contracts/CLHouse/ICLFactory.sol",
    "53": "contracts/CLHouse/ICLHouse.sol"
  },
  "ast": {
    "absolutePath": "contracts/CLHouse/CLFactory.sol",
    "exportedSymbols": {
      "Address": [
        9455
      ],
      "BeaconProxy": [
        5847
      ],
      "CLBeacon": [
        4417
      ],
      "CLFactory": [
        300
      ],
      "CLHouseApi": [
        1753
      ],
      "CLProxyAdmin": [
        4405
      ],
      "CLProxyCLF": [
        4435
      ],
      "CLProxyCLH": [
        4450
      ],
      "Context": [
        10097
      ],
      "DebugDLGTCLL": [
        6341
      ],
      "ERC1967Proxy": [
        11349
      ],
      "ERC1967Upgrade": [
        9773
      ],
      "IBeacon": [
        9835
      ],
      "ICLFactory": [
        5158
      ],
      "ICLHouse": [
        5389
      ],
      "IERC1822Proxiable": [
        11252
      ],
      "Initializable": [
        5781
      ],
      "InvalidGovernanceType": [
        6335
      ],
      "Ownable": [
        6635
      ],
      "Proxy": [
        9825
      ],
      "ProxyAdmin": [
        6058
      ],
      "StorageSlot": [
        11312
      ],
      "TransparentUpgradeableProxy": [
        9983
      ],
      "UpgradeableBeacon": [
        5922
      ],
      "__CONTRACT_NAME_HASH__": [
        6367
      ],
      "__CONTRACT_VERSION_HASH__": [
        6372
      ],
      "__GOV_COMMITTEE__": [
        6357
      ],
      "__GOV_DICTATORSHIP__": [
        6352
      ],
      "__GOV_SIMPLE_MAJORITY__": [
        6362
      ],
      "__STR_EIP712DOMAIN_HASH__": [
        6380
      ],
      "__STR_OCDELUSER_HASH__": [
        6412
      ],
      "__STR_OCINVIT_HASH__": [
        6388
      ],
      "__STR_OCNEWCLH_HASH__": [
        6428
      ],
      "__STR_OCNEWUSER_HASH__": [
        6404
      ],
      "__STR_OCREQUEST_HASH__": [
        6420
      ],
      "__STR_OCVOTE_HASH__": [
        6396
      ],
      "__UPGRADEABLE_CLF_VERSION__": [
        6347
      ],
      "__UPGRADEABLE_CLH_VERSION__": [
        6344
      ],
      "assetsEvent": [
        6442
      ],
      "eCLC": [
        6465
      ],
      "gRule": [
        6460
      ],
      "proposalEvent": [
        6446
      ],
      "proposalType": [
        6456
      ],
      "strDataAddUser": [
        6510
      ],
      "strDataGovRules": [
        6522
      ],
      "strDataTxAssets": [
        6519
      ],
      "strProposal": [
        6496
      ],
      "strUser": [
        6476
      ],
      "strVote": [
        6503
      ],
      "userEvent": [
        6435
      ]
    },
    "id": 301,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".11"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:24:41"
      },
      {
        "absolutePath": "/home/trecetp/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.7.3/contracts/proxy/utils/Initializable.sol",
        "file": "@openzeppelin/contracts/proxy/utils/Initializable.sol",
        "id": 2,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 301,
        "sourceUnit": 5782,
        "src": "58:63:41",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/CLHouse/ICLHouse.sol",
        "file": "./ICLHouse.sol",
        "id": 3,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 301,
        "sourceUnit": 5390,
        "src": "122:24:41",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/CLHouse/CLProxy.sol",
        "file": "./CLProxy.sol",
        "id": 4,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 301,
        "sourceUnit": 4451,
        "src": "147:23:41",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/CLHouse/CLHouseApi.sol",
        "file": "./CLHouseApi.sol",
        "id": 5,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 301,
        "sourceUnit": 1754,
        "src": "171:26:41",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/CLHouse/ICLFactory.sol",
        "file": "./ICLFactory.sol",
        "id": 6,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 301,
        "sourceUnit": 5159,
        "src": "198:26:41",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 8,
              "name": "ICLFactory",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 5158,
              "src": "416:10:41"
            },
            "id": 9,
            "nodeType": "InheritanceSpecifier",
            "src": "416:10:41"
          },
          {
            "baseName": {
              "id": 10,
              "name": "Initializable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 5781,
              "src": "428:13:41"
            },
            "id": 11,
            "nodeType": "InheritanceSpecifier",
            "src": "428:13:41"
          }
        ],
        "canonicalName": "CLFactory",
        "contractDependencies": [
          4450
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 7,
          "nodeType": "StructuredDocumentation",
          "src": "227:167:41",
          "text": "@title Crypto League House Factory\n @notice Config, create and deploy CLHouses\n @dev This contract is the only way to create CLH\n @author Leonardo Urrego"
        },
        "fullyImplemented": true,
        "id": 300,
        "linearizedBaseContracts": [
          300,
          5781,
          5158
        ],
        "name": "CLFactory",
        "nameLocation": "403:9:41",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "baseFunctions": [
              5115
            ],
            "constant": false,
            "documentation": {
              "id": 12,
              "nodeType": "StructuredDocumentation",
              "src": "448:46:41",
              "text": "@notice Store the number of houses created"
            },
            "functionSelector": "ee7a7d1b",
            "id": 14,
            "mutability": "mutable",
            "name": "numCLH",
            "nameLocation": "514:6:41",
            "nodeType": "VariableDeclaration",
            "scope": 300,
            "src": "499:21:41",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 13,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "499:7:41",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 18,
            "mutability": "mutable",
            "name": "__gapUint256",
            "nameLocation": "539:12:41",
            "nodeType": "VariableDeclaration",
            "scope": 300,
            "src": "527:24:41",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$10_storage",
              "typeString": "uint256[10]"
            },
            "typeName": {
              "baseType": {
                "id": 15,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "527:7:41",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 17,
              "length": {
                "hexValue": "3130",
                "id": 16,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "535:2:41",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_10_by_1",
                  "typeString": "int_const 10"
                },
                "value": "10"
              },
              "nodeType": "ArrayTypeName",
              "src": "527:11:41",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$10_storage_ptr",
                "typeString": "uint256[10]"
              }
            },
            "visibility": "internal"
          },
          {
            "baseFunctions": [
              5086
            ],
            "constant": false,
            "documentation": {
              "id": 19,
              "nodeType": "StructuredDocumentation",
              "src": "558:51:41",
              "text": "@notice Contract with the CLH Constructor logic"
            },
            "functionSelector": "594034e3",
            "id": 21,
            "mutability": "mutable",
            "name": "CLLConstructorCLH",
            "nameLocation": "629:17:41",
            "nodeType": "VariableDeclaration",
            "scope": 300,
            "src": "614:32:41",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 20,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "614:7:41",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5091
            ],
            "constant": false,
            "documentation": {
              "id": 22,
              "nodeType": "StructuredDocumentation",
              "src": "653:59:41",
              "text": "@notice Contract with the functions for user management"
            },
            "functionSelector": "529382d5",
            "id": 24,
            "mutability": "mutable",
            "name": "CLLUserManagement",
            "nameLocation": "732:17:41",
            "nodeType": "VariableDeclaration",
            "scope": 300,
            "src": "717:32:41",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 23,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "717:7:41",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5096
            ],
            "constant": false,
            "documentation": {
              "id": 25,
              "nodeType": "StructuredDocumentation",
              "src": "756:54:41",
              "text": "@notice Contract with the functions for Governance"
            },
            "functionSelector": "a327ab69",
            "id": 27,
            "mutability": "mutable",
            "name": "CLLGovernance",
            "nameLocation": "830:13:41",
            "nodeType": "VariableDeclaration",
            "scope": 300,
            "src": "815:28:41",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 26,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "815:7:41",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5081
            ],
            "constant": false,
            "documentation": {
              "id": 28,
              "nodeType": "StructuredDocumentation",
              "src": "850:32:41",
              "text": "@notice Contract CLHouse API"
            },
            "functionSelector": "10790717",
            "id": 30,
            "mutability": "mutable",
            "name": "CLHAPI",
            "nameLocation": "902:6:41",
            "nodeType": "VariableDeclaration",
            "scope": 300,
            "src": "887:21:41",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 29,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "887:7:41",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 34,
            "mutability": "mutable",
            "name": "__gapAddress",
            "nameLocation": "927:12:41",
            "nodeType": "VariableDeclaration",
            "scope": 300,
            "src": "915:24:41",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_address_$10_storage",
              "typeString": "address[10]"
            },
            "typeName": {
              "baseType": {
                "id": 31,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "915:7:41",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "id": 33,
              "length": {
                "hexValue": "3130",
                "id": 32,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "923:2:41",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_10_by_1",
                  "typeString": "int_const 10"
                },
                "value": "10"
              },
              "nodeType": "ArrayTypeName",
              "src": "915:11:41",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_address_$10_storage_ptr",
                "typeString": "address[10]"
              }
            },
            "visibility": "internal"
          },
          {
            "baseFunctions": [
              5102
            ],
            "constant": false,
            "functionSelector": "c0828f63",
            "id": 37,
            "mutability": "mutable",
            "name": "beaconCLH",
            "nameLocation": "962:9:41",
            "nodeType": "VariableDeclaration",
            "scope": 300,
            "src": "946:25:41",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_CLBeacon_$4417",
              "typeString": "contract CLBeacon"
            },
            "typeName": {
              "id": 36,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 35,
                "name": "CLBeacon",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 4417,
                "src": "946:8:41"
              },
              "referencedDeclaration": 4417,
              "src": "946:8:41",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_CLBeacon_$4417",
                "typeString": "contract CLBeacon"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "documentation": {
              "id": 38,
              "nodeType": "StructuredDocumentation",
              "src": "982:43:41",
              "text": "@notice Relation houseAddr with houseId"
            },
            "functionSelector": "86bdfcac",
            "id": 42,
            "mutability": "mutable",
            "name": "mapIdCLH",
            "nameLocation": "1067:8:41",
            "nodeType": "VariableDeclaration",
            "scope": 300,
            "src": "1030:45:41",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
              "typeString": "mapping(address => uint256)"
            },
            "typeName": {
              "id": 41,
              "keyType": {
                "id": 39,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1039:7:41",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1030:29:41",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                "typeString": "mapping(address => uint256)"
              },
              "valueType": {
                "id": 40,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1050:7:41",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5110
            ],
            "constant": false,
            "documentation": {
              "id": 43,
              "nodeType": "StructuredDocumentation",
              "src": "1086:51:41",
              "text": "@notice Mapping to store all the created houses"
            },
            "functionSelector": "624d8774",
            "id": 48,
            "mutability": "mutable",
            "name": "mapCLH",
            "nameLocation": "1178:6:41",
            "nodeType": "VariableDeclaration",
            "scope": 300,
            "src": "1142:42:41",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_contract$_ICLHouse_$5389_$",
              "typeString": "mapping(uint256 => contract ICLHouse)"
            },
            "typeName": {
              "id": 47,
              "keyType": {
                "id": 44,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1150:7:41",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "1142:28:41",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_contract$_ICLHouse_$5389_$",
                "typeString": "mapping(uint256 => contract ICLHouse)"
              },
              "valueType": {
                "id": 46,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 45,
                  "name": "ICLHouse",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 5389,
                  "src": "1161:8:41"
                },
                "referencedDeclaration": 5389,
                "src": "1161:8:41",
                "typeDescriptions": {
                  "typeIdentifier": "t_contract$_ICLHouse_$5389",
                  "typeString": "contract ICLHouse"
                }
              }
            },
            "visibility": "public"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 49,
              "nodeType": "StructuredDocumentation",
              "src": "1191:198:41",
              "text": "@notice Event when house is created\n @param houseAddr Address of the created house\n @param houseName Name of the created house\n @param houseId Id of CLH of the created house"
            },
            "id": 57,
            "name": "evtHouseCreation",
            "nameLocation": "1400:16:41",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 56,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 51,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "houseAddr",
                  "nameLocation": "1426:9:41",
                  "nodeType": "VariableDeclaration",
                  "scope": 57,
                  "src": "1418:17:41",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 50,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1418:7:41",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 53,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "houseName",
                  "nameLocation": "1444:9:41",
                  "nodeType": "VariableDeclaration",
                  "scope": 57,
                  "src": "1437:16:41",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 52,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1437:6:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 55,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "houseId",
                  "nameLocation": "1463:7:41",
                  "nodeType": "VariableDeclaration",
                  "scope": 57,
                  "src": "1455:15:41",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 54,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1455:7:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1416:56:41"
            },
            "src": "1394:79:41"
          },
          {
            "body": {
              "id": 64,
              "nodeType": "Block",
              "src": "1546:39:41",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 61,
                      "name": "_disableInitializers",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5780,
                      "src": "1556:20:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 62,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1556:22:41",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 63,
                  "nodeType": "ExpressionStatement",
                  "src": "1556:22:41"
                }
              ]
            },
            "documentation": {
              "id": 58,
              "nodeType": "StructuredDocumentation",
              "src": "1478:49:41",
              "text": "@custom:oz-upgrades-unsafe-allow constructor"
            },
            "id": 65,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 59,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1543:2:41"
            },
            "returnParameters": {
              "id": 60,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1546:0:41"
            },
            "scope": 300,
            "src": "1532:53:41",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5133
            ],
            "body": {
              "id": 128,
              "nodeType": "Block",
              "src": "2195:324:41",
              "statements": [
                {
                  "expression": {
                    "id": 86,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 82,
                      "name": "beaconCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 37,
                      "src": "2205:9:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_CLBeacon_$4417",
                        "typeString": "contract CLBeacon"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 84,
                          "name": "_beacon",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 76,
                          "src": "2227:7:41",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 83,
                        "name": "CLBeacon",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4417,
                        "src": "2217:8:41",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_CLBeacon_$4417_$",
                          "typeString": "type(contract CLBeacon)"
                        }
                      },
                      "id": 85,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2217:19:41",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_CLBeacon_$4417",
                        "typeString": "contract CLBeacon"
                      }
                    },
                    "src": "2205:31:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_CLBeacon_$4417",
                      "typeString": "contract CLBeacon"
                    }
                  },
                  "id": 87,
                  "nodeType": "ExpressionStatement",
                  "src": "2205:31:41"
                },
                {
                  "expression": {
                    "id": 90,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 88,
                      "name": "CLLUserManagement",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24,
                      "src": "2247:17:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 89,
                      "name": "_CLLUserManagement",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 68,
                      "src": "2267:18:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2247:38:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 91,
                  "nodeType": "ExpressionStatement",
                  "src": "2247:38:41"
                },
                {
                  "expression": {
                    "id": 94,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 92,
                      "name": "CLLGovernance",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 27,
                      "src": "2295:13:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 93,
                      "name": "_CLLGovernance",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 70,
                      "src": "2311:14:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2295:30:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 95,
                  "nodeType": "ExpressionStatement",
                  "src": "2295:30:41"
                },
                {
                  "expression": {
                    "id": 98,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 96,
                      "name": "CLLConstructorCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 21,
                      "src": "2335:17:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 97,
                      "name": "_CLLConstructorCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 72,
                      "src": "2355:18:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2335:38:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 99,
                  "nodeType": "ExpressionStatement",
                  "src": "2335:38:41"
                },
                {
                  "expression": {
                    "id": 102,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 100,
                      "name": "CLHAPI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 30,
                      "src": "2383:6:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 101,
                      "name": "_CLHAPI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 74,
                      "src": "2392:7:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2383:16:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 103,
                  "nodeType": "ExpressionStatement",
                  "src": "2383:16:41"
                },
                {
                  "expression": {
                    "id": 106,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 104,
                      "name": "numCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 14,
                      "src": "2410:6:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "30",
                      "id": 105,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2419:1:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "2410:10:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 107,
                  "nodeType": "ExpressionStatement",
                  "src": "2410:10:41"
                },
                {
                  "expression": {
                    "id": 117,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 108,
                        "name": "mapCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 48,
                        "src": "2430:6:41",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_contract$_ICLHouse_$5389_$",
                          "typeString": "mapping(uint256 => contract ICLHouse)"
                        }
                      },
                      "id": 110,
                      "indexExpression": {
                        "id": 109,
                        "name": "numCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14,
                        "src": "2438:6:41",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2430:16:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ICLHouse_$5389",
                        "typeString": "contract ICLHouse"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 114,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2467:1:41",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 113,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2459:7:41",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 112,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "2459:7:41",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 115,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2459:10:41",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 111,
                        "name": "ICLHouse",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5389,
                        "src": "2449:8:41",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_ICLHouse_$5389_$",
                          "typeString": "type(contract ICLHouse)"
                        }
                      },
                      "id": 116,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2449:22:41",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ICLHouse_$5389",
                        "typeString": "contract ICLHouse"
                      }
                    },
                    "src": "2430:41:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ICLHouse_$5389",
                      "typeString": "contract ICLHouse"
                    }
                  },
                  "id": 118,
                  "nodeType": "ExpressionStatement",
                  "src": "2430:41:41"
                },
                {
                  "expression": {
                    "id": 126,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 119,
                        "name": "mapIdCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 42,
                        "src": "2481:8:41",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 124,
                      "indexExpression": {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 122,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2499:1:41",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 121,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "2491:7:41",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 120,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "2491:7:41",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 123,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2491:10:41",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2481:22:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 125,
                      "name": "numCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 14,
                      "src": "2506:6:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2481:31:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 127,
                  "nodeType": "ExpressionStatement",
                  "src": "2481:31:41"
                }
              ]
            },
            "documentation": {
              "id": 66,
              "nodeType": "StructuredDocumentation",
              "src": "1591:353:41",
              "text": "@notice Config the CLFactory with the CL Logic Contracts\n @param _CLLUserManagement Address Contract Logic for user management\n @param _CLLGovernance Address Contract Logic for governance\n @param _CLLConstructorCLH Address Contract with the Constructor logic\n @dev The constructor create a default CLH with the houseId #0"
            },
            "functionSelector": "60b323c3",
            "id": 129,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 79,
                    "name": "__UPGRADEABLE_CLF_VERSION__",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 6347,
                    "src": "2161:27:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  }
                ],
                "id": 80,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 78,
                  "name": "reinitializer",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 5734,
                  "src": "2146:13:41"
                },
                "nodeType": "ModifierInvocation",
                "src": "2146:44:41"
              }
            ],
            "name": "Init",
            "nameLocation": "1958:4:41",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 77,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 68,
                  "mutability": "mutable",
                  "name": "_CLLUserManagement",
                  "nameLocation": "1980:18:41",
                  "nodeType": "VariableDeclaration",
                  "scope": 129,
                  "src": "1972:26:41",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 67,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1972:7:41",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 70,
                  "mutability": "mutable",
                  "name": "_CLLGovernance",
                  "nameLocation": "2016:14:41",
                  "nodeType": "VariableDeclaration",
                  "scope": 129,
                  "src": "2008:22:41",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 69,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2008:7:41",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 72,
                  "mutability": "mutable",
                  "name": "_CLLConstructorCLH",
                  "nameLocation": "2048:18:41",
                  "nodeType": "VariableDeclaration",
                  "scope": 129,
                  "src": "2040:26:41",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 71,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2040:7:41",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 74,
                  "mutability": "mutable",
                  "name": "_CLHAPI",
                  "nameLocation": "2084:7:41",
                  "nodeType": "VariableDeclaration",
                  "scope": 129,
                  "src": "2076:15:41",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 73,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2076:7:41",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 76,
                  "mutability": "mutable",
                  "name": "_beacon",
                  "nameLocation": "2109:7:41",
                  "nodeType": "VariableDeclaration",
                  "scope": 129,
                  "src": "2101:15:41",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 75,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2101:7:41",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1962:160:41"
            },
            "returnParameters": {
              "id": 81,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2195:0:41"
            },
            "scope": 300,
            "src": "1949:570:41",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5157
            ],
            "body": {
              "id": 288,
              "nodeType": "Block",
              "src": "3383:1636:41",
              "statements": [
                {
                  "assignments": [
                    155
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 155,
                      "mutability": "mutable",
                      "name": "houseOwner",
                      "nameLocation": "3401:10:41",
                      "nodeType": "VariableDeclaration",
                      "scope": 288,
                      "src": "3393:18:41",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 154,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3393:7:41",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 158,
                  "initialValue": {
                    "expression": {
                      "id": 156,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -15,
                      "src": "3414:3:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 157,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "src": "3414:10:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3393:31:41"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 170,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 166,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "id": 162,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 160,
                              "name": "__GOV_DICTATORSHIP__",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 6352,
                              "src": "3457:20:41",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "id": 161,
                              "name": "_govModel",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 138,
                              "src": "3481:9:41",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "src": "3457:33:41",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "id": 165,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 163,
                              "name": "__GOV_COMMITTEE__",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 6357,
                              "src": "3506:17:41",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "id": 164,
                              "name": "_govModel",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 138,
                              "src": "3527:9:41",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "src": "3506:30:41",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "3457:79:41",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          "id": 169,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 167,
                            "name": "__GOV_SIMPLE_MAJORITY__",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 6362,
                            "src": "3552:23:41",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "id": 168,
                            "name": "_govModel",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 138,
                            "src": "3579:9:41",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "src": "3552:36:41",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "3457:131:41",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "496e76616c696420476f7665726e616e63652054797065",
                        "id": 171,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3603:25:41",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_214b95948b2fffc4708f5771e5883416970438828cb4a690e032cc55f38d94b1",
                          "typeString": "literal_string \"Invalid Governance Type\""
                        },
                        "value": "Invalid Governance Type"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_214b95948b2fffc4708f5771e5883416970438828cb4a690e032cc55f38d94b1",
                          "typeString": "literal_string \"Invalid Governance Type\""
                        }
                      ],
                      "id": 159,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3435:7:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 172,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3435:203:41",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 173,
                  "nodeType": "ExpressionStatement",
                  "src": "3435:203:41"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 179,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 174,
                      "name": "_signerWallet",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 149,
                      "src": "3653:13:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "arguments": [
                        {
                          "hexValue": "30",
                          "id": 177,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3678:1:41",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 176,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "3670:7:41",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 175,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3670:7:41",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 178,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3670:10:41",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "3653:27:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 224,
                  "nodeType": "IfStatement",
                  "src": "3649:660:41",
                  "trueBody": {
                    "id": 223,
                    "nodeType": "Block",
                    "src": "3683:626:41",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 184,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 181,
                                  "name": "_signature",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 151,
                                  "src": "3706:10:41",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                "id": 182,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "src": "3706:17:41",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "hexValue": "3635",
                                "id": 183,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3727:2:41",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_65_by_1",
                                  "typeString": "int_const 65"
                                },
                                "value": "65"
                              },
                              "src": "3706:23:41",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "437265617465434c483a20426164207369676e6174757265206c656e677468",
                              "id": 185,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3731:33:41",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_66546f6712041f6d05b5202f53cc0449a241460309628ff6f24130bbd6047f30",
                                "typeString": "literal_string \"CreateCLH: Bad signature length\""
                              },
                              "value": "CreateCLH: Bad signature length"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_66546f6712041f6d05b5202f53cc0449a241460309628ff6f24130bbd6047f30",
                                "typeString": "literal_string \"CreateCLH: Bad signature length\""
                              }
                            ],
                            "id": 180,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "3697:7:41",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 186,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3697:69:41",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 187,
                        "nodeType": "ExpressionStatement",
                        "src": "3697:69:41"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 215,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 189,
                                "name": "_signerWallet",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 149,
                                "src": "3818:13:41",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "id": 194,
                                    "name": "_houseName",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 132,
                                    "src": "3892:10:41",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  },
                                  {
                                    "id": 195,
                                    "name": "_housePrivate",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 134,
                                    "src": "3924:13:41",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "id": 196,
                                    "name": "_govModel",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 138,
                                    "src": "3959:9:41",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  },
                                  {
                                    "baseExpression": {
                                      "id": 197,
                                      "name": "_govRules",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 142,
                                      "src": "3990:9:41",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_uint8_$3_memory_ptr",
                                        "typeString": "uint8[3] memory"
                                      }
                                    },
                                    "id": 199,
                                    "indexExpression": {
                                      "hexValue": "30",
                                      "id": 198,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "4000:1:41",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "3990:12:41",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  },
                                  {
                                    "baseExpression": {
                                      "id": 200,
                                      "name": "_govRules",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 142,
                                      "src": "4024:9:41",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_uint8_$3_memory_ptr",
                                        "typeString": "uint8[3] memory"
                                      }
                                    },
                                    "id": 202,
                                    "indexExpression": {
                                      "hexValue": "31",
                                      "id": 201,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "4034:1:41",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_1_by_1",
                                        "typeString": "int_const 1"
                                      },
                                      "value": "1"
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "4024:12:41",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  },
                                  {
                                    "baseExpression": {
                                      "id": 203,
                                      "name": "_govRules",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 142,
                                      "src": "4058:9:41",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_uint8_$3_memory_ptr",
                                        "typeString": "uint8[3] memory"
                                      }
                                    },
                                    "id": 205,
                                    "indexExpression": {
                                      "hexValue": "32",
                                      "id": 204,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "4068:1:41",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_2_by_1",
                                        "typeString": "int_const 2"
                                      },
                                      "value": "2"
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "4058:12:41",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  },
                                  {
                                    "baseExpression": {
                                      "id": 206,
                                      "name": "_ManagerWallets",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 145,
                                      "src": "4092:15:41",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                        "typeString": "address[] memory"
                                      }
                                    },
                                    "id": 208,
                                    "indexExpression": {
                                      "hexValue": "30",
                                      "id": 207,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "4108:1:41",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "4092:18:41",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "id": 211,
                                        "name": "this",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -28,
                                        "src": "4140:4:41",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_contract$_CLFactory_$300",
                                          "typeString": "contract CLFactory"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_contract$_CLFactory_$300",
                                          "typeString": "contract CLFactory"
                                        }
                                      ],
                                      "id": 210,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "4132:7:41",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 209,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "4132:7:41",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 212,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "4132:13:41",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 213,
                                    "name": "_signature",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 151,
                                    "src": "4167:10:41",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    },
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    },
                                    {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    },
                                    {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    },
                                    {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  ],
                                  "expression": {
                                    "arguments": [
                                      {
                                        "id": 191,
                                        "name": "CLHAPI",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 30,
                                        "src": "3847:6:41",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      ],
                                      "id": 190,
                                      "name": "CLHouseApi",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1753,
                                      "src": "3835:10:41",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_contract$_CLHouseApi_$1753_$",
                                        "typeString": "type(contract CLHouseApi)"
                                      }
                                    },
                                    "id": 192,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "3835:20:41",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_CLHouseApi_$1753",
                                      "typeString": "contract CLHouseApi"
                                    }
                                  },
                                  "id": 193,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "SignerOCNewCLH",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1752,
                                  "src": "3835:35:41",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_view$_t_string_memory_ptr_$_t_bool_$_t_bytes32_$_t_uint8_$_t_uint8_$_t_uint8_$_t_address_$_t_address_$_t_bytes_memory_ptr_$returns$_t_address_$",
                                    "typeString": "function (string memory,bool,bytes32,uint8,uint8,uint8,address,address,bytes memory) view external returns (address)"
                                  }
                                },
                                "id": 214,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3835:360:41",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "3818:377:41",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "437265617465434c483a20496e76616c6964205369676e6174757265",
                              "id": 216,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4213:30:41",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_099f17192883e41fedd772ee8fa6333842f0019e00f69fd93b115b83fd0b3f05",
                                "typeString": "literal_string \"CreateCLH: Invalid Signature\""
                              },
                              "value": "CreateCLH: Invalid Signature"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_099f17192883e41fedd772ee8fa6333842f0019e00f69fd93b115b83fd0b3f05",
                                "typeString": "literal_string \"CreateCLH: Invalid Signature\""
                              }
                            ],
                            "id": 188,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "3793:7:41",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 217,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3793:464:41",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 218,
                        "nodeType": "ExpressionStatement",
                        "src": "3793:464:41"
                      },
                      {
                        "expression": {
                          "id": 221,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 219,
                            "name": "houseOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 155,
                            "src": "4272:10:41",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 220,
                            "name": "_signerWallet",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 149,
                            "src": "4285:13:41",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "4272:26:41",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 222,
                        "nodeType": "ExpressionStatement",
                        "src": "4272:26:41"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    227
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 227,
                      "mutability": "mutable",
                      "name": "pxyCLH",
                      "nameLocation": "4330:6:41",
                      "nodeType": "VariableDeclaration",
                      "scope": 288,
                      "src": "4319:17:41",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_CLProxyCLH_$4450",
                        "typeString": "contract CLProxyCLH"
                      },
                      "typeName": {
                        "id": 226,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 225,
                          "name": "CLProxyCLH",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 4450,
                          "src": "4319:10:41"
                        },
                        "referencedDeclaration": 4450,
                        "src": "4319:10:41",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_CLProxyCLH_$4450",
                          "typeString": "contract CLProxyCLH"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 255,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 233,
                            "name": "beaconCLH",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 37,
                            "src": "4376:9:41",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_CLBeacon_$4417",
                              "typeString": "contract CLBeacon"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_CLBeacon_$4417",
                              "typeString": "contract CLBeacon"
                            }
                          ],
                          "id": 232,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "4367:7:41",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 231,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "4367:7:41",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 234,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4367:20:41",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "hexValue": "496e697428616464726573732c737472696e672c626f6f6c2c626f6f6c2c627974657333322c75696e74385b335d2c616464726573735b345d2c616464726573735b5d29",
                            "id": 237,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4442:70:41",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_e2087a4ec51448e72f4f5c9e3a09e1371a383f09fab7b05ed518ae63848b5143",
                              "typeString": "literal_string \"Init(address,string,bool,bool,bytes32,uint8[3],address[4],address[])\""
                            },
                            "value": "Init(address,string,bool,bool,bytes32,uint8[3],address[4],address[])"
                          },
                          {
                            "id": 238,
                            "name": "houseOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 155,
                            "src": "4530:10:41",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 239,
                            "name": "_houseName",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 132,
                            "src": "4559:10:41",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          {
                            "id": 240,
                            "name": "_housePrivate",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 134,
                            "src": "4587:13:41",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "id": 241,
                            "name": "_houseOpen",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 136,
                            "src": "4618:10:41",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "id": 242,
                            "name": "_govModel",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 138,
                            "src": "4646:9:41",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "id": 243,
                            "name": "_govRules",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 142,
                            "src": "4673:9:41",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint8_$3_memory_ptr",
                              "typeString": "uint8[3] memory"
                            }
                          },
                          {
                            "components": [
                              {
                                "arguments": [
                                  {
                                    "id": 246,
                                    "name": "this",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -28,
                                    "src": "4710:4:41",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_CLFactory_$300",
                                      "typeString": "contract CLFactory"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_CLFactory_$300",
                                      "typeString": "contract CLFactory"
                                    }
                                  ],
                                  "id": 245,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "4702:7:41",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 244,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "4702:7:41",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 247,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "4702:13:41",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 248,
                                "name": "CLHAPI",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 30,
                                "src": "4717:6:41",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 249,
                                "name": "_gnosisSafe",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 147,
                                "src": "4725:11:41",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 250,
                                "name": "CLLConstructorCLH",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 21,
                                "src": "4738:17:41",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "id": 251,
                            "isConstant": false,
                            "isInlineArray": true,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "4700:57:41",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$4_memory_ptr",
                              "typeString": "address[4] memory"
                            }
                          },
                          {
                            "id": 252,
                            "name": "_ManagerWallets",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 145,
                            "src": "4775:15:41",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                              "typeString": "address[] memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_e2087a4ec51448e72f4f5c9e3a09e1371a383f09fab7b05ed518ae63848b5143",
                              "typeString": "literal_string \"Init(address,string,bool,bool,bytes32,uint8[3],address[4],address[])\""
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            },
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_array$_t_uint8_$3_memory_ptr",
                              "typeString": "uint8[3] memory"
                            },
                            {
                              "typeIdentifier": "t_array$_t_address_$4_memory_ptr",
                              "typeString": "address[4] memory"
                            },
                            {
                              "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                              "typeString": "address[] memory"
                            }
                          ],
                          "expression": {
                            "id": 235,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "4401:3:41",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 236,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodeWithSignature",
                          "nodeType": "MemberAccess",
                          "src": "4401:23:41",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (string memory) pure returns (bytes memory)"
                          }
                        },
                        "id": 253,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4401:403:41",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 230,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "NewExpression",
                      "src": "4339:14:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_creation_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_contract$_CLProxyCLH_$4450_$",
                        "typeString": "function (address,bytes memory) returns (contract CLProxyCLH)"
                      },
                      "typeName": {
                        "id": 229,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 228,
                          "name": "CLProxyCLH",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 4450,
                          "src": "4343:10:41"
                        },
                        "referencedDeclaration": 4450,
                        "src": "4343:10:41",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_CLProxyCLH_$4450",
                          "typeString": "contract CLProxyCLH"
                        }
                      }
                    },
                    "id": 254,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4339:475:41",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_CLProxyCLH_$4450",
                      "typeString": "contract CLProxyCLH"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4319:495:41"
                },
                {
                  "expression": {
                    "id": 257,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "++",
                    "prefix": false,
                    "src": "4825:8:41",
                    "subExpression": {
                      "id": 256,
                      "name": "numCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 14,
                      "src": "4825:6:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 258,
                  "nodeType": "ExpressionStatement",
                  "src": "4825:8:41"
                },
                {
                  "expression": {
                    "id": 268,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 259,
                        "name": "mapCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 48,
                        "src": "4843:6:41",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_contract$_ICLHouse_$5389_$",
                          "typeString": "mapping(uint256 => contract ICLHouse)"
                        }
                      },
                      "id": 261,
                      "indexExpression": {
                        "id": 260,
                        "name": "numCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14,
                        "src": "4851:6:41",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "4843:16:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ICLHouse_$5389",
                        "typeString": "contract ICLHouse"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "id": 265,
                              "name": "pxyCLH",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 227,
                              "src": "4881:6:41",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_CLProxyCLH_$4450",
                                "typeString": "contract CLProxyCLH"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_CLProxyCLH_$4450",
                                "typeString": "contract CLProxyCLH"
                              }
                            ],
                            "id": 264,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "4872:7:41",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 263,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "4872:7:41",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 266,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4872:17:41",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 262,
                        "name": "ICLHouse",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5389,
                        "src": "4862:8:41",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_ICLHouse_$5389_$",
                          "typeString": "type(contract ICLHouse)"
                        }
                      },
                      "id": 267,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4862:29:41",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ICLHouse_$5389",
                        "typeString": "contract ICLHouse"
                      }
                    },
                    "src": "4843:48:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ICLHouse_$5389",
                      "typeString": "contract ICLHouse"
                    }
                  },
                  "id": 269,
                  "nodeType": "ExpressionStatement",
                  "src": "4843:48:41"
                },
                {
                  "expression": {
                    "id": 277,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 270,
                        "name": "mapIdCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 42,
                        "src": "4901:8:41",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 275,
                      "indexExpression": {
                        "arguments": [
                          {
                            "id": 273,
                            "name": "pxyCLH",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 227,
                            "src": "4920:6:41",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_CLProxyCLH_$4450",
                              "typeString": "contract CLProxyCLH"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_CLProxyCLH_$4450",
                              "typeString": "contract CLProxyCLH"
                            }
                          ],
                          "id": 272,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "4911:7:41",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 271,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "4911:7:41",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 274,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4911:17:41",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "4901:29:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 276,
                      "name": "numCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 14,
                      "src": "4933:6:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4901:38:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 278,
                  "nodeType": "ExpressionStatement",
                  "src": "4901:38:41"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 282,
                            "name": "pxyCLH",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 227,
                            "src": "4982:6:41",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_CLProxyCLH_$4450",
                              "typeString": "contract CLProxyCLH"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_CLProxyCLH_$4450",
                              "typeString": "contract CLProxyCLH"
                            }
                          ],
                          "id": 281,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "4973:7:41",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 280,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "4973:7:41",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 283,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4973:17:41",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 284,
                        "name": "_houseName",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 132,
                        "src": "4992:10:41",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      {
                        "id": 285,
                        "name": "numCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14,
                        "src": "5004:6:41",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 279,
                      "name": "evtHouseCreation",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 57,
                      "src": "4955:16:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_string_memory_ptr_$_t_uint256_$returns$__$",
                        "typeString": "function (address,string memory,uint256)"
                      }
                    },
                    "id": 286,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4955:57:41",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 287,
                  "nodeType": "EmitStatement",
                  "src": "4950:62:41"
                }
              ]
            },
            "documentation": {
              "id": 130,
              "nodeType": "StructuredDocumentation",
              "src": "2526:523:41",
              "text": "@notice Deploy a new CLHouse\n @param _houseName Name of the CLH\n @param _housePrivate If is set to 1, the CLH is set to private\n @param _houseOpen If is set to 1, the CLH is set to open\n @param _govModel keccak256 hash of the governance model, see the __GOV_* constans\n @param _govRules Array for goverment rules see `enum gRule`\n @param _ManagerWallets Whitelist of address for invitate as managers\n @dev Some parameters wil be ignored depending on the governance model"
            },
            "functionSelector": "c0fe60d0",
            "id": 289,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "CreateCLH",
            "nameLocation": "3063:9:41",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 152,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 132,
                  "mutability": "mutable",
                  "name": "_houseName",
                  "nameLocation": "3096:10:41",
                  "nodeType": "VariableDeclaration",
                  "scope": 289,
                  "src": "3082:24:41",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 131,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3082:6:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 134,
                  "mutability": "mutable",
                  "name": "_housePrivate",
                  "nameLocation": "3121:13:41",
                  "nodeType": "VariableDeclaration",
                  "scope": 289,
                  "src": "3116:18:41",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 133,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3116:4:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 136,
                  "mutability": "mutable",
                  "name": "_houseOpen",
                  "nameLocation": "3149:10:41",
                  "nodeType": "VariableDeclaration",
                  "scope": 289,
                  "src": "3144:15:41",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 135,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3144:4:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 138,
                  "mutability": "mutable",
                  "name": "_govModel",
                  "nameLocation": "3177:9:41",
                  "nodeType": "VariableDeclaration",
                  "scope": 289,
                  "src": "3169:17:41",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 137,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3169:7:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 142,
                  "mutability": "mutable",
                  "name": "_govRules",
                  "nameLocation": "3212:9:41",
                  "nodeType": "VariableDeclaration",
                  "scope": 289,
                  "src": "3196:25:41",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint8_$3_memory_ptr",
                    "typeString": "uint8[3]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 139,
                      "name": "uint8",
                      "nodeType": "ElementaryTypeName",
                      "src": "3196:5:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "id": 141,
                    "length": {
                      "hexValue": "33",
                      "id": 140,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3202:1:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_3_by_1",
                        "typeString": "int_const 3"
                      },
                      "value": "3"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "3196:8:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint8_$3_storage_ptr",
                      "typeString": "uint8[3]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 145,
                  "mutability": "mutable",
                  "name": "_ManagerWallets",
                  "nameLocation": "3248:15:41",
                  "nodeType": "VariableDeclaration",
                  "scope": 289,
                  "src": "3231:32:41",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 143,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "3231:7:41",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 144,
                    "nodeType": "ArrayTypeName",
                    "src": "3231:9:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 147,
                  "mutability": "mutable",
                  "name": "_gnosisSafe",
                  "nameLocation": "3281:11:41",
                  "nodeType": "VariableDeclaration",
                  "scope": 289,
                  "src": "3273:19:41",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 146,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3273:7:41",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 149,
                  "mutability": "mutable",
                  "name": "_signerWallet",
                  "nameLocation": "3310:13:41",
                  "nodeType": "VariableDeclaration",
                  "scope": 289,
                  "src": "3302:21:41",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 148,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3302:7:41",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 151,
                  "mutability": "mutable",
                  "name": "_signature",
                  "nameLocation": "3346:10:41",
                  "nodeType": "VariableDeclaration",
                  "scope": 289,
                  "src": "3333:23:41",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 150,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3333:5:41",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3072:290:41"
            },
            "returnParameters": {
              "id": 153,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3383:0:41"
            },
            "scope": 300,
            "src": "3054:1965:41",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5120
            ],
            "body": {
              "id": 298,
              "nodeType": "Block",
              "src": "5084:50:41",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 294,
                        "name": "beaconCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 37,
                        "src": "5101:9:41",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_CLBeacon_$4417",
                          "typeString": "contract CLBeacon"
                        }
                      },
                      "id": 295,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "implementation",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 5885,
                      "src": "5101:24:41",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
                        "typeString": "function () view external returns (address)"
                      }
                    },
                    "id": 296,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5101:26:41",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 293,
                  "id": 297,
                  "nodeType": "Return",
                  "src": "5094:33:41"
                }
              ]
            },
            "functionSelector": "aaf10f42",
            "id": 299,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getImplementation",
            "nameLocation": "5034:17:41",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 290,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5051:2:41"
            },
            "returnParameters": {
              "id": 293,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 292,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 299,
                  "src": "5075:7:41",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 291,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5075:7:41",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5074:9:41"
            },
            "scope": 300,
            "src": "5025:109:41",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 301,
        "src": "394:4742:41",
        "usedErrors": []
      }
    ],
    "src": "32:5104:41"
  },
  "bytecode": "608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b611759806100ed6000396000f3fe60806040523480156200001157600080fd5b5060043610620000b75760003560e01c806386bdfcac116200007a57806386bdfcac146200015a578063a327ab69146200018c578063aaf10f4214620001a0578063c0828f6314620001aa578063c0fe60d014620001be578063ee7a7d1b14620001d557600080fd5b80631079071714620000bc578063529382d514620000ed578063594034e3146200010157806360b323c31462000115578063624d8774146200012e575b600080fd5b600f54620000d0906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b600d54620000d0906001600160a01b031681565b600c54620000d0906001600160a01b031681565b6200012c62000126366004620007c5565b620001df565b005b620000d06200013f36600462000841565b601c602052600090815260409020546001600160a01b031681565b6200017d6200016b3660046200085b565b601b6020526000908152604090205481565b604051908152602001620000e4565b600e54620000d0906001600160a01b031681565b620000d062000372565b601a54620000d0906001600160a01b031681565b6200012c620001cf36600462000a6e565b620003e8565b6200017d60015481565b600054600190610100900460ff1615801562000202575060005460ff8083169116105b6200026b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b60008054601a80546001600160a01b03199081166001600160a01b0387811691909117909255600d805482168b8416179055600e805482168a8416179055600c80548216898416179055600f805482169288169290921790915560018390558280527fb9c6de81004e18dedadca3e5eabaab449ca91dff6f58efc9461da635fe77f84980549091169055601b60209081527f584f46c60af19681376031579adb04a2416e54ee5505351c2a8435e3766026ea83905561ff001961010060ff861661ffff19909416841717169092556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498910160405180910390a1505050505050565b601a5460408051635c60da1b60e01b815290516000926001600160a01b031691635c60da1b9160048083019260209291908290030181865afa158015620003bd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003e3919062000b6b565b905090565b337f0b93889d934070956c00846f50f9a10a747bd194bba2f2e78a86d0c02386fdb1871480620004375750867f16591a696fee5867425b3dee9fc0160a6c1baef77835bc3d204314106d639298145b80620004625750867fa0786f6450d5fb3298b8425105c1b75e6e01a1ff86cdabea29909cdb0b4c83a7145b620004b05760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420476f7665726e616e63652054797065000000000000000000604482015260640162000262565b6001600160a01b038316156200062e578151604114620005135760405162461bcd60e51b815260206004820152601f60248201527f437265617465434c483a20426164207369676e6174757265206c656e67746800604482015260640162000262565b600f546001600160a01b031663364ae0d88b8b8a8a600060200201518b600160200201518c600260200201518c60008151811062000555576200055562000b8b565b6020026020010151308b6040518a63ffffffff1660e01b8152600401620005859998979695949392919062000bf1565b602060405180830381865afa158015620005a3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005c9919062000b6b565b6001600160a01b0316836001600160a01b0316146200062b5760405162461bcd60e51b815260206004820152601c60248201527f437265617465434c483a20496e76616c6964205369676e617475726500000000604482015260640162000262565b50815b601a5460408051608081018252308152600f546001600160a01b03908116602083015287811682840152600c548116606083015291516000939290921691620006899185918f918f918f918f918f91908f9060240162000ce7565b60408051601f198184030181529181526020820180516001600160e01b03166371043d2760e11b17905251620006bf906200078c565b620006cc92919062000d8a565b604051809103906000f080158015620006e9573d6000803e3d6000fd5b50600180549192506000620006fe8362000db8565b9091555050600180546000908152601c6020908152604080832080546001600160a01b0319166001600160a01b0387169081179091559354938352601b90915290819020829055517f0717908fb0165729c0cfd8bbc622f5ede46a85e555ac30657fa94a188bca698d91620007779184918f9162000de2565b60405180910390a15050505050505050505050565b61090b8062000e1983390190565b6001600160a01b0381168114620007b057600080fd5b50565b8035620007c0816200079a565b919050565b600080600080600060a08688031215620007de57600080fd5b8535620007eb816200079a565b94506020860135620007fd816200079a565b935060408601356200080f816200079a565b9250606086013562000821816200079a565b9150608086013562000833816200079a565b809150509295509295909350565b6000602082840312156200085457600080fd5b5035919050565b6000602082840312156200086e57600080fd5b81356200087b816200079a565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715620008c457620008c462000882565b604052919050565b600082601f830112620008de57600080fd5b813567ffffffffffffffff811115620008fb57620008fb62000882565b62000910601f8201601f191660200162000898565b8181528460208386010111156200092657600080fd5b816020850160208301376000918101602001919091529392505050565b80358015158114620007c057600080fd5b600082601f8301126200096657600080fd5b6040516060810181811067ffffffffffffffff821117156200098c576200098c62000882565b604052806060840185811115620009a257600080fd5b845b81811015620009cf57803560ff81168114620009c05760008081fd5b835260209283019201620009a4565b509195945050505050565b600082601f830112620009ec57600080fd5b8135602067ffffffffffffffff82111562000a0b5762000a0b62000882565b8160051b62000a1c82820162000898565b928352848101820192828101908785111562000a3757600080fd5b83870192505b8483101562000a6357823562000a53816200079a565b8252918301919083019062000a3d565b979650505050505050565b60008060008060008060008060006101608a8c03121562000a8e57600080fd5b893567ffffffffffffffff8082111562000aa757600080fd5b62000ab58d838e01620008cc565b9a5062000ac560208d0162000943565b995062000ad560408d0162000943565b985060608c0135975062000aed8d60808e0162000954565b965060e08c013591508082111562000b0457600080fd5b62000b128d838e01620009da565b955062000b236101008d01620007b3565b945062000b346101208d01620007b3565b93506101408c013591508082111562000b4c57600080fd5b5062000b5b8c828d01620008cc565b9150509295985092959850929598565b60006020828403121562000b7e57600080fd5b81516200087b816200079a565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b8181101562000bc95760208185018101518683018201520162000bab565b8181111562000bdc576000602083870101525b50601f01601f19169290920160200192915050565b600061012080835262000c078184018d62000ba1565b8b15156020850152604084018b905260ff8a811660608601528981166080860152881660a08501526001600160a01b0387811660c0860152861660e0850152838103610100850152905062000c5d818562000ba1565b9c9b505050505050505050505050565b8060005b600481101562000c9b5781516001600160a01b031684526020938401939091019060010162000c71565b50505050565b600081518084526020808501945080840160005b8381101562000cdc5781516001600160a01b03168752958201959082019060010162000cb5565b509495945050505050565b6001600160a01b03891681526101a060208083018290526000919062000d108483018c62000ba1565b91508915156040850152881515606085015287608085015260a084018760005b600381101562000d5257815160ff168352918301919083019060010162000d30565b5050505062000d6661010084018662000c6d565b82810361018084015262000d7b818562000ca1565b9b9a5050505050505050505050565b6001600160a01b038316815260406020820181905260009062000db09083018462000ba1565b949350505050565b600060001982141562000ddb57634e487b7160e01b600052601160045260246000fd5b5060010190565b6001600160a01b038416815260606020820181905260009062000e089083018562000ba1565b905082604083015294935050505056fe608060405234801561001057600080fd5b5060405161090b38038061090b83398101604081905261002f91610467565b818161003d82826000610046565b50505050610591565b61004f83610111565b6040516001600160a01b038416907f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e90600090a26000825111806100905750805b1561010c5761010a836001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fa9190610527565b836102b460201b6100291760201c565b505b505050565b610124816102e060201b6100551760201c565b6101835760405162461bcd60e51b815260206004820152602560248201527f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b6101f7816001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e89190610527565b6102e060201b6100551760201c565b61025c5760405162461bcd60e51b815260206004820152603060248201527f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960448201526f1cc81b9bdd08184818dbdb9d1c9858dd60821b606482015260840161017a565b806102937fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5060001b6102ef60201b6100641760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b60606102d983836040518060600160405280602781526020016108e4602791396102f2565b9392505050565b6001600160a01b03163b151590565b90565b60606001600160a01b0384163b61035a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161017a565b600080856001600160a01b0316856040516103759190610542565b600060405180830381855af49150503d80600081146103b0576040519150601f19603f3d011682016040523d82523d6000602084013e6103b5565b606091505b5090925090506103c68282866103d0565b9695505050505050565b606083156103df5750816102d9565b8251156103ef5782518084602001fd5b8160405162461bcd60e51b815260040161017a919061055e565b80516001600160a01b038116811461042057600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561045657818101518382015260200161043e565b8381111561010a5750506000910152565b6000806040838503121561047a57600080fd5b61048383610409565b60208401519092506001600160401b03808211156104a057600080fd5b818501915085601f8301126104b457600080fd5b8151818111156104c6576104c6610425565b604051601f8201601f19908116603f011681019083821181831017156104ee576104ee610425565b8160405282815288602084870101111561050757600080fd5b61051883602083016020880161043b565b80955050505050509250929050565b60006020828403121561053957600080fd5b6102d982610409565b6000825161055481846020870161043b565b9190910192915050565b602081526000825180602084015261057d81604085016020870161043b565b601f01601f19169190910160400192915050565b610344806105a06000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610067565b610100565b565b606061004e83836040518060600160405280602781526020016102e860279139610124565b9392505050565b6001600160a01b03163b151590565b90565b600061009a7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50546001600160a01b031690565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fb919061023f565b905090565b3660008037600080366000845af43d6000803e80801561011f573d6000f35b3d6000fd5b60606001600160a01b0384163b6101915760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b0316856040516101ac9190610298565b600060405180830381855af49150503d80600081146101e7576040519150601f19603f3d011682016040523d82523d6000602084013e6101ec565b606091505b50915091506101fc828286610206565b9695505050505050565b6060831561021557508161004e565b8251156102255782518084602001fd5b8160405162461bcd60e51b815260040161018891906102b4565b60006020828403121561025157600080fd5b81516001600160a01b038116811461004e57600080fd5b60005b8381101561028357818101518382015260200161026b565b83811115610292576000848401525b50505050565b600082516102aa818460208701610268565b9190910192915050565b60208152600082518060208401526102d3816040850160208701610268565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122025a9c748cb92627df1eef1f636030870f9eeb2865d476db2b1efdf323a388cd764736f6c634300080c0033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122037f3cceca27f73c185442b3cc5b3352c1a8375798b3913e40a4b7f1332c3637e64736f6c634300080c0033",
  "bytecodeSha1": "7e236bb119d70b9dea0d863d26a65fc5e327a557",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.12+commit.f00d7308"
  },
  "contractName": "CLFactory",
  "coverageMap": {
    "branches": {
      "14": {
        "CLFactory.Init": {
          "23": [
            4396,
            4409,
            false
          ]
        }
      },
      "41": {
        "CLFactory.CreateCLH": {
          "17": [
            3457,
            3490,
            true
          ],
          "18": [
            3506,
            3536,
            true
          ],
          "19": [
            3552,
            3588,
            true
          ],
          "20": [
            3653,
            3680,
            false
          ],
          "21": [
            3706,
            3729,
            true
          ],
          "22": [
            3818,
            4195,
            true
          ]
        }
      },
      "44": {},
      "48": {},
      "50": {},
      "52": {},
      "53": {}
    },
    "statements": {
      "14": {},
      "41": {
        "CLFactory.CreateCLH": {
          "9": [
            3435,
            3638
          ],
          "10": [
            3697,
            3766
          ],
          "11": [
            3793,
            4257
          ],
          "12": [
            4272,
            4298
          ],
          "13": [
            4825,
            4833
          ],
          "14": [
            4843,
            4891
          ],
          "15": [
            4901,
            4939
          ],
          "16": [
            4950,
            5012
          ]
        },
        "CLFactory.Init": {
          "0": [
            2205,
            2236
          ],
          "1": [
            2247,
            2285
          ],
          "2": [
            2295,
            2325
          ],
          "3": [
            2335,
            2373
          ],
          "4": [
            2383,
            2399
          ],
          "5": [
            2410,
            2420
          ],
          "6": [
            2430,
            2471
          ],
          "7": [
            2481,
            2512
          ]
        },
        "CLFactory.getImplementation": {
          "8": [
            5094,
            5127
          ]
        }
      },
      "44": {},
      "48": {},
      "50": {},
      "52": {},
      "53": {}
    }
  },
  "dependencies": [
    "CLBeacon",
    "CLHouseApi",
    "CLProxyCLH",
    "ICLFactory",
    "ICLHouse",
    "OpenZeppelin/openzeppelin-contracts@4.7.3/Initializable"
  ],
  "deployedBytecode": "60806040523480156200001157600080fd5b5060043610620000b75760003560e01c806386bdfcac116200007a57806386bdfcac146200015a578063a327ab69146200018c578063aaf10f4214620001a0578063c0828f6314620001aa578063c0fe60d014620001be578063ee7a7d1b14620001d557600080fd5b80631079071714620000bc578063529382d514620000ed578063594034e3146200010157806360b323c31462000115578063624d8774146200012e575b600080fd5b600f54620000d0906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b600d54620000d0906001600160a01b031681565b600c54620000d0906001600160a01b031681565b6200012c62000126366004620007c5565b620001df565b005b620000d06200013f36600462000841565b601c602052600090815260409020546001600160a01b031681565b6200017d6200016b3660046200085b565b601b6020526000908152604090205481565b604051908152602001620000e4565b600e54620000d0906001600160a01b031681565b620000d062000372565b601a54620000d0906001600160a01b031681565b6200012c620001cf36600462000a6e565b620003e8565b6200017d60015481565b600054600190610100900460ff1615801562000202575060005460ff8083169116105b6200026b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b60008054601a80546001600160a01b03199081166001600160a01b0387811691909117909255600d805482168b8416179055600e805482168a8416179055600c80548216898416179055600f805482169288169290921790915560018390558280527fb9c6de81004e18dedadca3e5eabaab449ca91dff6f58efc9461da635fe77f84980549091169055601b60209081527f584f46c60af19681376031579adb04a2416e54ee5505351c2a8435e3766026ea83905561ff001961010060ff861661ffff19909416841717169092556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498910160405180910390a1505050505050565b601a5460408051635c60da1b60e01b815290516000926001600160a01b031691635c60da1b9160048083019260209291908290030181865afa158015620003bd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003e3919062000b6b565b905090565b337f0b93889d934070956c00846f50f9a10a747bd194bba2f2e78a86d0c02386fdb1871480620004375750867f16591a696fee5867425b3dee9fc0160a6c1baef77835bc3d204314106d639298145b80620004625750867fa0786f6450d5fb3298b8425105c1b75e6e01a1ff86cdabea29909cdb0b4c83a7145b620004b05760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420476f7665726e616e63652054797065000000000000000000604482015260640162000262565b6001600160a01b038316156200062e578151604114620005135760405162461bcd60e51b815260206004820152601f60248201527f437265617465434c483a20426164207369676e6174757265206c656e67746800604482015260640162000262565b600f546001600160a01b031663364ae0d88b8b8a8a600060200201518b600160200201518c600260200201518c60008151811062000555576200055562000b8b565b6020026020010151308b6040518a63ffffffff1660e01b8152600401620005859998979695949392919062000bf1565b602060405180830381865afa158015620005a3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005c9919062000b6b565b6001600160a01b0316836001600160a01b0316146200062b5760405162461bcd60e51b815260206004820152601c60248201527f437265617465434c483a20496e76616c6964205369676e617475726500000000604482015260640162000262565b50815b601a5460408051608081018252308152600f546001600160a01b03908116602083015287811682840152600c548116606083015291516000939290921691620006899185918f918f918f918f918f91908f9060240162000ce7565b60408051601f198184030181529181526020820180516001600160e01b03166371043d2760e11b17905251620006bf906200078c565b620006cc92919062000d8a565b604051809103906000f080158015620006e9573d6000803e3d6000fd5b50600180549192506000620006fe8362000db8565b9091555050600180546000908152601c6020908152604080832080546001600160a01b0319166001600160a01b0387169081179091559354938352601b90915290819020829055517f0717908fb0165729c0cfd8bbc622f5ede46a85e555ac30657fa94a188bca698d91620007779184918f9162000de2565b60405180910390a15050505050505050505050565b61090b8062000e1983390190565b6001600160a01b0381168114620007b057600080fd5b50565b8035620007c0816200079a565b919050565b600080600080600060a08688031215620007de57600080fd5b8535620007eb816200079a565b94506020860135620007fd816200079a565b935060408601356200080f816200079a565b9250606086013562000821816200079a565b9150608086013562000833816200079a565b809150509295509295909350565b6000602082840312156200085457600080fd5b5035919050565b6000602082840312156200086e57600080fd5b81356200087b816200079a565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715620008c457620008c462000882565b604052919050565b600082601f830112620008de57600080fd5b813567ffffffffffffffff811115620008fb57620008fb62000882565b62000910601f8201601f191660200162000898565b8181528460208386010111156200092657600080fd5b816020850160208301376000918101602001919091529392505050565b80358015158114620007c057600080fd5b600082601f8301126200096657600080fd5b6040516060810181811067ffffffffffffffff821117156200098c576200098c62000882565b604052806060840185811115620009a257600080fd5b845b81811015620009cf57803560ff81168114620009c05760008081fd5b835260209283019201620009a4565b509195945050505050565b600082601f830112620009ec57600080fd5b8135602067ffffffffffffffff82111562000a0b5762000a0b62000882565b8160051b62000a1c82820162000898565b928352848101820192828101908785111562000a3757600080fd5b83870192505b8483101562000a6357823562000a53816200079a565b8252918301919083019062000a3d565b979650505050505050565b60008060008060008060008060006101608a8c03121562000a8e57600080fd5b893567ffffffffffffffff8082111562000aa757600080fd5b62000ab58d838e01620008cc565b9a5062000ac560208d0162000943565b995062000ad560408d0162000943565b985060608c0135975062000aed8d60808e0162000954565b965060e08c013591508082111562000b0457600080fd5b62000b128d838e01620009da565b955062000b236101008d01620007b3565b945062000b346101208d01620007b3565b93506101408c013591508082111562000b4c57600080fd5b5062000b5b8c828d01620008cc565b9150509295985092959850929598565b60006020828403121562000b7e57600080fd5b81516200087b816200079a565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b8181101562000bc95760208185018101518683018201520162000bab565b8181111562000bdc576000602083870101525b50601f01601f19169290920160200192915050565b600061012080835262000c078184018d62000ba1565b8b15156020850152604084018b905260ff8a811660608601528981166080860152881660a08501526001600160a01b0387811660c0860152861660e0850152838103610100850152905062000c5d818562000ba1565b9c9b505050505050505050505050565b8060005b600481101562000c9b5781516001600160a01b031684526020938401939091019060010162000c71565b50505050565b600081518084526020808501945080840160005b8381101562000cdc5781516001600160a01b03168752958201959082019060010162000cb5565b509495945050505050565b6001600160a01b03891681526101a060208083018290526000919062000d108483018c62000ba1565b91508915156040850152881515606085015287608085015260a084018760005b600381101562000d5257815160ff168352918301919083019060010162000d30565b5050505062000d6661010084018662000c6d565b82810361018084015262000d7b818562000ca1565b9b9a5050505050505050505050565b6001600160a01b038316815260406020820181905260009062000db09083018462000ba1565b949350505050565b600060001982141562000ddb57634e487b7160e01b600052601160045260246000fd5b5060010190565b6001600160a01b038416815260606020820181905260009062000e089083018562000ba1565b905082604083015294935050505056fe608060405234801561001057600080fd5b5060405161090b38038061090b83398101604081905261002f91610467565b818161003d82826000610046565b50505050610591565b61004f83610111565b6040516001600160a01b038416907f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e90600090a26000825111806100905750805b1561010c5761010a836001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fa9190610527565b836102b460201b6100291760201c565b505b505050565b610124816102e060201b6100551760201c565b6101835760405162461bcd60e51b815260206004820152602560248201527f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b6101f7816001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e89190610527565b6102e060201b6100551760201c565b61025c5760405162461bcd60e51b815260206004820152603060248201527f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960448201526f1cc81b9bdd08184818dbdb9d1c9858dd60821b606482015260840161017a565b806102937fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5060001b6102ef60201b6100641760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b60606102d983836040518060600160405280602781526020016108e4602791396102f2565b9392505050565b6001600160a01b03163b151590565b90565b60606001600160a01b0384163b61035a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161017a565b600080856001600160a01b0316856040516103759190610542565b600060405180830381855af49150503d80600081146103b0576040519150601f19603f3d011682016040523d82523d6000602084013e6103b5565b606091505b5090925090506103c68282866103d0565b9695505050505050565b606083156103df5750816102d9565b8251156103ef5782518084602001fd5b8160405162461bcd60e51b815260040161017a919061055e565b80516001600160a01b038116811461042057600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561045657818101518382015260200161043e565b8381111561010a5750506000910152565b6000806040838503121561047a57600080fd5b61048383610409565b60208401519092506001600160401b03808211156104a057600080fd5b818501915085601f8301126104b457600080fd5b8151818111156104c6576104c6610425565b604051601f8201601f19908116603f011681019083821181831017156104ee576104ee610425565b8160405282815288602084870101111561050757600080fd5b61051883602083016020880161043b565b80955050505050509250929050565b60006020828403121561053957600080fd5b6102d982610409565b6000825161055481846020870161043b565b9190910192915050565b602081526000825180602084015261057d81604085016020870161043b565b601f01601f19169190910160400192915050565b610344806105a06000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610067565b610100565b565b606061004e83836040518060600160405280602781526020016102e860279139610124565b9392505050565b6001600160a01b03163b151590565b90565b600061009a7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50546001600160a01b031690565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fb919061023f565b905090565b3660008037600080366000845af43d6000803e80801561011f573d6000f35b3d6000fd5b60606001600160a01b0384163b6101915760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b0316856040516101ac9190610298565b600060405180830381855af49150503d80600081146101e7576040519150601f19603f3d011682016040523d82523d6000602084013e6101ec565b606091505b50915091506101fc828286610206565b9695505050505050565b6060831561021557508161004e565b8251156102255782518084602001fd5b8160405162461bcd60e51b815260040161018891906102b4565b60006020828403121561025157600080fd5b81516001600160a01b038116811461004e57600080fd5b60005b8381101561028357818101518382015260200161026b565b83811115610292576000848401525b50505050565b600082516102aa818460208701610268565b9190910192915050565b60208152600082518060208401526102d3816040850160208701610268565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122025a9c748cb92627df1eef1f636030870f9eeb2865d476db2b1efdf323a388cd764736f6c634300080c0033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122037f3cceca27f73c185442b3cc5b3352c1a8375798b3913e40a4b7f1332c3637e64736f6c634300080c0033",
  "deployedSourceMap": "394:4742:41:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;887:21;;;;;-1:-1:-1;;;;;887:21:41;;;;;;-1:-1:-1;;;;;178:32:56;;;160:51;;148:2;133:18;887:21:41;;;;;;;;717:32;;;;;-1:-1:-1;;;;;717:32:41;;;614;;;;;-1:-1:-1;;;;;614:32:41;;;1949:570;;;;;;:::i;:::-;;:::i;:::-;;1142:42;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;1142:42:41;;;1030:45;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;2123:25:56;;;2111:2;2096:18;1030:45:41;1977:177:56;815:28:41;;;;;-1:-1:-1;;;;;815:28:41;;;5025:109;;;:::i;946:25::-;;;;;-1:-1:-1;;;;;946:25:41;;;3054:1965;;;;;;:::i;:::-;;:::i;499:21::-;;;;;;1949:570;4396:13:14;;295:1:50;;4396:13:14;;;;;4395:14;:40;;;;-1:-1:-1;4413:12:14;;:22;;;;:12;;:22;4395:40;4387:99;;;;-1:-1:-1;;;4387:99:14;;6548:2:56;4387:99:14;;;6530:21:56;6587:2;6567:18;;;6560:30;6626:34;6606:18;;;6599:62;-1:-1:-1;;;6677:18:56;;;6670:44;6731:19;;4387:99:14;;;;;;;;;4496:12;:22;;2205:9:41::1;:31:::0;;-1:-1:-1;;;;;;2205:31:41;;::::1;-1:-1:-1::0;;;;;2205:31:41;;::::1;::::0;;;::::1;::::0;;;2247:17:::1;:38:::0;;;::::1;::::0;;::::1;;::::0;;2295:13:::1;:30:::0;;;::::1;::::0;;::::1;;::::0;;-1:-1:-1;2335:38:41;;;::::1;::::0;;::::1;;::::0;;2383:6:::1;:16:::0;;;::::1;::::0;;::::1;::::0;;;::::1;::::0;;;-1:-1:-1;2410:10:41;;;2430:16;;;;:41;;;;::::1;::::0;;2481:8:::1;2430:16;2481:22:::0;;;;:31;;;-1:-1:-1;;4496:22:14;;;;-1:-1:-1;;4528:20:14;;;;;;4569:21;;;;2430:16:41;4605:20:14;6903:36:56;;;4605:20:14;;6876:18:56;4605:20:14;;;;;;;1949:570:41;;;;;;:::o;5025:109::-;5101:9;;:26;;;-1:-1:-1;;;5101:26:41;;;;5075:7;;-1:-1:-1;;;;;5101:9:41;;:24;;:26;;;;;;;;;;;;;;:9;:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5094:33;;5025:109;:::o;3054:1965::-;3414:10;339:33:50;3457::41;;;:79;;;3527:9;411:30:50;3506::41;3457:79;:131;;;;3579:9;486:36:50;3552::41;3457:131;3435:203;;;;-1:-1:-1;;;3435:203:41;;7408:2:56;3435:203:41;;;7390:21:56;7447:2;7427:18;;;7420:30;7486:25;7466:18;;;7459:53;7529:18;;3435:203:41;7206:347:56;3435:203:41;-1:-1:-1;;;;;3653:27:41;;;3649:660;;3706:10;:17;3727:2;3706:23;3697:69;;;;-1:-1:-1;;;3697:69:41;;7760:2:56;3697:69:41;;;7742:21:56;7799:2;7779:18;;;7772:30;7838:33;7818:18;;;7811:61;7889:18;;3697:69:41;7558:355:56;3697:69:41;3847:6;;-1:-1:-1;;;;;3847:6:41;3835:35;3892:10;3924:13;3959:9;3990;3847:6;3990:12;;;;4024:9;4034:1;4024:12;;;;4058:9;4068:1;4058:12;;;;4092:15;4108:1;4092:18;;;;;;;;:::i;:::-;;;;;;;4140:4;4167:10;3835:360;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;3818:377:41;:13;-1:-1:-1;;;;;3818:377:41;;3793:464;;;;-1:-1:-1;;;3793:464:41;;9726:2:56;3793:464:41;;;9708:21:56;9765:2;9745:18;;;9738:30;9804;9784:18;;;9777:58;9852:18;;3793:464:41;9524:352:56;3793:464:41;-1:-1:-1;4285:13:41;3649:660;4376:9;;4401:403;;;;;;;;4710:4;4401:403;;4717:6;;-1:-1:-1;;;;;4717:6:41;;;4401:403;;;;;;;;;;;4738:17;;;;4401:403;;;;;;4319:17;;4376:9;;;;;4401:403;;4530:10;;4559;;4587:13;;4618:10;;4646:9;;4673;;4401:403;4775:15;;4401:403;;;:::i;:::-;;;;-1:-1:-1;;4401:403:41;;;;;;;;;;;;;;-1:-1:-1;;;;;4401:403:41;-1:-1:-1;;;4401:403:41;;;4339:475;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4825:6:41;:8;;4319:495;;-1:-1:-1;4825:6:41;:8;;;:::i;:::-;;;;-1:-1:-1;;4851:6:41;;;4843:16;;;;:6;:16;;;;;;;;:48;;-1:-1:-1;;;;;;4843:48:41;-1:-1:-1;;;;;4843:48:41;;;;;;;;4933:6;;4901:29;;;:8;:29;;;;;;;:38;;;4955:57;;;;;4843:48;;4992:10;;4955:57;:::i;:::-;;;;;;;;3383:1636;;3054:1965;;;;;;;;;:::o;-1:-1:-1:-;;;;;;;;:::o;222:131:56:-;-1:-1:-1;;;;;297:31:56;;287:42;;277:70;;343:1;340;333:12;277:70;222:131;:::o;358:134::-;426:20;;455:31;426:20;455:31;:::i;:::-;358:134;;;:::o;497:813::-;592:6;600;608;616;624;677:3;665:9;656:7;652:23;648:33;645:53;;;694:1;691;684:12;645:53;733:9;720:23;752:31;777:5;752:31;:::i;:::-;802:5;-1:-1:-1;859:2:56;844:18;;831:32;872:33;831:32;872:33;:::i;:::-;924:7;-1:-1:-1;983:2:56;968:18;;955:32;996:33;955:32;996:33;:::i;:::-;1048:7;-1:-1:-1;1107:2:56;1092:18;;1079:32;1120:33;1079:32;1120:33;:::i;:::-;1172:7;-1:-1:-1;1231:3:56;1216:19;;1203:33;1245;1203;1245;:::i;:::-;1297:7;1287:17;;;497:813;;;;;;;;:::o;1315:180::-;1374:6;1427:2;1415:9;1406:7;1402:23;1398:32;1395:52;;;1443:1;1440;1433:12;1395:52;-1:-1:-1;1466:23:56;;1315:180;-1:-1:-1;1315:180:56:o;1725:247::-;1784:6;1837:2;1825:9;1816:7;1812:23;1808:32;1805:52;;;1853:1;1850;1843:12;1805:52;1892:9;1879:23;1911:31;1936:5;1911:31;:::i;:::-;1961:5;1725:247;-1:-1:-1;;;1725:247:56:o;2384:127::-;2445:10;2440:3;2436:20;2433:1;2426:31;2476:4;2473:1;2466:15;2500:4;2497:1;2490:15;2516:275;2587:2;2581:9;2652:2;2633:13;;-1:-1:-1;;2629:27:56;2617:40;;2687:18;2672:34;;2708:22;;;2669:62;2666:88;;;2734:18;;:::i;:::-;2770:2;2763:22;2516:275;;-1:-1:-1;2516:275:56:o;2796:531::-;2839:5;2892:3;2885:4;2877:6;2873:17;2869:27;2859:55;;2910:1;2907;2900:12;2859:55;2946:6;2933:20;2972:18;2968:2;2965:26;2962:52;;;2994:18;;:::i;:::-;3038:55;3081:2;3062:13;;-1:-1:-1;;3058:27:56;3087:4;3054:38;3038:55;:::i;:::-;3118:2;3109:7;3102:19;3164:3;3157:4;3152:2;3144:6;3140:15;3136:26;3133:35;3130:55;;;3181:1;3178;3171:12;3130:55;3246:2;3239:4;3231:6;3227:17;3220:4;3211:7;3207:18;3194:55;3294:1;3269:16;;;3287:4;3265:27;3258:38;;;;3273:7;2796:531;-1:-1:-1;;;2796:531:56:o;3332:160::-;3397:20;;3453:13;;3446:21;3436:32;;3426:60;;3482:1;3479;3472:12;3497:813;3545:5;3598:3;3591:4;3583:6;3579:17;3575:27;3565:55;;3616:1;3613;3606:12;3565:55;3649:2;3643:9;3691:2;3683:6;3679:15;3760:6;3748:10;3745:22;3724:18;3712:10;3709:34;3706:62;3703:88;;;3771:18;;:::i;:::-;3807:2;3800:22;3842:6;3883:2;3871:15;;3898;;;3895:35;;;3926:1;3923;3916:12;3895:35;3950:6;3965:315;3981:6;3976:3;3973:15;3965:315;;;4063:3;4050:17;4111:4;4104:5;4100:16;4093:5;4090:27;4080:125;;4159:1;4188:2;4184;4177:14;4080:125;4218:18;;4265:4;4256:14;;;;3998;3965:315;;;-1:-1:-1;4298:6:56;;3497:813;-1:-1:-1;;;;;3497:813:56:o;4315:787::-;4369:5;4422:3;4415:4;4407:6;4403:17;4399:27;4389:55;;4440:1;4437;4430:12;4389:55;4476:6;4463:20;4502:4;4525:18;4521:2;4518:26;4515:52;;;4547:18;;:::i;:::-;4593:2;4590:1;4586:10;4616:28;4640:2;4636;4632:11;4616:28;:::i;:::-;4678:15;;;4748;;;4744:24;;;4709:12;;;;4780:15;;;4777:35;;;4808:1;4805;4798:12;4777:35;4844:2;4836:6;4832:15;4821:26;;4856:217;4872:6;4867:3;4864:15;4856:217;;;4952:3;4939:17;4969:31;4994:5;4969:31;:::i;:::-;5013:18;;4889:12;;;;5051;;;;4856:217;;;5091:5;4315:787;-1:-1:-1;;;;;;;4315:787:56:o;5107:1234::-;5297:6;5305;5313;5321;5329;5337;5345;5353;5361;5414:3;5402:9;5393:7;5389:23;5385:33;5382:53;;;5431:1;5428;5421:12;5382:53;5471:9;5458:23;5500:18;5541:2;5533:6;5530:14;5527:34;;;5557:1;5554;5547:12;5527:34;5580:50;5622:7;5613:6;5602:9;5598:22;5580:50;:::i;:::-;5570:60;;5649:35;5680:2;5669:9;5665:18;5649:35;:::i;:::-;5639:45;;5703:35;5734:2;5723:9;5719:18;5703:35;:::i;:::-;5693:45;;5785:2;5774:9;5770:18;5757:32;5747:42;;5808:52;5852:7;5846:3;5835:9;5831:19;5808:52;:::i;:::-;5798:62;;5913:3;5902:9;5898:19;5885:33;5869:49;;5943:2;5933:8;5930:16;5927:36;;;5959:1;5956;5949:12;5927:36;5982:63;6037:7;6026:8;6015:9;6011:24;5982:63;:::i;:::-;5972:73;;6064:39;6098:3;6087:9;6083:19;6064:39;:::i;:::-;6054:49;;6122:39;6156:3;6145:9;6141:19;6122:39;:::i;:::-;6112:49;;6214:3;6203:9;6199:19;6186:33;6170:49;;6244:2;6234:8;6231:16;6228:36;;;6260:1;6257;6250:12;6228:36;;6283:52;6327:7;6316:8;6305:9;6301:24;6283:52;:::i;:::-;6273:62;;;5107:1234;;;;;;;;;;;:::o;6950:251::-;7020:6;7073:2;7061:9;7052:7;7048:23;7044:32;7041:52;;;7089:1;7086;7079:12;7041:52;7121:9;7115:16;7140:31;7165:5;7140:31;:::i;7918:127::-;7979:10;7974:3;7970:20;7967:1;7960:31;8010:4;8007:1;8000:15;8034:4;8031:1;8024:15;8050:472;8092:3;8130:5;8124:12;8157:6;8152:3;8145:19;8182:1;8192:162;8206:6;8203:1;8200:13;8192:162;;;8268:4;8324:13;;;8320:22;;8314:29;8296:11;;;8292:20;;8285:59;8221:12;8192:162;;;8372:6;8369:1;8366:13;8363:87;;;8438:1;8431:4;8422:6;8417:3;8413:16;8409:27;8402:38;8363:87;-1:-1:-1;8504:2:56;8483:15;-1:-1:-1;;8479:29:56;8470:39;;;;8511:4;8466:50;;8050:472;-1:-1:-1;;8050:472:56:o;8527:992::-;8863:4;8892:3;8922:2;8911:9;8904:21;8948:45;8989:2;8978:9;8974:18;8966:6;8948:45;:::i;:::-;9036:14;;9029:22;9024:2;9009:18;;9002:50;9083:2;9068:18;;9061:34;;;9143:4;9131:17;;;9126:2;9111:18;;9104:45;9186:17;;;9180:3;9165:19;;9158:46;9241:17;;9235:3;9220:19;;9213:46;-1:-1:-1;;;;;9334:15:56;;;9328:3;9313:19;;9306:44;9387:15;;9381:3;9366:19;;9359:44;9440:22;;;9434:3;9419:19;;9412:51;8934:59;-1:-1:-1;9480:33:56;8934:59;9498:6;9480:33;:::i;:::-;9472:41;8527:992;-1:-1:-1;;;;;;;;;;;;8527:992:56:o;9881:352::-;9974:5;9997:1;10007:220;10021:4;10018:1;10015:11;10007:220;;;10084:13;;-1:-1:-1;;;;;10080:39:56;10068:52;;10143:4;10167:12;;;;10202:15;;;;10116:1;10034:9;10007:220;;;10011:3;;9881:352;;:::o;10238:461::-;10291:3;10329:5;10323:12;10356:6;10351:3;10344:19;10382:4;10411:2;10406:3;10402:12;10395:19;;10448:2;10441:5;10437:14;10469:1;10479:195;10493:6;10490:1;10487:13;10479:195;;;10558:13;;-1:-1:-1;;;;;10554:39:56;10542:52;;10614:12;;;;10649:15;;;;10590:1;10508:9;10479:195;;;-1:-1:-1;10690:3:56;;10238:461;-1:-1:-1;;;;;10238:461:56:o;10704:1298::-;-1:-1:-1;;;;;11197:32:56;;11179:51;;11167:3;11249:2;11267:18;;;11260:30;;;11138:4;;11167:3;11313:45;11339:18;;;11331:6;11313:45;:::i;:::-;11299:59;;11408:6;11401:14;11394:22;11389:2;11378:9;11374:18;11367:50;11467:6;11460:14;11453:22;11448:2;11437:9;11433:18;11426:50;11513:6;11507:3;11496:9;11492:19;11485:35;11555:3;11544:9;11540:19;11601:6;11625:1;11635:178;11649:4;11646:1;11643:11;11635:178;;;11712:13;;11727:4;11708:24;11696:37;;11753:12;;;;11788:15;;;;11669:1;11662:9;11635:178;;;11639:3;;;;11822:53;11870:3;11859:9;11855:19;11847:6;11822:53;:::i;:::-;11924:9;11916:6;11912:22;11906:3;11895:9;11891:19;11884:51;11952:44;11989:6;11981;11952:44;:::i;:::-;11944:52;10704:1298;-1:-1:-1;;;;;;;;;;;10704:1298:56:o;12007:315::-;-1:-1:-1;;;;;12182:32:56;;12164:51;;12251:2;12246;12231:18;;12224:30;;;-1:-1:-1;;12271:45:56;;12297:18;;12289:6;12271:45;:::i;:::-;12263:53;12007:315;-1:-1:-1;;;;12007:315:56:o;12327:232::-;12366:3;-1:-1:-1;;12387:17:56;;12384:140;;;12446:10;12441:3;12437:20;12434:1;12427:31;12481:4;12478:1;12471:15;12509:4;12506:1;12499:15;12384:140;-1:-1:-1;12551:1:56;12540:13;;12327:232::o;12564:388::-;-1:-1:-1;;;;;12769:32:56;;12751:51;;12838:2;12833;12818:18;;12811:30;;;-1:-1:-1;;12858:45:56;;12884:18;;12876:6;12858:45;:::i;:::-;12850:53;;12939:6;12934:2;12923:9;12919:18;12912:34;12564:388;;;;;;:::o",
  "language": "Solidity",
  "natspec": {
    "author": "Leonardo Urrego",
    "details": "This contract is the only way to create CLH",
    "events": {
      "evtHouseCreation(address,string,uint256)": {
        "params": {
          "houseAddr": "Address of the created house",
          "houseId": "Id of CLH of the created house",
          "houseName": "Name of the created house"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "CLHAPI()": {
        "notice": "Contract CLHouse API"
      },
      "CLLConstructorCLH()": {
        "notice": "Contract with the CLH Constructor logic"
      },
      "CLLGovernance()": {
        "notice": "Contract with the functions for Governance"
      },
      "CLLUserManagement()": {
        "notice": "Contract with the functions for user management"
      },
      "CreateCLH(string,bool,bool,bytes32,uint8[3],address[],address,address,bytes)": {
        "details": "Some parameters wil be ignored depending on the governance model",
        "notice": "Deploy a new CLHouse",
        "params": {
          "_ManagerWallets": "Whitelist of address for invitate as managers",
          "_govModel": "keccak256 hash of the governance model, see the __GOV_* constans",
          "_govRules": "Array for goverment rules see `enum gRule`",
          "_houseName": "Name of the CLH",
          "_houseOpen": "If is set to 1, the CLH is set to open",
          "_housePrivate": "If is set to 1, the CLH is set to private"
        }
      },
      "Init(address,address,address,address,address)": {
        "details": "The constructor create a default CLH with the houseId #0",
        "notice": "Config the CLFactory with the CL Logic Contracts",
        "params": {
          "_CLLConstructorCLH": "Address Contract with the Constructor logic",
          "_CLLGovernance": "Address Contract Logic for governance",
          "_CLLUserManagement": "Address Contract Logic for user management"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "mapCLH(uint256)": {
        "notice": "Mapping to store all the created houses"
      },
      "mapIdCLH(address)": {
        "notice": "Relation houseAddr with houseId"
      },
      "numCLH()": {
        "notice": "Store the number of houses created"
      }
    },
    "notice": "Config, create and deploy CLHouses",
    "title": "Crypto League House Factory",
    "version": 1
  },
  "offset": [
    394,
    5136
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH3 0xB7 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x86BDFCAC GT PUSH3 0x7A JUMPI DUP1 PUSH4 0x86BDFCAC EQ PUSH3 0x15A JUMPI DUP1 PUSH4 0xA327AB69 EQ PUSH3 0x18C JUMPI DUP1 PUSH4 0xAAF10F42 EQ PUSH3 0x1A0 JUMPI DUP1 PUSH4 0xC0828F63 EQ PUSH3 0x1AA JUMPI DUP1 PUSH4 0xC0FE60D0 EQ PUSH3 0x1BE JUMPI DUP1 PUSH4 0xEE7A7D1B EQ PUSH3 0x1D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x10790717 EQ PUSH3 0xBC JUMPI DUP1 PUSH4 0x529382D5 EQ PUSH3 0xED JUMPI DUP1 PUSH4 0x594034E3 EQ PUSH3 0x101 JUMPI DUP1 PUSH4 0x60B323C3 EQ PUSH3 0x115 JUMPI DUP1 PUSH4 0x624D8774 EQ PUSH3 0x12E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xF SLOAD PUSH3 0xD0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0xD SLOAD PUSH3 0xD0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH3 0xD0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH3 0x12C PUSH3 0x126 CALLDATASIZE PUSH1 0x4 PUSH3 0x7C5 JUMP JUMPDEST PUSH3 0x1DF JUMP JUMPDEST STOP JUMPDEST PUSH3 0xD0 PUSH3 0x13F CALLDATASIZE PUSH1 0x4 PUSH3 0x841 JUMP JUMPDEST PUSH1 0x1C PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH3 0x17D PUSH3 0x16B CALLDATASIZE PUSH1 0x4 PUSH3 0x85B JUMP JUMPDEST PUSH1 0x1B PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0xE4 JUMP JUMPDEST PUSH1 0xE SLOAD PUSH3 0xD0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH3 0xD0 PUSH3 0x372 JUMP JUMPDEST PUSH1 0x1A SLOAD PUSH3 0xD0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH3 0x12C PUSH3 0x1CF CALLDATASIZE PUSH1 0x4 PUSH3 0xA6E JUMP JUMPDEST PUSH3 0x3E8 JUMP JUMPDEST PUSH3 0x17D PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH3 0x202 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF DUP1 DUP4 AND SWAP2 AND LT JUMPDEST PUSH3 0x26B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1A DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP3 SSTORE PUSH1 0xD DUP1 SLOAD DUP3 AND DUP12 DUP5 AND OR SWAP1 SSTORE PUSH1 0xE DUP1 SLOAD DUP3 AND DUP11 DUP5 AND OR SWAP1 SSTORE PUSH1 0xC DUP1 SLOAD DUP3 AND DUP10 DUP5 AND OR SWAP1 SSTORE PUSH1 0xF DUP1 SLOAD DUP3 AND SWAP3 DUP9 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE PUSH1 0x1 DUP4 SWAP1 SSTORE DUP3 DUP1 MSTORE PUSH32 0xB9C6DE81004E18DEDADCA3E5EABAAB449CA91DFF6F58EFC9461DA635FE77F849 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 0x1B PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH32 0x584F46C60AF19681376031579ADB04A2416E54EE5505351C2A8435E3766026EA DUP4 SWAP1 SSTORE PUSH2 0xFF00 NOT PUSH2 0x100 PUSH1 0xFF DUP7 AND PUSH2 0xFFFF NOT SWAP1 SWAP5 AND DUP5 OR OR AND SWAP1 SWAP3 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1A SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x5C60DA1B PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x5C60DA1B SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x3BD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x3E3 SWAP2 SWAP1 PUSH3 0xB6B JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST CALLER PUSH32 0xB93889D934070956C00846F50F9A10A747BD194BBA2F2E78A86D0C02386FDB1 DUP8 EQ DUP1 PUSH3 0x437 JUMPI POP DUP7 PUSH32 0x16591A696FEE5867425B3DEE9FC0160A6C1BAEF77835BC3D204314106D639298 EQ JUMPDEST DUP1 PUSH3 0x462 JUMPI POP DUP7 PUSH32 0xA0786F6450D5FB3298B8425105C1B75E6E01A1FF86CDABEA29909CDB0B4C83A7 EQ JUMPDEST PUSH3 0x4B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696420476F7665726E616E63652054797065000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x262 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH3 0x62E JUMPI DUP2 MLOAD PUSH1 0x41 EQ PUSH3 0x513 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x437265617465434C483A20426164207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x262 JUMP JUMPDEST PUSH1 0xF SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x364AE0D8 DUP12 DUP12 DUP11 DUP11 PUSH1 0x0 PUSH1 0x20 MUL ADD MLOAD DUP12 PUSH1 0x1 PUSH1 0x20 MUL ADD MLOAD DUP13 PUSH1 0x2 PUSH1 0x20 MUL ADD MLOAD DUP13 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH3 0x555 JUMPI PUSH3 0x555 PUSH3 0xB8B JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD ADDRESS DUP12 PUSH1 0x40 MLOAD DUP11 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x585 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0xBF1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x5A3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x5C9 SWAP2 SWAP1 PUSH3 0xB6B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH3 0x62B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x437265617465434C483A20496E76616C6964205369676E617475726500000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x262 JUMP JUMPDEST POP DUP2 JUMPDEST PUSH1 0x1A SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE ADDRESS DUP2 MSTORE PUSH1 0xF SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP8 DUP2 AND DUP3 DUP5 ADD MSTORE PUSH1 0xC SLOAD DUP2 AND PUSH1 0x60 DUP4 ADD MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP4 SWAP3 SWAP1 SWAP3 AND SWAP2 PUSH3 0x689 SWAP2 DUP6 SWAP2 DUP16 SWAP2 DUP16 SWAP2 DUP16 SWAP2 DUP16 SWAP2 DUP16 SWAP2 SWAP1 DUP16 SWAP1 PUSH1 0x24 ADD PUSH3 0xCE7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x71043D27 PUSH1 0xE1 SHL OR SWAP1 MSTORE MLOAD PUSH3 0x6BF SWAP1 PUSH3 0x78C JUMP JUMPDEST PUSH3 0x6CC SWAP3 SWAP2 SWAP1 PUSH3 0xD8A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x6E9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 DUP1 SLOAD SWAP2 SWAP3 POP PUSH1 0x0 PUSH3 0x6FE DUP4 PUSH3 0xDB8 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 DUP1 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1C PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP4 SLOAD SWAP4 DUP4 MSTORE PUSH1 0x1B SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP3 SWAP1 SSTORE MLOAD PUSH32 0x717908FB0165729C0CFD8BBC622F5EDE46A85E555AC30657FA94A188BCA698D SWAP2 PUSH3 0x777 SWAP2 DUP5 SWAP2 DUP16 SWAP2 PUSH3 0xDE2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x90B DUP1 PUSH3 0xE19 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x7B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH3 0x7C0 DUP2 PUSH3 0x79A JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH3 0x7DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH3 0x7EB DUP2 PUSH3 0x79A JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH3 0x7FD DUP2 PUSH3 0x79A JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH3 0x80F DUP2 PUSH3 0x79A JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH3 0x821 DUP2 PUSH3 0x79A JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH3 0x833 DUP2 PUSH3 0x79A JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x854 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x86E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH3 0x87B DUP2 PUSH3 0x79A JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0x8C4 JUMPI PUSH3 0x8C4 PUSH3 0x882 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x8DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x8FB JUMPI PUSH3 0x8FB PUSH3 0x882 JUMP JUMPDEST PUSH3 0x910 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH3 0x898 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH3 0x926 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH3 0x7C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x966 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x98C JUMPI PUSH3 0x98C PUSH3 0x882 JUMP JUMPDEST PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP5 ADD DUP6 DUP2 GT ISZERO PUSH3 0x9A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x9CF JUMPI DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH3 0x9C0 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH3 0x9A4 JUMP JUMPDEST POP SWAP2 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x9EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0xA0B JUMPI PUSH3 0xA0B PUSH3 0x882 JUMP JUMPDEST DUP2 PUSH1 0x5 SHL PUSH3 0xA1C DUP3 DUP3 ADD PUSH3 0x898 JUMP JUMPDEST SWAP3 DUP4 MSTORE DUP5 DUP2 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP1 DUP8 DUP6 GT ISZERO PUSH3 0xA37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP8 ADD SWAP3 POP JUMPDEST DUP5 DUP4 LT ISZERO PUSH3 0xA63 JUMPI DUP3 CALLDATALOAD PUSH3 0xA53 DUP2 PUSH3 0x79A JUMP JUMPDEST DUP3 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH3 0xA3D JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x160 DUP11 DUP13 SUB SLT ISZERO PUSH3 0xA8E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH3 0xAA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0xAB5 DUP14 DUP4 DUP15 ADD PUSH3 0x8CC JUMP JUMPDEST SWAP11 POP PUSH3 0xAC5 PUSH1 0x20 DUP14 ADD PUSH3 0x943 JUMP JUMPDEST SWAP10 POP PUSH3 0xAD5 PUSH1 0x40 DUP14 ADD PUSH3 0x943 JUMP JUMPDEST SWAP9 POP PUSH1 0x60 DUP13 ADD CALLDATALOAD SWAP8 POP PUSH3 0xAED DUP14 PUSH1 0x80 DUP15 ADD PUSH3 0x954 JUMP JUMPDEST SWAP7 POP PUSH1 0xE0 DUP13 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0xB04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0xB12 DUP14 DUP4 DUP15 ADD PUSH3 0x9DA JUMP JUMPDEST SWAP6 POP PUSH3 0xB23 PUSH2 0x100 DUP14 ADD PUSH3 0x7B3 JUMP JUMPDEST SWAP5 POP PUSH3 0xB34 PUSH2 0x120 DUP14 ADD PUSH3 0x7B3 JUMP JUMPDEST SWAP4 POP PUSH2 0x140 DUP13 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0xB4C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0xB5B DUP13 DUP3 DUP14 ADD PUSH3 0x8CC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0xB7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x87B DUP2 PUSH3 0x79A JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0xBC9 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH3 0xBAB JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH3 0xBDC JUMPI PUSH1 0x0 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP1 DUP4 MSTORE PUSH3 0xC07 DUP2 DUP5 ADD DUP14 PUSH3 0xBA1 JUMP JUMPDEST DUP12 ISZERO ISZERO PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD DUP12 SWAP1 MSTORE PUSH1 0xFF DUP11 DUP2 AND PUSH1 0x60 DUP7 ADD MSTORE DUP10 DUP2 AND PUSH1 0x80 DUP7 ADD MSTORE DUP9 AND PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND PUSH1 0xC0 DUP7 ADD MSTORE DUP7 AND PUSH1 0xE0 DUP6 ADD MSTORE DUP4 DUP2 SUB PUSH2 0x100 DUP6 ADD MSTORE SWAP1 POP PUSH3 0xC5D DUP2 DUP6 PUSH3 0xBA1 JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST PUSH1 0x4 DUP2 LT ISZERO PUSH3 0xC9B JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0xC71 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0xCDC JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0xCB5 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP2 MSTORE PUSH2 0x1A0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH3 0xD10 DUP5 DUP4 ADD DUP13 PUSH3 0xBA1 JUMP JUMPDEST SWAP2 POP DUP10 ISZERO ISZERO PUSH1 0x40 DUP6 ADD MSTORE DUP9 ISZERO ISZERO PUSH1 0x60 DUP6 ADD MSTORE DUP8 PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD DUP8 PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH3 0xD52 JUMPI DUP2 MLOAD PUSH1 0xFF AND DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0xD30 JUMP JUMPDEST POP POP POP POP PUSH3 0xD66 PUSH2 0x100 DUP5 ADD DUP7 PUSH3 0xC6D JUMP JUMPDEST DUP3 DUP2 SUB PUSH2 0x180 DUP5 ADD MSTORE PUSH3 0xD7B DUP2 DUP6 PUSH3 0xCA1 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH3 0xDB0 SWAP1 DUP4 ADD DUP5 PUSH3 0xBA1 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH3 0xDDB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH3 0xE08 SWAP1 DUP4 ADD DUP6 PUSH3 0xBA1 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x90B CODESIZE SUB DUP1 PUSH2 0x90B DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x467 JUMP JUMPDEST DUP2 DUP2 PUSH2 0x3D DUP3 DUP3 PUSH1 0x0 PUSH2 0x46 JUMP JUMPDEST POP POP POP POP PUSH2 0x591 JUMP JUMPDEST PUSH2 0x4F DUP4 PUSH2 0x111 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH32 0x1CF3B03A6CF19FA2BABA4DF148E9DCABEDEA7F8A5C07840E207E5C089BE95D3E SWAP1 PUSH1 0x0 SWAP1 LOG2 PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x90 JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0x10C JUMPI PUSH2 0x10A DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5C60DA1B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFA SWAP2 SWAP1 PUSH2 0x527 JUMP JUMPDEST DUP4 PUSH2 0x2B4 PUSH1 0x20 SHL PUSH2 0x29 OR PUSH1 0x20 SHR JUMP JUMPDEST POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x124 DUP2 PUSH2 0x2E0 PUSH1 0x20 SHL PUSH2 0x55 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x183 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720626561636F6E206973206E6F74206120636F6E PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x1D1C9858DD PUSH1 0xDA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1F7 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5C60DA1B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1C4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E8 SWAP2 SWAP1 PUSH2 0x527 JUMP JUMPDEST PUSH2 0x2E0 PUSH1 0x20 SHL PUSH2 0x55 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x25C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A20626561636F6E20696D706C656D656E746174696F6E2069 PUSH1 0x44 DUP3 ADD MSTORE PUSH16 0x1CC81B9BDD08184818DBDB9D1C9858DD PUSH1 0x82 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x17A JUMP JUMPDEST DUP1 PUSH2 0x293 PUSH32 0xA3F0AD74E5423AEBFD80D3EF4346578335A9A72AEAEE59FF6CB3582B35133D50 PUSH1 0x0 SHL PUSH2 0x2EF PUSH1 0x20 SHL PUSH2 0x64 OR PUSH1 0x20 SHR JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2D9 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8E4 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x2F2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE PUSH2 0x35A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x17A JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x375 SWAP2 SWAP1 PUSH2 0x542 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3B0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3B5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x3C6 DUP3 DUP3 DUP7 PUSH2 0x3D0 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x3DF JUMPI POP DUP2 PUSH2 0x2D9 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x3EF JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17A SWAP2 SWAP1 PUSH2 0x55E JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x420 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x456 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x43E JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x10A JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x47A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x483 DUP4 PUSH2 0x409 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x4A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x4C6 JUMPI PUSH2 0x4C6 PUSH2 0x425 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x4EE JUMPI PUSH2 0x4EE PUSH2 0x425 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x507 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x518 DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x43B JUMP JUMPDEST DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x539 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2D9 DUP3 PUSH2 0x409 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x554 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x43B JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x57D DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x43B JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x344 DUP1 PUSH2 0x5A0 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE PUSH2 0x13 JUMPI PUSH2 0x11 PUSH2 0x17 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x11 JUMPDEST PUSH2 0x27 PUSH2 0x22 PUSH2 0x67 JUMP JUMPDEST PUSH2 0x100 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4E DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2E8 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x124 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9A PUSH32 0xA3F0AD74E5423AEBFD80D3EF4346578335A9A72AEAEE59FF6CB3582B35133D50 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5C60DA1B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x23F JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 DUP1 ISZERO PUSH2 0x11F JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE PUSH2 0x191 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x1AC SWAP2 SWAP1 PUSH2 0x298 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1E7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1EC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1FC DUP3 DUP3 DUP7 PUSH2 0x206 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x215 JUMPI POP DUP2 PUSH2 0x4E JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x225 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x188 SWAP2 SWAP1 PUSH2 0x2B4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x251 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x283 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x26B JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x292 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2AA DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x268 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2D3 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x268 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x7066735822122025A9C7 BASEFEE 0xCB SWAP3 PUSH3 0x7DF1EE CALL 0xF6 CALLDATASIZE SUB ADDMOD PUSH17 0xF9EEB2865D476DB2B1EFDF323A388CD764 PUSH20 0x6F6C634300080C0033416464726573733A206C6F PUSH24 0x2D6C6576656C2064656C65676174652063616C6C20666169 PUSH13 0x6564A264697066735822122037 RETURN 0xCC 0xEC LOG2 PUSH32 0x73C185442B3CC5B3352C1A8375798B3913E40A4B7F1332C3637E64736F6C6343 STOP ADDMOD 0xC STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        394,
        5136
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "5": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "CALLVALUE",
      "path": "41"
    },
    "6": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "DUP1",
      "path": "41"
    },
    "7": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "ISZERO",
      "path": "41"
    },
    "8": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x11"
    },
    "12": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "JUMPI",
      "path": "41"
    },
    "13": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x0"
    },
    "15": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "DUP1",
      "path": "41"
    },
    "16": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "REVERT",
      "path": "41"
    },
    "17": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "18": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "POP",
      "path": "41"
    },
    "19": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x4"
    },
    "21": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "CALLDATASIZE",
      "path": "41"
    },
    "22": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "LT",
      "path": "41"
    },
    "23": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0xB7"
    },
    "27": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "JUMPI",
      "path": "41"
    },
    "28": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x0"
    },
    "30": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "CALLDATALOAD",
      "path": "41"
    },
    "31": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0xE0"
    },
    "33": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "SHR",
      "path": "41"
    },
    "34": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "DUP1",
      "path": "41"
    },
    "35": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "PUSH4",
      "path": "41",
      "value": "0x86BDFCAC"
    },
    "40": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "GT",
      "path": "41"
    },
    "41": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x7A"
    },
    "45": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "JUMPI",
      "path": "41"
    },
    "46": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "DUP1",
      "path": "41"
    },
    "47": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "PUSH4",
      "path": "41",
      "value": "0x86BDFCAC"
    },
    "52": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "EQ",
      "path": "41"
    },
    "53": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x15A"
    },
    "57": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "JUMPI",
      "path": "41"
    },
    "58": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "DUP1",
      "path": "41"
    },
    "59": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "PUSH4",
      "path": "41",
      "value": "0xA327AB69"
    },
    "64": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "EQ",
      "path": "41"
    },
    "65": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x18C"
    },
    "69": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "JUMPI",
      "path": "41"
    },
    "70": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "DUP1",
      "path": "41"
    },
    "71": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "PUSH4",
      "path": "41",
      "value": "0xAAF10F42"
    },
    "76": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "EQ",
      "path": "41"
    },
    "77": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x1A0"
    },
    "81": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "JUMPI",
      "path": "41"
    },
    "82": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "DUP1",
      "path": "41"
    },
    "83": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "PUSH4",
      "path": "41",
      "value": "0xC0828F63"
    },
    "88": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "EQ",
      "path": "41"
    },
    "89": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x1AA"
    },
    "93": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "JUMPI",
      "path": "41"
    },
    "94": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "DUP1",
      "path": "41"
    },
    "95": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "PUSH4",
      "path": "41",
      "value": "0xC0FE60D0"
    },
    "100": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "EQ",
      "path": "41"
    },
    "101": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x1BE"
    },
    "105": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "JUMPI",
      "path": "41"
    },
    "106": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "DUP1",
      "path": "41"
    },
    "107": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "PUSH4",
      "path": "41",
      "value": "0xEE7A7D1B"
    },
    "112": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "EQ",
      "path": "41"
    },
    "113": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x1D5"
    },
    "117": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "JUMPI",
      "path": "41"
    },
    "118": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x0"
    },
    "120": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "DUP1",
      "path": "41"
    },
    "121": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "REVERT",
      "path": "41"
    },
    "122": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "123": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "DUP1",
      "path": "41"
    },
    "124": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "PUSH4",
      "path": "41",
      "value": "0x10790717"
    },
    "129": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "EQ",
      "path": "41"
    },
    "130": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0xBC"
    },
    "134": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "JUMPI",
      "path": "41"
    },
    "135": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "DUP1",
      "path": "41"
    },
    "136": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "PUSH4",
      "path": "41",
      "value": "0x529382D5"
    },
    "141": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "EQ",
      "path": "41"
    },
    "142": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0xED"
    },
    "146": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "JUMPI",
      "path": "41"
    },
    "147": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "DUP1",
      "path": "41"
    },
    "148": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "PUSH4",
      "path": "41",
      "value": "0x594034E3"
    },
    "153": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "EQ",
      "path": "41"
    },
    "154": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x101"
    },
    "158": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "JUMPI",
      "path": "41"
    },
    "159": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "DUP1",
      "path": "41"
    },
    "160": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "PUSH4",
      "path": "41",
      "value": "0x60B323C3"
    },
    "165": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "EQ",
      "path": "41"
    },
    "166": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x115"
    },
    "170": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "JUMPI",
      "path": "41"
    },
    "171": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "DUP1",
      "path": "41"
    },
    "172": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "PUSH4",
      "path": "41",
      "value": "0x624D8774"
    },
    "177": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "EQ",
      "path": "41"
    },
    "178": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x12E"
    },
    "182": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "JUMPI",
      "path": "41"
    },
    "183": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "184": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x0"
    },
    "186": {
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "DUP1",
      "path": "41"
    },
    "187": {
      "first_revert": true,
      "fn": null,
      "offset": [
        394,
        5136
      ],
      "op": "REVERT",
      "path": "41"
    },
    "188": {
      "offset": [
        887,
        908
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "189": {
      "fn": null,
      "offset": [
        887,
        908
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0xF"
    },
    "191": {
      "fn": null,
      "offset": [
        887,
        908
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "192": {
      "fn": null,
      "offset": [
        887,
        908
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0xD0"
    },
    "196": {
      "fn": null,
      "offset": [
        887,
        908
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "197": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "199": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "201": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "203": {
      "op": "SHL"
    },
    "204": {
      "op": "SUB"
    },
    "205": {
      "offset": [
        887,
        908
      ],
      "op": "AND",
      "path": "41"
    },
    "206": {
      "fn": null,
      "offset": [
        887,
        908
      ],
      "op": "DUP2",
      "path": "41"
    },
    "207": {
      "fn": null,
      "offset": [
        887,
        908
      ],
      "op": "JUMP",
      "path": "41"
    },
    "208": {
      "fn": null,
      "offset": [
        887,
        908
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "209": {
      "fn": null,
      "offset": [
        887,
        908
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "211": {
      "fn": null,
      "offset": [
        887,
        908
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "212": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "214": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "216": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "218": {
      "op": "SHL"
    },
    "219": {
      "op": "SUB"
    },
    "220": {
      "op": "SWAP1"
    },
    "221": {
      "op": "SWAP2"
    },
    "222": {
      "op": "AND"
    },
    "223": {
      "op": "DUP2"
    },
    "224": {
      "op": "MSTORE"
    },
    "225": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "227": {
      "op": "ADD"
    },
    "228": {
      "offset": [
        887,
        908
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "229": {
      "fn": null,
      "offset": [
        887,
        908
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "231": {
      "fn": null,
      "offset": [
        887,
        908
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "232": {
      "fn": null,
      "offset": [
        887,
        908
      ],
      "op": "DUP1",
      "path": "41"
    },
    "233": {
      "fn": null,
      "offset": [
        887,
        908
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "234": {
      "fn": null,
      "offset": [
        887,
        908
      ],
      "op": "SUB",
      "path": "41"
    },
    "235": {
      "fn": null,
      "offset": [
        887,
        908
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "236": {
      "fn": null,
      "offset": [
        887,
        908
      ],
      "op": "RETURN",
      "path": "41"
    },
    "237": {
      "offset": [
        717,
        749
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "238": {
      "fn": null,
      "offset": [
        717,
        749
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0xD"
    },
    "240": {
      "fn": null,
      "offset": [
        717,
        749
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "241": {
      "fn": null,
      "offset": [
        717,
        749
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0xD0"
    },
    "245": {
      "fn": null,
      "offset": [
        717,
        749
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "246": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "248": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "250": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "252": {
      "op": "SHL"
    },
    "253": {
      "op": "SUB"
    },
    "254": {
      "offset": [
        717,
        749
      ],
      "op": "AND",
      "path": "41"
    },
    "255": {
      "fn": null,
      "offset": [
        717,
        749
      ],
      "op": "DUP2",
      "path": "41"
    },
    "256": {
      "fn": null,
      "offset": [
        717,
        749
      ],
      "op": "JUMP",
      "path": "41"
    },
    "257": {
      "offset": [
        614,
        646
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "258": {
      "fn": null,
      "offset": [
        614,
        646
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0xC"
    },
    "260": {
      "fn": null,
      "offset": [
        614,
        646
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "261": {
      "fn": null,
      "offset": [
        614,
        646
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0xD0"
    },
    "265": {
      "fn": null,
      "offset": [
        614,
        646
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "266": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "268": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "270": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "272": {
      "op": "SHL"
    },
    "273": {
      "op": "SUB"
    },
    "274": {
      "offset": [
        614,
        646
      ],
      "op": "AND",
      "path": "41"
    },
    "275": {
      "fn": null,
      "offset": [
        614,
        646
      ],
      "op": "DUP2",
      "path": "41"
    },
    "276": {
      "fn": null,
      "offset": [
        614,
        646
      ],
      "op": "JUMP",
      "path": "41"
    },
    "277": {
      "fn": "CLFactory.Init",
      "offset": [
        1949,
        2519
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "278": {
      "fn": "CLFactory.Init",
      "offset": [
        1949,
        2519
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x12C"
    },
    "282": {
      "fn": "CLFactory.Init",
      "offset": [
        1949,
        2519
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x126"
    },
    "286": {
      "fn": "CLFactory.Init",
      "offset": [
        1949,
        2519
      ],
      "op": "CALLDATASIZE",
      "path": "41"
    },
    "287": {
      "fn": "CLFactory.Init",
      "offset": [
        1949,
        2519
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x4"
    },
    "289": {
      "fn": "CLFactory.Init",
      "offset": [
        1949,
        2519
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x7C5"
    },
    "293": {
      "fn": "CLFactory.Init",
      "jump": "i",
      "offset": [
        1949,
        2519
      ],
      "op": "JUMP",
      "path": "41"
    },
    "294": {
      "fn": "CLFactory.Init",
      "offset": [
        1949,
        2519
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "295": {
      "fn": "CLFactory.Init",
      "offset": [
        1949,
        2519
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x1DF"
    },
    "299": {
      "fn": "CLFactory.Init",
      "jump": "i",
      "offset": [
        1949,
        2519
      ],
      "op": "JUMP",
      "path": "41"
    },
    "300": {
      "fn": "CLFactory.Init",
      "offset": [
        1949,
        2519
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "301": {
      "fn": "CLFactory.Init",
      "offset": [
        1949,
        2519
      ],
      "op": "STOP",
      "path": "41"
    },
    "302": {
      "offset": [
        1142,
        1184
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "303": {
      "fn": "CLFactory.Init",
      "offset": [
        1142,
        1184
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0xD0"
    },
    "307": {
      "fn": "CLFactory.Init",
      "offset": [
        1142,
        1184
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x13F"
    },
    "311": {
      "fn": "CLFactory.Init",
      "offset": [
        1142,
        1184
      ],
      "op": "CALLDATASIZE",
      "path": "41"
    },
    "312": {
      "fn": "CLFactory.Init",
      "offset": [
        1142,
        1184
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x4"
    },
    "314": {
      "fn": "CLFactory.Init",
      "offset": [
        1142,
        1184
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x841"
    },
    "318": {
      "fn": "CLFactory.Init",
      "jump": "i",
      "offset": [
        1142,
        1184
      ],
      "op": "JUMP",
      "path": "41"
    },
    "319": {
      "fn": "CLFactory.Init",
      "offset": [
        1142,
        1184
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "320": {
      "fn": "CLFactory.Init",
      "offset": [
        1142,
        1184
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x1C"
    },
    "322": {
      "fn": "CLFactory.Init",
      "offset": [
        1142,
        1184
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x20"
    },
    "324": {
      "fn": "CLFactory.Init",
      "offset": [
        1142,
        1184
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "325": {
      "fn": "CLFactory.Init",
      "offset": [
        1142,
        1184
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x0"
    },
    "327": {
      "fn": "CLFactory.Init",
      "offset": [
        1142,
        1184
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "328": {
      "fn": "CLFactory.Init",
      "offset": [
        1142,
        1184
      ],
      "op": "DUP2",
      "path": "41"
    },
    "329": {
      "fn": "CLFactory.Init",
      "offset": [
        1142,
        1184
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "330": {
      "fn": "CLFactory.Init",
      "offset": [
        1142,
        1184
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "332": {
      "fn": "CLFactory.Init",
      "offset": [
        1142,
        1184
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "333": {
      "fn": "CLFactory.Init",
      "offset": [
        1142,
        1184
      ],
      "op": "KECCAK256",
      "path": "41"
    },
    "334": {
      "fn": "CLFactory.Init",
      "offset": [
        1142,
        1184
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "335": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "337": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "339": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "341": {
      "op": "SHL"
    },
    "342": {
      "op": "SUB"
    },
    "343": {
      "offset": [
        1142,
        1184
      ],
      "op": "AND",
      "path": "41"
    },
    "344": {
      "fn": "CLFactory.Init",
      "offset": [
        1142,
        1184
      ],
      "op": "DUP2",
      "path": "41"
    },
    "345": {
      "fn": "CLFactory.Init",
      "offset": [
        1142,
        1184
      ],
      "op": "JUMP",
      "path": "41"
    },
    "346": {
      "offset": [
        1030,
        1075
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "347": {
      "fn": "CLFactory.Init",
      "offset": [
        1030,
        1075
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x17D"
    },
    "351": {
      "fn": "CLFactory.Init",
      "offset": [
        1030,
        1075
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x16B"
    },
    "355": {
      "fn": "CLFactory.Init",
      "offset": [
        1030,
        1075
      ],
      "op": "CALLDATASIZE",
      "path": "41"
    },
    "356": {
      "fn": "CLFactory.Init",
      "offset": [
        1030,
        1075
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x4"
    },
    "358": {
      "fn": "CLFactory.Init",
      "offset": [
        1030,
        1075
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x85B"
    },
    "362": {
      "fn": "CLFactory.Init",
      "jump": "i",
      "offset": [
        1030,
        1075
      ],
      "op": "JUMP",
      "path": "41"
    },
    "363": {
      "fn": "CLFactory.Init",
      "offset": [
        1030,
        1075
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "364": {
      "fn": "CLFactory.Init",
      "offset": [
        1030,
        1075
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x1B"
    },
    "366": {
      "fn": "CLFactory.Init",
      "offset": [
        1030,
        1075
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x20"
    },
    "368": {
      "fn": "CLFactory.Init",
      "offset": [
        1030,
        1075
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "369": {
      "fn": "CLFactory.Init",
      "offset": [
        1030,
        1075
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x0"
    },
    "371": {
      "fn": "CLFactory.Init",
      "offset": [
        1030,
        1075
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "372": {
      "fn": "CLFactory.Init",
      "offset": [
        1030,
        1075
      ],
      "op": "DUP2",
      "path": "41"
    },
    "373": {
      "fn": "CLFactory.Init",
      "offset": [
        1030,
        1075
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "374": {
      "fn": "CLFactory.Init",
      "offset": [
        1030,
        1075
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "376": {
      "fn": "CLFactory.Init",
      "offset": [
        1030,
        1075
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "377": {
      "fn": "CLFactory.Init",
      "offset": [
        1030,
        1075
      ],
      "op": "KECCAK256",
      "path": "41"
    },
    "378": {
      "fn": "CLFactory.Init",
      "offset": [
        1030,
        1075
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "379": {
      "fn": "CLFactory.Init",
      "offset": [
        1030,
        1075
      ],
      "op": "DUP2",
      "path": "41"
    },
    "380": {
      "fn": "CLFactory.Init",
      "offset": [
        1030,
        1075
      ],
      "op": "JUMP",
      "path": "41"
    },
    "381": {
      "fn": "CLFactory.Init",
      "offset": [
        1030,
        1075
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "382": {
      "fn": "CLFactory.Init",
      "offset": [
        1030,
        1075
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "384": {
      "fn": "CLFactory.Init",
      "offset": [
        1030,
        1075
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "385": {
      "op": "SWAP1"
    },
    "386": {
      "op": "DUP2"
    },
    "387": {
      "op": "MSTORE"
    },
    "388": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "390": {
      "op": "ADD"
    },
    "391": {
      "offset": [
        1030,
        1075
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0xE4"
    },
    "395": {
      "op": "JUMP"
    },
    "396": {
      "offset": [
        815,
        843
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "397": {
      "fn": "CLFactory.Init",
      "offset": [
        815,
        843
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0xE"
    },
    "399": {
      "fn": "CLFactory.Init",
      "offset": [
        815,
        843
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "400": {
      "fn": "CLFactory.Init",
      "offset": [
        815,
        843
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0xD0"
    },
    "404": {
      "fn": "CLFactory.Init",
      "offset": [
        815,
        843
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "405": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "407": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "409": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "411": {
      "op": "SHL"
    },
    "412": {
      "op": "SUB"
    },
    "413": {
      "offset": [
        815,
        843
      ],
      "op": "AND",
      "path": "41"
    },
    "414": {
      "fn": "CLFactory.Init",
      "offset": [
        815,
        843
      ],
      "op": "DUP2",
      "path": "41"
    },
    "415": {
      "fn": "CLFactory.Init",
      "offset": [
        815,
        843
      ],
      "op": "JUMP",
      "path": "41"
    },
    "416": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5025,
        5134
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "417": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5025,
        5134
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0xD0"
    },
    "421": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5025,
        5134
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x372"
    },
    "425": {
      "fn": "CLFactory.getImplementation",
      "jump": "i",
      "offset": [
        5025,
        5134
      ],
      "op": "JUMP",
      "path": "41"
    },
    "426": {
      "offset": [
        946,
        971
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "427": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        946,
        971
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x1A"
    },
    "429": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        946,
        971
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "430": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        946,
        971
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0xD0"
    },
    "434": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        946,
        971
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "435": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "437": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "439": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "441": {
      "op": "SHL"
    },
    "442": {
      "op": "SUB"
    },
    "443": {
      "offset": [
        946,
        971
      ],
      "op": "AND",
      "path": "41"
    },
    "444": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        946,
        971
      ],
      "op": "DUP2",
      "path": "41"
    },
    "445": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        946,
        971
      ],
      "op": "JUMP",
      "path": "41"
    },
    "446": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3054,
        5019
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "447": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3054,
        5019
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x12C"
    },
    "451": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3054,
        5019
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x1CF"
    },
    "455": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3054,
        5019
      ],
      "op": "CALLDATASIZE",
      "path": "41"
    },
    "456": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3054,
        5019
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x4"
    },
    "458": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3054,
        5019
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0xA6E"
    },
    "462": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        3054,
        5019
      ],
      "op": "JUMP",
      "path": "41"
    },
    "463": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3054,
        5019
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "464": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3054,
        5019
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x3E8"
    },
    "468": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        3054,
        5019
      ],
      "op": "JUMP",
      "path": "41"
    },
    "469": {
      "offset": [
        499,
        520
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "470": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        499,
        520
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x17D"
    },
    "474": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        499,
        520
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x1"
    },
    "476": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        499,
        520
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "477": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        499,
        520
      ],
      "op": "DUP2",
      "path": "41"
    },
    "478": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        499,
        520
      ],
      "op": "JUMP",
      "path": "41"
    },
    "479": {
      "fn": "CLFactory.Init",
      "offset": [
        1949,
        2519
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "480": {
      "offset": [
        4396,
        4409
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "482": {
      "fn": "CLFactory.Init",
      "offset": [
        4396,
        4409
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "483": {
      "offset": [
        295,
        296
      ],
      "op": "PUSH1",
      "path": "50",
      "value": "0x1"
    },
    "485": {
      "fn": "CLFactory.Init",
      "offset": [
        295,
        296
      ],
      "op": "SWAP1",
      "path": "50"
    },
    "486": {
      "offset": [
        4396,
        4409
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x100"
    },
    "489": {
      "fn": "CLFactory.Init",
      "offset": [
        4396,
        4409
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "490": {
      "fn": "CLFactory.Init",
      "offset": [
        4396,
        4409
      ],
      "op": "DIV",
      "path": "14"
    },
    "491": {
      "fn": "CLFactory.Init",
      "offset": [
        4396,
        4409
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0xFF"
    },
    "493": {
      "branch": 23,
      "fn": "CLFactory.Init",
      "offset": [
        4396,
        4409
      ],
      "op": "AND",
      "path": "14"
    },
    "494": {
      "offset": [
        4395,
        4409
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "495": {
      "offset": [
        4395,
        4435
      ],
      "op": "DUP1",
      "path": "14"
    },
    "496": {
      "fn": "CLFactory.Init",
      "offset": [
        4395,
        4435
      ],
      "op": "ISZERO",
      "path": "14"
    },
    "497": {
      "fn": "CLFactory.Init",
      "offset": [
        4395,
        4435
      ],
      "op": "PUSH3",
      "path": "14",
      "value": "0x202"
    },
    "501": {
      "branch": 23,
      "offset": [
        4395,
        4435
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "502": {
      "op": "POP"
    },
    "503": {
      "offset": [
        4413,
        4425
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "505": {
      "fn": "CLFactory.Init",
      "offset": [
        4413,
        4425
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "506": {
      "offset": [
        4413,
        4435
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0xFF"
    },
    "508": {
      "fn": "CLFactory.Init",
      "offset": [
        4413,
        4435
      ],
      "op": "DUP1",
      "path": "14"
    },
    "509": {
      "fn": "CLFactory.Init",
      "offset": [
        4413,
        4435
      ],
      "op": "DUP4",
      "path": "14"
    },
    "510": {
      "fn": "CLFactory.Init",
      "offset": [
        4413,
        4435
      ],
      "op": "AND",
      "path": "14"
    },
    "511": {
      "offset": [
        4413,
        4425
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "512": {
      "fn": "CLFactory.Init",
      "offset": [
        4413,
        4425
      ],
      "op": "AND",
      "path": "14"
    },
    "513": {
      "offset": [
        4413,
        4435
      ],
      "op": "LT",
      "path": "14"
    },
    "514": {
      "offset": [
        4395,
        4435
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "515": {
      "offset": [
        4387,
        4486
      ],
      "op": "PUSH3",
      "path": "14",
      "value": "0x26B"
    },
    "519": {
      "offset": [
        4387,
        4486
      ],
      "op": "JUMPI",
      "path": "14"
    },
    "520": {
      "fn": "CLFactory.Init",
      "offset": [
        4387,
        4486
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "522": {
      "fn": "CLFactory.Init",
      "offset": [
        4387,
        4486
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "523": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "527": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "529": {
      "op": "SHL"
    },
    "530": {
      "offset": [
        4387,
        4486
      ],
      "op": "DUP2",
      "path": "14"
    },
    "531": {
      "fn": "CLFactory.Init",
      "offset": [
        4387,
        4486
      ],
      "op": "MSTORE",
      "path": "14"
    },
    "532": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "534": {
      "offset": [
        4387,
        4486
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x4"
    },
    "536": {
      "fn": "CLFactory.Init",
      "offset": [
        4387,
        4486
      ],
      "op": "DUP3",
      "path": "14"
    },
    "537": {
      "fn": "CLFactory.Init",
      "offset": [
        4387,
        4486
      ],
      "op": "ADD",
      "path": "14"
    },
    "538": {
      "op": "MSTORE"
    },
    "539": {
      "op": "PUSH1",
      "value": "0x2E"
    },
    "541": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "543": {
      "op": "DUP3"
    },
    "544": {
      "op": "ADD"
    },
    "545": {
      "op": "MSTORE"
    },
    "546": {
      "op": "PUSH32",
      "value": "0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561"
    },
    "579": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "581": {
      "op": "DUP3"
    },
    "582": {
      "op": "ADD"
    },
    "583": {
      "op": "MSTORE"
    },
    "584": {
      "op": "PUSH14",
      "value": "0x191E481A5B9A5D1A585B1A5E9959"
    },
    "599": {
      "op": "PUSH1",
      "value": "0x92"
    },
    "601": {
      "op": "SHL"
    },
    "602": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "604": {
      "op": "DUP3"
    },
    "605": {
      "op": "ADD"
    },
    "606": {
      "op": "MSTORE"
    },
    "607": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "609": {
      "op": "ADD"
    },
    "610": {
      "offset": [
        4387,
        4486
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "611": {
      "fn": "CLFactory.Init",
      "offset": [
        4387,
        4486
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "613": {
      "fn": "CLFactory.Init",
      "offset": [
        4387,
        4486
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "614": {
      "fn": "CLFactory.Init",
      "offset": [
        4387,
        4486
      ],
      "op": "DUP1",
      "path": "14"
    },
    "615": {
      "fn": "CLFactory.Init",
      "offset": [
        4387,
        4486
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "616": {
      "fn": "CLFactory.Init",
      "offset": [
        4387,
        4486
      ],
      "op": "SUB",
      "path": "14"
    },
    "617": {
      "fn": "CLFactory.Init",
      "offset": [
        4387,
        4486
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "618": {
      "fn": "CLFactory.Init",
      "offset": [
        4387,
        4486
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "14"
    },
    "619": {
      "fn": "CLFactory.Init",
      "offset": [
        4387,
        4486
      ],
      "op": "JUMPDEST",
      "path": "14"
    },
    "620": {
      "offset": [
        4496,
        4508
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x0"
    },
    "622": {
      "offset": [
        4496,
        4518
      ],
      "op": "DUP1",
      "path": "14"
    },
    "623": {
      "fn": "CLFactory.Init",
      "offset": [
        4496,
        4518
      ],
      "op": "SLOAD",
      "path": "14"
    },
    "624": {
      "fn": "CLFactory.Init",
      "offset": [
        2205,
        2214
      ],
      "op": "PUSH1",
      "path": "41",
      "statement": 0,
      "value": "0x1A"
    },
    "626": {
      "fn": "CLFactory.Init",
      "offset": [
        2205,
        2236
      ],
      "op": "DUP1",
      "path": "41"
    },
    "627": {
      "fn": "CLFactory.Init",
      "offset": [
        2205,
        2236
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "628": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "630": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "632": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "634": {
      "op": "SHL"
    },
    "635": {
      "op": "SUB"
    },
    "636": {
      "op": "NOT"
    },
    "637": {
      "fn": "CLFactory.Init",
      "offset": [
        2205,
        2236
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "638": {
      "fn": "CLFactory.Init",
      "offset": [
        2205,
        2236
      ],
      "op": "DUP2",
      "path": "41"
    },
    "639": {
      "fn": "CLFactory.Init",
      "offset": [
        2205,
        2236
      ],
      "op": "AND",
      "path": "41"
    },
    "640": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "642": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "644": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "646": {
      "op": "SHL"
    },
    "647": {
      "op": "SUB"
    },
    "648": {
      "fn": "CLFactory.Init",
      "offset": [
        2205,
        2236
      ],
      "op": "DUP8",
      "path": "41"
    },
    "649": {
      "fn": "CLFactory.Init",
      "offset": [
        2205,
        2236
      ],
      "op": "DUP2",
      "path": "41"
    },
    "650": {
      "fn": "CLFactory.Init",
      "offset": [
        2205,
        2236
      ],
      "op": "AND",
      "path": "41"
    },
    "651": {
      "fn": "CLFactory.Init",
      "offset": [
        2205,
        2236
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "652": {
      "fn": "CLFactory.Init",
      "offset": [
        2205,
        2236
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "653": {
      "fn": "CLFactory.Init",
      "offset": [
        2205,
        2236
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "654": {
      "fn": "CLFactory.Init",
      "offset": [
        2205,
        2236
      ],
      "op": "OR",
      "path": "41"
    },
    "655": {
      "fn": "CLFactory.Init",
      "offset": [
        2205,
        2236
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "656": {
      "fn": "CLFactory.Init",
      "offset": [
        2205,
        2236
      ],
      "op": "SWAP3",
      "path": "41"
    },
    "657": {
      "fn": "CLFactory.Init",
      "offset": [
        2205,
        2236
      ],
      "op": "SSTORE",
      "path": "41"
    },
    "658": {
      "fn": "CLFactory.Init",
      "offset": [
        2247,
        2264
      ],
      "op": "PUSH1",
      "path": "41",
      "statement": 1,
      "value": "0xD"
    },
    "660": {
      "fn": "CLFactory.Init",
      "offset": [
        2247,
        2285
      ],
      "op": "DUP1",
      "path": "41"
    },
    "661": {
      "fn": "CLFactory.Init",
      "offset": [
        2247,
        2285
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "662": {
      "fn": "CLFactory.Init",
      "offset": [
        2247,
        2285
      ],
      "op": "DUP3",
      "path": "41"
    },
    "663": {
      "fn": "CLFactory.Init",
      "offset": [
        2247,
        2285
      ],
      "op": "AND",
      "path": "41"
    },
    "664": {
      "fn": "CLFactory.Init",
      "offset": [
        2247,
        2285
      ],
      "op": "DUP12",
      "path": "41"
    },
    "665": {
      "fn": "CLFactory.Init",
      "offset": [
        2247,
        2285
      ],
      "op": "DUP5",
      "path": "41"
    },
    "666": {
      "fn": "CLFactory.Init",
      "offset": [
        2247,
        2285
      ],
      "op": "AND",
      "path": "41"
    },
    "667": {
      "fn": "CLFactory.Init",
      "offset": [
        2247,
        2285
      ],
      "op": "OR",
      "path": "41"
    },
    "668": {
      "fn": "CLFactory.Init",
      "offset": [
        2247,
        2285
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "669": {
      "fn": "CLFactory.Init",
      "offset": [
        2247,
        2285
      ],
      "op": "SSTORE",
      "path": "41"
    },
    "670": {
      "fn": "CLFactory.Init",
      "offset": [
        2295,
        2308
      ],
      "op": "PUSH1",
      "path": "41",
      "statement": 2,
      "value": "0xE"
    },
    "672": {
      "fn": "CLFactory.Init",
      "offset": [
        2295,
        2325
      ],
      "op": "DUP1",
      "path": "41"
    },
    "673": {
      "fn": "CLFactory.Init",
      "offset": [
        2295,
        2325
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "674": {
      "fn": "CLFactory.Init",
      "offset": [
        2295,
        2325
      ],
      "op": "DUP3",
      "path": "41"
    },
    "675": {
      "fn": "CLFactory.Init",
      "offset": [
        2295,
        2325
      ],
      "op": "AND",
      "path": "41"
    },
    "676": {
      "fn": "CLFactory.Init",
      "offset": [
        2295,
        2325
      ],
      "op": "DUP11",
      "path": "41"
    },
    "677": {
      "fn": "CLFactory.Init",
      "offset": [
        2295,
        2325
      ],
      "op": "DUP5",
      "path": "41"
    },
    "678": {
      "fn": "CLFactory.Init",
      "offset": [
        2295,
        2325
      ],
      "op": "AND",
      "path": "41"
    },
    "679": {
      "fn": "CLFactory.Init",
      "offset": [
        2295,
        2325
      ],
      "op": "OR",
      "path": "41"
    },
    "680": {
      "fn": "CLFactory.Init",
      "offset": [
        2295,
        2325
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "681": {
      "fn": "CLFactory.Init",
      "offset": [
        2295,
        2325
      ],
      "op": "SSTORE",
      "path": "41"
    },
    "682": {
      "op": "PUSH1",
      "value": "0xC"
    },
    "684": {
      "fn": "CLFactory.Init",
      "offset": [
        2335,
        2373
      ],
      "op": "DUP1",
      "path": "41",
      "statement": 3
    },
    "685": {
      "fn": "CLFactory.Init",
      "offset": [
        2335,
        2373
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "686": {
      "fn": "CLFactory.Init",
      "offset": [
        2335,
        2373
      ],
      "op": "DUP3",
      "path": "41"
    },
    "687": {
      "fn": "CLFactory.Init",
      "offset": [
        2335,
        2373
      ],
      "op": "AND",
      "path": "41"
    },
    "688": {
      "fn": "CLFactory.Init",
      "offset": [
        2335,
        2373
      ],
      "op": "DUP10",
      "path": "41"
    },
    "689": {
      "fn": "CLFactory.Init",
      "offset": [
        2335,
        2373
      ],
      "op": "DUP5",
      "path": "41"
    },
    "690": {
      "fn": "CLFactory.Init",
      "offset": [
        2335,
        2373
      ],
      "op": "AND",
      "path": "41"
    },
    "691": {
      "fn": "CLFactory.Init",
      "offset": [
        2335,
        2373
      ],
      "op": "OR",
      "path": "41"
    },
    "692": {
      "fn": "CLFactory.Init",
      "offset": [
        2335,
        2373
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "693": {
      "fn": "CLFactory.Init",
      "offset": [
        2335,
        2373
      ],
      "op": "SSTORE",
      "path": "41"
    },
    "694": {
      "fn": "CLFactory.Init",
      "offset": [
        2383,
        2389
      ],
      "op": "PUSH1",
      "path": "41",
      "statement": 4,
      "value": "0xF"
    },
    "696": {
      "fn": "CLFactory.Init",
      "offset": [
        2383,
        2399
      ],
      "op": "DUP1",
      "path": "41"
    },
    "697": {
      "fn": "CLFactory.Init",
      "offset": [
        2383,
        2399
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "698": {
      "fn": "CLFactory.Init",
      "offset": [
        2383,
        2399
      ],
      "op": "DUP3",
      "path": "41"
    },
    "699": {
      "fn": "CLFactory.Init",
      "offset": [
        2383,
        2399
      ],
      "op": "AND",
      "path": "41"
    },
    "700": {
      "fn": "CLFactory.Init",
      "offset": [
        2383,
        2399
      ],
      "op": "SWAP3",
      "path": "41"
    },
    "701": {
      "fn": "CLFactory.Init",
      "offset": [
        2383,
        2399
      ],
      "op": "DUP9",
      "path": "41"
    },
    "702": {
      "fn": "CLFactory.Init",
      "offset": [
        2383,
        2399
      ],
      "op": "AND",
      "path": "41"
    },
    "703": {
      "fn": "CLFactory.Init",
      "offset": [
        2383,
        2399
      ],
      "op": "SWAP3",
      "path": "41"
    },
    "704": {
      "fn": "CLFactory.Init",
      "offset": [
        2383,
        2399
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "705": {
      "fn": "CLFactory.Init",
      "offset": [
        2383,
        2399
      ],
      "op": "SWAP3",
      "path": "41"
    },
    "706": {
      "fn": "CLFactory.Init",
      "offset": [
        2383,
        2399
      ],
      "op": "OR",
      "path": "41"
    },
    "707": {
      "fn": "CLFactory.Init",
      "offset": [
        2383,
        2399
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "708": {
      "fn": "CLFactory.Init",
      "offset": [
        2383,
        2399
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "709": {
      "fn": "CLFactory.Init",
      "offset": [
        2383,
        2399
      ],
      "op": "SSTORE",
      "path": "41"
    },
    "710": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "712": {
      "fn": "CLFactory.Init",
      "offset": [
        2410,
        2420
      ],
      "op": "DUP4",
      "path": "41",
      "statement": 5
    },
    "713": {
      "fn": "CLFactory.Init",
      "offset": [
        2410,
        2420
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "714": {
      "fn": "CLFactory.Init",
      "offset": [
        2410,
        2420
      ],
      "op": "SSTORE",
      "path": "41"
    },
    "715": {
      "fn": "CLFactory.Init",
      "offset": [
        2430,
        2446
      ],
      "op": "DUP3",
      "path": "41",
      "statement": 6
    },
    "716": {
      "fn": "CLFactory.Init",
      "offset": [
        2430,
        2446
      ],
      "op": "DUP1",
      "path": "41"
    },
    "717": {
      "fn": "CLFactory.Init",
      "offset": [
        2430,
        2446
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "718": {
      "fn": "CLFactory.Init",
      "offset": [
        2430,
        2446
      ],
      "op": "PUSH32",
      "path": "41",
      "value": "0xB9C6DE81004E18DEDADCA3E5EABAAB449CA91DFF6F58EFC9461DA635FE77F849"
    },
    "751": {
      "fn": "CLFactory.Init",
      "offset": [
        2430,
        2471
      ],
      "op": "DUP1",
      "path": "41"
    },
    "752": {
      "fn": "CLFactory.Init",
      "offset": [
        2430,
        2471
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "753": {
      "fn": "CLFactory.Init",
      "offset": [
        2430,
        2471
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "754": {
      "fn": "CLFactory.Init",
      "offset": [
        2430,
        2471
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "755": {
      "fn": "CLFactory.Init",
      "offset": [
        2430,
        2471
      ],
      "op": "AND",
      "path": "41"
    },
    "756": {
      "fn": "CLFactory.Init",
      "offset": [
        2430,
        2471
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "757": {
      "fn": "CLFactory.Init",
      "offset": [
        2430,
        2471
      ],
      "op": "SSTORE",
      "path": "41"
    },
    "758": {
      "fn": "CLFactory.Init",
      "offset": [
        2481,
        2489
      ],
      "op": "PUSH1",
      "path": "41",
      "statement": 7,
      "value": "0x1B"
    },
    "760": {
      "fn": "CLFactory.Init",
      "offset": [
        2430,
        2446
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x20"
    },
    "762": {
      "fn": "CLFactory.Init",
      "offset": [
        2481,
        2503
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "763": {
      "fn": "CLFactory.Init",
      "offset": [
        2481,
        2503
      ],
      "op": "DUP2",
      "path": "41"
    },
    "764": {
      "fn": "CLFactory.Init",
      "offset": [
        2481,
        2503
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "765": {
      "fn": "CLFactory.Init",
      "offset": [
        2481,
        2503
      ],
      "op": "PUSH32",
      "path": "41",
      "value": "0x584F46C60AF19681376031579ADB04A2416E54EE5505351C2A8435E3766026EA"
    },
    "798": {
      "fn": "CLFactory.Init",
      "offset": [
        2481,
        2512
      ],
      "op": "DUP4",
      "path": "41"
    },
    "799": {
      "fn": "CLFactory.Init",
      "offset": [
        2481,
        2512
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "800": {
      "fn": "CLFactory.Init",
      "offset": [
        2481,
        2512
      ],
      "op": "SSTORE",
      "path": "41"
    },
    "801": {
      "op": "PUSH2",
      "value": "0xFF00"
    },
    "804": {
      "op": "NOT"
    },
    "805": {
      "offset": [
        4496,
        4518
      ],
      "op": "PUSH2",
      "path": "14",
      "value": "0x100"
    },
    "808": {
      "fn": "CLFactory.Init",
      "offset": [
        4496,
        4518
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0xFF"
    },
    "810": {
      "fn": "CLFactory.Init",
      "offset": [
        4496,
        4518
      ],
      "op": "DUP7",
      "path": "14"
    },
    "811": {
      "fn": "CLFactory.Init",
      "offset": [
        4496,
        4518
      ],
      "op": "AND",
      "path": "14"
    },
    "812": {
      "op": "PUSH2",
      "value": "0xFFFF"
    },
    "815": {
      "op": "NOT"
    },
    "816": {
      "offset": [
        4528,
        4548
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "817": {
      "fn": "CLFactory.Init",
      "offset": [
        4528,
        4548
      ],
      "op": "SWAP5",
      "path": "14"
    },
    "818": {
      "fn": "CLFactory.Init",
      "offset": [
        4528,
        4548
      ],
      "op": "AND",
      "path": "14"
    },
    "819": {
      "fn": "CLFactory.Init",
      "offset": [
        4528,
        4548
      ],
      "op": "DUP5",
      "path": "14"
    },
    "820": {
      "fn": "CLFactory.Init",
      "offset": [
        4528,
        4548
      ],
      "op": "OR",
      "path": "14"
    },
    "821": {
      "fn": "CLFactory.Init",
      "offset": [
        4528,
        4548
      ],
      "op": "OR",
      "path": "14"
    },
    "822": {
      "offset": [
        4569,
        4590
      ],
      "op": "AND",
      "path": "14"
    },
    "823": {
      "fn": "CLFactory.Init",
      "offset": [
        4569,
        4590
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "824": {
      "fn": "CLFactory.Init",
      "offset": [
        4569,
        4590
      ],
      "op": "SWAP3",
      "path": "14"
    },
    "825": {
      "fn": "CLFactory.Init",
      "offset": [
        4569,
        4590
      ],
      "op": "SSTORE",
      "path": "14"
    },
    "826": {
      "fn": "CLFactory.Init",
      "offset": [
        2430,
        2446
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "828": {
      "offset": [
        4605,
        4625
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "829": {
      "op": "SWAP1"
    },
    "830": {
      "op": "DUP2"
    },
    "831": {
      "op": "MSTORE"
    },
    "832": {
      "offset": [
        4605,
        4625
      ],
      "op": "PUSH32",
      "path": "14",
      "value": "0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498"
    },
    "865": {
      "fn": "CLFactory.Init",
      "offset": [
        4605,
        4625
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "866": {
      "op": "ADD"
    },
    "867": {
      "offset": [
        4605,
        4625
      ],
      "op": "PUSH1",
      "path": "14",
      "value": "0x40"
    },
    "869": {
      "fn": "CLFactory.Init",
      "offset": [
        4605,
        4625
      ],
      "op": "MLOAD",
      "path": "14"
    },
    "870": {
      "fn": "CLFactory.Init",
      "offset": [
        4605,
        4625
      ],
      "op": "DUP1",
      "path": "14"
    },
    "871": {
      "fn": "CLFactory.Init",
      "offset": [
        4605,
        4625
      ],
      "op": "SWAP2",
      "path": "14"
    },
    "872": {
      "fn": "CLFactory.Init",
      "offset": [
        4605,
        4625
      ],
      "op": "SUB",
      "path": "14"
    },
    "873": {
      "fn": "CLFactory.Init",
      "offset": [
        4605,
        4625
      ],
      "op": "SWAP1",
      "path": "14"
    },
    "874": {
      "fn": "CLFactory.Init",
      "offset": [
        4605,
        4625
      ],
      "op": "LOG1",
      "path": "14"
    },
    "875": {
      "fn": "CLFactory.Init",
      "offset": [
        1949,
        2519
      ],
      "op": "POP",
      "path": "41"
    },
    "876": {
      "fn": "CLFactory.Init",
      "offset": [
        1949,
        2519
      ],
      "op": "POP",
      "path": "41"
    },
    "877": {
      "fn": "CLFactory.Init",
      "offset": [
        1949,
        2519
      ],
      "op": "POP",
      "path": "41"
    },
    "878": {
      "fn": "CLFactory.Init",
      "offset": [
        1949,
        2519
      ],
      "op": "POP",
      "path": "41"
    },
    "879": {
      "fn": "CLFactory.Init",
      "offset": [
        1949,
        2519
      ],
      "op": "POP",
      "path": "41"
    },
    "880": {
      "fn": "CLFactory.Init",
      "offset": [
        1949,
        2519
      ],
      "op": "POP",
      "path": "41"
    },
    "881": {
      "fn": "CLFactory.Init",
      "jump": "o",
      "offset": [
        1949,
        2519
      ],
      "op": "JUMP",
      "path": "41"
    },
    "882": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5025,
        5134
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "883": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5110
      ],
      "op": "PUSH1",
      "path": "41",
      "statement": 8,
      "value": "0x1A"
    },
    "885": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5110
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "886": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "888": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "DUP1",
      "path": "41"
    },
    "889": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "890": {
      "op": "PUSH4",
      "value": "0x5C60DA1B"
    },
    "895": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "897": {
      "op": "SHL"
    },
    "898": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "DUP2",
      "path": "41"
    },
    "899": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "900": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "901": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "902": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5075,
        5082
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x0"
    },
    "904": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5075,
        5082
      ],
      "op": "SWAP3",
      "path": "41"
    },
    "905": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "907": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "909": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "911": {
      "op": "SHL"
    },
    "912": {
      "op": "SUB"
    },
    "913": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5110
      ],
      "op": "AND",
      "path": "41"
    },
    "914": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5110
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "915": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5125
      ],
      "op": "PUSH4",
      "path": "41",
      "value": "0x5C60DA1B"
    },
    "920": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5125
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "921": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x4"
    },
    "923": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "DUP1",
      "path": "41"
    },
    "924": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "DUP4",
      "path": "41"
    },
    "925": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "ADD",
      "path": "41"
    },
    "926": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "SWAP3",
      "path": "41"
    },
    "927": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x20"
    },
    "929": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "SWAP3",
      "path": "41"
    },
    "930": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "931": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "932": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "DUP3",
      "path": "41"
    },
    "933": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "934": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "SUB",
      "path": "41"
    },
    "935": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "ADD",
      "path": "41"
    },
    "936": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "DUP2",
      "path": "41"
    },
    "937": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5110
      ],
      "op": "DUP7",
      "path": "41"
    },
    "938": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "GAS",
      "path": "41"
    },
    "939": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "STATICCALL",
      "path": "41"
    },
    "940": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "ISZERO",
      "path": "41"
    },
    "941": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "DUP1",
      "path": "41"
    },
    "942": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "ISZERO",
      "path": "41"
    },
    "943": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x3BD"
    },
    "947": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "JUMPI",
      "path": "41"
    },
    "948": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "RETURNDATASIZE",
      "path": "41"
    },
    "949": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x0"
    },
    "951": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "DUP1",
      "path": "41"
    },
    "952": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "RETURNDATACOPY",
      "path": "41"
    },
    "953": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "RETURNDATASIZE",
      "path": "41"
    },
    "954": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x0"
    },
    "956": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "REVERT",
      "path": "41"
    },
    "957": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "958": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "POP",
      "path": "41"
    },
    "959": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "POP",
      "path": "41"
    },
    "960": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "POP",
      "path": "41"
    },
    "961": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "POP",
      "path": "41"
    },
    "962": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "964": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "965": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "RETURNDATASIZE",
      "path": "41"
    },
    "966": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x1F"
    },
    "968": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "NOT",
      "path": "41"
    },
    "969": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x1F"
    },
    "971": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "DUP3",
      "path": "41"
    },
    "972": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "ADD",
      "path": "41"
    },
    "973": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "AND",
      "path": "41"
    },
    "974": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "DUP3",
      "path": "41"
    },
    "975": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "ADD",
      "path": "41"
    },
    "976": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "DUP1",
      "path": "41"
    },
    "977": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "979": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "980": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "POP",
      "path": "41"
    },
    "981": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "DUP2",
      "path": "41"
    },
    "982": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "ADD",
      "path": "41"
    },
    "983": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "984": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x3E3"
    },
    "988": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "989": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "990": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0xB6B"
    },
    "994": {
      "fn": "CLFactory.getImplementation",
      "jump": "i",
      "offset": [
        5101,
        5127
      ],
      "op": "JUMP",
      "path": "41"
    },
    "995": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5101,
        5127
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "996": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5094,
        5127
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "997": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5094,
        5127
      ],
      "op": "POP",
      "path": "41"
    },
    "998": {
      "fn": "CLFactory.getImplementation",
      "offset": [
        5025,
        5134
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "999": {
      "fn": "CLFactory.getImplementation",
      "jump": "o",
      "offset": [
        5025,
        5134
      ],
      "op": "JUMP",
      "path": "41"
    },
    "1000": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3054,
        5019
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "1001": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3414,
        3424
      ],
      "op": "CALLER",
      "path": "41"
    },
    "1002": {
      "offset": [
        339,
        372
      ],
      "op": "PUSH32",
      "path": "50",
      "value": "0xB93889D934070956C00846F50F9A10A747BD194BBA2F2E78A86D0C02386FDB1"
    },
    "1035": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3457,
        3490
      ],
      "op": "DUP8",
      "path": "41",
      "statement": 9
    },
    "1036": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3457,
        3490
      ],
      "op": "EQ",
      "path": "41"
    },
    "1037": {
      "branch": 17,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3457,
        3490
      ],
      "op": "DUP1",
      "path": "41"
    },
    "1038": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3457,
        3536
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x437"
    },
    "1042": {
      "branch": 17,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3457,
        3536
      ],
      "op": "JUMPI",
      "path": "41"
    },
    "1043": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3457,
        3536
      ],
      "op": "POP",
      "path": "41"
    },
    "1044": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3527,
        3536
      ],
      "op": "DUP7",
      "path": "41"
    },
    "1045": {
      "offset": [
        411,
        441
      ],
      "op": "PUSH32",
      "path": "50",
      "value": "0x16591A696FEE5867425B3DEE9FC0160A6C1BAEF77835BC3D204314106D639298"
    },
    "1078": {
      "branch": 18,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3506,
        3536
      ],
      "op": "EQ",
      "path": "41"
    },
    "1079": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3457,
        3536
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "1080": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3457,
        3588
      ],
      "op": "DUP1",
      "path": "41"
    },
    "1081": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3457,
        3588
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x462"
    },
    "1085": {
      "branch": 18,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3457,
        3588
      ],
      "op": "JUMPI",
      "path": "41"
    },
    "1086": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3457,
        3588
      ],
      "op": "POP",
      "path": "41"
    },
    "1087": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3579,
        3588
      ],
      "op": "DUP7",
      "path": "41"
    },
    "1088": {
      "offset": [
        486,
        522
      ],
      "op": "PUSH32",
      "path": "50",
      "value": "0xA0786F6450D5FB3298B8425105C1B75E6E01A1FF86CDABEA29909CDB0B4C83A7"
    },
    "1121": {
      "branch": 19,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3552,
        3588
      ],
      "op": "EQ",
      "path": "41"
    },
    "1122": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3457,
        3588
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "1123": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3435,
        3638
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x4B0"
    },
    "1127": {
      "branch": 19,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3435,
        3638
      ],
      "op": "JUMPI",
      "path": "41"
    },
    "1128": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3435,
        3638
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "1130": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3435,
        3638
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "1131": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1135": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1137": {
      "op": "SHL"
    },
    "1138": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3435,
        3638
      ],
      "op": "DUP2",
      "path": "41"
    },
    "1139": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3435,
        3638
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "1140": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1142": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3435,
        3638
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x4"
    },
    "1144": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3435,
        3638
      ],
      "op": "DUP3",
      "path": "41"
    },
    "1145": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3435,
        3638
      ],
      "op": "ADD",
      "path": "41"
    },
    "1146": {
      "op": "MSTORE"
    },
    "1147": {
      "op": "PUSH1",
      "value": "0x17"
    },
    "1149": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1151": {
      "op": "DUP3"
    },
    "1152": {
      "op": "ADD"
    },
    "1153": {
      "op": "MSTORE"
    },
    "1154": {
      "op": "PUSH32",
      "value": "0x496E76616C696420476F7665726E616E63652054797065000000000000000000"
    },
    "1187": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1189": {
      "op": "DUP3"
    },
    "1190": {
      "op": "ADD"
    },
    "1191": {
      "op": "MSTORE"
    },
    "1192": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1194": {
      "op": "ADD"
    },
    "1195": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3435,
        3638
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x262"
    },
    "1199": {
      "op": "JUMP"
    },
    "1200": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3435,
        3638
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "1201": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1203": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1205": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1207": {
      "op": "SHL"
    },
    "1208": {
      "op": "SUB"
    },
    "1209": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3653,
        3680
      ],
      "op": "DUP4",
      "path": "41"
    },
    "1210": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3653,
        3680
      ],
      "op": "AND",
      "path": "41"
    },
    "1211": {
      "branch": 20,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3653,
        3680
      ],
      "op": "ISZERO",
      "path": "41"
    },
    "1212": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3649,
        4309
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x62E"
    },
    "1216": {
      "branch": 20,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3649,
        4309
      ],
      "op": "JUMPI",
      "path": "41"
    },
    "1217": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3706,
        3716
      ],
      "op": "DUP2",
      "path": "41",
      "statement": 10
    },
    "1218": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3706,
        3723
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "1219": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3727,
        3729
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x41"
    },
    "1221": {
      "branch": 21,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3706,
        3729
      ],
      "op": "EQ",
      "path": "41"
    },
    "1222": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3697,
        3766
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x513"
    },
    "1226": {
      "branch": 21,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3697,
        3766
      ],
      "op": "JUMPI",
      "path": "41"
    },
    "1227": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3697,
        3766
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "1229": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3697,
        3766
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "1230": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1234": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1236": {
      "op": "SHL"
    },
    "1237": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3697,
        3766
      ],
      "op": "DUP2",
      "path": "41"
    },
    "1238": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3697,
        3766
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "1239": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1241": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3697,
        3766
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x4"
    },
    "1243": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3697,
        3766
      ],
      "op": "DUP3",
      "path": "41"
    },
    "1244": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3697,
        3766
      ],
      "op": "ADD",
      "path": "41"
    },
    "1245": {
      "op": "MSTORE"
    },
    "1246": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1248": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1250": {
      "op": "DUP3"
    },
    "1251": {
      "op": "ADD"
    },
    "1252": {
      "op": "MSTORE"
    },
    "1253": {
      "op": "PUSH32",
      "value": "0x437265617465434C483A20426164207369676E6174757265206C656E67746800"
    },
    "1286": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1288": {
      "op": "DUP3"
    },
    "1289": {
      "op": "ADD"
    },
    "1290": {
      "op": "MSTORE"
    },
    "1291": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1293": {
      "op": "ADD"
    },
    "1294": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3697,
        3766
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x262"
    },
    "1298": {
      "op": "JUMP"
    },
    "1299": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3697,
        3766
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "1300": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3847,
        3853
      ],
      "op": "PUSH1",
      "path": "41",
      "statement": 11,
      "value": "0xF"
    },
    "1302": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3847,
        3853
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "1303": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1305": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1307": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1309": {
      "op": "SHL"
    },
    "1310": {
      "op": "SUB"
    },
    "1311": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3847,
        3853
      ],
      "op": "AND",
      "path": "41"
    },
    "1312": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        3870
      ],
      "op": "PUSH4",
      "path": "41",
      "value": "0x364AE0D8"
    },
    "1317": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3892,
        3902
      ],
      "op": "DUP12",
      "path": "41"
    },
    "1318": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3924,
        3937
      ],
      "op": "DUP12",
      "path": "41"
    },
    "1319": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3959,
        3968
      ],
      "op": "DUP11",
      "path": "41"
    },
    "1320": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3990,
        3999
      ],
      "op": "DUP11",
      "path": "41"
    },
    "1321": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3847,
        3853
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x0"
    },
    "1323": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3990,
        4002
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x20"
    },
    "1325": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3990,
        4002
      ],
      "op": "MUL",
      "path": "41"
    },
    "1326": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3990,
        4002
      ],
      "op": "ADD",
      "path": "41"
    },
    "1327": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3990,
        4002
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "1328": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4024,
        4033
      ],
      "op": "DUP12",
      "path": "41"
    },
    "1329": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4034,
        4035
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x1"
    },
    "1331": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4024,
        4036
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x20"
    },
    "1333": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4024,
        4036
      ],
      "op": "MUL",
      "path": "41"
    },
    "1334": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4024,
        4036
      ],
      "op": "ADD",
      "path": "41"
    },
    "1335": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4024,
        4036
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "1336": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4058,
        4067
      ],
      "op": "DUP13",
      "path": "41"
    },
    "1337": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4068,
        4069
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x2"
    },
    "1339": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4058,
        4070
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x20"
    },
    "1341": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4058,
        4070
      ],
      "op": "MUL",
      "path": "41"
    },
    "1342": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4058,
        4070
      ],
      "op": "ADD",
      "path": "41"
    },
    "1343": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4058,
        4070
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "1344": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4092,
        4107
      ],
      "op": "DUP13",
      "path": "41"
    },
    "1345": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4108,
        4109
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x0"
    },
    "1347": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4092,
        4110
      ],
      "op": "DUP2",
      "path": "41"
    },
    "1348": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4092,
        4110
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "1349": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4092,
        4110
      ],
      "op": "DUP2",
      "path": "41"
    },
    "1350": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4092,
        4110
      ],
      "op": "LT",
      "path": "41"
    },
    "1351": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4092,
        4110
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x555"
    },
    "1355": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4092,
        4110
      ],
      "op": "JUMPI",
      "path": "41"
    },
    "1356": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4092,
        4110
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x555"
    },
    "1360": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4092,
        4110
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0xB8B"
    },
    "1364": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        4092,
        4110
      ],
      "op": "JUMP",
      "path": "41"
    },
    "1365": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4092,
        4110
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "1366": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4092,
        4110
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x20"
    },
    "1368": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4092,
        4110
      ],
      "op": "MUL",
      "path": "41"
    },
    "1369": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4092,
        4110
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x20"
    },
    "1371": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4092,
        4110
      ],
      "op": "ADD",
      "path": "41"
    },
    "1372": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4092,
        4110
      ],
      "op": "ADD",
      "path": "41"
    },
    "1373": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4092,
        4110
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "1374": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4140,
        4144
      ],
      "op": "ADDRESS",
      "path": "41"
    },
    "1375": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4167,
        4177
      ],
      "op": "DUP12",
      "path": "41"
    },
    "1376": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "1378": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "1379": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "DUP11",
      "path": "41"
    },
    "1380": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "PUSH4",
      "path": "41",
      "value": "0xFFFFFFFF"
    },
    "1385": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "AND",
      "path": "41"
    },
    "1386": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0xE0"
    },
    "1388": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "SHL",
      "path": "41"
    },
    "1389": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "DUP2",
      "path": "41"
    },
    "1390": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "1391": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x4"
    },
    "1393": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "ADD",
      "path": "41"
    },
    "1394": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x585"
    },
    "1398": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "SWAP10",
      "path": "41"
    },
    "1399": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "SWAP9",
      "path": "41"
    },
    "1400": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "SWAP8",
      "path": "41"
    },
    "1401": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "SWAP7",
      "path": "41"
    },
    "1402": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "SWAP6",
      "path": "41"
    },
    "1403": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "SWAP5",
      "path": "41"
    },
    "1404": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "SWAP4",
      "path": "41"
    },
    "1405": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "SWAP3",
      "path": "41"
    },
    "1406": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "1407": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1408": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0xBF1"
    },
    "1412": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        3835,
        4195
      ],
      "op": "JUMP",
      "path": "41"
    },
    "1413": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "1414": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x20"
    },
    "1416": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "1418": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "1419": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "DUP1",
      "path": "41"
    },
    "1420": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "DUP4",
      "path": "41"
    },
    "1421": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "SUB",
      "path": "41"
    },
    "1422": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "DUP2",
      "path": "41"
    },
    "1423": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "DUP7",
      "path": "41"
    },
    "1424": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "GAS",
      "path": "41"
    },
    "1425": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "STATICCALL",
      "path": "41"
    },
    "1426": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "ISZERO",
      "path": "41"
    },
    "1427": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "DUP1",
      "path": "41"
    },
    "1428": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "ISZERO",
      "path": "41"
    },
    "1429": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x5A3"
    },
    "1433": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "JUMPI",
      "path": "41"
    },
    "1434": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "RETURNDATASIZE",
      "path": "41"
    },
    "1435": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x0"
    },
    "1437": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "DUP1",
      "path": "41"
    },
    "1438": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "RETURNDATACOPY",
      "path": "41"
    },
    "1439": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "RETURNDATASIZE",
      "path": "41"
    },
    "1440": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x0"
    },
    "1442": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "REVERT",
      "path": "41"
    },
    "1443": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "1444": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "POP",
      "path": "41"
    },
    "1445": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "POP",
      "path": "41"
    },
    "1446": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "POP",
      "path": "41"
    },
    "1447": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "POP",
      "path": "41"
    },
    "1448": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "1450": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "1451": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "RETURNDATASIZE",
      "path": "41"
    },
    "1452": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x1F"
    },
    "1454": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "NOT",
      "path": "41"
    },
    "1455": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x1F"
    },
    "1457": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "DUP3",
      "path": "41"
    },
    "1458": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "ADD",
      "path": "41"
    },
    "1459": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "AND",
      "path": "41"
    },
    "1460": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "DUP3",
      "path": "41"
    },
    "1461": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "ADD",
      "path": "41"
    },
    "1462": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "DUP1",
      "path": "41"
    },
    "1463": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "1465": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "1466": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "POP",
      "path": "41"
    },
    "1467": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "DUP2",
      "path": "41"
    },
    "1468": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "ADD",
      "path": "41"
    },
    "1469": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1470": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x5C9"
    },
    "1474": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "1475": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1476": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0xB6B"
    },
    "1480": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        3835,
        4195
      ],
      "op": "JUMP",
      "path": "41"
    },
    "1481": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3835,
        4195
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "1482": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1484": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1486": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1488": {
      "op": "SHL"
    },
    "1489": {
      "op": "SUB"
    },
    "1490": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3818,
        4195
      ],
      "op": "AND",
      "path": "41"
    },
    "1491": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3818,
        3831
      ],
      "op": "DUP4",
      "path": "41"
    },
    "1492": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1494": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1496": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1498": {
      "op": "SHL"
    },
    "1499": {
      "op": "SUB"
    },
    "1500": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3818,
        4195
      ],
      "op": "AND",
      "path": "41"
    },
    "1501": {
      "branch": 22,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3818,
        4195
      ],
      "op": "EQ",
      "path": "41"
    },
    "1502": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3793,
        4257
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x62B"
    },
    "1506": {
      "branch": 22,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3793,
        4257
      ],
      "op": "JUMPI",
      "path": "41"
    },
    "1507": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3793,
        4257
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "1509": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3793,
        4257
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "1510": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1514": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1516": {
      "op": "SHL"
    },
    "1517": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3793,
        4257
      ],
      "op": "DUP2",
      "path": "41"
    },
    "1518": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3793,
        4257
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "1519": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1521": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3793,
        4257
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x4"
    },
    "1523": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3793,
        4257
      ],
      "op": "DUP3",
      "path": "41"
    },
    "1524": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3793,
        4257
      ],
      "op": "ADD",
      "path": "41"
    },
    "1525": {
      "op": "MSTORE"
    },
    "1526": {
      "op": "PUSH1",
      "value": "0x1C"
    },
    "1528": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1530": {
      "op": "DUP3"
    },
    "1531": {
      "op": "ADD"
    },
    "1532": {
      "op": "MSTORE"
    },
    "1533": {
      "op": "PUSH32",
      "value": "0x437265617465434C483A20496E76616C6964205369676E617475726500000000"
    },
    "1566": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1568": {
      "op": "DUP3"
    },
    "1569": {
      "op": "ADD"
    },
    "1570": {
      "op": "MSTORE"
    },
    "1571": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1573": {
      "op": "ADD"
    },
    "1574": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3793,
        4257
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x262"
    },
    "1578": {
      "op": "JUMP"
    },
    "1579": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3793,
        4257
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "1580": {
      "op": "POP"
    },
    "1581": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4285,
        4298
      ],
      "op": "DUP2",
      "path": "41",
      "statement": 12
    },
    "1582": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3649,
        4309
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "1583": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4376,
        4385
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x1A"
    },
    "1585": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4376,
        4385
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "1586": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "1588": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "DUP1",
      "path": "41"
    },
    "1589": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "1590": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x80"
    },
    "1592": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "DUP2",
      "path": "41"
    },
    "1593": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "ADD",
      "path": "41"
    },
    "1594": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "DUP3",
      "path": "41"
    },
    "1595": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "1596": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4710,
        4714
      ],
      "op": "ADDRESS",
      "path": "41"
    },
    "1597": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "DUP2",
      "path": "41"
    },
    "1598": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "1599": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4717,
        4723
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0xF"
    },
    "1601": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4717,
        4723
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "1602": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1604": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1606": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1608": {
      "op": "SHL"
    },
    "1609": {
      "op": "SUB"
    },
    "1610": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4717,
        4723
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1611": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4717,
        4723
      ],
      "op": "DUP2",
      "path": "41"
    },
    "1612": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4717,
        4723
      ],
      "op": "AND",
      "path": "41"
    },
    "1613": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x20"
    },
    "1615": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "DUP4",
      "path": "41"
    },
    "1616": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "ADD",
      "path": "41"
    },
    "1617": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "1618": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "DUP8",
      "path": "41"
    },
    "1619": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "DUP2",
      "path": "41"
    },
    "1620": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "AND",
      "path": "41"
    },
    "1621": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "DUP3",
      "path": "41"
    },
    "1622": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "DUP5",
      "path": "41"
    },
    "1623": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "ADD",
      "path": "41"
    },
    "1624": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "1625": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4738,
        4755
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0xC"
    },
    "1627": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4738,
        4755
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "1628": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4738,
        4755
      ],
      "op": "DUP2",
      "path": "41"
    },
    "1629": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4738,
        4755
      ],
      "op": "AND",
      "path": "41"
    },
    "1630": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x60"
    },
    "1632": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "DUP4",
      "path": "41"
    },
    "1633": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "ADD",
      "path": "41"
    },
    "1634": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "1635": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "1636": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "1637": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4319,
        4336
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x0"
    },
    "1639": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4319,
        4336
      ],
      "op": "SWAP4",
      "path": "41"
    },
    "1640": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4376,
        4385
      ],
      "op": "SWAP3",
      "path": "41"
    },
    "1641": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4376,
        4385
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1642": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4376,
        4385
      ],
      "op": "SWAP3",
      "path": "41"
    },
    "1643": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4376,
        4385
      ],
      "op": "AND",
      "path": "41"
    },
    "1644": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4376,
        4385
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "1645": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x689"
    },
    "1649": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "1650": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4530,
        4540
      ],
      "op": "DUP6",
      "path": "41"
    },
    "1651": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4530,
        4540
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "1652": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4559,
        4569
      ],
      "op": "DUP16",
      "path": "41"
    },
    "1653": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4559,
        4569
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "1654": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4587,
        4600
      ],
      "op": "DUP16",
      "path": "41"
    },
    "1655": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4587,
        4600
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "1656": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4618,
        4628
      ],
      "op": "DUP16",
      "path": "41"
    },
    "1657": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4618,
        4628
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "1658": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4646,
        4655
      ],
      "op": "DUP16",
      "path": "41"
    },
    "1659": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4646,
        4655
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "1660": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4673,
        4682
      ],
      "op": "DUP16",
      "path": "41"
    },
    "1661": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4673,
        4682
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "1662": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1663": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4775,
        4790
      ],
      "op": "DUP16",
      "path": "41"
    },
    "1664": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4775,
        4790
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1665": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x24"
    },
    "1667": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "ADD",
      "path": "41"
    },
    "1668": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0xCE7"
    },
    "1672": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        4401,
        4804
      ],
      "op": "JUMP",
      "path": "41"
    },
    "1673": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "1674": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "1676": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "DUP1",
      "path": "41"
    },
    "1677": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "1678": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1680": {
      "op": "NOT"
    },
    "1681": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "DUP2",
      "path": "41"
    },
    "1682": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "DUP5",
      "path": "41"
    },
    "1683": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "SUB",
      "path": "41"
    },
    "1684": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "ADD",
      "path": "41"
    },
    "1685": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "DUP2",
      "path": "41"
    },
    "1686": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "1687": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "1688": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "DUP2",
      "path": "41"
    },
    "1689": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "1690": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x20"
    },
    "1692": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "DUP3",
      "path": "41"
    },
    "1693": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "ADD",
      "path": "41"
    },
    "1694": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "DUP1",
      "path": "41"
    },
    "1695": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "1696": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1698": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1700": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1702": {
      "op": "SHL"
    },
    "1703": {
      "op": "SUB"
    },
    "1704": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "AND",
      "path": "41"
    },
    "1705": {
      "op": "PUSH4",
      "value": "0x71043D27"
    },
    "1710": {
      "op": "PUSH1",
      "value": "0xE1"
    },
    "1712": {
      "op": "SHL"
    },
    "1713": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "OR",
      "path": "41"
    },
    "1714": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1715": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4401,
        4804
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "1716": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4339,
        4814
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "1717": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4339,
        4814
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x6BF"
    },
    "1721": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4339,
        4814
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1722": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4339,
        4814
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x78C"
    },
    "1726": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        4339,
        4814
      ],
      "op": "JUMP",
      "path": "41"
    },
    "1727": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4339,
        4814
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "1728": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4339,
        4814
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x6CC"
    },
    "1732": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4339,
        4814
      ],
      "op": "SWAP3",
      "path": "41"
    },
    "1733": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4339,
        4814
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "1734": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4339,
        4814
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1735": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4339,
        4814
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0xD8A"
    },
    "1739": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        4339,
        4814
      ],
      "op": "JUMP",
      "path": "41"
    },
    "1740": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4339,
        4814
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "1741": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4339,
        4814
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "1743": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4339,
        4814
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "1744": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4339,
        4814
      ],
      "op": "DUP1",
      "path": "41"
    },
    "1745": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4339,
        4814
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "1746": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4339,
        4814
      ],
      "op": "SUB",
      "path": "41"
    },
    "1747": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4339,
        4814
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1748": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4339,
        4814
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x0"
    },
    "1750": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4339,
        4814
      ],
      "op": "CREATE",
      "path": "41"
    },
    "1751": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4339,
        4814
      ],
      "op": "DUP1",
      "path": "41"
    },
    "1752": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4339,
        4814
      ],
      "op": "ISZERO",
      "path": "41"
    },
    "1753": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4339,
        4814
      ],
      "op": "DUP1",
      "path": "41"
    },
    "1754": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4339,
        4814
      ],
      "op": "ISZERO",
      "path": "41"
    },
    "1755": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4339,
        4814
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x6E9"
    },
    "1759": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4339,
        4814
      ],
      "op": "JUMPI",
      "path": "41"
    },
    "1760": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4339,
        4814
      ],
      "op": "RETURNDATASIZE",
      "path": "41"
    },
    "1761": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4339,
        4814
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x0"
    },
    "1763": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4339,
        4814
      ],
      "op": "DUP1",
      "path": "41"
    },
    "1764": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4339,
        4814
      ],
      "op": "RETURNDATACOPY",
      "path": "41"
    },
    "1765": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4339,
        4814
      ],
      "op": "RETURNDATASIZE",
      "path": "41"
    },
    "1766": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4339,
        4814
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x0"
    },
    "1768": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4339,
        4814
      ],
      "op": "REVERT",
      "path": "41"
    },
    "1769": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4339,
        4814
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "1770": {
      "op": "POP"
    },
    "1771": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4825,
        4831
      ],
      "op": "PUSH1",
      "path": "41",
      "statement": 13,
      "value": "0x1"
    },
    "1773": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4825,
        4833
      ],
      "op": "DUP1",
      "path": "41"
    },
    "1774": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4825,
        4833
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "1775": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4319,
        4814
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "1776": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4319,
        4814
      ],
      "op": "SWAP3",
      "path": "41"
    },
    "1777": {
      "op": "POP"
    },
    "1778": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4825,
        4831
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x0"
    },
    "1780": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4825,
        4833
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x6FE"
    },
    "1784": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4825,
        4833
      ],
      "op": "DUP4",
      "path": "41"
    },
    "1785": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4825,
        4833
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0xDB8"
    },
    "1789": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        4825,
        4833
      ],
      "op": "JUMP",
      "path": "41"
    },
    "1790": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4825,
        4833
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "1791": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4825,
        4833
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1792": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4825,
        4833
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "1793": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4825,
        4833
      ],
      "op": "SSTORE",
      "path": "41"
    },
    "1794": {
      "op": "POP"
    },
    "1795": {
      "op": "POP"
    },
    "1796": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4851,
        4857
      ],
      "op": "PUSH1",
      "path": "41",
      "statement": 14,
      "value": "0x1"
    },
    "1798": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4851,
        4857
      ],
      "op": "DUP1",
      "path": "41"
    },
    "1799": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4851,
        4857
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "1800": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4843,
        4859
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x0"
    },
    "1802": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4843,
        4859
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1803": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4843,
        4859
      ],
      "op": "DUP2",
      "path": "41"
    },
    "1804": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4843,
        4859
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "1805": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4843,
        4849
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x1C"
    },
    "1807": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4843,
        4859
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x20"
    },
    "1809": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4843,
        4859
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1810": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4843,
        4859
      ],
      "op": "DUP2",
      "path": "41"
    },
    "1811": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4843,
        4859
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "1812": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4843,
        4859
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "1814": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4843,
        4859
      ],
      "op": "DUP1",
      "path": "41"
    },
    "1815": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4843,
        4859
      ],
      "op": "DUP4",
      "path": "41"
    },
    "1816": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4843,
        4859
      ],
      "op": "KECCAK256",
      "path": "41"
    },
    "1817": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4843,
        4891
      ],
      "op": "DUP1",
      "path": "41"
    },
    "1818": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4843,
        4891
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "1819": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1821": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1823": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1825": {
      "op": "SHL"
    },
    "1826": {
      "op": "SUB"
    },
    "1827": {
      "op": "NOT"
    },
    "1828": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4843,
        4891
      ],
      "op": "AND",
      "path": "41"
    },
    "1829": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1831": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1833": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1835": {
      "op": "SHL"
    },
    "1836": {
      "op": "SUB"
    },
    "1837": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4843,
        4891
      ],
      "op": "DUP8",
      "path": "41"
    },
    "1838": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4843,
        4891
      ],
      "op": "AND",
      "path": "41"
    },
    "1839": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4843,
        4891
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1840": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4843,
        4891
      ],
      "op": "DUP2",
      "path": "41"
    },
    "1841": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4843,
        4891
      ],
      "op": "OR",
      "path": "41"
    },
    "1842": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4843,
        4891
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1843": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4843,
        4891
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "1844": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4843,
        4891
      ],
      "op": "SSTORE",
      "path": "41"
    },
    "1845": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4933,
        4939
      ],
      "op": "SWAP4",
      "path": "41",
      "statement": 15
    },
    "1846": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4933,
        4939
      ],
      "op": "SLOAD",
      "path": "41"
    },
    "1847": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4901,
        4930
      ],
      "op": "SWAP4",
      "path": "41"
    },
    "1848": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4901,
        4930
      ],
      "op": "DUP4",
      "path": "41"
    },
    "1849": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4901,
        4930
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "1850": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4901,
        4909
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x1B"
    },
    "1852": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4901,
        4930
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1853": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4901,
        4930
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "1854": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4901,
        4930
      ],
      "op": "MSTORE",
      "path": "41"
    },
    "1855": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4901,
        4930
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1856": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4901,
        4930
      ],
      "op": "DUP2",
      "path": "41"
    },
    "1857": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4901,
        4930
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1858": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4901,
        4930
      ],
      "op": "KECCAK256",
      "path": "41"
    },
    "1859": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4901,
        4939
      ],
      "op": "DUP3",
      "path": "41"
    },
    "1860": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4901,
        4939
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1861": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4901,
        4939
      ],
      "op": "SSTORE",
      "path": "41"
    },
    "1862": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4955,
        5012
      ],
      "op": "MLOAD",
      "path": "41",
      "statement": 16
    },
    "1863": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4955,
        5012
      ],
      "op": "PUSH32",
      "path": "41",
      "value": "0x717908FB0165729C0CFD8BBC622F5EDE46A85E555AC30657FA94A188BCA698D"
    },
    "1896": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4955,
        5012
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "1897": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4955,
        5012
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0x777"
    },
    "1901": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4955,
        5012
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "1902": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4843,
        4891
      ],
      "op": "DUP5",
      "path": "41"
    },
    "1903": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4843,
        4891
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "1904": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4992,
        5002
      ],
      "op": "DUP16",
      "path": "41"
    },
    "1905": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4992,
        5002
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "1906": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4955,
        5012
      ],
      "op": "PUSH3",
      "path": "41",
      "value": "0xDE2"
    },
    "1910": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        4955,
        5012
      ],
      "op": "JUMP",
      "path": "41"
    },
    "1911": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4955,
        5012
      ],
      "op": "JUMPDEST",
      "path": "41"
    },
    "1912": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4955,
        5012
      ],
      "op": "PUSH1",
      "path": "41",
      "value": "0x40"
    },
    "1914": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4955,
        5012
      ],
      "op": "MLOAD",
      "path": "41"
    },
    "1915": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4955,
        5012
      ],
      "op": "DUP1",
      "path": "41"
    },
    "1916": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4955,
        5012
      ],
      "op": "SWAP2",
      "path": "41"
    },
    "1917": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4955,
        5012
      ],
      "op": "SUB",
      "path": "41"
    },
    "1918": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4955,
        5012
      ],
      "op": "SWAP1",
      "path": "41"
    },
    "1919": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4955,
        5012
      ],
      "op": "LOG1",
      "path": "41"
    },
    "1920": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3383,
        5019
      ],
      "op": "POP",
      "path": "41"
    },
    "1921": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3383,
        5019
      ],
      "op": "POP",
      "path": "41"
    },
    "1922": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3054,
        5019
      ],
      "op": "POP",
      "path": "41"
    },
    "1923": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3054,
        5019
      ],
      "op": "POP",
      "path": "41"
    },
    "1924": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3054,
        5019
      ],
      "op": "POP",
      "path": "41"
    },
    "1925": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3054,
        5019
      ],
      "op": "POP",
      "path": "41"
    },
    "1926": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3054,
        5019
      ],
      "op": "POP",
      "path": "41"
    },
    "1927": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3054,
        5019
      ],
      "op": "POP",
      "path": "41"
    },
    "1928": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3054,
        5019
      ],
      "op": "POP",
      "path": "41"
    },
    "1929": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3054,
        5019
      ],
      "op": "POP",
      "path": "41"
    },
    "1930": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3054,
        5019
      ],
      "op": "POP",
      "path": "41"
    },
    "1931": {
      "fn": "CLFactory.CreateCLH",
      "jump": "o",
      "offset": [
        3054,
        5019
      ],
      "op": "JUMP",
      "path": "41"
    },
    "1932": {
      "op": "JUMPDEST"
    },
    "1933": {
      "op": "PUSH2",
      "value": "0x90B"
    },
    "1936": {
      "op": "DUP1"
    },
    "1937": {
      "op": "PUSH3",
      "value": "0xE19"
    },
    "1941": {
      "op": "DUP4"
    },
    "1942": {
      "op": "CODECOPY"
    },
    "1943": {
      "op": "ADD"
    },
    "1944": {
      "op": "SWAP1"
    },
    "1945": {
      "jump": "o",
      "op": "JUMP"
    },
    "1946": {
      "op": "JUMPDEST"
    },
    "1947": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1949": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1951": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1953": {
      "op": "SHL"
    },
    "1954": {
      "op": "SUB"
    },
    "1955": {
      "op": "DUP2"
    },
    "1956": {
      "op": "AND"
    },
    "1957": {
      "op": "DUP2"
    },
    "1958": {
      "op": "EQ"
    },
    "1959": {
      "op": "PUSH3",
      "value": "0x7B0"
    },
    "1963": {
      "op": "JUMPI"
    },
    "1964": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1966": {
      "op": "DUP1"
    },
    "1967": {
      "op": "REVERT"
    },
    "1968": {
      "op": "JUMPDEST"
    },
    "1969": {
      "op": "POP"
    },
    "1970": {
      "jump": "o",
      "op": "JUMP"
    },
    "1971": {
      "op": "JUMPDEST"
    },
    "1972": {
      "op": "DUP1"
    },
    "1973": {
      "op": "CALLDATALOAD"
    },
    "1974": {
      "op": "PUSH3",
      "value": "0x7C0"
    },
    "1978": {
      "op": "DUP2"
    },
    "1979": {
      "op": "PUSH3",
      "value": "0x79A"
    },
    "1983": {
      "jump": "i",
      "op": "JUMP"
    },
    "1984": {
      "op": "JUMPDEST"
    },
    "1985": {
      "op": "SWAP2"
    },
    "1986": {
      "op": "SWAP1"
    },
    "1987": {
      "op": "POP"
    },
    "1988": {
      "jump": "o",
      "op": "JUMP"
    },
    "1989": {
      "op": "JUMPDEST"
    },
    "1990": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1992": {
      "op": "DUP1"
    },
    "1993": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1995": {
      "op": "DUP1"
    },
    "1996": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1998": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2000": {
      "op": "DUP7"
    },
    "2001": {
      "op": "DUP9"
    },
    "2002": {
      "op": "SUB"
    },
    "2003": {
      "op": "SLT"
    },
    "2004": {
      "op": "ISZERO"
    },
    "2005": {
      "op": "PUSH3",
      "value": "0x7DE"
    },
    "2009": {
      "op": "JUMPI"
    },
    "2010": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2012": {
      "op": "DUP1"
    },
    "2013": {
      "op": "REVERT"
    },
    "2014": {
      "op": "JUMPDEST"
    },
    "2015": {
      "op": "DUP6"
    },
    "2016": {
      "op": "CALLDATALOAD"
    },
    "2017": {
      "op": "PUSH3",
      "value": "0x7EB"
    },
    "2021": {
      "op": "DUP2"
    },
    "2022": {
      "op": "PUSH3",
      "value": "0x79A"
    },
    "2026": {
      "jump": "i",
      "op": "JUMP"
    },
    "2027": {
      "op": "JUMPDEST"
    },
    "2028": {
      "op": "SWAP5"
    },
    "2029": {
      "op": "POP"
    },
    "2030": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2032": {
      "op": "DUP7"
    },
    "2033": {
      "op": "ADD"
    },
    "2034": {
      "op": "CALLDATALOAD"
    },
    "2035": {
      "op": "PUSH3",
      "value": "0x7FD"
    },
    "2039": {
      "op": "DUP2"
    },
    "2040": {
      "op": "PUSH3",
      "value": "0x79A"
    },
    "2044": {
      "jump": "i",
      "op": "JUMP"
    },
    "2045": {
      "op": "JUMPDEST"
    },
    "2046": {
      "op": "SWAP4"
    },
    "2047": {
      "op": "POP"
    },
    "2048": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2050": {
      "op": "DUP7"
    },
    "2051": {
      "op": "ADD"
    },
    "2052": {
      "op": "CALLDATALOAD"
    },
    "2053": {
      "op": "PUSH3",
      "value": "0x80F"
    },
    "2057": {
      "op": "DUP2"
    },
    "2058": {
      "op": "PUSH3",
      "value": "0x79A"
    },
    "2062": {
      "jump": "i",
      "op": "JUMP"
    },
    "2063": {
      "op": "JUMPDEST"
    },
    "2064": {
      "op": "SWAP3"
    },
    "2065": {
      "op": "POP"
    },
    "2066": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2068": {
      "op": "DUP7"
    },
    "2069": {
      "op": "ADD"
    },
    "2070": {
      "op": "CALLDATALOAD"
    },
    "2071": {
      "op": "PUSH3",
      "value": "0x821"
    },
    "2075": {
      "op": "DUP2"
    },
    "2076": {
      "op": "PUSH3",
      "value": "0x79A"
    },
    "2080": {
      "jump": "i",
      "op": "JUMP"
    },
    "2081": {
      "op": "JUMPDEST"
    },
    "2082": {
      "op": "SWAP2"
    },
    "2083": {
      "op": "POP"
    },
    "2084": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2086": {
      "op": "DUP7"
    },
    "2087": {
      "op": "ADD"
    },
    "2088": {
      "op": "CALLDATALOAD"
    },
    "2089": {
      "op": "PUSH3",
      "value": "0x833"
    },
    "2093": {
      "op": "DUP2"
    },
    "2094": {
      "op": "PUSH3",
      "value": "0x79A"
    },
    "2098": {
      "jump": "i",
      "op": "JUMP"
    },
    "2099": {
      "op": "JUMPDEST"
    },
    "2100": {
      "op": "DUP1"
    },
    "2101": {
      "op": "SWAP2"
    },
    "2102": {
      "op": "POP"
    },
    "2103": {
      "op": "POP"
    },
    "2104": {
      "op": "SWAP3"
    },
    "2105": {
      "op": "SWAP6"
    },
    "2106": {
      "op": "POP"
    },
    "2107": {
      "op": "SWAP3"
    },
    "2108": {
      "op": "SWAP6"
    },
    "2109": {
      "op": "SWAP1"
    },
    "2110": {
      "op": "SWAP4"
    },
    "2111": {
      "op": "POP"
    },
    "2112": {
      "jump": "o",
      "op": "JUMP"
    },
    "2113": {
      "op": "JUMPDEST"
    },
    "2114": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2116": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2118": {
      "op": "DUP3"
    },
    "2119": {
      "op": "DUP5"
    },
    "2120": {
      "op": "SUB"
    },
    "2121": {
      "op": "SLT"
    },
    "2122": {
      "op": "ISZERO"
    },
    "2123": {
      "op": "PUSH3",
      "value": "0x854"
    },
    "2127": {
      "op": "JUMPI"
    },
    "2128": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2130": {
      "op": "DUP1"
    },
    "2131": {
      "op": "REVERT"
    },
    "2132": {
      "op": "JUMPDEST"
    },
    "2133": {
      "op": "POP"
    },
    "2134": {
      "op": "CALLDATALOAD"
    },
    "2135": {
      "op": "SWAP2"
    },
    "2136": {
      "op": "SWAP1"
    },
    "2137": {
      "op": "POP"
    },
    "2138": {
      "jump": "o",
      "op": "JUMP"
    },
    "2139": {
      "op": "JUMPDEST"
    },
    "2140": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2142": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2144": {
      "op": "DUP3"
    },
    "2145": {
      "op": "DUP5"
    },
    "2146": {
      "op": "SUB"
    },
    "2147": {
      "op": "SLT"
    },
    "2148": {
      "op": "ISZERO"
    },
    "2149": {
      "op": "PUSH3",
      "value": "0x86E"
    },
    "2153": {
      "op": "JUMPI"
    },
    "2154": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2156": {
      "op": "DUP1"
    },
    "2157": {
      "op": "REVERT"
    },
    "2158": {
      "op": "JUMPDEST"
    },
    "2159": {
      "op": "DUP2"
    },
    "2160": {
      "op": "CALLDATALOAD"
    },
    "2161": {
      "op": "PUSH3",
      "value": "0x87B"
    },
    "2165": {
      "op": "DUP2"
    },
    "2166": {
      "op": "PUSH3",
      "value": "0x79A"
    },
    "2170": {
      "jump": "i",
      "op": "JUMP"
    },
    "2171": {
      "op": "JUMPDEST"
    },
    "2172": {
      "op": "SWAP4"
    },
    "2173": {
      "op": "SWAP3"
    },
    "2174": {
      "op": "POP"
    },
    "2175": {
      "op": "POP"
    },
    "2176": {
      "op": "POP"
    },
    "2177": {
      "jump": "o",
      "op": "JUMP"
    },
    "2178": {
      "op": "JUMPDEST"
    },
    "2179": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2184": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2186": {
      "op": "SHL"
    },
    "2187": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2189": {
      "op": "MSTORE"
    },
    "2190": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "2192": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2194": {
      "op": "MSTORE"
    },
    "2195": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2197": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2199": {
      "op": "REVERT"
    },
    "2200": {
      "op": "JUMPDEST"
    },
    "2201": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2203": {
      "op": "MLOAD"
    },
    "2204": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2206": {
      "op": "DUP3"
    },
    "2207": {
      "op": "ADD"
    },
    "2208": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2210": {
      "op": "NOT"
    },
    "2211": {
      "op": "AND"
    },
    "2212": {
      "op": "DUP2"
    },
    "2213": {
      "op": "ADD"
    },
    "2214": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "2223": {
      "op": "DUP2"
    },
    "2224": {
      "op": "GT"
    },
    "2225": {
      "op": "DUP3"
    },
    "2226": {
      "op": "DUP3"
    },
    "2227": {
      "op": "LT"
    },
    "2228": {
      "op": "OR"
    },
    "2229": {
      "op": "ISZERO"
    },
    "2230": {
      "op": "PUSH3",
      "value": "0x8C4"
    },
    "2234": {
      "op": "JUMPI"
    },
    "2235": {
      "op": "PUSH3",
      "value": "0x8C4"
    },
    "2239": {
      "op": "PUSH3",
      "value": "0x882"
    },
    "2243": {
      "jump": "i",
      "op": "JUMP"
    },
    "2244": {
      "op": "JUMPDEST"
    },
    "2245": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2247": {
      "op": "MSTORE"
    },
    "2248": {
      "op": "SWAP2"
    },
    "2249": {
      "op": "SWAP1"
    },
    "2250": {
      "op": "POP"
    },
    "2251": {
      "jump": "o",
      "op": "JUMP"
    },
    "2252": {
      "op": "JUMPDEST"
    },
    "2253": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2255": {
      "op": "DUP3"
    },
    "2256": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2258": {
      "op": "DUP4"
    },
    "2259": {
      "op": "ADD"
    },
    "2260": {
      "op": "SLT"
    },
    "2261": {
      "op": "PUSH3",
      "value": "0x8DE"
    },
    "2265": {
      "op": "JUMPI"
    },
    "2266": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2268": {
      "op": "DUP1"
    },
    "2269": {
      "op": "REVERT"
    },
    "2270": {
      "op": "JUMPDEST"
    },
    "2271": {
      "op": "DUP2"
    },
    "2272": {
      "op": "CALLDATALOAD"
    },
    "2273": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "2282": {
      "op": "DUP2"
    },
    "2283": {
      "op": "GT"
    },
    "2284": {
      "op": "ISZERO"
    },
    "2285": {
      "op": "PUSH3",
      "value": "0x8FB"
    },
    "2289": {
      "op": "JUMPI"
    },
    "2290": {
      "op": "PUSH3",
      "value": "0x8FB"
    },
    "2294": {
      "op": "PUSH3",
      "value": "0x882"
    },
    "2298": {
      "jump": "i",
      "op": "JUMP"
    },
    "2299": {
      "op": "JUMPDEST"
    },
    "2300": {
      "op": "PUSH3",
      "value": "0x910"
    },
    "2304": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2306": {
      "op": "DUP3"
    },
    "2307": {
      "op": "ADD"
    },
    "2308": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2310": {
      "op": "NOT"
    },
    "2311": {
      "op": "AND"
    },
    "2312": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2314": {
      "op": "ADD"
    },
    "2315": {
      "op": "PUSH3",
      "value": "0x898"
    },
    "2319": {
      "jump": "i",
      "op": "JUMP"
    },
    "2320": {
      "op": "JUMPDEST"
    },
    "2321": {
      "op": "DUP2"
    },
    "2322": {
      "op": "DUP2"
    },
    "2323": {
      "op": "MSTORE"
    },
    "2324": {
      "op": "DUP5"
    },
    "2325": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2327": {
      "op": "DUP4"
    },
    "2328": {
      "op": "DUP7"
    },
    "2329": {
      "op": "ADD"
    },
    "2330": {
      "op": "ADD"
    },
    "2331": {
      "op": "GT"
    },
    "2332": {
      "op": "ISZERO"
    },
    "2333": {
      "op": "PUSH3",
      "value": "0x926"
    },
    "2337": {
      "op": "JUMPI"
    },
    "2338": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2340": {
      "op": "DUP1"
    },
    "2341": {
      "op": "REVERT"
    },
    "2342": {
      "op": "JUMPDEST"
    },
    "2343": {
      "op": "DUP2"
    },
    "2344": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2346": {
      "op": "DUP6"
    },
    "2347": {
      "op": "ADD"
    },
    "2348": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2350": {
      "op": "DUP4"
    },
    "2351": {
      "op": "ADD"
    },
    "2352": {
      "op": "CALLDATACOPY"
    },
    "2353": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2355": {
      "op": "SWAP2"
    },
    "2356": {
      "op": "DUP2"
    },
    "2357": {
      "op": "ADD"
    },
    "2358": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2360": {
      "op": "ADD"
    },
    "2361": {
      "op": "SWAP2"
    },
    "2362": {
      "op": "SWAP1"
    },
    "2363": {
      "op": "SWAP2"
    },
    "2364": {
      "op": "MSTORE"
    },
    "2365": {
      "op": "SWAP4"
    },
    "2366": {
      "op": "SWAP3"
    },
    "2367": {
      "op": "POP"
    },
    "2368": {
      "op": "POP"
    },
    "2369": {
      "op": "POP"
    },
    "2370": {
      "jump": "o",
      "op": "JUMP"
    },
    "2371": {
      "op": "JUMPDEST"
    },
    "2372": {
      "op": "DUP1"
    },
    "2373": {
      "op": "CALLDATALOAD"
    },
    "2374": {
      "op": "DUP1"
    },
    "2375": {
      "op": "ISZERO"
    },
    "2376": {
      "op": "ISZERO"
    },
    "2377": {
      "op": "DUP2"
    },
    "2378": {
      "op": "EQ"
    },
    "2379": {
      "op": "PUSH3",
      "value": "0x7C0"
    },
    "2383": {
      "op": "JUMPI"
    },
    "2384": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2386": {
      "op": "DUP1"
    },
    "2387": {
      "op": "REVERT"
    },
    "2388": {
      "op": "JUMPDEST"
    },
    "2389": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2391": {
      "op": "DUP3"
    },
    "2392": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2394": {
      "op": "DUP4"
    },
    "2395": {
      "op": "ADD"
    },
    "2396": {
      "op": "SLT"
    },
    "2397": {
      "op": "PUSH3",
      "value": "0x966"
    },
    "2401": {
      "op": "JUMPI"
    },
    "2402": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2404": {
      "op": "DUP1"
    },
    "2405": {
      "op": "REVERT"
    },
    "2406": {
      "op": "JUMPDEST"
    },
    "2407": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2409": {
      "op": "MLOAD"
    },
    "2410": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2412": {
      "op": "DUP2"
    },
    "2413": {
      "op": "ADD"
    },
    "2414": {
      "op": "DUP2"
    },
    "2415": {
      "op": "DUP2"
    },
    "2416": {
      "op": "LT"
    },
    "2417": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "2426": {
      "op": "DUP3"
    },
    "2427": {
      "op": "GT"
    },
    "2428": {
      "op": "OR"
    },
    "2429": {
      "op": "ISZERO"
    },
    "2430": {
      "op": "PUSH3",
      "value": "0x98C"
    },
    "2434": {
      "op": "JUMPI"
    },
    "2435": {
      "op": "PUSH3",
      "value": "0x98C"
    },
    "2439": {
      "op": "PUSH3",
      "value": "0x882"
    },
    "2443": {
      "jump": "i",
      "op": "JUMP"
    },
    "2444": {
      "op": "JUMPDEST"
    },
    "2445": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2447": {
      "op": "MSTORE"
    },
    "2448": {
      "op": "DUP1"
    },
    "2449": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2451": {
      "op": "DUP5"
    },
    "2452": {
      "op": "ADD"
    },
    "2453": {
      "op": "DUP6"
    },
    "2454": {
      "op": "DUP2"
    },
    "2455": {
      "op": "GT"
    },
    "2456": {
      "op": "ISZERO"
    },
    "2457": {
      "op": "PUSH3",
      "value": "0x9A2"
    },
    "2461": {
      "op": "JUMPI"
    },
    "2462": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2464": {
      "op": "DUP1"
    },
    "2465": {
      "op": "REVERT"
    },
    "2466": {
      "op": "JUMPDEST"
    },
    "2467": {
      "op": "DUP5"
    },
    "2468": {
      "op": "JUMPDEST"
    },
    "2469": {
      "op": "DUP2"
    },
    "2470": {
      "op": "DUP2"
    },
    "2471": {
      "op": "LT"
    },
    "2472": {
      "op": "ISZERO"
    },
    "2473": {
      "op": "PUSH3",
      "value": "0x9CF"
    },
    "2477": {
      "op": "JUMPI"
    },
    "2478": {
      "op": "DUP1"
    },
    "2479": {
      "op": "CALLDATALOAD"
    },
    "2480": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "2482": {
      "op": "DUP2"
    },
    "2483": {
      "op": "AND"
    },
    "2484": {
      "op": "DUP2"
    },
    "2485": {
      "op": "EQ"
    },
    "2486": {
      "op": "PUSH3",
      "value": "0x9C0"
    },
    "2490": {
      "op": "JUMPI"
    },
    "2491": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2493": {
      "op": "DUP1"
    },
    "2494": {
      "op": "DUP2"
    },
    "2495": {
      "op": "REVERT"
    },
    "2496": {
      "op": "JUMPDEST"
    },
    "2497": {
      "op": "DUP4"
    },
    "2498": {
      "op": "MSTORE"
    },
    "2499": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2501": {
      "op": "SWAP3"
    },
    "2502": {
      "op": "DUP4"
    },
    "2503": {
      "op": "ADD"
    },
    "2504": {
      "op": "SWAP3"
    },
    "2505": {
      "op": "ADD"
    },
    "2506": {
      "op": "PUSH3",
      "value": "0x9A4"
    },
    "2510": {
      "op": "JUMP"
    },
    "2511": {
      "op": "JUMPDEST"
    },
    "2512": {
      "op": "POP"
    },
    "2513": {
      "op": "SWAP2"
    },
    "2514": {
      "op": "SWAP6"
    },
    "2515": {
      "op": "SWAP5"
    },
    "2516": {
      "op": "POP"
    },
    "2517": {
      "op": "POP"
    },
    "2518": {
      "op": "POP"
    },
    "2519": {
      "op": "POP"
    },
    "2520": {
      "op": "POP"
    },
    "2521": {
      "jump": "o",
      "op": "JUMP"
    },
    "2522": {
      "op": "JUMPDEST"
    },
    "2523": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2525": {
      "op": "DUP3"
    },
    "2526": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2528": {
      "op": "DUP4"
    },
    "2529": {
      "op": "ADD"
    },
    "2530": {
      "op": "SLT"
    },
    "2531": {
      "op": "PUSH3",
      "value": "0x9EC"
    },
    "2535": {
      "op": "JUMPI"
    },
    "2536": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2538": {
      "op": "DUP1"
    },
    "2539": {
      "op": "REVERT"
    },
    "2540": {
      "op": "JUMPDEST"
    },
    "2541": {
      "op": "DUP2"
    },
    "2542": {
      "op": "CALLDATALOAD"
    },
    "2543": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2545": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "2554": {
      "op": "DUP3"
    },
    "2555": {
      "op": "GT"
    },
    "2556": {
      "op": "ISZERO"
    },
    "2557": {
      "op": "PUSH3",
      "value": "0xA0B"
    },
    "2561": {
      "op": "JUMPI"
    },
    "2562": {
      "op": "PUSH3",
      "value": "0xA0B"
    },
    "2566": {
      "op": "PUSH3",
      "value": "0x882"
    },
    "2570": {
      "jump": "i",
      "op": "JUMP"
    },
    "2571": {
      "op": "JUMPDEST"
    },
    "2572": {
      "op": "DUP2"
    },
    "2573": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "2575": {
      "op": "SHL"
    },
    "2576": {
      "op": "PUSH3",
      "value": "0xA1C"
    },
    "2580": {
      "op": "DUP3"
    },
    "2581": {
      "op": "DUP3"
    },
    "2582": {
      "op": "ADD"
    },
    "2583": {
      "op": "PUSH3",
      "value": "0x898"
    },
    "2587": {
      "jump": "i",
      "op": "JUMP"
    },
    "2588": {
      "op": "JUMPDEST"
    },
    "2589": {
      "op": "SWAP3"
    },
    "2590": {
      "op": "DUP4"
    },
    "2591": {
      "op": "MSTORE"
    },
    "2592": {
      "op": "DUP5"
    },
    "2593": {
      "op": "DUP2"
    },
    "2594": {
      "op": "ADD"
    },
    "2595": {
      "op": "DUP3"
    },
    "2596": {
      "op": "ADD"
    },
    "2597": {
      "op": "SWAP3"
    },
    "2598": {
      "op": "DUP3"
    },
    "2599": {
      "op": "DUP2"
    },
    "2600": {
      "op": "ADD"
    },
    "2601": {
      "op": "SWAP1"
    },
    "2602": {
      "op": "DUP8"
    },
    "2603": {
      "op": "DUP6"
    },
    "2604": {
      "op": "GT"
    },
    "2605": {
      "op": "ISZERO"
    },
    "2606": {
      "op": "PUSH3",
      "value": "0xA37"
    },
    "2610": {
      "op": "JUMPI"
    },
    "2611": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2613": {
      "op": "DUP1"
    },
    "2614": {
      "op": "REVERT"
    },
    "2615": {
      "op": "JUMPDEST"
    },
    "2616": {
      "op": "DUP4"
    },
    "2617": {
      "op": "DUP8"
    },
    "2618": {
      "op": "ADD"
    },
    "2619": {
      "op": "SWAP3"
    },
    "2620": {
      "op": "POP"
    },
    "2621": {
      "op": "JUMPDEST"
    },
    "2622": {
      "op": "DUP5"
    },
    "2623": {
      "op": "DUP4"
    },
    "2624": {
      "op": "LT"
    },
    "2625": {
      "op": "ISZERO"
    },
    "2626": {
      "op": "PUSH3",
      "value": "0xA63"
    },
    "2630": {
      "op": "JUMPI"
    },
    "2631": {
      "op": "DUP3"
    },
    "2632": {
      "op": "CALLDATALOAD"
    },
    "2633": {
      "op": "PUSH3",
      "value": "0xA53"
    },
    "2637": {
      "op": "DUP2"
    },
    "2638": {
      "op": "PUSH3",
      "value": "0x79A"
    },
    "2642": {
      "jump": "i",
      "op": "JUMP"
    },
    "2643": {
      "op": "JUMPDEST"
    },
    "2644": {
      "op": "DUP3"
    },
    "2645": {
      "op": "MSTORE"
    },
    "2646": {
      "op": "SWAP2"
    },
    "2647": {
      "op": "DUP4"
    },
    "2648": {
      "op": "ADD"
    },
    "2649": {
      "op": "SWAP2"
    },
    "2650": {
      "op": "SWAP1"
    },
    "2651": {
      "op": "DUP4"
    },
    "2652": {
      "op": "ADD"
    },
    "2653": {
      "op": "SWAP1"
    },
    "2654": {
      "op": "PUSH3",
      "value": "0xA3D"
    },
    "2658": {
      "op": "JUMP"
    },
    "2659": {
      "op": "JUMPDEST"
    },
    "2660": {
      "op": "SWAP8"
    },
    "2661": {
      "op": "SWAP7"
    },
    "2662": {
      "op": "POP"
    },
    "2663": {
      "op": "POP"
    },
    "2664": {
      "op": "POP"
    },
    "2665": {
      "op": "POP"
    },
    "2666": {
      "op": "POP"
    },
    "2667": {
      "op": "POP"
    },
    "2668": {
      "op": "POP"
    },
    "2669": {
      "jump": "o",
      "op": "JUMP"
    },
    "2670": {
      "op": "JUMPDEST"
    },
    "2671": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2673": {
      "op": "DUP1"
    },
    "2674": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2676": {
      "op": "DUP1"
    },
    "2677": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2679": {
      "op": "DUP1"
    },
    "2680": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2682": {
      "op": "DUP1"
    },
    "2683": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2685": {
      "op": "PUSH2",
      "value": "0x160"
    },
    "2688": {
      "op": "DUP11"
    },
    "2689": {
      "op": "DUP13"
    },
    "2690": {
      "op": "SUB"
    },
    "2691": {
      "op": "SLT"
    },
    "2692": {
      "op": "ISZERO"
    },
    "2693": {
      "op": "PUSH3",
      "value": "0xA8E"
    },
    "2697": {
      "op": "JUMPI"
    },
    "2698": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2700": {
      "op": "DUP1"
    },
    "2701": {
      "op": "REVERT"
    },
    "2702": {
      "op": "JUMPDEST"
    },
    "2703": {
      "op": "DUP10"
    },
    "2704": {
      "op": "CALLDATALOAD"
    },
    "2705": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "2714": {
      "op": "DUP1"
    },
    "2715": {
      "op": "DUP3"
    },
    "2716": {
      "op": "GT"
    },
    "2717": {
      "op": "ISZERO"
    },
    "2718": {
      "op": "PUSH3",
      "value": "0xAA7"
    },
    "2722": {
      "op": "JUMPI"
    },
    "2723": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2725": {
      "op": "DUP1"
    },
    "2726": {
      "op": "REVERT"
    },
    "2727": {
      "op": "JUMPDEST"
    },
    "2728": {
      "op": "PUSH3",
      "value": "0xAB5"
    },
    "2732": {
      "op": "DUP14"
    },
    "2733": {
      "op": "DUP4"
    },
    "2734": {
      "op": "DUP15"
    },
    "2735": {
      "op": "ADD"
    },
    "2736": {
      "op": "PUSH3",
      "value": "0x8CC"
    },
    "2740": {
      "jump": "i",
      "op": "JUMP"
    },
    "2741": {
      "op": "JUMPDEST"
    },
    "2742": {
      "op": "SWAP11"
    },
    "2743": {
      "op": "POP"
    },
    "2744": {
      "op": "PUSH3",
      "value": "0xAC5"
    },
    "2748": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2750": {
      "op": "DUP14"
    },
    "2751": {
      "op": "ADD"
    },
    "2752": {
      "op": "PUSH3",
      "value": "0x943"
    },
    "2756": {
      "jump": "i",
      "op": "JUMP"
    },
    "2757": {
      "op": "JUMPDEST"
    },
    "2758": {
      "op": "SWAP10"
    },
    "2759": {
      "op": "POP"
    },
    "2760": {
      "op": "PUSH3",
      "value": "0xAD5"
    },
    "2764": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2766": {
      "op": "DUP14"
    },
    "2767": {
      "op": "ADD"
    },
    "2768": {
      "op": "PUSH3",
      "value": "0x943"
    },
    "2772": {
      "jump": "i",
      "op": "JUMP"
    },
    "2773": {
      "op": "JUMPDEST"
    },
    "2774": {
      "op": "SWAP9"
    },
    "2775": {
      "op": "POP"
    },
    "2776": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2778": {
      "op": "DUP13"
    },
    "2779": {
      "op": "ADD"
    },
    "2780": {
      "op": "CALLDATALOAD"
    },
    "2781": {
      "op": "SWAP8"
    },
    "2782": {
      "op": "POP"
    },
    "2783": {
      "op": "PUSH3",
      "value": "0xAED"
    },
    "2787": {
      "op": "DUP14"
    },
    "2788": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2790": {
      "op": "DUP15"
    },
    "2791": {
      "op": "ADD"
    },
    "2792": {
      "op": "PUSH3",
      "value": "0x954"
    },
    "2796": {
      "jump": "i",
      "op": "JUMP"
    },
    "2797": {
      "op": "JUMPDEST"
    },
    "2798": {
      "op": "SWAP7"
    },
    "2799": {
      "op": "POP"
    },
    "2800": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2802": {
      "op": "DUP13"
    },
    "2803": {
      "op": "ADD"
    },
    "2804": {
      "op": "CALLDATALOAD"
    },
    "2805": {
      "op": "SWAP2"
    },
    "2806": {
      "op": "POP"
    },
    "2807": {
      "op": "DUP1"
    },
    "2808": {
      "op": "DUP3"
    },
    "2809": {
      "op": "GT"
    },
    "2810": {
      "op": "ISZERO"
    },
    "2811": {
      "op": "PUSH3",
      "value": "0xB04"
    },
    "2815": {
      "op": "JUMPI"
    },
    "2816": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2818": {
      "op": "DUP1"
    },
    "2819": {
      "op": "REVERT"
    },
    "2820": {
      "op": "JUMPDEST"
    },
    "2821": {
      "op": "PUSH3",
      "value": "0xB12"
    },
    "2825": {
      "op": "DUP14"
    },
    "2826": {
      "op": "DUP4"
    },
    "2827": {
      "op": "DUP15"
    },
    "2828": {
      "op": "ADD"
    },
    "2829": {
      "op": "PUSH3",
      "value": "0x9DA"
    },
    "2833": {
      "jump": "i",
      "op": "JUMP"
    },
    "2834": {
      "op": "JUMPDEST"
    },
    "2835": {
      "op": "SWAP6"
    },
    "2836": {
      "op": "POP"
    },
    "2837": {
      "op": "PUSH3",
      "value": "0xB23"
    },
    "2841": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "2844": {
      "op": "DUP14"
    },
    "2845": {
      "op": "ADD"
    },
    "2846": {
      "op": "PUSH3",
      "value": "0x7B3"
    },
    "2850": {
      "jump": "i",
      "op": "JUMP"
    },
    "2851": {
      "op": "JUMPDEST"
    },
    "2852": {
      "op": "SWAP5"
    },
    "2853": {
      "op": "POP"
    },
    "2854": {
      "op": "PUSH3",
      "value": "0xB34"
    },
    "2858": {
      "op": "PUSH2",
      "value": "0x120"
    },
    "2861": {
      "op": "DUP14"
    },
    "2862": {
      "op": "ADD"
    },
    "2863": {
      "op": "PUSH3",
      "value": "0x7B3"
    },
    "2867": {
      "jump": "i",
      "op": "JUMP"
    },
    "2868": {
      "op": "JUMPDEST"
    },
    "2869": {
      "op": "SWAP4"
    },
    "2870": {
      "op": "POP"
    },
    "2871": {
      "op": "PUSH2",
      "value": "0x140"
    },
    "2874": {
      "op": "DUP13"
    },
    "2875": {
      "op": "ADD"
    },
    "2876": {
      "op": "CALLDATALOAD"
    },
    "2877": {
      "op": "SWAP2"
    },
    "2878": {
      "op": "POP"
    },
    "2879": {
      "op": "DUP1"
    },
    "2880": {
      "op": "DUP3"
    },
    "2881": {
      "op": "GT"
    },
    "2882": {
      "op": "ISZERO"
    },
    "2883": {
      "op": "PUSH3",
      "value": "0xB4C"
    },
    "2887": {
      "op": "JUMPI"
    },
    "2888": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2890": {
      "op": "DUP1"
    },
    "2891": {
      "op": "REVERT"
    },
    "2892": {
      "op": "JUMPDEST"
    },
    "2893": {
      "op": "POP"
    },
    "2894": {
      "op": "PUSH3",
      "value": "0xB5B"
    },
    "2898": {
      "op": "DUP13"
    },
    "2899": {
      "op": "DUP3"
    },
    "2900": {
      "op": "DUP14"
    },
    "2901": {
      "op": "ADD"
    },
    "2902": {
      "op": "PUSH3",
      "value": "0x8CC"
    },
    "2906": {
      "jump": "i",
      "op": "JUMP"
    },
    "2907": {
      "op": "JUMPDEST"
    },
    "2908": {
      "op": "SWAP2"
    },
    "2909": {
      "op": "POP"
    },
    "2910": {
      "op": "POP"
    },
    "2911": {
      "op": "SWAP3"
    },
    "2912": {
      "op": "SWAP6"
    },
    "2913": {
      "op": "SWAP9"
    },
    "2914": {
      "op": "POP"
    },
    "2915": {
      "op": "SWAP3"
    },
    "2916": {
      "op": "SWAP6"
    },
    "2917": {
      "op": "SWAP9"
    },
    "2918": {
      "op": "POP"
    },
    "2919": {
      "op": "SWAP3"
    },
    "2920": {
      "op": "SWAP6"
    },
    "2921": {
      "op": "SWAP9"
    },
    "2922": {
      "jump": "o",
      "op": "JUMP"
    },
    "2923": {
      "op": "JUMPDEST"
    },
    "2924": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2926": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2928": {
      "op": "DUP3"
    },
    "2929": {
      "op": "DUP5"
    },
    "2930": {
      "op": "SUB"
    },
    "2931": {
      "op": "SLT"
    },
    "2932": {
      "op": "ISZERO"
    },
    "2933": {
      "op": "PUSH3",
      "value": "0xB7E"
    },
    "2937": {
      "op": "JUMPI"
    },
    "2938": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2940": {
      "op": "DUP1"
    },
    "2941": {
      "op": "REVERT"
    },
    "2942": {
      "op": "JUMPDEST"
    },
    "2943": {
      "op": "DUP2"
    },
    "2944": {
      "op": "MLOAD"
    },
    "2945": {
      "op": "PUSH3",
      "value": "0x87B"
    },
    "2949": {
      "op": "DUP2"
    },
    "2950": {
      "op": "PUSH3",
      "value": "0x79A"
    },
    "2954": {
      "jump": "i",
      "op": "JUMP"
    },
    "2955": {
      "op": "JUMPDEST"
    },
    "2956": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2961": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2963": {
      "op": "SHL"
    },
    "2964": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2966": {
      "op": "MSTORE"
    },
    "2967": {
      "op": "PUSH1",
      "value": "0x32"
    },
    "2969": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2971": {
      "op": "MSTORE"
    },
    "2972": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2974": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2976": {
      "op": "REVERT"
    },
    "2977": {
      "op": "JUMPDEST"
    },
    "2978": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2980": {
      "op": "DUP2"
    },
    "2981": {
      "op": "MLOAD"
    },
    "2982": {
      "op": "DUP1"
    },
    "2983": {
      "op": "DUP5"
    },
    "2984": {
      "op": "MSTORE"
    },
    "2985": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2987": {
      "op": "JUMPDEST"
    },
    "2988": {
      "op": "DUP2"
    },
    "2989": {
      "op": "DUP2"
    },
    "2990": {
      "op": "LT"
    },
    "2991": {
      "op": "ISZERO"
    },
    "2992": {
      "op": "PUSH3",
      "value": "0xBC9"
    },
    "2996": {
      "op": "JUMPI"
    },
    "2997": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2999": {
      "op": "DUP2"
    },
    "3000": {
      "op": "DUP6"
    },
    "3001": {
      "op": "ADD"
    },
    "3002": {
      "op": "DUP2"
    },
    "3003": {
      "op": "ADD"
    },
    "3004": {
      "op": "MLOAD"
    },
    "3005": {
      "op": "DUP7"
    },
    "3006": {
      "op": "DUP4"
    },
    "3007": {
      "op": "ADD"
    },
    "3008": {
      "op": "DUP3"
    },
    "3009": {
      "op": "ADD"
    },
    "3010": {
      "op": "MSTORE"
    },
    "3011": {
      "op": "ADD"
    },
    "3012": {
      "op": "PUSH3",
      "value": "0xBAB"
    },
    "3016": {
      "op": "JUMP"
    },
    "3017": {
      "op": "JUMPDEST"
    },
    "3018": {
      "op": "DUP2"
    },
    "3019": {
      "op": "DUP2"
    },
    "3020": {
      "op": "GT"
    },
    "3021": {
      "op": "ISZERO"
    },
    "3022": {
      "op": "PUSH3",
      "value": "0xBDC"
    },
    "3026": {
      "op": "JUMPI"
    },
    "3027": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3029": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3031": {
      "op": "DUP4"
    },
    "3032": {
      "op": "DUP8"
    },
    "3033": {
      "op": "ADD"
    },
    "3034": {
      "op": "ADD"
    },
    "3035": {
      "op": "MSTORE"
    },
    "3036": {
      "op": "JUMPDEST"
    },
    "3037": {
      "op": "POP"
    },
    "3038": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3040": {
      "op": "ADD"
    },
    "3041": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3043": {
      "op": "NOT"
    },
    "3044": {
      "op": "AND"
    },
    "3045": {
      "op": "SWAP3"
    },
    "3046": {
      "op": "SWAP1"
    },
    "3047": {
      "op": "SWAP3"
    },
    "3048": {
      "op": "ADD"
    },
    "3049": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3051": {
      "op": "ADD"
    },
    "3052": {
      "op": "SWAP3"
    },
    "3053": {
      "op": "SWAP2"
    },
    "3054": {
      "op": "POP"
    },
    "3055": {
      "op": "POP"
    },
    "3056": {
      "jump": "o",
      "op": "JUMP"
    },
    "3057": {
      "op": "JUMPDEST"
    },
    "3058": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3060": {
      "op": "PUSH2",
      "value": "0x120"
    },
    "3063": {
      "op": "DUP1"
    },
    "3064": {
      "op": "DUP4"
    },
    "3065": {
      "op": "MSTORE"
    },
    "3066": {
      "op": "PUSH3",
      "value": "0xC07"
    },
    "3070": {
      "op": "DUP2"
    },
    "3071": {
      "op": "DUP5"
    },
    "3072": {
      "op": "ADD"
    },
    "3073": {
      "op": "DUP14"
    },
    "3074": {
      "op": "PUSH3",
      "value": "0xBA1"
    },
    "3078": {
      "jump": "i",
      "op": "JUMP"
    },
    "3079": {
      "op": "JUMPDEST"
    },
    "3080": {
      "op": "DUP12"
    },
    "3081": {
      "op": "ISZERO"
    },
    "3082": {
      "op": "ISZERO"
    },
    "3083": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3085": {
      "op": "DUP6"
    },
    "3086": {
      "op": "ADD"
    },
    "3087": {
      "op": "MSTORE"
    },
    "3088": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3090": {
      "op": "DUP5"
    },
    "3091": {
      "op": "ADD"
    },
    "3092": {
      "op": "DUP12"
    },
    "3093": {
      "op": "SWAP1"
    },
    "3094": {
      "op": "MSTORE"
    },
    "3095": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "3097": {
      "op": "DUP11"
    },
    "3098": {
      "op": "DUP2"
    },
    "3099": {
      "op": "AND"
    },
    "3100": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3102": {
      "op": "DUP7"
    },
    "3103": {
      "op": "ADD"
    },
    "3104": {
      "op": "MSTORE"
    },
    "3105": {
      "op": "DUP10"
    },
    "3106": {
      "op": "DUP2"
    },
    "3107": {
      "op": "AND"
    },
    "3108": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3110": {
      "op": "DUP7"
    },
    "3111": {
      "op": "ADD"
    },
    "3112": {
      "op": "MSTORE"
    },
    "3113": {
      "op": "DUP9"
    },
    "3114": {
      "op": "AND"
    },
    "3115": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3117": {
      "op": "DUP6"
    },
    "3118": {
      "op": "ADD"
    },
    "3119": {
      "op": "MSTORE"
    },
    "3120": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3122": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3124": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3126": {
      "op": "SHL"
    },
    "3127": {
      "op": "SUB"
    },
    "3128": {
      "op": "DUP8"
    },
    "3129": {
      "op": "DUP2"
    },
    "3130": {
      "op": "AND"
    },
    "3131": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "3133": {
      "op": "DUP7"
    },
    "3134": {
      "op": "ADD"
    },
    "3135": {
      "op": "MSTORE"
    },
    "3136": {
      "op": "DUP7"
    },
    "3137": {
      "op": "AND"
    },
    "3138": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3140": {
      "op": "DUP6"
    },
    "3141": {
      "op": "ADD"
    },
    "3142": {
      "op": "MSTORE"
    },
    "3143": {
      "op": "DUP4"
    },
    "3144": {
      "op": "DUP2"
    },
    "3145": {
      "op": "SUB"
    },
    "3146": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "3149": {
      "op": "DUP6"
    },
    "3150": {
      "op": "ADD"
    },
    "3151": {
      "op": "MSTORE"
    },
    "3152": {
      "op": "SWAP1"
    },
    "3153": {
      "op": "POP"
    },
    "3154": {
      "op": "PUSH3",
      "value": "0xC5D"
    },
    "3158": {
      "op": "DUP2"
    },
    "3159": {
      "op": "DUP6"
    },
    "3160": {
      "op": "PUSH3",
      "value": "0xBA1"
    },
    "3164": {
      "jump": "i",
      "op": "JUMP"
    },
    "3165": {
      "op": "JUMPDEST"
    },
    "3166": {
      "op": "SWAP13"
    },
    "3167": {
      "op": "SWAP12"
    },
    "3168": {
      "op": "POP"
    },
    "3169": {
      "op": "POP"
    },
    "3170": {
      "op": "POP"
    },
    "3171": {
      "op": "POP"
    },
    "3172": {
      "op": "POP"
    },
    "3173": {
      "op": "POP"
    },
    "3174": {
      "op": "POP"
    },
    "3175": {
      "op": "POP"
    },
    "3176": {
      "op": "POP"
    },
    "3177": {
      "op": "POP"
    },
    "3178": {
      "op": "POP"
    },
    "3179": {
      "op": "POP"
    },
    "3180": {
      "jump": "o",
      "op": "JUMP"
    },
    "3181": {
      "op": "JUMPDEST"
    },
    "3182": {
      "op": "DUP1"
    },
    "3183": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3185": {
      "op": "JUMPDEST"
    },
    "3186": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "3188": {
      "op": "DUP2"
    },
    "3189": {
      "op": "LT"
    },
    "3190": {
      "op": "ISZERO"
    },
    "3191": {
      "op": "PUSH3",
      "value": "0xC9B"
    },
    "3195": {
      "op": "JUMPI"
    },
    "3196": {
      "op": "DUP2"
    },
    "3197": {
      "op": "MLOAD"
    },
    "3198": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3200": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3202": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3204": {
      "op": "SHL"
    },
    "3205": {
      "op": "SUB"
    },
    "3206": {
      "op": "AND"
    },
    "3207": {
      "op": "DUP5"
    },
    "3208": {
      "op": "MSTORE"
    },
    "3209": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3211": {
      "op": "SWAP4"
    },
    "3212": {
      "op": "DUP5"
    },
    "3213": {
      "op": "ADD"
    },
    "3214": {
      "op": "SWAP4"
    },
    "3215": {
      "op": "SWAP1"
    },
    "3216": {
      "op": "SWAP2"
    },
    "3217": {
      "op": "ADD"
    },
    "3218": {
      "op": "SWAP1"
    },
    "3219": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3221": {
      "op": "ADD"
    },
    "3222": {
      "op": "PUSH3",
      "value": "0xC71"
    },
    "3226": {
      "op": "JUMP"
    },
    "3227": {
      "op": "JUMPDEST"
    },
    "3228": {
      "op": "POP"
    },
    "3229": {
      "op": "POP"
    },
    "3230": {
      "op": "POP"
    },
    "3231": {
      "op": "POP"
    },
    "3232": {
      "jump": "o",
      "op": "JUMP"
    },
    "3233": {
      "op": "JUMPDEST"
    },
    "3234": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3236": {
      "op": "DUP2"
    },
    "3237": {
      "op": "MLOAD"
    },
    "3238": {
      "op": "DUP1"
    },
    "3239": {
      "op": "DUP5"
    },
    "3240": {
      "op": "MSTORE"
    },
    "3241": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3243": {
      "op": "DUP1"
    },
    "3244": {
      "op": "DUP6"
    },
    "3245": {
      "op": "ADD"
    },
    "3246": {
      "op": "SWAP5"
    },
    "3247": {
      "op": "POP"
    },
    "3248": {
      "op": "DUP1"
    },
    "3249": {
      "op": "DUP5"
    },
    "3250": {
      "op": "ADD"
    },
    "3251": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3253": {
      "op": "JUMPDEST"
    },
    "3254": {
      "op": "DUP4"
    },
    "3255": {
      "op": "DUP2"
    },
    "3256": {
      "op": "LT"
    },
    "3257": {
      "op": "ISZERO"
    },
    "3258": {
      "op": "PUSH3",
      "value": "0xCDC"
    },
    "3262": {
      "op": "JUMPI"
    },
    "3263": {
      "op": "DUP2"
    },
    "3264": {
      "op": "MLOAD"
    },
    "3265": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3267": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3269": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3271": {
      "op": "SHL"
    },
    "3272": {
      "op": "SUB"
    },
    "3273": {
      "op": "AND"
    },
    "3274": {
      "op": "DUP8"
    },
    "3275": {
      "op": "MSTORE"
    },
    "3276": {
      "op": "SWAP6"
    },
    "3277": {
      "op": "DUP3"
    },
    "3278": {
      "op": "ADD"
    },
    "3279": {
      "op": "SWAP6"
    },
    "3280": {
      "op": "SWAP1"
    },
    "3281": {
      "op": "DUP3"
    },
    "3282": {
      "op": "ADD"
    },
    "3283": {
      "op": "SWAP1"
    },
    "3284": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3286": {
      "op": "ADD"
    },
    "3287": {
      "op": "PUSH3",
      "value": "0xCB5"
    },
    "3291": {
      "op": "JUMP"
    },
    "3292": {
      "op": "JUMPDEST"
    },
    "3293": {
      "op": "POP"
    },
    "3294": {
      "op": "SWAP5"
    },
    "3295": {
      "op": "SWAP6"
    },
    "3296": {
      "op": "SWAP5"
    },
    "3297": {
      "op": "POP"
    },
    "3298": {
      "op": "POP"
    },
    "3299": {
      "op": "POP"
    },
    "3300": {
      "op": "POP"
    },
    "3301": {
      "op": "POP"
    },
    "3302": {
      "jump": "o",
      "op": "JUMP"
    },
    "3303": {
      "op": "JUMPDEST"
    },
    "3304": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3306": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3308": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3310": {
      "op": "SHL"
    },
    "3311": {
      "op": "SUB"
    },
    "3312": {
      "op": "DUP10"
    },
    "3313": {
      "op": "AND"
    },
    "3314": {
      "op": "DUP2"
    },
    "3315": {
      "op": "MSTORE"
    },
    "3316": {
      "op": "PUSH2",
      "value": "0x1A0"
    },
    "3319": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3321": {
      "op": "DUP1"
    },
    "3322": {
      "op": "DUP4"
    },
    "3323": {
      "op": "ADD"
    },
    "3324": {
      "op": "DUP3"
    },
    "3325": {
      "op": "SWAP1"
    },
    "3326": {
      "op": "MSTORE"
    },
    "3327": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3329": {
      "op": "SWAP2"
    },
    "3330": {
      "op": "SWAP1"
    },
    "3331": {
      "op": "PUSH3",
      "value": "0xD10"
    },
    "3335": {
      "op": "DUP5"
    },
    "3336": {
      "op": "DUP4"
    },
    "3337": {
      "op": "ADD"
    },
    "3338": {
      "op": "DUP13"
    },
    "3339": {
      "op": "PUSH3",
      "value": "0xBA1"
    },
    "3343": {
      "jump": "i",
      "op": "JUMP"
    },
    "3344": {
      "op": "JUMPDEST"
    },
    "3345": {
      "op": "SWAP2"
    },
    "3346": {
      "op": "POP"
    },
    "3347": {
      "op": "DUP10"
    },
    "3348": {
      "op": "ISZERO"
    },
    "3349": {
      "op": "ISZERO"
    },
    "3350": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3352": {
      "op": "DUP6"
    },
    "3353": {
      "op": "ADD"
    },
    "3354": {
      "op": "MSTORE"
    },
    "3355": {
      "op": "DUP9"
    },
    "3356": {
      "op": "ISZERO"
    },
    "3357": {
      "op": "ISZERO"
    },
    "3358": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3360": {
      "op": "DUP6"
    },
    "3361": {
      "op": "ADD"
    },
    "3362": {
      "op": "MSTORE"
    },
    "3363": {
      "op": "DUP8"
    },
    "3364": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3366": {
      "op": "DUP6"
    },
    "3367": {
      "op": "ADD"
    },
    "3368": {
      "op": "MSTORE"
    },
    "3369": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3371": {
      "op": "DUP5"
    },
    "3372": {
      "op": "ADD"
    },
    "3373": {
      "op": "DUP8"
    },
    "3374": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3376": {
      "op": "JUMPDEST"
    },
    "3377": {
      "op": "PUSH1",
      "value": "0x3"
    },
    "3379": {
      "op": "DUP2"
    },
    "3380": {
      "op": "LT"
    },
    "3381": {
      "op": "ISZERO"
    },
    "3382": {
      "op": "PUSH3",
      "value": "0xD52"
    },
    "3386": {
      "op": "JUMPI"
    },
    "3387": {
      "op": "DUP2"
    },
    "3388": {
      "op": "MLOAD"
    },
    "3389": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "3391": {
      "op": "AND"
    },
    "3392": {
      "op": "DUP4"
    },
    "3393": {
      "op": "MSTORE"
    },
    "3394": {
      "op": "SWAP2"
    },
    "3395": {
      "op": "DUP4"
    },
    "3396": {
      "op": "ADD"
    },
    "3397": {
      "op": "SWAP2"
    },
    "3398": {
      "op": "SWAP1"
    },
    "3399": {
      "op": "DUP4"
    },
    "3400": {
      "op": "ADD"
    },
    "3401": {
      "op": "SWAP1"
    },
    "3402": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3404": {
      "op": "ADD"
    },
    "3405": {
      "op": "PUSH3",
      "value": "0xD30"
    },
    "3409": {
      "op": "JUMP"
    },
    "3410": {
      "op": "JUMPDEST"
    },
    "3411": {
      "op": "POP"
    },
    "3412": {
      "op": "POP"
    },
    "3413": {
      "op": "POP"
    },
    "3414": {
      "op": "POP"
    },
    "3415": {
      "op": "PUSH3",
      "value": "0xD66"
    },
    "3419": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "3422": {
      "op": "DUP5"
    },
    "3423": {
      "op": "ADD"
    },
    "3424": {
      "op": "DUP7"
    },
    "3425": {
      "op": "PUSH3",
      "value": "0xC6D"
    },
    "3429": {
      "jump": "i",
      "op": "JUMP"
    },
    "3430": {
      "op": "JUMPDEST"
    },
    "3431": {
      "op": "DUP3"
    },
    "3432": {
      "op": "DUP2"
    },
    "3433": {
      "op": "SUB"
    },
    "3434": {
      "op": "PUSH2",
      "value": "0x180"
    },
    "3437": {
      "op": "DUP5"
    },
    "3438": {
      "op": "ADD"
    },
    "3439": {
      "op": "MSTORE"
    },
    "3440": {
      "op": "PUSH3",
      "value": "0xD7B"
    },
    "3444": {
      "op": "DUP2"
    },
    "3445": {
      "op": "DUP6"
    },
    "3446": {
      "op": "PUSH3",
      "value": "0xCA1"
    },
    "3450": {
      "jump": "i",
      "op": "JUMP"
    },
    "3451": {
      "op": "JUMPDEST"
    },
    "3452": {
      "op": "SWAP12"
    },
    "3453": {
      "op": "SWAP11"
    },
    "3454": {
      "op": "POP"
    },
    "3455": {
      "op": "POP"
    },
    "3456": {
      "op": "POP"
    },
    "3457": {
      "op": "POP"
    },
    "3458": {
      "op": "POP"
    },
    "3459": {
      "op": "POP"
    },
    "3460": {
      "op": "POP"
    },
    "3461": {
      "op": "POP"
    },
    "3462": {
      "op": "POP"
    },
    "3463": {
      "op": "POP"
    },
    "3464": {
      "op": "POP"
    },
    "3465": {
      "jump": "o",
      "op": "JUMP"
    },
    "3466": {
      "op": "JUMPDEST"
    },
    "3467": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3469": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3471": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3473": {
      "op": "SHL"
    },
    "3474": {
      "op": "SUB"
    },
    "3475": {
      "op": "DUP4"
    },
    "3476": {
      "op": "AND"
    },
    "3477": {
      "op": "DUP2"
    },
    "3478": {
      "op": "MSTORE"
    },
    "3479": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3481": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3483": {
      "op": "DUP3"
    },
    "3484": {
      "op": "ADD"
    },
    "3485": {
      "op": "DUP2"
    },
    "3486": {
      "op": "SWAP1"
    },
    "3487": {
      "op": "MSTORE"
    },
    "3488": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3490": {
      "op": "SWAP1"
    },
    "3491": {
      "op": "PUSH3",
      "value": "0xDB0"
    },
    "3495": {
      "op": "SWAP1"
    },
    "3496": {
      "op": "DUP4"
    },
    "3497": {
      "op": "ADD"
    },
    "3498": {
      "op": "DUP5"
    },
    "3499": {
      "op": "PUSH3",
      "value": "0xBA1"
    },
    "3503": {
      "jump": "i",
      "op": "JUMP"
    },
    "3504": {
      "op": "JUMPDEST"
    },
    "3505": {
      "op": "SWAP5"
    },
    "3506": {
      "op": "SWAP4"
    },
    "3507": {
      "op": "POP"
    },
    "3508": {
      "op": "POP"
    },
    "3509": {
      "op": "POP"
    },
    "3510": {
      "op": "POP"
    },
    "3511": {
      "jump": "o",
      "op": "JUMP"
    },
    "3512": {
      "op": "JUMPDEST"
    },
    "3513": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3515": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3517": {
      "op": "NOT"
    },
    "3518": {
      "op": "DUP3"
    },
    "3519": {
      "op": "EQ"
    },
    "3520": {
      "op": "ISZERO"
    },
    "3521": {
      "op": "PUSH3",
      "value": "0xDDB"
    },
    "3525": {
      "op": "JUMPI"
    },
    "3526": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "3531": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3533": {
      "op": "SHL"
    },
    "3534": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3536": {
      "op": "MSTORE"
    },
    "3537": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "3539": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "3541": {
      "op": "MSTORE"
    },
    "3542": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3544": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3546": {
      "op": "REVERT"
    },
    "3547": {
      "op": "JUMPDEST"
    },
    "3548": {
      "op": "POP"
    },
    "3549": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3551": {
      "op": "ADD"
    },
    "3552": {
      "op": "SWAP1"
    },
    "3553": {
      "jump": "o",
      "op": "JUMP"
    },
    "3554": {
      "op": "JUMPDEST"
    },
    "3555": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3557": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3559": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3561": {
      "op": "SHL"
    },
    "3562": {
      "op": "SUB"
    },
    "3563": {
      "op": "DUP5"
    },
    "3564": {
      "op": "AND"
    },
    "3565": {
      "op": "DUP2"
    },
    "3566": {
      "op": "MSTORE"
    },
    "3567": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3569": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3571": {
      "op": "DUP3"
    },
    "3572": {
      "op": "ADD"
    },
    "3573": {
      "op": "DUP2"
    },
    "3574": {
      "op": "SWAP1"
    },
    "3575": {
      "op": "MSTORE"
    },
    "3576": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3578": {
      "op": "SWAP1"
    },
    "3579": {
      "op": "PUSH3",
      "value": "0xE08"
    },
    "3583": {
      "op": "SWAP1"
    },
    "3584": {
      "op": "DUP4"
    },
    "3585": {
      "op": "ADD"
    },
    "3586": {
      "op": "DUP6"
    },
    "3587": {
      "op": "PUSH3",
      "value": "0xBA1"
    },
    "3591": {
      "jump": "i",
      "op": "JUMP"
    },
    "3592": {
      "op": "JUMPDEST"
    },
    "3593": {
      "op": "SWAP1"
    },
    "3594": {
      "op": "POP"
    },
    "3595": {
      "op": "DUP3"
    },
    "3596": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3598": {
      "op": "DUP4"
    },
    "3599": {
      "op": "ADD"
    },
    "3600": {
      "op": "MSTORE"
    },
    "3601": {
      "op": "SWAP5"
    },
    "3602": {
      "op": "SWAP4"
    },
    "3603": {
      "op": "POP"
    },
    "3604": {
      "op": "POP"
    },
    "3605": {
      "op": "POP"
    },
    "3606": {
      "op": "POP"
    },
    "3607": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "b1a181fb494b031030b620731ac1ec1d06632ed9",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.11;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"./ICLHouse.sol\";\nimport \"./CLProxy.sol\";\nimport \"./CLHouseApi.sol\";\nimport \"./ICLFactory.sol\";\n\n\n/// @title Crypto League House Factory\n/// @notice Config, create and deploy CLHouses\n/// @dev This contract is the only way to create CLH\n/// @author Leonardo Urrego\ncontract CLFactory is ICLFactory, Initializable {\n    /// @notice Store the number of houses created\n    uint256 public numCLH;\n\n    uint256[10] __gapUint256;\n\n    /// @notice Contract with the CLH Constructor logic\n    address public CLLConstructorCLH;\n\n    /// @notice Contract with the functions for user management\n    address public CLLUserManagement;\n\n    /// @notice Contract with the functions for Governance\n    address public CLLGovernance;\n\n    /// @notice Contract CLHouse API\n    address public CLHAPI;\n\n    address[10] __gapAddress;\n\n    CLBeacon public beaconCLH;\n    \n    /// @notice Relation houseAddr with houseId\n    mapping( address => uint256 ) public mapIdCLH;\n    \n    /// @notice Mapping to store all the created houses\n    mapping(uint256 => ICLHouse) public mapCLH;\n\n    /// @notice Event when house is created\n    /// @param houseAddr Address of the created house\n    /// @param houseName Name of the created house\n    /// @param houseId Id of CLH of the created house\n    event evtHouseCreation( address houseAddr, string houseName, uint256 houseId );\n    /// @custom:oz-upgrades-unsafe-allow constructor\n\n    constructor() {\n        _disableInitializers();\n    }\n\n    /// @notice Config the CLFactory with the CL Logic Contracts\n    /// @param _CLLUserManagement Address Contract Logic for user management\n    /// @param _CLLGovernance Address Contract Logic for governance\n    /// @param _CLLConstructorCLH Address Contract with the Constructor logic\n    /// @dev The constructor create a default CLH with the houseId #0\n    function Init(\n        address _CLLUserManagement,\n        address _CLLGovernance,\n        address _CLLConstructorCLH,\n        address _CLHAPI,\n        address _beacon\n    )\n        public\n        reinitializer( __UPGRADEABLE_CLF_VERSION__ )\n    {\n        beaconCLH = CLBeacon( _beacon );\n\n        CLLUserManagement = _CLLUserManagement;\n        CLLGovernance = _CLLGovernance;\n        CLLConstructorCLH = _CLLConstructorCLH;\n        CLHAPI = _CLHAPI;\n\n        numCLH = 0;\n        mapCLH[ numCLH ] = ICLHouse( address(0) );\n        mapIdCLH[ address(0) ] = numCLH;\n    }\n\n\n    /// @notice Deploy a new CLHouse\n    /// @param _houseName Name of the CLH\n    /// @param _housePrivate If is set to 1, the CLH is set to private\n    /// @param _houseOpen If is set to 1, the CLH is set to open\n    /// @param _govModel keccak256 hash of the governance model, see the __GOV_* constans\n    /// @param _govRules Array for goverment rules see `enum gRule`\n    /// @param _ManagerWallets Whitelist of address for invitate as managers\n    /// @dev Some parameters wil be ignored depending on the governance model\n    function CreateCLH(\n        string memory _houseName,\n        bool _housePrivate,\n        bool _houseOpen,\n        bytes32 _govModel,\n        uint8[3] memory _govRules,\n        address[] memory _ManagerWallets,\n        address _gnosisSafe,\n        address _signerWallet,\n        bytes memory _signature\n    ) \n        public\n    {\n        address houseOwner = msg.sender;\n\n        require( \n            __GOV_DICTATORSHIP__ == _govModel ||\n            __GOV_COMMITTEE__ == _govModel ||\n            __GOV_SIMPLE_MAJORITY__ == _govModel ,\n            \"Invalid Governance Type\"\n        );\n\n        if( _signerWallet != address(0) ) {\n            require( _signature.length == 65, \"CreateCLH: Bad signature length\" );\n            \n            require(\n                _signerWallet == CLHouseApi( CLHAPI ).SignerOCNewCLH(\n                    _houseName,\n                    _housePrivate,\n                    _govModel,\n                    _govRules[0],\n                    _govRules[1],\n                    _govRules[2],\n                    _ManagerWallets[0],\n                    address(this),\n                    _signature\n                ),\n                \"CreateCLH: Invalid Signature\"\n            );\n\n            houseOwner = _signerWallet;\n        }\n\n        CLProxyCLH pxyCLH = new CLProxyCLH(\n            address( beaconCLH ),\n            abi.encodeWithSignature(\n                \"Init(address,string,bool,bool,bytes32,uint8[3],address[4],address[])\",\n                houseOwner, \n                _houseName,\n                _housePrivate,\n                _houseOpen,\n                _govModel,\n                _govRules,\n                [ address(this), CLHAPI, _gnosisSafe, CLLConstructorCLH ],\n                _ManagerWallets\n            )\n        );\n\n        numCLH++;\n        mapCLH[ numCLH ] = ICLHouse( address( pxyCLH ) );\n        mapIdCLH[ address( pxyCLH ) ] = numCLH;\n\n        emit evtHouseCreation( address( pxyCLH ), _houseName, numCLH );\n    }\n\n    function getImplementation() public view returns (address) {\n        return beaconCLH.implementation();\n    }\n}",
  "sourceMap": "394:4742:41:-:0;;;1532:53;;;;;;;;;-1:-1:-1;1556:22:41;:20;:22::i;:::-;394:4742;;5366:279:14;5434:13;;;;;;;5433:14;5425:66;;;;-1:-1:-1;;;5425:66:14;;216:2:56;5425:66:14;;;198:21:56;255:2;235:18;;;228:30;294:34;274:18;;;267:62;-1:-1:-1;;;345:18:56;;;338:37;392:19;;5425:66:14;;;;;;;;5505:12;;5520:15;5505:12;;;:30;5501:138;;;5551:12;:30;;-1:-1:-1;;5551:30:14;5566:15;5551:30;;;;;;5600:28;;564:36:56;;;5600:28:14;;552:2:56;537:18;5600:28:14;;;;;;;5501:138;5366:279::o;422:184:56:-;394:4742:41;;;;;;",
  "sourcePath": "contracts/CLHouse/CLFactory.sol",
  "type": "contract"
}