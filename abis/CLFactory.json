{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "houseAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "houseName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "houseId",
          "type": "uint256"
        }
      ],
      "name": "evtNewCLH",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "CLCName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "evtUpdateCLC",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CLHAPI",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLLConstructorCLH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLLGovernance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLLUserManagement",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_houseName",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_housePrivate",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_houseOpen",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "_govModel",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[3]",
          "name": "_govRules",
          "type": "uint256[3]"
        },
        {
          "internalType": "address[]",
          "name": "_ManagerWallets",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_gnosisSafe",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_signerWallet",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "CreateCLH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_CLLUserManagement",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_CLLGovernance",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_CLLConstructorCLH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_CLHAPI",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_beacon",
          "type": "address"
        }
      ],
      "name": "Init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_CLHAPI",
          "type": "address"
        }
      ],
      "name": "UpdateCLHAPI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_CLLConstructorCLH",
          "type": "address"
        }
      ],
      "name": "UpdateCLLConstructorCLH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_CLLGovernance",
          "type": "address"
        }
      ],
      "name": "UpdateCLLGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_CLLUserManagement",
          "type": "address"
        }
      ],
      "name": "UpdateCLLUserManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beaconCLH",
      "outputs": [
        {
          "internalType": "contract CLBeacon",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCLHImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mapCLH",
      "outputs": [
        {
          "internalType": "contract ICLHouse",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mapIdCLH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numCLH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "/home/trecetp/.brownie/packages/OpenZeppelin/openzeppelin-contracts-upgradeable@4.7.3/contracts/access/OwnableUpgradeable.sol",
    "1": "/home/trecetp/.brownie/packages/OpenZeppelin/openzeppelin-contracts-upgradeable@4.7.3/contracts/proxy/utils/Initializable.sol",
    "3": "/home/trecetp/.brownie/packages/OpenZeppelin/openzeppelin-contracts-upgradeable@4.7.3/contracts/utils/ContextUpgradeable.sol",
    "46": "contracts/APICLH/CLHouseApi.sol",
    "48": "contracts/CLCore/CLTypes.sol",
    "49": "contracts/CLFactory/CLFactory.sol",
    "54": "contracts/CLProxy/CLBeacon.sol",
    "56": "contracts/CLProxy/CLProxyCLH.sol",
    "60": "interfaces/ICLFactory.sol",
    "61": "interfaces/ICLHouse.sol"
  },
  "ast": {
    "absolutePath": "contracts/CLFactory/CLFactory.sol",
    "exportedSymbols": {
      "Address": [
        10082
      ],
      "AddressUpgradeable": [
        12112
      ],
      "BeaconProxy": [
        6484
      ],
      "CLBeacon": [
        4858
      ],
      "CLFactory": [
        1804
      ],
      "CLHouseApi": [
        967
      ],
      "CLProxyCLH": [
        4900
      ],
      "Context": [
        10724
      ],
      "ContextUpgradeable": [
        9787
      ],
      "DebugDLGTCLL": [
        9405
      ],
      "ERC1967Upgrade": [
        10558
      ],
      "IBeacon": [
        10092
      ],
      "ICLFactory": [
        5688
      ],
      "ICLHouse": [
        5924
      ],
      "IERC1822Proxiable": [
        12159
      ],
      "Initializable": [
        9745
      ],
      "InvalidGovernanceType": [
        9399
      ],
      "Ownable": [
        6868
      ],
      "OwnableUpgradeable": [
        6056
      ],
      "Proxy": [
        10610
      ],
      "StorageSlot": [
        12219
      ],
      "UpgradeableBeacon": [
        6282
      ],
      "__CONTRACT_NAME_HASH__": [
        9431
      ],
      "__CONTRACT_VERSION_HASH__": [
        9436
      ],
      "__GOV_COMMITTEE__": [
        9421
      ],
      "__GOV_DICTATORSHIP__": [
        9416
      ],
      "__GOV_SIMPLE_MAJORITY__": [
        9426
      ],
      "__STR_EIP712DOMAIN_HASH__": [
        9444
      ],
      "__STR_OCBULKVOTE_HASH__": [
        9468
      ],
      "__STR_OCDELUSER_HASH__": [
        9484
      ],
      "__STR_OCINVIT_HASH__": [
        9452
      ],
      "__STR_OCNEWCLH_HASH__": [
        9500
      ],
      "__STR_OCNEWUSER_HASH__": [
        9476
      ],
      "__STR_OCREQUEST_HASH__": [
        9492
      ],
      "__STR_OCVOTE_HASH__": [
        9460
      ],
      "__UPGRADEABLE_CLF_VERSION__": [
        9411
      ],
      "__UPGRADEABLE_CLH_VERSION__": [
        9408
      ],
      "assetsEvent": [
        9514
      ],
      "eCLC": [
        9537
      ],
      "gRule": [
        9532
      ],
      "proposalEvent": [
        9518
      ],
      "proposalType": [
        9528
      ],
      "strDataGovRules": [
        9594
      ],
      "strDataTxAssets": [
        9591
      ],
      "strDataUser": [
        9582
      ],
      "strProposal": [
        9568
      ],
      "strUser": [
        9548
      ],
      "strVote": [
        9575
      ],
      "userEvent": [
        9507
      ]
    },
    "id": 1805,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1395,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".11"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:24:49"
      },
      {
        "absolutePath": "/home/trecetp/.brownie/packages/OpenZeppelin/openzeppelin-contracts-upgradeable@4.7.3/contracts/access/OwnableUpgradeable.sol",
        "file": "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol",
        "id": 1396,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1805,
        "sourceUnit": 6057,
        "src": "58:85:49",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "interfaces/ICLHouse.sol",
        "file": "../../interfaces/ICLHouse.sol",
        "id": 1397,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1805,
        "sourceUnit": 5925,
        "src": "144:39:49",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "interfaces/ICLFactory.sol",
        "file": "../../interfaces/ICLFactory.sol",
        "id": 1398,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1805,
        "sourceUnit": 5689,
        "src": "184:41:49",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/CLProxy/CLBeacon.sol",
        "file": "../CLProxy/CLBeacon.sol",
        "id": 1399,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1805,
        "sourceUnit": 4859,
        "src": "226:33:49",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/CLProxy/CLProxyCLH.sol",
        "file": "../CLProxy/CLProxyCLH.sol",
        "id": 1400,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1805,
        "sourceUnit": 4901,
        "src": "260:35:49",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/APICLH/CLHouseApi.sol",
        "file": "../APICLH/CLHouseApi.sol",
        "id": 1401,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1805,
        "sourceUnit": 968,
        "src": "296:34:49",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 1403,
              "name": "ICLFactory",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 5688,
              "src": "518:10:49"
            },
            "id": 1404,
            "nodeType": "InheritanceSpecifier",
            "src": "518:10:49"
          },
          {
            "baseName": {
              "id": 1405,
              "name": "Initializable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 9745,
              "src": "530:13:49"
            },
            "id": 1406,
            "nodeType": "InheritanceSpecifier",
            "src": "530:13:49"
          },
          {
            "baseName": {
              "id": 1407,
              "name": "OwnableUpgradeable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 6056,
              "src": "545:18:49"
            },
            "id": 1408,
            "nodeType": "InheritanceSpecifier",
            "src": "545:18:49"
          }
        ],
        "canonicalName": "CLFactory",
        "contractDependencies": [
          4900
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 1402,
          "nodeType": "StructuredDocumentation",
          "src": "333:163:49",
          "text": "@title Crypto League House Factory\n @notice Create and config CLHouses\n @dev This contract is the standard way to create CLH\n @author Leonardo Urrego"
        },
        "fullyImplemented": true,
        "id": 1804,
        "linearizedBaseContracts": [
          1804,
          6056,
          9787,
          9745,
          5688
        ],
        "name": "CLFactory",
        "nameLocation": "505:9:49",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "baseFunctions": [
              5645
            ],
            "constant": false,
            "documentation": {
              "id": 1409,
              "nodeType": "StructuredDocumentation",
              "src": "570:46:49",
              "text": "@notice Store the number of houses created"
            },
            "functionSelector": "ee7a7d1b",
            "id": 1411,
            "mutability": "mutable",
            "name": "numCLH",
            "nameLocation": "636:6:49",
            "nodeType": "VariableDeclaration",
            "scope": 1804,
            "src": "621:21:49",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1410,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "621:7:49",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 1415,
            "mutability": "mutable",
            "name": "__gapUint256",
            "nameLocation": "661:12:49",
            "nodeType": "VariableDeclaration",
            "scope": 1804,
            "src": "649:24:49",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$10_storage",
              "typeString": "uint256[10]"
            },
            "typeName": {
              "baseType": {
                "id": 1412,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "649:7:49",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 1414,
              "length": {
                "hexValue": "3130",
                "id": 1413,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "657:2:49",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_10_by_1",
                  "typeString": "int_const 10"
                },
                "value": "10"
              },
              "nodeType": "ArrayTypeName",
              "src": "649:11:49",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$10_storage_ptr",
                "typeString": "uint256[10]"
              }
            },
            "visibility": "internal"
          },
          {
            "baseFunctions": [
              5616
            ],
            "constant": false,
            "documentation": {
              "id": 1416,
              "nodeType": "StructuredDocumentation",
              "src": "680:51:49",
              "text": "@notice Contract with the CLH Constructor logic"
            },
            "functionSelector": "594034e3",
            "id": 1418,
            "mutability": "mutable",
            "name": "CLLConstructorCLH",
            "nameLocation": "751:17:49",
            "nodeType": "VariableDeclaration",
            "scope": 1804,
            "src": "736:32:49",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1417,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "736:7:49",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5621
            ],
            "constant": false,
            "documentation": {
              "id": 1419,
              "nodeType": "StructuredDocumentation",
              "src": "775:59:49",
              "text": "@notice Contract with the functions for user management"
            },
            "functionSelector": "529382d5",
            "id": 1421,
            "mutability": "mutable",
            "name": "CLLUserManagement",
            "nameLocation": "854:17:49",
            "nodeType": "VariableDeclaration",
            "scope": 1804,
            "src": "839:32:49",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1420,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "839:7:49",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5626
            ],
            "constant": false,
            "documentation": {
              "id": 1422,
              "nodeType": "StructuredDocumentation",
              "src": "878:54:49",
              "text": "@notice Contract with the functions for Governance"
            },
            "functionSelector": "a327ab69",
            "id": 1424,
            "mutability": "mutable",
            "name": "CLLGovernance",
            "nameLocation": "952:13:49",
            "nodeType": "VariableDeclaration",
            "scope": 1804,
            "src": "937:28:49",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1423,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "937:7:49",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5611
            ],
            "constant": false,
            "documentation": {
              "id": 1425,
              "nodeType": "StructuredDocumentation",
              "src": "972:32:49",
              "text": "@notice Contract CLHouse API"
            },
            "functionSelector": "10790717",
            "id": 1427,
            "mutability": "mutable",
            "name": "CLHAPI",
            "nameLocation": "1024:6:49",
            "nodeType": "VariableDeclaration",
            "scope": 1804,
            "src": "1009:21:49",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1426,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1009:7:49",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 1431,
            "mutability": "mutable",
            "name": "__gapAddress",
            "nameLocation": "1049:12:49",
            "nodeType": "VariableDeclaration",
            "scope": 1804,
            "src": "1037:24:49",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_address_$10_storage",
              "typeString": "address[10]"
            },
            "typeName": {
              "baseType": {
                "id": 1428,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1037:7:49",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "id": 1430,
              "length": {
                "hexValue": "3130",
                "id": 1429,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "1045:2:49",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_10_by_1",
                  "typeString": "int_const 10"
                },
                "value": "10"
              },
              "nodeType": "ArrayTypeName",
              "src": "1037:11:49",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_address_$10_storage_ptr",
                "typeString": "address[10]"
              }
            },
            "visibility": "internal"
          },
          {
            "baseFunctions": [
              5632
            ],
            "constant": false,
            "documentation": {
              "id": 1432,
              "nodeType": "StructuredDocumentation",
              "src": "1068:114:49",
              "text": "@notice Contract Object of the beacon (store the add)\n @dev The beacon store the updated address of CLH"
            },
            "functionSelector": "c0828f63",
            "id": 1435,
            "mutability": "mutable",
            "name": "beaconCLH",
            "nameLocation": "1203:9:49",
            "nodeType": "VariableDeclaration",
            "scope": 1804,
            "src": "1187:25:49",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_CLBeacon_$4858",
              "typeString": "contract CLBeacon"
            },
            "typeName": {
              "id": 1434,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 1433,
                "name": "CLBeacon",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 4858,
                "src": "1187:8:49"
              },
              "referencedDeclaration": 4858,
              "src": "1187:8:49",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_CLBeacon_$4858",
                "typeString": "contract CLBeacon"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "documentation": {
              "id": 1436,
              "nodeType": "StructuredDocumentation",
              "src": "1223:43:49",
              "text": "@notice Relation houseAddr with houseId"
            },
            "functionSelector": "86bdfcac",
            "id": 1440,
            "mutability": "mutable",
            "name": "mapIdCLH",
            "nameLocation": "1308:8:49",
            "nodeType": "VariableDeclaration",
            "scope": 1804,
            "src": "1271:45:49",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
              "typeString": "mapping(address => uint256)"
            },
            "typeName": {
              "id": 1439,
              "keyType": {
                "id": 1437,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1280:7:49",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1271:29:49",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                "typeString": "mapping(address => uint256)"
              },
              "valueType": {
                "id": 1438,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1291:7:49",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5640
            ],
            "constant": false,
            "documentation": {
              "id": 1441,
              "nodeType": "StructuredDocumentation",
              "src": "1327:51:49",
              "text": "@notice Mapping to store all the created houses"
            },
            "functionSelector": "624d8774",
            "id": 1446,
            "mutability": "mutable",
            "name": "mapCLH",
            "nameLocation": "1419:6:49",
            "nodeType": "VariableDeclaration",
            "scope": 1804,
            "src": "1383:42:49",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_contract$_ICLHouse_$5924_$",
              "typeString": "mapping(uint256 => contract ICLHouse)"
            },
            "typeName": {
              "id": 1445,
              "keyType": {
                "id": 1442,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1391:7:49",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "1383:28:49",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_contract$_ICLHouse_$5924_$",
                "typeString": "mapping(uint256 => contract ICLHouse)"
              },
              "valueType": {
                "id": 1444,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 1443,
                  "name": "ICLHouse",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 5924,
                  "src": "1402:8:49"
                },
                "referencedDeclaration": 5924,
                "src": "1402:8:49",
                "typeDescriptions": {
                  "typeIdentifier": "t_contract$_ICLHouse_$5924",
                  "typeString": "contract ICLHouse"
                }
              }
            },
            "visibility": "public"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 1447,
              "nodeType": "StructuredDocumentation",
              "src": "1432:198:49",
              "text": "@notice Event when house is created\n @param houseAddr Address of the created house\n @param houseName Name of the created house\n @param houseId Id of CLH of the created house"
            },
            "id": 1455,
            "name": "evtNewCLH",
            "nameLocation": "1641:9:49",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1454,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1449,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "houseAddr",
                  "nameLocation": "1660:9:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1455,
                  "src": "1652:17:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1448,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1652:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1451,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "houseName",
                  "nameLocation": "1678:9:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1455,
                  "src": "1671:16:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1450,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1671:6:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1453,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "houseId",
                  "nameLocation": "1697:7:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1455,
                  "src": "1689:15:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1452,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1689:7:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1650:56:49"
            },
            "src": "1635:72:49"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 1456,
              "nodeType": "StructuredDocumentation",
              "src": "1713:209:49",
              "text": "@notice Event when a CL Contract address is updated\n @param CLCName Name of contract var\n @param oldAddress Old Address value of the var\n @param newAddress New Address value of the var"
            },
            "id": 1464,
            "name": "evtUpdateCLC",
            "nameLocation": "1933:12:49",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1463,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1458,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "CLCName",
                  "nameLocation": "1954:7:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1464,
                  "src": "1947:14:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1457,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1947:6:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1460,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "oldAddress",
                  "nameLocation": "1971:10:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1464,
                  "src": "1963:18:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1459,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1963:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1462,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "newAddress",
                  "nameLocation": "1991:10:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1464,
                  "src": "1983:18:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1461,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1983:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1945:58:49"
            },
            "src": "1927:77:49"
          },
          {
            "body": {
              "id": 1471,
              "nodeType": "Block",
              "src": "2077:39:49",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 1468,
                      "name": "_disableInitializers",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9744,
                      "src": "2087:20:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 1469,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2087:22:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1470,
                  "nodeType": "ExpressionStatement",
                  "src": "2087:22:49"
                }
              ]
            },
            "documentation": {
              "id": 1465,
              "nodeType": "StructuredDocumentation",
              "src": "2010:48:49",
              "text": "@custom:oz-upgrades-unsafe-allow constructor"
            },
            "id": 1472,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1466,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2074:2:49"
            },
            "returnParameters": {
              "id": 1467,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2077:0:49"
            },
            "scope": 1804,
            "src": "2063:53:49",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5663
            ],
            "body": {
              "id": 1538,
              "nodeType": "Block",
              "src": "2823:351:49",
              "statements": [
                {
                  "expression": {
                    "id": 1493,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1489,
                      "name": "beaconCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1435,
                      "src": "2833:9:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_CLBeacon_$4858",
                        "typeString": "contract CLBeacon"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 1491,
                          "name": "_beacon",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1483,
                          "src": "2855:7:49",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 1490,
                        "name": "CLBeacon",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4858,
                        "src": "2845:8:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_CLBeacon_$4858_$",
                          "typeString": "type(contract CLBeacon)"
                        }
                      },
                      "id": 1492,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2845:19:49",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_CLBeacon_$4858",
                        "typeString": "contract CLBeacon"
                      }
                    },
                    "src": "2833:31:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_CLBeacon_$4858",
                      "typeString": "contract CLBeacon"
                    }
                  },
                  "id": 1494,
                  "nodeType": "ExpressionStatement",
                  "src": "2833:31:49"
                },
                {
                  "expression": {
                    "id": 1497,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1495,
                      "name": "CLLUserManagement",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1421,
                      "src": "2875:17:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1496,
                      "name": "_CLLUserManagement",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1475,
                      "src": "2895:18:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2875:38:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1498,
                  "nodeType": "ExpressionStatement",
                  "src": "2875:38:49"
                },
                {
                  "expression": {
                    "id": 1501,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1499,
                      "name": "CLLGovernance",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1424,
                      "src": "2923:13:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1500,
                      "name": "_CLLGovernance",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1477,
                      "src": "2939:14:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2923:30:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1502,
                  "nodeType": "ExpressionStatement",
                  "src": "2923:30:49"
                },
                {
                  "expression": {
                    "id": 1505,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1503,
                      "name": "CLLConstructorCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1418,
                      "src": "2963:17:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1504,
                      "name": "_CLLConstructorCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1479,
                      "src": "2983:18:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2963:38:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1506,
                  "nodeType": "ExpressionStatement",
                  "src": "2963:38:49"
                },
                {
                  "expression": {
                    "id": 1509,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1507,
                      "name": "CLHAPI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1427,
                      "src": "3011:6:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1508,
                      "name": "_CLHAPI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1481,
                      "src": "3020:7:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "3011:16:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1510,
                  "nodeType": "ExpressionStatement",
                  "src": "3011:16:49"
                },
                {
                  "expression": {
                    "id": 1513,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1511,
                      "name": "numCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1411,
                      "src": "3038:6:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "30",
                      "id": 1512,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3047:1:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "3038:10:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1514,
                  "nodeType": "ExpressionStatement",
                  "src": "3038:10:49"
                },
                {
                  "expression": {
                    "id": 1524,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 1515,
                        "name": "mapCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1446,
                        "src": "3058:6:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_contract$_ICLHouse_$5924_$",
                          "typeString": "mapping(uint256 => contract ICLHouse)"
                        }
                      },
                      "id": 1517,
                      "indexExpression": {
                        "id": 1516,
                        "name": "numCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1411,
                        "src": "3066:6:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "3058:16:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ICLHouse_$5924",
                        "typeString": "contract ICLHouse"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 1521,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3095:1:49",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 1520,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "3087:7:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 1519,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "3087:7:49",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 1522,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3087:10:49",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 1518,
                        "name": "ICLHouse",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5924,
                        "src": "3077:8:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_ICLHouse_$5924_$",
                          "typeString": "type(contract ICLHouse)"
                        }
                      },
                      "id": 1523,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3077:22:49",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ICLHouse_$5924",
                        "typeString": "contract ICLHouse"
                      }
                    },
                    "src": "3058:41:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ICLHouse_$5924",
                      "typeString": "contract ICLHouse"
                    }
                  },
                  "id": 1525,
                  "nodeType": "ExpressionStatement",
                  "src": "3058:41:49"
                },
                {
                  "expression": {
                    "id": 1533,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 1526,
                        "name": "mapIdCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1440,
                        "src": "3109:8:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 1531,
                      "indexExpression": {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 1529,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3127:1:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 1528,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "3119:7:49",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 1527,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "3119:7:49",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 1530,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3119:10:49",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "3109:22:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1532,
                      "name": "numCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1411,
                      "src": "3134:6:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3109:31:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1534,
                  "nodeType": "ExpressionStatement",
                  "src": "3109:31:49"
                },
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 1535,
                      "name": "__Ownable_init",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5951,
                      "src": "3151:14:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 1536,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3151:16:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1537,
                  "nodeType": "ExpressionStatement",
                  "src": "3151:16:49"
                }
              ]
            },
            "documentation": {
              "id": 1473,
              "nodeType": "StructuredDocumentation",
              "src": "2122:450:49",
              "text": "@notice Config the CLFactory with the CL Logic Contracts\n @param _CLLUserManagement Address Contract Logic for user management\n @param _CLLGovernance Address Contract Logic for governance\n @param _CLLConstructorCLH Address Contract with the Constructor logic\n @param _CLHAPI Address of CLHAPI Contract\n @param _beacon Address Beacon Contract\n @dev The constructor create a default CLH with the houseId #0"
            },
            "functionSelector": "60b323c3",
            "id": 1539,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 1486,
                    "name": "__UPGRADEABLE_CLF_VERSION__",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 9411,
                    "src": "2789:27:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  }
                ],
                "id": 1487,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 1485,
                  "name": "reinitializer",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 9698,
                  "src": "2774:13:49"
                },
                "nodeType": "ModifierInvocation",
                "src": "2774:44:49"
              }
            ],
            "name": "Init",
            "nameLocation": "2586:4:49",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1484,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1475,
                  "mutability": "mutable",
                  "name": "_CLLUserManagement",
                  "nameLocation": "2608:18:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1539,
                  "src": "2600:26:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1474,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2600:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1477,
                  "mutability": "mutable",
                  "name": "_CLLGovernance",
                  "nameLocation": "2644:14:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1539,
                  "src": "2636:22:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1476,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2636:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1479,
                  "mutability": "mutable",
                  "name": "_CLLConstructorCLH",
                  "nameLocation": "2676:18:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1539,
                  "src": "2668:26:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1478,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2668:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1481,
                  "mutability": "mutable",
                  "name": "_CLHAPI",
                  "nameLocation": "2712:7:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1539,
                  "src": "2704:15:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1480,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2704:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1483,
                  "mutability": "mutable",
                  "name": "_beacon",
                  "nameLocation": "2737:7:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1539,
                  "src": "2729:15:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1482,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2729:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2590:160:49"
            },
            "returnParameters": {
              "id": 1488,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2823:0:49"
            },
            "scope": 1804,
            "src": "2577:597:49",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5687
            ],
            "body": {
              "id": 1699,
              "nodeType": "Block",
              "src": "4227:1663:49",
              "statements": [
                {
                  "assignments": [
                    1565
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1565,
                      "mutability": "mutable",
                      "name": "houseOwner",
                      "nameLocation": "4245:10:49",
                      "nodeType": "VariableDeclaration",
                      "scope": 1699,
                      "src": "4237:18:49",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1564,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4237:7:49",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1568,
                  "initialValue": {
                    "expression": {
                      "id": 1566,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -15,
                      "src": "4258:3:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 1567,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "src": "4258:10:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4237:31:49"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 1580,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 1576,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "id": 1572,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 1570,
                              "name": "__GOV_DICTATORSHIP__",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 9416,
                              "src": "4301:20:49",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "id": 1571,
                              "name": "_govModel",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1548,
                              "src": "4325:9:49",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "src": "4301:33:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "id": 1575,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 1573,
                              "name": "__GOV_COMMITTEE__",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 9421,
                              "src": "4350:17:49",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "id": 1574,
                              "name": "_govModel",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1548,
                              "src": "4371:9:49",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "src": "4350:30:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "4301:79:49",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          "id": 1579,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1577,
                            "name": "__GOV_SIMPLE_MAJORITY__",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 9426,
                            "src": "4396:23:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "id": 1578,
                            "name": "_govModel",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1548,
                            "src": "4423:9:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "src": "4396:36:49",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "4301:131:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "496e76616c696420476f7665726e616e63652054797065",
                        "id": 1581,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4447:25:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_214b95948b2fffc4708f5771e5883416970438828cb4a690e032cc55f38d94b1",
                          "typeString": "literal_string \"Invalid Governance Type\""
                        },
                        "value": "Invalid Governance Type"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_214b95948b2fffc4708f5771e5883416970438828cb4a690e032cc55f38d94b1",
                          "typeString": "literal_string \"Invalid Governance Type\""
                        }
                      ],
                      "id": 1569,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4279:7:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1582,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4279:203:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1583,
                  "nodeType": "ExpressionStatement",
                  "src": "4279:203:49"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 1589,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 1584,
                      "name": "_signerWallet",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1559,
                      "src": "4497:13:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "arguments": [
                        {
                          "hexValue": "30",
                          "id": 1587,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4522:1:49",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 1586,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "4514:7:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 1585,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4514:7:49",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 1588,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4514:10:49",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4497:27:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1635,
                  "nodeType": "IfStatement",
                  "src": "4493:692:49",
                  "trueBody": {
                    "id": 1634,
                    "nodeType": "Block",
                    "src": "4527:658:49",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1594,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 1591,
                                  "name": "_signature",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1561,
                                  "src": "4550:10:49",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                "id": 1592,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "src": "4550:17:49",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "hexValue": "3635",
                                "id": 1593,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "4571:2:49",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_65_by_1",
                                  "typeString": "int_const 65"
                                },
                                "value": "65"
                              },
                              "src": "4550:23:49",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "437265617465434c483a20426164207369676e6174757265206c656e677468",
                              "id": 1595,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4575:33:49",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_66546f6712041f6d05b5202f53cc0449a241460309628ff6f24130bbd6047f30",
                                "typeString": "literal_string \"CreateCLH: Bad signature length\""
                              },
                              "value": "CreateCLH: Bad signature length"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_66546f6712041f6d05b5202f53cc0449a241460309628ff6f24130bbd6047f30",
                                "typeString": "literal_string \"CreateCLH: Bad signature length\""
                              }
                            ],
                            "id": 1590,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "4541:7:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1596,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4541:69:49",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1597,
                        "nodeType": "ExpressionStatement",
                        "src": "4541:69:49"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 1626,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1599,
                                "name": "_signerWallet",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1559,
                                "src": "4662:13:49",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "id": 1604,
                                    "name": "_houseName",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1542,
                                    "src": "4736:10:49",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  },
                                  {
                                    "id": 1605,
                                    "name": "_housePrivate",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1544,
                                    "src": "4768:13:49",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "id": 1606,
                                    "name": "_houseOpen",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1546,
                                    "src": "4803:10:49",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "id": 1607,
                                    "name": "_govModel",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1548,
                                    "src": "4835:9:49",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  },
                                  {
                                    "baseExpression": {
                                      "id": 1608,
                                      "name": "_govRules",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1552,
                                      "src": "4866:9:49",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                                        "typeString": "uint256[3] memory"
                                      }
                                    },
                                    "id": 1610,
                                    "indexExpression": {
                                      "hexValue": "30",
                                      "id": 1609,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "4876:1:49",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "4866:12:49",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "baseExpression": {
                                      "id": 1611,
                                      "name": "_govRules",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1552,
                                      "src": "4900:9:49",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                                        "typeString": "uint256[3] memory"
                                      }
                                    },
                                    "id": 1613,
                                    "indexExpression": {
                                      "hexValue": "31",
                                      "id": 1612,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "4910:1:49",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_1_by_1",
                                        "typeString": "int_const 1"
                                      },
                                      "value": "1"
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "4900:12:49",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "baseExpression": {
                                      "id": 1614,
                                      "name": "_govRules",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1552,
                                      "src": "4934:9:49",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                                        "typeString": "uint256[3] memory"
                                      }
                                    },
                                    "id": 1616,
                                    "indexExpression": {
                                      "hexValue": "32",
                                      "id": 1615,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "4944:1:49",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_2_by_1",
                                        "typeString": "int_const 2"
                                      },
                                      "value": "2"
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "4934:12:49",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "baseExpression": {
                                      "id": 1617,
                                      "name": "_ManagerWallets",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1555,
                                      "src": "4968:15:49",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                        "typeString": "address[] memory"
                                      }
                                    },
                                    "id": 1619,
                                    "indexExpression": {
                                      "hexValue": "30",
                                      "id": 1618,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "4984:1:49",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "4968:18:49",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "id": 1622,
                                        "name": "this",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -28,
                                        "src": "5016:4:49",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_contract$_CLFactory_$1804",
                                          "typeString": "contract CLFactory"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_contract$_CLFactory_$1804",
                                          "typeString": "contract CLFactory"
                                        }
                                      ],
                                      "id": 1621,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "5008:7:49",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 1620,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "5008:7:49",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 1623,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "5008:13:49",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "id": 1624,
                                    "name": "_signature",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1561,
                                    "src": "5043:10:49",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    },
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  ],
                                  "expression": {
                                    "arguments": [
                                      {
                                        "id": 1601,
                                        "name": "CLHAPI",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1427,
                                        "src": "4691:6:49",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      ],
                                      "id": 1600,
                                      "name": "CLHouseApi",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 967,
                                      "src": "4679:10:49",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_contract$_CLHouseApi_$967_$",
                                        "typeString": "type(contract CLHouseApi)"
                                      }
                                    },
                                    "id": 1602,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "4679:20:49",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_CLHouseApi_$967",
                                      "typeString": "contract CLHouseApi"
                                    }
                                  },
                                  "id": 1603,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "SignerOCNewCLH",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 966,
                                  "src": "4679:35:49",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_view$_t_string_memory_ptr_$_t_bool_$_t_bool_$_t_bytes32_$_t_uint256_$_t_uint256_$_t_uint256_$_t_address_$_t_address_$_t_bytes_memory_ptr_$returns$_t_address_$",
                                    "typeString": "function (string memory,bool,bool,bytes32,uint256,uint256,uint256,address,address,bytes memory) view external returns (address)"
                                  }
                                },
                                "id": 1625,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "4679:392:49",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "4662:409:49",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "437265617465434c483a20496e76616c6964205369676e6174757265",
                              "id": 1627,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5089:30:49",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_099f17192883e41fedd772ee8fa6333842f0019e00f69fd93b115b83fd0b3f05",
                                "typeString": "literal_string \"CreateCLH: Invalid Signature\""
                              },
                              "value": "CreateCLH: Invalid Signature"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_099f17192883e41fedd772ee8fa6333842f0019e00f69fd93b115b83fd0b3f05",
                                "typeString": "literal_string \"CreateCLH: Invalid Signature\""
                              }
                            ],
                            "id": 1598,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "4637:7:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1628,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4637:496:49",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1629,
                        "nodeType": "ExpressionStatement",
                        "src": "4637:496:49"
                      },
                      {
                        "expression": {
                          "id": 1632,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1630,
                            "name": "houseOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1565,
                            "src": "5148:10:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1631,
                            "name": "_signerWallet",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1559,
                            "src": "5161:13:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "5148:26:49",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 1633,
                        "nodeType": "ExpressionStatement",
                        "src": "5148:26:49"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    1638
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1638,
                      "mutability": "mutable",
                      "name": "pxyCLH",
                      "nameLocation": "5206:6:49",
                      "nodeType": "VariableDeclaration",
                      "scope": 1699,
                      "src": "5195:17:49",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_CLProxyCLH_$4900",
                        "typeString": "contract CLProxyCLH"
                      },
                      "typeName": {
                        "id": 1637,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1636,
                          "name": "CLProxyCLH",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 4900,
                          "src": "5195:10:49"
                        },
                        "referencedDeclaration": 4900,
                        "src": "5195:10:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_CLProxyCLH_$4900",
                          "typeString": "contract CLProxyCLH"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1666,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 1644,
                            "name": "beaconCLH",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1435,
                            "src": "5252:9:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_CLBeacon_$4858",
                              "typeString": "contract CLBeacon"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_CLBeacon_$4858",
                              "typeString": "contract CLBeacon"
                            }
                          ],
                          "id": 1643,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "5243:7:49",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 1642,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "5243:7:49",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 1645,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5243:20:49",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "hexValue": "496e697428616464726573732c737472696e672c626f6f6c2c626f6f6c2c627974657333322c75696e743235365b335d2c616464726573735b345d2c616464726573735b5d29",
                            "id": 1648,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5318:72:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_7e66495d94b01953eef3659a2708d5e0317dad5caa7da515816c95feaec4b6f2",
                              "typeString": "literal_string \"Init(address,string,bool,bool,bytes32,uint256[3],address[4],address[])\""
                            },
                            "value": "Init(address,string,bool,bool,bytes32,uint256[3],address[4],address[])"
                          },
                          {
                            "id": 1649,
                            "name": "houseOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1565,
                            "src": "5408:10:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 1650,
                            "name": "_houseName",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1542,
                            "src": "5437:10:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          {
                            "id": 1651,
                            "name": "_housePrivate",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1544,
                            "src": "5465:13:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "id": 1652,
                            "name": "_houseOpen",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1546,
                            "src": "5496:10:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "id": 1653,
                            "name": "_govModel",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1548,
                            "src": "5524:9:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "id": 1654,
                            "name": "_govRules",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1552,
                            "src": "5551:9:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                              "typeString": "uint256[3] memory"
                            }
                          },
                          {
                            "components": [
                              {
                                "arguments": [
                                  {
                                    "id": 1657,
                                    "name": "this",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -28,
                                    "src": "5588:4:49",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_CLFactory_$1804",
                                      "typeString": "contract CLFactory"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_CLFactory_$1804",
                                      "typeString": "contract CLFactory"
                                    }
                                  ],
                                  "id": 1656,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "5580:7:49",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 1655,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "5580:7:49",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 1658,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5580:13:49",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 1659,
                                "name": "CLHAPI",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1427,
                                "src": "5595:6:49",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 1660,
                                "name": "_gnosisSafe",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1557,
                                "src": "5603:11:49",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 1661,
                                "name": "CLLConstructorCLH",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1418,
                                "src": "5616:17:49",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "id": 1662,
                            "isConstant": false,
                            "isInlineArray": true,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "5578:57:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$4_memory_ptr",
                              "typeString": "address[4] memory"
                            }
                          },
                          {
                            "id": 1663,
                            "name": "_ManagerWallets",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1555,
                            "src": "5653:15:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                              "typeString": "address[] memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_7e66495d94b01953eef3659a2708d5e0317dad5caa7da515816c95feaec4b6f2",
                              "typeString": "literal_string \"Init(address,string,bool,bool,bytes32,uint256[3],address[4],address[])\""
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            },
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                              "typeString": "uint256[3] memory"
                            },
                            {
                              "typeIdentifier": "t_array$_t_address_$4_memory_ptr",
                              "typeString": "address[4] memory"
                            },
                            {
                              "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                              "typeString": "address[] memory"
                            }
                          ],
                          "expression": {
                            "id": 1646,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "5277:3:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 1647,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodeWithSignature",
                          "nodeType": "MemberAccess",
                          "src": "5277:23:49",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (string memory) pure returns (bytes memory)"
                          }
                        },
                        "id": 1664,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5277:405:49",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 1641,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "NewExpression",
                      "src": "5215:14:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_creation_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_contract$_CLProxyCLH_$4900_$",
                        "typeString": "function (address,bytes memory) returns (contract CLProxyCLH)"
                      },
                      "typeName": {
                        "id": 1640,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1639,
                          "name": "CLProxyCLH",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 4900,
                          "src": "5219:10:49"
                        },
                        "referencedDeclaration": 4900,
                        "src": "5219:10:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_CLProxyCLH_$4900",
                          "typeString": "contract CLProxyCLH"
                        }
                      }
                    },
                    "id": 1665,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5215:477:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_CLProxyCLH_$4900",
                      "typeString": "contract CLProxyCLH"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5195:497:49"
                },
                {
                  "expression": {
                    "id": 1668,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "++",
                    "prefix": false,
                    "src": "5703:8:49",
                    "subExpression": {
                      "id": 1667,
                      "name": "numCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1411,
                      "src": "5703:6:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1669,
                  "nodeType": "ExpressionStatement",
                  "src": "5703:8:49"
                },
                {
                  "expression": {
                    "id": 1679,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 1670,
                        "name": "mapCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1446,
                        "src": "5721:6:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_contract$_ICLHouse_$5924_$",
                          "typeString": "mapping(uint256 => contract ICLHouse)"
                        }
                      },
                      "id": 1672,
                      "indexExpression": {
                        "id": 1671,
                        "name": "numCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1411,
                        "src": "5729:6:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "5721:16:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ICLHouse_$5924",
                        "typeString": "contract ICLHouse"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "id": 1676,
                              "name": "pxyCLH",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1638,
                              "src": "5759:6:49",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_CLProxyCLH_$4900",
                                "typeString": "contract CLProxyCLH"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_CLProxyCLH_$4900",
                                "typeString": "contract CLProxyCLH"
                              }
                            ],
                            "id": 1675,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "5750:7:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 1674,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "5750:7:49",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 1677,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5750:17:49",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 1673,
                        "name": "ICLHouse",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5924,
                        "src": "5740:8:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_ICLHouse_$5924_$",
                          "typeString": "type(contract ICLHouse)"
                        }
                      },
                      "id": 1678,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5740:29:49",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ICLHouse_$5924",
                        "typeString": "contract ICLHouse"
                      }
                    },
                    "src": "5721:48:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ICLHouse_$5924",
                      "typeString": "contract ICLHouse"
                    }
                  },
                  "id": 1680,
                  "nodeType": "ExpressionStatement",
                  "src": "5721:48:49"
                },
                {
                  "expression": {
                    "id": 1688,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 1681,
                        "name": "mapIdCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1440,
                        "src": "5779:8:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 1686,
                      "indexExpression": {
                        "arguments": [
                          {
                            "id": 1684,
                            "name": "pxyCLH",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1638,
                            "src": "5798:6:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_CLProxyCLH_$4900",
                              "typeString": "contract CLProxyCLH"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_CLProxyCLH_$4900",
                              "typeString": "contract CLProxyCLH"
                            }
                          ],
                          "id": 1683,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "5789:7:49",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 1682,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "5789:7:49",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 1685,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5789:17:49",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "5779:29:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1687,
                      "name": "numCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1411,
                      "src": "5811:6:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5779:38:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1689,
                  "nodeType": "ExpressionStatement",
                  "src": "5779:38:49"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 1693,
                            "name": "pxyCLH",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1638,
                            "src": "5853:6:49",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_CLProxyCLH_$4900",
                              "typeString": "contract CLProxyCLH"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_CLProxyCLH_$4900",
                              "typeString": "contract CLProxyCLH"
                            }
                          ],
                          "id": 1692,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "5844:7:49",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 1691,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "5844:7:49",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 1694,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5844:17:49",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1695,
                        "name": "_houseName",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1542,
                        "src": "5863:10:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      {
                        "id": 1696,
                        "name": "numCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1411,
                        "src": "5875:6:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1690,
                      "name": "evtNewCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1455,
                      "src": "5833:9:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_string_memory_ptr_$_t_uint256_$returns$__$",
                        "typeString": "function (address,string memory,uint256)"
                      }
                    },
                    "id": 1697,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5833:50:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1698,
                  "nodeType": "EmitStatement",
                  "src": "5828:55:49"
                }
              ]
            },
            "documentation": {
              "id": 1540,
              "nodeType": "StructuredDocumentation",
              "src": "3181:710:49",
              "text": "@notice Deploy a new CLHouse\n @param _houseName Name of the CLH\n @param _housePrivate If is set to 1, the CLH is set to private\n @param _houseOpen If is set to 1, the CLH is set to open\n @param _govModel keccak256 hash of the governance model, see the __GOV_* constans\n @param _govRules Array for goverment rules see `enum gRule`\n @param _ManagerWallets Whitelist of address for invitate as managers\n @param _gnosisSafe Contract address of SAFE\n @param _signerWallet Wallet address of the signer for OffChain Tx\n @param _signature Signature for validate OffChain Tx\n @dev Some parameters wil be ignored depending on the governance model"
            },
            "functionSelector": "ed0717fe",
            "id": 1700,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "CreateCLH",
            "nameLocation": "3905:9:49",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1562,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1542,
                  "mutability": "mutable",
                  "name": "_houseName",
                  "nameLocation": "3938:10:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1700,
                  "src": "3924:24:49",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1541,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3924:6:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1544,
                  "mutability": "mutable",
                  "name": "_housePrivate",
                  "nameLocation": "3963:13:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1700,
                  "src": "3958:18:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1543,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3958:4:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1546,
                  "mutability": "mutable",
                  "name": "_houseOpen",
                  "nameLocation": "3991:10:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1700,
                  "src": "3986:15:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1545,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3986:4:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1548,
                  "mutability": "mutable",
                  "name": "_govModel",
                  "nameLocation": "4019:9:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1700,
                  "src": "4011:17:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1547,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4011:7:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1552,
                  "mutability": "mutable",
                  "name": "_govRules",
                  "nameLocation": "4056:9:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1700,
                  "src": "4038:27:49",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
                    "typeString": "uint256[3]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1549,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "4038:7:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 1551,
                    "length": {
                      "hexValue": "33",
                      "id": 1550,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "4046:1:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_3_by_1",
                        "typeString": "int_const 3"
                      },
                      "value": "3"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "4038:10:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$3_storage_ptr",
                      "typeString": "uint256[3]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1555,
                  "mutability": "mutable",
                  "name": "_ManagerWallets",
                  "nameLocation": "4092:15:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1700,
                  "src": "4075:32:49",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1553,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "4075:7:49",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 1554,
                    "nodeType": "ArrayTypeName",
                    "src": "4075:9:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1557,
                  "mutability": "mutable",
                  "name": "_gnosisSafe",
                  "nameLocation": "4125:11:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1700,
                  "src": "4117:19:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1556,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4117:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1559,
                  "mutability": "mutable",
                  "name": "_signerWallet",
                  "nameLocation": "4154:13:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1700,
                  "src": "4146:21:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1558,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4146:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1561,
                  "mutability": "mutable",
                  "name": "_signature",
                  "nameLocation": "4190:10:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1700,
                  "src": "4177:23:49",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1560,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "4177:5:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3914:292:49"
            },
            "returnParameters": {
              "id": 1563,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4227:0:49"
            },
            "scope": 1804,
            "src": "3896:1994:49",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              5650
            ],
            "body": {
              "id": 1710,
              "nodeType": "Block",
              "src": "6019:50:49",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 1706,
                        "name": "beaconCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1435,
                        "src": "6036:9:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_CLBeacon_$4858",
                          "typeString": "contract CLBeacon"
                        }
                      },
                      "id": 1707,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "implementation",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 6245,
                      "src": "6036:24:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
                        "typeString": "function () view external returns (address)"
                      }
                    },
                    "id": 1708,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6036:26:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 1705,
                  "id": 1709,
                  "nodeType": "Return",
                  "src": "6029:33:49"
                }
              ]
            },
            "documentation": {
              "id": 1701,
              "nodeType": "StructuredDocumentation",
              "src": "5897:53:49",
              "text": "@notice Get the address of the CLH contract logic"
            },
            "functionSelector": "a6b6ed3a",
            "id": 1711,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getCLHImplementation",
            "nameLocation": "5964:20:49",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1702,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5984:2:49"
            },
            "returnParameters": {
              "id": 1705,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1704,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1711,
                  "src": "6010:7:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1703,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6010:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6009:9:49"
            },
            "scope": 1804,
            "src": "5955:114:49",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1733,
              "nodeType": "Block",
              "src": "6219:179:49",
              "statements": [
                {
                  "assignments": [
                    1720
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1720,
                      "mutability": "mutable",
                      "name": "oldAddr",
                      "nameLocation": "6237:7:49",
                      "nodeType": "VariableDeclaration",
                      "scope": 1733,
                      "src": "6229:15:49",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1719,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "6229:7:49",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1722,
                  "initialValue": {
                    "id": 1721,
                    "name": "CLLConstructorCLH",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1418,
                    "src": "6247:17:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6229:35:49"
                },
                {
                  "expression": {
                    "id": 1725,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1723,
                      "name": "CLLConstructorCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1418,
                      "src": "6274:17:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1724,
                      "name": "_CLLConstructorCLH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1714,
                      "src": "6294:18:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "6274:38:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1726,
                  "nodeType": "ExpressionStatement",
                  "src": "6274:38:49"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "hexValue": "434c4c436f6e7374727563746f72434c48",
                        "id": 1728,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6341:19:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_21ca4107ae7c6046a1dcb965fe2f0c3235f996f64457d0aee953a67fec2a2477",
                          "typeString": "literal_string \"CLLConstructorCLH\""
                        },
                        "value": "CLLConstructorCLH"
                      },
                      {
                        "id": 1729,
                        "name": "oldAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1720,
                        "src": "6362:7:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1730,
                        "name": "_CLLConstructorCLH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1714,
                        "src": "6371:18:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_21ca4107ae7c6046a1dcb965fe2f0c3235f996f64457d0aee953a67fec2a2477",
                          "typeString": "literal_string \"CLLConstructorCLH\""
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 1727,
                      "name": "evtUpdateCLC",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1464,
                      "src": "6327:12:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_string_memory_ptr_$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (string memory,address,address)"
                      }
                    },
                    "id": 1731,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6327:64:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1732,
                  "nodeType": "EmitStatement",
                  "src": "6322:69:49"
                }
              ]
            },
            "documentation": {
              "id": 1712,
              "nodeType": "StructuredDocumentation",
              "src": "6075:57:49",
              "text": "@notice Update the CLLConstructorCLH contract Address"
            },
            "functionSelector": "f6f7a1b3",
            "id": 1734,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 1717,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 1716,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 5970,
                  "src": "6209:9:49"
                },
                "nodeType": "ModifierInvocation",
                "src": "6209:9:49"
              }
            ],
            "name": "UpdateCLLConstructorCLH",
            "nameLocation": "6146:23:49",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1715,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1714,
                  "mutability": "mutable",
                  "name": "_CLLConstructorCLH",
                  "nameLocation": "6179:18:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1734,
                  "src": "6171:26:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1713,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6171:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6169:30:49"
            },
            "returnParameters": {
              "id": 1718,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6219:0:49"
            },
            "scope": 1804,
            "src": "6137:261:49",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1756,
              "nodeType": "Block",
              "src": "6548:179:49",
              "statements": [
                {
                  "assignments": [
                    1743
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1743,
                      "mutability": "mutable",
                      "name": "oldAddr",
                      "nameLocation": "6566:7:49",
                      "nodeType": "VariableDeclaration",
                      "scope": 1756,
                      "src": "6558:15:49",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1742,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "6558:7:49",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1745,
                  "initialValue": {
                    "id": 1744,
                    "name": "CLLUserManagement",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1421,
                    "src": "6576:17:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6558:35:49"
                },
                {
                  "expression": {
                    "id": 1748,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1746,
                      "name": "CLLUserManagement",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1421,
                      "src": "6603:17:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1747,
                      "name": "_CLLUserManagement",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1737,
                      "src": "6623:18:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "6603:38:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1749,
                  "nodeType": "ExpressionStatement",
                  "src": "6603:38:49"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "hexValue": "434c4c557365724d616e6167656d656e74",
                        "id": 1751,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6670:19:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_8818be37b272861fc8aaea0e23015042e4fd23826d87079659169951e66dc62a",
                          "typeString": "literal_string \"CLLUserManagement\""
                        },
                        "value": "CLLUserManagement"
                      },
                      {
                        "id": 1752,
                        "name": "oldAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1743,
                        "src": "6691:7:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1753,
                        "name": "_CLLUserManagement",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1737,
                        "src": "6700:18:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_8818be37b272861fc8aaea0e23015042e4fd23826d87079659169951e66dc62a",
                          "typeString": "literal_string \"CLLUserManagement\""
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 1750,
                      "name": "evtUpdateCLC",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1464,
                      "src": "6656:12:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_string_memory_ptr_$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (string memory,address,address)"
                      }
                    },
                    "id": 1754,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6656:64:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1755,
                  "nodeType": "EmitStatement",
                  "src": "6651:69:49"
                }
              ]
            },
            "documentation": {
              "id": 1735,
              "nodeType": "StructuredDocumentation",
              "src": "6404:57:49",
              "text": "@notice Update the CLLUserManagement contract Address"
            },
            "functionSelector": "c1e45428",
            "id": 1757,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 1740,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 1739,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 5970,
                  "src": "6538:9:49"
                },
                "nodeType": "ModifierInvocation",
                "src": "6538:9:49"
              }
            ],
            "name": "UpdateCLLUserManagement",
            "nameLocation": "6475:23:49",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1738,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1737,
                  "mutability": "mutable",
                  "name": "_CLLUserManagement",
                  "nameLocation": "6508:18:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1757,
                  "src": "6500:26:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1736,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6500:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6498:30:49"
            },
            "returnParameters": {
              "id": 1741,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6548:0:49"
            },
            "scope": 1804,
            "src": "6466:261:49",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1779,
              "nodeType": "Block",
              "src": "6865:159:49",
              "statements": [
                {
                  "assignments": [
                    1766
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1766,
                      "mutability": "mutable",
                      "name": "oldAddr",
                      "nameLocation": "6883:7:49",
                      "nodeType": "VariableDeclaration",
                      "scope": 1779,
                      "src": "6875:15:49",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1765,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "6875:7:49",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1768,
                  "initialValue": {
                    "id": 1767,
                    "name": "CLLGovernance",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1424,
                    "src": "6893:13:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6875:31:49"
                },
                {
                  "expression": {
                    "id": 1771,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1769,
                      "name": "CLLGovernance",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1424,
                      "src": "6916:13:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1770,
                      "name": "_CLLGovernance",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1760,
                      "src": "6932:14:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "6916:30:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1772,
                  "nodeType": "ExpressionStatement",
                  "src": "6916:30:49"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "hexValue": "434c4c476f7665726e616e6365",
                        "id": 1774,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6975:15:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_5e0add186a65a03987845808813dd6258edab07c4a3ce5ebe4a055283e2a29f0",
                          "typeString": "literal_string \"CLLGovernance\""
                        },
                        "value": "CLLGovernance"
                      },
                      {
                        "id": 1775,
                        "name": "oldAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1766,
                        "src": "6992:7:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1776,
                        "name": "_CLLGovernance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1760,
                        "src": "7001:14:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_5e0add186a65a03987845808813dd6258edab07c4a3ce5ebe4a055283e2a29f0",
                          "typeString": "literal_string \"CLLGovernance\""
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 1773,
                      "name": "evtUpdateCLC",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1464,
                      "src": "6961:12:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_string_memory_ptr_$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (string memory,address,address)"
                      }
                    },
                    "id": 1777,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6961:56:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1778,
                  "nodeType": "EmitStatement",
                  "src": "6956:61:49"
                }
              ]
            },
            "documentation": {
              "id": 1758,
              "nodeType": "StructuredDocumentation",
              "src": "6733:53:49",
              "text": "@notice Update the CLLGovernance contract Address"
            },
            "functionSelector": "d742063c",
            "id": 1780,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 1763,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 1762,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 5970,
                  "src": "6855:9:49"
                },
                "nodeType": "ModifierInvocation",
                "src": "6855:9:49"
              }
            ],
            "name": "UpdateCLLGovernance",
            "nameLocation": "6800:19:49",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1761,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1760,
                  "mutability": "mutable",
                  "name": "_CLLGovernance",
                  "nameLocation": "6829:14:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1780,
                  "src": "6821:22:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1759,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6821:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6819:26:49"
            },
            "returnParameters": {
              "id": 1764,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6865:0:49"
            },
            "scope": 1804,
            "src": "6791:233:49",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1802,
              "nodeType": "Block",
              "src": "7141:124:49",
              "statements": [
                {
                  "assignments": [
                    1789
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1789,
                      "mutability": "mutable",
                      "name": "oldAddr",
                      "nameLocation": "7159:7:49",
                      "nodeType": "VariableDeclaration",
                      "scope": 1802,
                      "src": "7151:15:49",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1788,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "7151:7:49",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1791,
                  "initialValue": {
                    "id": 1790,
                    "name": "CLHAPI",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1427,
                    "src": "7169:6:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7151:24:49"
                },
                {
                  "expression": {
                    "id": 1794,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1792,
                      "name": "CLHAPI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1427,
                      "src": "7185:6:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1793,
                      "name": "_CLHAPI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1783,
                      "src": "7194:7:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "7185:16:49",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1795,
                  "nodeType": "ExpressionStatement",
                  "src": "7185:16:49"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "hexValue": "434c48415049",
                        "id": 1797,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7230:8:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_2b984e4543ba4bbb304d0949ad6233a06b8a82e7c8ff91036023cf7aa14ed431",
                          "typeString": "literal_string \"CLHAPI\""
                        },
                        "value": "CLHAPI"
                      },
                      {
                        "id": 1798,
                        "name": "oldAddr",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1789,
                        "src": "7240:7:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1799,
                        "name": "_CLHAPI",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1783,
                        "src": "7249:7:49",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_2b984e4543ba4bbb304d0949ad6233a06b8a82e7c8ff91036023cf7aa14ed431",
                          "typeString": "literal_string \"CLHAPI\""
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 1796,
                      "name": "evtUpdateCLC",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1464,
                      "src": "7216:12:49",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_string_memory_ptr_$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (string memory,address,address)"
                      }
                    },
                    "id": 1800,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7216:42:49",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1801,
                  "nodeType": "EmitStatement",
                  "src": "7211:47:49"
                }
              ]
            },
            "documentation": {
              "id": 1781,
              "nodeType": "StructuredDocumentation",
              "src": "7030:46:49",
              "text": "@notice Update the CLHAPI contract Address"
            },
            "functionSelector": "4bc3959f",
            "id": 1803,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 1786,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 1785,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 5970,
                  "src": "7131:9:49"
                },
                "nodeType": "ModifierInvocation",
                "src": "7131:9:49"
              }
            ],
            "name": "UpdateCLHAPI",
            "nameLocation": "7090:12:49",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1784,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1783,
                  "mutability": "mutable",
                  "name": "_CLHAPI",
                  "nameLocation": "7112:7:49",
                  "nodeType": "VariableDeclaration",
                  "scope": 1803,
                  "src": "7104:15:49",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1782,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7104:7:49",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7102:19:49"
            },
            "returnParameters": {
              "id": 1787,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7141:0:49"
            },
            "scope": 1804,
            "src": "7081:184:49",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 1805,
        "src": "496:6771:49",
        "usedErrors": []
      }
    ],
    "src": "32:7235:49"
  },
  "bytecode": "608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b611c62806100ed6000396000f3fe60806040523480156200001157600080fd5b50600436106200012d5760003560e01c8063a327ab6911620000af578063d742063c116200007a578063d742063c146200027e578063ed0717fe1462000295578063ee7a7d1b14620002ac578063f2fde38b14620002b6578063f6f7a1b314620002cd57600080fd5b8063a327ab691462000235578063a6b6ed3a1462000249578063c0828f631462000253578063c1e45428146200026757600080fd5b806360b323c311620000fc57806360b323c314620001a4578063624d877414620001bb578063715018a614620001e757806386bdfcac14620001f15780638da5cb5b146200022357600080fd5b80631079071714620001325780634bc3959f1462000163578063529382d5146200017c578063594034e31462000190575b600080fd5b60735462000146906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6200017a6200017436600462000c71565b620002e4565b005b60715462000146906001600160a01b031681565b60705462000146906001600160a01b031681565b6200017a620001b536600462000c98565b6200035d565b62000146620001cc36600462000d14565b6080602052600090815260409020546001600160a01b031681565b6200017a620004fe565b620002146200020236600462000c71565b607f6020526000908152604090205481565b6040519081526020016200015a565b6033546001600160a01b031662000146565b60725462000146906001600160a01b031681565b6200014662000516565b607e5462000146906001600160a01b031681565b6200017a6200027836600462000c71565b6200058c565b6200017a6200028f36600462000c71565b62000609565b6200017a620002a636600462000f09565b62000682565b6200021460655481565b6200017a620002c736600462000c71565b62000a28565b6200017a620002de36600462000c71565b62000aa7565b620002ee62000b24565b607380546001600160a01b031981166001600160a01b0384811691821790935560408051606080825260069082015265434c4841504960d01b60808201529390921660208401819052918301529060008051602062001c0d8339815191529060a0015b60405180910390a15050565b600054600190610100900460ff1615801562000380575060005460ff8083169116105b620003e95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805461ffff191660ff831617610100178155607e80546001600160a01b038086166001600160a01b031992831617909255607180548a84169083161790556072805489841690831617905560708054888416908316179055607380549287169282169290921790915560658290558180527fae0c3f803428dd501929f276001a4b5fd1d262991bbb98e97b4b7d918a5af6dc80549091169055607f6020527f18b3a2798575d3a428c1f52e616a74b071539854e037e7d7c535365d474f403355620004b562000b80565b6000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050505050565b6200050862000b24565b62000514600062000bb4565b565b607e5460408051635c60da1b60e01b815290516000926001600160a01b031691635c60da1b9160048083019260209291908290030181865afa15801562000561573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000587919062001006565b905090565b6200059662000b24565b607180546001600160a01b031981166001600160a01b038481169182179093556040805160608082526011908201527010d313155cd95c93585b9859d95b595b9d607a1b60808201529390921660208401819052918301529060008051602062001c0d8339815191529060a00162000351565b6200061362000b24565b607280546001600160a01b031981166001600160a01b03848116918217909355604080516060808252600d908201526c434c4c476f7665726e616e636560981b60808201529390921660208401819052918301529060008051602062001c0d8339815191529060a00162000351565b337f0b93889d934070956c00846f50f9a10a747bd194bba2f2e78a86d0c02386fdb1871480620006d15750867f16591a696fee5867425b3dee9fc0160a6c1baef77835bc3d204314106d639298145b80620006fc5750867fa0786f6450d5fb3298b8425105c1b75e6e01a1ff86cdabea29909cdb0b4c83a7145b6200074a5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420476f7665726e616e636520547970650000000000000000006044820152606401620003e0565b6001600160a01b03831615620008ca578151604114620007ad5760405162461bcd60e51b815260206004820152601f60248201527f437265617465434c483a20426164207369676e6174757265206c656e677468006044820152606401620003e0565b6073546001600160a01b031663e78fc36b8b8b8b8b8b600060200201518c600160200201518d600260200201518d600081518110620007f057620007f062001026565b6020026020010151308c6040518b63ffffffff1660e01b8152600401620008219a999897969594939291906200108c565b602060405180830381865afa1580156200083f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000865919062001006565b6001600160a01b0316836001600160a01b031614620008c75760405162461bcd60e51b815260206004820152601c60248201527f437265617465434c483a20496e76616c6964205369676e6174757265000000006044820152606401620003e0565b50815b607e54604080516080810182523081526073546001600160a01b039081166020830152878116828401526070548116606083015291516000939290921691620009259185918f918f918f918f918f91908f9060240162001188565b60408051601f198184030181529181526020820180516001600160e01b0316637e66495d60e01b179052516200095b9062000c3b565b6200096892919062001228565b604051809103906000f08015801562000985573d6000803e3d6000fd5b506065805491925060006200099a8362001256565b909155505060658054600090815260806020908152604080832080546001600160a01b0319166001600160a01b0387169081179091559354938352607f90915290819020829055517f6510209152e59feb0a7445a97b24bc79bfcb456ca1d8bff1e4980536c4e8cabb9162000a139184918f9162001280565b60405180910390a15050505050505050505050565b62000a3262000b24565b6001600160a01b03811662000a995760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620003e0565b62000aa48162000bb4565b50565b62000ab162000b24565b607080546001600160a01b031981166001600160a01b0384811691821790935560408051606080825260119082015270086989886dedce6e8e4eac6e8dee486989607b1b60808201529390921660208401819052918301529060008051602062001c0d8339815191529060a00162000351565b6033546001600160a01b03163314620005145760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620003e0565b600054610100900460ff1662000baa5760405162461bcd60e51b8152600401620003e090620012b6565b6200051462000c06565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1662000c305760405162461bcd60e51b8152600401620003e090620012b6565b620005143362000bb4565b61090b806200130283390190565b6001600160a01b038116811462000aa457600080fd5b803562000c6c8162000c49565b919050565b60006020828403121562000c8457600080fd5b813562000c918162000c49565b9392505050565b600080600080600060a0868803121562000cb157600080fd5b853562000cbe8162000c49565b9450602086013562000cd08162000c49565b9350604086013562000ce28162000c49565b9250606086013562000cf48162000c49565b9150608086013562000d068162000c49565b809150509295509295909350565b60006020828403121562000d2757600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171562000d705762000d7062000d2e565b604052919050565b600082601f83011262000d8a57600080fd5b813567ffffffffffffffff81111562000da75762000da762000d2e565b62000dbc601f8201601f191660200162000d44565b81815284602083860101111562000dd257600080fd5b816020850160208301376000918101602001919091529392505050565b8035801515811462000c6c57600080fd5b600082601f83011262000e1257600080fd5b6040516060810181811067ffffffffffffffff8211171562000e385762000e3862000d2e565b60405280606084018581111562000e4e57600080fd5b845b8181101562000e6a57803583526020928301920162000e50565b509195945050505050565b600082601f83011262000e8757600080fd5b8135602067ffffffffffffffff82111562000ea65762000ea662000d2e565b8160051b62000eb782820162000d44565b928352848101820192828101908785111562000ed257600080fd5b83870192505b8483101562000efe57823562000eee8162000c49565b8252918301919083019062000ed8565b979650505050505050565b60008060008060008060008060006101608a8c03121562000f2957600080fd5b893567ffffffffffffffff8082111562000f4257600080fd5b62000f508d838e0162000d78565b9a5062000f6060208d0162000def565b995062000f7060408d0162000def565b985060608c0135975062000f888d60808e0162000e00565b965060e08c013591508082111562000f9f57600080fd5b62000fad8d838e0162000e75565b955062000fbe6101008d0162000c5f565b945062000fcf6101208d0162000c5f565b93506101408c013591508082111562000fe757600080fd5b5062000ff68c828d0162000d78565b9150509295985092959850929598565b6000602082840312156200101957600080fd5b815162000c918162000c49565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b81811015620010645760208185018101518683018201520162001046565b8181111562001077576000602083870101525b50601f01601f19169290920160200192915050565b6000610140808352620010a28184018e6200103c565b8c151560208501528b15156040850152606084018b9052608084018a905260a0840189905260c084018890526001600160a01b0387811660e086015286166101008501528381036101208501529050620010fd81856200103c565b9d9c50505050505050505050505050565b8060005b60048110156200113c5781516001600160a01b031684526020938401939091019060010162001112565b50505050565b600081518084526020808501945080840160005b838110156200117d5781516001600160a01b03168752958201959082019060010162001156565b509495945050505050565b6001600160a01b03891681526101a0602080830182905260009190620011b18483018c6200103c565b91508915156040850152881515606085015287608085015260a084018760005b6003811015620011f057815183529183019190830190600101620011d1565b50505050620012046101008401866200110e565b82810361018084015262001219818562001142565b9b9a5050505050505050505050565b6001600160a01b03831681526040602082018190526000906200124e908301846200103c565b949350505050565b60006000198214156200127957634e487b7160e01b600052601160045260246000fd5b5060010190565b6001600160a01b0384168152606060208201819052600090620012a6908301856200103c565b9050826040830152949350505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fe608060405234801561001057600080fd5b5060405161090b38038061090b83398101604081905261002f91610467565b818161003d82826000610046565b50505050610591565b61004f83610111565b6040516001600160a01b038416907f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e90600090a26000825111806100905750805b1561010c5761010a836001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fa9190610527565b836102b460201b6100291760201c565b505b505050565b610124816102e060201b6100551760201c565b6101835760405162461bcd60e51b815260206004820152602560248201527f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b6101f7816001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e89190610527565b6102e060201b6100551760201c565b61025c5760405162461bcd60e51b815260206004820152603060248201527f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960448201526f1cc81b9bdd08184818dbdb9d1c9858dd60821b606482015260840161017a565b806102937fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5060001b6102ef60201b6100641760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b60606102d983836040518060600160405280602781526020016108e4602791396102f2565b9392505050565b6001600160a01b03163b151590565b90565b60606001600160a01b0384163b61035a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161017a565b600080856001600160a01b0316856040516103759190610542565b600060405180830381855af49150503d80600081146103b0576040519150601f19603f3d011682016040523d82523d6000602084013e6103b5565b606091505b5090925090506103c68282866103d0565b9695505050505050565b606083156103df5750816102d9565b8251156103ef5782518084602001fd5b8160405162461bcd60e51b815260040161017a919061055e565b80516001600160a01b038116811461042057600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561045657818101518382015260200161043e565b8381111561010a5750506000910152565b6000806040838503121561047a57600080fd5b61048383610409565b60208401519092506001600160401b03808211156104a057600080fd5b818501915085601f8301126104b457600080fd5b8151818111156104c6576104c6610425565b604051601f8201601f19908116603f011681019083821181831017156104ee576104ee610425565b8160405282815288602084870101111561050757600080fd5b61051883602083016020880161043b565b80955050505050509250929050565b60006020828403121561053957600080fd5b6102d982610409565b6000825161055481846020870161043b565b9190910192915050565b602081526000825180602084015261057d81604085016020870161043b565b601f01601f19169190910160400192915050565b610344806105a06000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610067565b610100565b565b606061004e83836040518060600160405280602781526020016102e860279139610124565b9392505050565b6001600160a01b03163b151590565b90565b600061009a7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50546001600160a01b031690565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fb919061023f565b905090565b3660008037600080366000845af43d6000803e80801561011f573d6000f35b3d6000fd5b60606001600160a01b0384163b6101915760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b0316856040516101ac9190610298565b600060405180830381855af49150503d80600081146101e7576040519150601f19603f3d011682016040523d82523d6000602084013e6101ec565b606091505b50915091506101fc828286610206565b9695505050505050565b6060831561021557508161004e565b8251156102255782518084602001fd5b8160405162461bcd60e51b815260040161018891906102b4565b60006020828403121561025157600080fd5b81516001600160a01b038116811461004e57600080fd5b60005b8381101561028357818101518382015260200161026b565b83811115610292576000848401525b50505050565b600082516102aa818460208701610268565b9190910192915050565b60208152600082518060208401526102d3816040850160208701610268565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220d04c336bf1d5ee0f5699fa74b9ed40e936469e51d6973a72d8aab6b3c84de87264736f6c634300080c0033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65648068a223bc38529864701ed6f372296d3ecb2aa9affe6c91cf94e2ae6dd577c8a2646970667358221220f8441f72719d89ed511197399e63cd9e5608980fe1d3fd825846d80550412c8464736f6c634300080c0033",
  "bytecodeSha1": "ddd036984d57d1a23a3ca7b923f875b45cad0a2b",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.12+commit.f00d7308"
  },
  "contractName": "CLFactory",
  "coverageMap": {
    "branches": {
      "0": {
        "OwnableUpgradeable._checkOwner": {
          "45": [
            1662,
            1685,
            true
          ]
        },
        "OwnableUpgradeable.transferOwnership": {
          "44": [
            2409,
            2431,
            true
          ]
        }
      },
      "1": {
        "CLFactory.Init": {
          "42": [
            4418,
            4431,
            false
          ]
        },
        "OwnableUpgradeable.__Ownable_init_unchained": {
          "43": [
            4910,
            4923,
            true
          ]
        }
      },
      "3": {},
      "46": {},
      "48": {},
      "49": {
        "CLFactory.CreateCLH": {
          "36": [
            4301,
            4334,
            true
          ],
          "37": [
            4350,
            4380,
            true
          ],
          "38": [
            4396,
            4432,
            true
          ],
          "39": [
            4497,
            4524,
            false
          ],
          "40": [
            4550,
            4573,
            true
          ],
          "41": [
            4662,
            5071,
            true
          ]
        }
      },
      "54": {},
      "56": {},
      "60": {},
      "61": {}
    },
    "statements": {
      "0": {
        "OwnableUpgradeable.__Ownable_init": {
          "32": [
            1065,
            1091
          ]
        },
        "OwnableUpgradeable.__Ownable_init_unchained": {
          "35": [
            1176,
            1208
          ]
        },
        "OwnableUpgradeable._checkOwner": {
          "31": [
            1654,
            1722
          ]
        },
        "OwnableUpgradeable._transferOwnership": {
          "33": [
            2781,
            2798
          ],
          "34": [
            2808,
            2853
          ]
        },
        "OwnableUpgradeable.owner": {
          "0": [
            1506,
            1519
          ]
        },
        "OwnableUpgradeable.renounceOwnership": {
          "12": [
            2135,
            2165
          ]
        },
        "OwnableUpgradeable.transferOwnership": {
          "26": [
            2401,
            2474
          ],
          "27": [
            2484,
            2512
          ]
        }
      },
      "1": {},
      "3": {
        "ContextUpgradeable._msgSender": {
          "30": [
            922,
            939
          ]
        }
      },
      "46": {},
      "48": {},
      "49": {
        "CLFactory.CreateCLH": {
          "18": [
            4279,
            4482
          ],
          "19": [
            4541,
            4610
          ],
          "20": [
            4637,
            5133
          ],
          "21": [
            5148,
            5174
          ],
          "22": [
            5703,
            5711
          ],
          "23": [
            5721,
            5769
          ],
          "24": [
            5779,
            5817
          ],
          "25": [
            5828,
            5883
          ]
        },
        "CLFactory.Init": {
          "3": [
            2833,
            2864
          ],
          "4": [
            2875,
            2913
          ],
          "5": [
            2923,
            2953
          ],
          "6": [
            2963,
            3001
          ],
          "7": [
            3011,
            3027
          ],
          "8": [
            3038,
            3048
          ],
          "9": [
            3058,
            3099
          ],
          "10": [
            3109,
            3140
          ],
          "11": [
            3151,
            3167
          ]
        },
        "CLFactory.UpdateCLHAPI": {
          "1": [
            7185,
            7201
          ],
          "2": [
            7211,
            7258
          ]
        },
        "CLFactory.UpdateCLLConstructorCLH": {
          "28": [
            6274,
            6312
          ],
          "29": [
            6322,
            6391
          ]
        },
        "CLFactory.UpdateCLLGovernance": {
          "16": [
            6916,
            6946
          ],
          "17": [
            6956,
            7017
          ]
        },
        "CLFactory.UpdateCLLUserManagement": {
          "14": [
            6603,
            6641
          ],
          "15": [
            6651,
            6720
          ]
        },
        "CLFactory.getCLHImplementation": {
          "13": [
            6029,
            6062
          ]
        }
      },
      "54": {},
      "56": {},
      "60": {},
      "61": {}
    }
  },
  "dependencies": [
    "CLBeacon",
    "CLHouseApi",
    "CLProxyCLH",
    "OpenZeppelin/openzeppelin-contracts-upgradeable@4.7.3/ContextUpgradeable",
    "ICLFactory",
    "ICLHouse",
    "OpenZeppelin/openzeppelin-contracts-upgradeable@4.7.3/Initializable",
    "OpenZeppelin/openzeppelin-contracts-upgradeable@4.7.3/OwnableUpgradeable"
  ],
  "deployedBytecode": "60806040523480156200001157600080fd5b50600436106200012d5760003560e01c8063a327ab6911620000af578063d742063c116200007a578063d742063c146200027e578063ed0717fe1462000295578063ee7a7d1b14620002ac578063f2fde38b14620002b6578063f6f7a1b314620002cd57600080fd5b8063a327ab691462000235578063a6b6ed3a1462000249578063c0828f631462000253578063c1e45428146200026757600080fd5b806360b323c311620000fc57806360b323c314620001a4578063624d877414620001bb578063715018a614620001e757806386bdfcac14620001f15780638da5cb5b146200022357600080fd5b80631079071714620001325780634bc3959f1462000163578063529382d5146200017c578063594034e31462000190575b600080fd5b60735462000146906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6200017a6200017436600462000c71565b620002e4565b005b60715462000146906001600160a01b031681565b60705462000146906001600160a01b031681565b6200017a620001b536600462000c98565b6200035d565b62000146620001cc36600462000d14565b6080602052600090815260409020546001600160a01b031681565b6200017a620004fe565b620002146200020236600462000c71565b607f6020526000908152604090205481565b6040519081526020016200015a565b6033546001600160a01b031662000146565b60725462000146906001600160a01b031681565b6200014662000516565b607e5462000146906001600160a01b031681565b6200017a6200027836600462000c71565b6200058c565b6200017a6200028f36600462000c71565b62000609565b6200017a620002a636600462000f09565b62000682565b6200021460655481565b6200017a620002c736600462000c71565b62000a28565b6200017a620002de36600462000c71565b62000aa7565b620002ee62000b24565b607380546001600160a01b031981166001600160a01b0384811691821790935560408051606080825260069082015265434c4841504960d01b60808201529390921660208401819052918301529060008051602062001c0d8339815191529060a0015b60405180910390a15050565b600054600190610100900460ff1615801562000380575060005460ff8083169116105b620003e95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805461ffff191660ff831617610100178155607e80546001600160a01b038086166001600160a01b031992831617909255607180548a84169083161790556072805489841690831617905560708054888416908316179055607380549287169282169290921790915560658290558180527fae0c3f803428dd501929f276001a4b5fd1d262991bbb98e97b4b7d918a5af6dc80549091169055607f6020527f18b3a2798575d3a428c1f52e616a74b071539854e037e7d7c535365d474f403355620004b562000b80565b6000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050505050565b6200050862000b24565b62000514600062000bb4565b565b607e5460408051635c60da1b60e01b815290516000926001600160a01b031691635c60da1b9160048083019260209291908290030181865afa15801562000561573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000587919062001006565b905090565b6200059662000b24565b607180546001600160a01b031981166001600160a01b038481169182179093556040805160608082526011908201527010d313155cd95c93585b9859d95b595b9d607a1b60808201529390921660208401819052918301529060008051602062001c0d8339815191529060a00162000351565b6200061362000b24565b607280546001600160a01b031981166001600160a01b03848116918217909355604080516060808252600d908201526c434c4c476f7665726e616e636560981b60808201529390921660208401819052918301529060008051602062001c0d8339815191529060a00162000351565b337f0b93889d934070956c00846f50f9a10a747bd194bba2f2e78a86d0c02386fdb1871480620006d15750867f16591a696fee5867425b3dee9fc0160a6c1baef77835bc3d204314106d639298145b80620006fc5750867fa0786f6450d5fb3298b8425105c1b75e6e01a1ff86cdabea29909cdb0b4c83a7145b6200074a5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420476f7665726e616e636520547970650000000000000000006044820152606401620003e0565b6001600160a01b03831615620008ca578151604114620007ad5760405162461bcd60e51b815260206004820152601f60248201527f437265617465434c483a20426164207369676e6174757265206c656e677468006044820152606401620003e0565b6073546001600160a01b031663e78fc36b8b8b8b8b8b600060200201518c600160200201518d600260200201518d600081518110620007f057620007f062001026565b6020026020010151308c6040518b63ffffffff1660e01b8152600401620008219a999897969594939291906200108c565b602060405180830381865afa1580156200083f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000865919062001006565b6001600160a01b0316836001600160a01b031614620008c75760405162461bcd60e51b815260206004820152601c60248201527f437265617465434c483a20496e76616c6964205369676e6174757265000000006044820152606401620003e0565b50815b607e54604080516080810182523081526073546001600160a01b039081166020830152878116828401526070548116606083015291516000939290921691620009259185918f918f918f918f918f91908f9060240162001188565b60408051601f198184030181529181526020820180516001600160e01b0316637e66495d60e01b179052516200095b9062000c3b565b6200096892919062001228565b604051809103906000f08015801562000985573d6000803e3d6000fd5b506065805491925060006200099a8362001256565b909155505060658054600090815260806020908152604080832080546001600160a01b0319166001600160a01b0387169081179091559354938352607f90915290819020829055517f6510209152e59feb0a7445a97b24bc79bfcb456ca1d8bff1e4980536c4e8cabb9162000a139184918f9162001280565b60405180910390a15050505050505050505050565b62000a3262000b24565b6001600160a01b03811662000a995760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620003e0565b62000aa48162000bb4565b50565b62000ab162000b24565b607080546001600160a01b031981166001600160a01b0384811691821790935560408051606080825260119082015270086989886dedce6e8e4eac6e8dee486989607b1b60808201529390921660208401819052918301529060008051602062001c0d8339815191529060a00162000351565b6033546001600160a01b03163314620005145760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620003e0565b600054610100900460ff1662000baa5760405162461bcd60e51b8152600401620003e090620012b6565b6200051462000c06565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1662000c305760405162461bcd60e51b8152600401620003e090620012b6565b620005143362000bb4565b61090b806200130283390190565b6001600160a01b038116811462000aa457600080fd5b803562000c6c8162000c49565b919050565b60006020828403121562000c8457600080fd5b813562000c918162000c49565b9392505050565b600080600080600060a0868803121562000cb157600080fd5b853562000cbe8162000c49565b9450602086013562000cd08162000c49565b9350604086013562000ce28162000c49565b9250606086013562000cf48162000c49565b9150608086013562000d068162000c49565b809150509295509295909350565b60006020828403121562000d2757600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171562000d705762000d7062000d2e565b604052919050565b600082601f83011262000d8a57600080fd5b813567ffffffffffffffff81111562000da75762000da762000d2e565b62000dbc601f8201601f191660200162000d44565b81815284602083860101111562000dd257600080fd5b816020850160208301376000918101602001919091529392505050565b8035801515811462000c6c57600080fd5b600082601f83011262000e1257600080fd5b6040516060810181811067ffffffffffffffff8211171562000e385762000e3862000d2e565b60405280606084018581111562000e4e57600080fd5b845b8181101562000e6a57803583526020928301920162000e50565b509195945050505050565b600082601f83011262000e8757600080fd5b8135602067ffffffffffffffff82111562000ea65762000ea662000d2e565b8160051b62000eb782820162000d44565b928352848101820192828101908785111562000ed257600080fd5b83870192505b8483101562000efe57823562000eee8162000c49565b8252918301919083019062000ed8565b979650505050505050565b60008060008060008060008060006101608a8c03121562000f2957600080fd5b893567ffffffffffffffff8082111562000f4257600080fd5b62000f508d838e0162000d78565b9a5062000f6060208d0162000def565b995062000f7060408d0162000def565b985060608c0135975062000f888d60808e0162000e00565b965060e08c013591508082111562000f9f57600080fd5b62000fad8d838e0162000e75565b955062000fbe6101008d0162000c5f565b945062000fcf6101208d0162000c5f565b93506101408c013591508082111562000fe757600080fd5b5062000ff68c828d0162000d78565b9150509295985092959850929598565b6000602082840312156200101957600080fd5b815162000c918162000c49565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b81811015620010645760208185018101518683018201520162001046565b8181111562001077576000602083870101525b50601f01601f19169290920160200192915050565b6000610140808352620010a28184018e6200103c565b8c151560208501528b15156040850152606084018b9052608084018a905260a0840189905260c084018890526001600160a01b0387811660e086015286166101008501528381036101208501529050620010fd81856200103c565b9d9c50505050505050505050505050565b8060005b60048110156200113c5781516001600160a01b031684526020938401939091019060010162001112565b50505050565b600081518084526020808501945080840160005b838110156200117d5781516001600160a01b03168752958201959082019060010162001156565b509495945050505050565b6001600160a01b03891681526101a0602080830182905260009190620011b18483018c6200103c565b91508915156040850152881515606085015287608085015260a084018760005b6003811015620011f057815183529183019190830190600101620011d1565b50505050620012046101008401866200110e565b82810361018084015262001219818562001142565b9b9a5050505050505050505050565b6001600160a01b03831681526040602082018190526000906200124e908301846200103c565b949350505050565b60006000198214156200127957634e487b7160e01b600052601160045260246000fd5b5060010190565b6001600160a01b0384168152606060208201819052600090620012a6908301856200103c565b9050826040830152949350505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fe608060405234801561001057600080fd5b5060405161090b38038061090b83398101604081905261002f91610467565b818161003d82826000610046565b50505050610591565b61004f83610111565b6040516001600160a01b038416907f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e90600090a26000825111806100905750805b1561010c5761010a836001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fa9190610527565b836102b460201b6100291760201c565b505b505050565b610124816102e060201b6100551760201c565b6101835760405162461bcd60e51b815260206004820152602560248201527f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b6101f7816001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e89190610527565b6102e060201b6100551760201c565b61025c5760405162461bcd60e51b815260206004820152603060248201527f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960448201526f1cc81b9bdd08184818dbdb9d1c9858dd60821b606482015260840161017a565b806102937fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5060001b6102ef60201b6100641760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b60606102d983836040518060600160405280602781526020016108e4602791396102f2565b9392505050565b6001600160a01b03163b151590565b90565b60606001600160a01b0384163b61035a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161017a565b600080856001600160a01b0316856040516103759190610542565b600060405180830381855af49150503d80600081146103b0576040519150601f19603f3d011682016040523d82523d6000602084013e6103b5565b606091505b5090925090506103c68282866103d0565b9695505050505050565b606083156103df5750816102d9565b8251156103ef5782518084602001fd5b8160405162461bcd60e51b815260040161017a919061055e565b80516001600160a01b038116811461042057600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561045657818101518382015260200161043e565b8381111561010a5750506000910152565b6000806040838503121561047a57600080fd5b61048383610409565b60208401519092506001600160401b03808211156104a057600080fd5b818501915085601f8301126104b457600080fd5b8151818111156104c6576104c6610425565b604051601f8201601f19908116603f011681019083821181831017156104ee576104ee610425565b8160405282815288602084870101111561050757600080fd5b61051883602083016020880161043b565b80955050505050509250929050565b60006020828403121561053957600080fd5b6102d982610409565b6000825161055481846020870161043b565b9190910192915050565b602081526000825180602084015261057d81604085016020870161043b565b601f01601f19169190910160400192915050565b610344806105a06000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610067565b610100565b565b606061004e83836040518060600160405280602781526020016102e860279139610124565b9392505050565b6001600160a01b03163b151590565b90565b600061009a7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50546001600160a01b031690565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fb919061023f565b905090565b3660008037600080366000845af43d6000803e80801561011f573d6000f35b3d6000fd5b60606001600160a01b0384163b6101915760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b0316856040516101ac9190610298565b600060405180830381855af49150503d80600081146101e7576040519150601f19603f3d011682016040523d82523d6000602084013e6101ec565b606091505b50915091506101fc828286610206565b9695505050505050565b6060831561021557508161004e565b8251156102255782518084602001fd5b8160405162461bcd60e51b815260040161018891906102b4565b60006020828403121561025157600080fd5b81516001600160a01b038116811461004e57600080fd5b60005b8381101561028357818101518382015260200161026b565b83811115610292576000848401525b50505050565b600082516102aa818460208701610268565b9190910192915050565b60208152600082518060208401526102d3816040850160208701610268565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220d04c336bf1d5ee0f5699fa74b9ed40e936469e51d6973a72d8aab6b3c84de87264736f6c634300080c0033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65648068a223bc38529864701ed6f372296d3ecb2aa9affe6c91cf94e2ae6dd577c8a2646970667358221220f8441f72719d89ed511197399e63cd9e5608980fe1d3fd825846d80550412c8464736f6c634300080c0033",
  "deployedSourceMap": "496:6771:49:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1009:21;;;;;-1:-1:-1;;;;;1009:21:49;;;;;;-1:-1:-1;;;;;178:32:62;;;160:51;;148:2;133:18;1009:21:49;;;;;;;;7081:184;;;;;;:::i;:::-;;:::i;:::-;;839:32;;;;;-1:-1:-1;;;;;839:32:49;;;736;;;;;-1:-1:-1;;;;;736:32:49;;;2577:597;;;;;;:::i;:::-;;:::i;1383:42::-;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;1383:42:49;;;2071:101:0;;;:::i;1271:45:49:-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;2123:25:62;;;2111:2;2096:18;1271:45:49;1977:177:62;1441:85:0;1513:6;;-1:-1:-1;;;;;1513:6:0;1441:85;;937:28:49;;;;;-1:-1:-1;;;;;937:28:49;;;5955:114;;;:::i;1187:25::-;;;;;-1:-1:-1;;;;;1187:25:49;;;6466:261;;;;;;:::i;:::-;;:::i;6791:233::-;;;;;;:::i;:::-;;:::i;3896:1994::-;;;;;;:::i;:::-;;:::i;621:21::-;;;;;;2321:198:0;;;;;;:::i;:::-;;:::i;6137:261:49:-;;;;;;:::i;:::-;;:::i;7081:184::-;1334:13:0;:11;:13::i;:::-;7169:6:49::1;::::0;;-1:-1:-1;;;;;;7185:16:49;::::1;-1:-1:-1::0;;;;;7185:16:49;;::::1;::::0;;::::1;::::0;;;7216:42:::1;::::0;;6441:2:62;6423:21;;;6480:1;6460:18;;;6453:29;-1:-1:-1;;;6513:3:62;6498:19;;6491:37;7169:6:49;;;::::1;6633:4:62::0;6618:20;;6611:45;;;6672:18;;;6665:43;7169:6:49;-1:-1:-1;;;;;;;;;;;7216:42:49;6560:3:62;6545:19;7216:42:49::1;;;;;;;;7141:124;7081:184:::0;:::o;2577:597::-;4418:13:1;;295:1:48;;4418:13:1;;;;;4417:14;:40;;;;-1:-1:-1;4435:12:1;;:22;;;;:12;;:22;4417:40;4409:99;;;;-1:-1:-1;;;4409:99:1;;6921:2:62;4409:99:1;;;6903:21:62;6960:2;6940:18;;;6933:30;6999:34;6979:18;;;6972:62;-1:-1:-1;;;7050:18:62;;;7043:44;7104:19;;4409:99:1;;;;;;;;;4518:12;:22;;-1:-1:-1;;4550:20:1;4518:22;;;4550:20;4518:22;4550:20;;;2833:9:49::1;:31:::0;;-1:-1:-1;;;;;2833:31:49;;::::1;-1:-1:-1::0;;;;;;2833:31:49;;::::1;;::::0;;;2875:17:::1;:38:::0;;;;::::1;::::0;;::::1;;::::0;;2923:13:::1;:30:::0;;;;::::1;::::0;;::::1;;::::0;;2963:17:::1;:38:::0;;;;::::1;::::0;;::::1;;::::0;;3011:6:::1;:16:::0;;;;::::1;::::0;;::::1;::::0;;;::::1;::::0;;;3038:6:::1;:10:::0;;;3058:16;;;;:41;;;;::::1;::::0;;3109:8:::1;3058:16;3109:22:::0;;:31;3151:16:::1;:14;:16::i;:::-;4607:5:1::0;4591:21;;-1:-1:-1;;4591:21:1;;;4627:20;;7306:4:62;7294:17;;7276:36;;4627:20:1;;7264:2:62;7249:18;4627:20:1;;;;;;;2577:597:49;;;;;;:::o;2071:101:0:-;1334:13;:11;:13::i;:::-;2135:30:::1;2162:1;2135:18;:30::i;:::-;2071:101::o:0;5955:114:49:-;6036:9;;:26;;;-1:-1:-1;;;6036:26:49;;;;6010:7;;-1:-1:-1;;;;;6036:9:49;;:24;;:26;;;;;;;;;;;;;;:9;:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6029:33;;5955:114;:::o;6466:261::-;1334:13:0;:11;:13::i;:::-;6576:17:49::1;::::0;;-1:-1:-1;;;;;;6603:38:49;::::1;-1:-1:-1::0;;;;;6603:38:49;;::::1;::::0;;::::1;::::0;;;6656:64:::1;::::0;;7837:2:62;7819:21;;;7876:2;7856:18;;;7849:30;-1:-1:-1;;;7910:3:62;7895:19;;7888:48;6576:17:49;;;::::1;8041:4:62::0;8026:20;;8019:45;;;8080:18;;;8073:43;6576:17:49;-1:-1:-1;;;;;;;;;;;6656:64:49;7968:3:62;7953:19;6656:64:49::1;7579:543:62::0;6791:233:49;1334:13:0;:11;:13::i;:::-;6893::49::1;::::0;;-1:-1:-1;;;;;;6916:30:49;::::1;-1:-1:-1::0;;;;;6916:30:49;;::::1;::::0;;::::1;::::0;;;6961:56:::1;::::0;;8385:2:62;8367:21;;;8424:2;8404:18;;;8397:30;-1:-1:-1;;;8458:3:62;8443:19;;8436:44;6893:13:49;;;::::1;8585:4:62::0;8570:20;;8563:45;;;8624:18;;;8617:43;6893:13:49;-1:-1:-1;;;;;;;;;;;6961:56:49;8512:3:62;8497:19;6961:56:49::1;8127:539:62::0;3896:1994:49;4258:10;339:33:48;4301::49;;;:79;;;4371:9;411:30:48;4350::49;4301:79;:131;;;;4423:9;486:36:48;4396::49;4301:131;4279:203;;;;-1:-1:-1;;;4279:203:49;;8873:2:62;4279:203:49;;;8855:21:62;8912:2;8892:18;;;8885:30;8951:25;8931:18;;;8924:53;8994:18;;4279:203:49;8671:347:62;4279:203:49;-1:-1:-1;;;;;4497:27:49;;;4493:692;;4550:10;:17;4571:2;4550:23;4541:69;;;;-1:-1:-1;;;4541:69:49;;9225:2:62;4541:69:49;;;9207:21:62;9264:2;9244:18;;;9237:30;9303:33;9283:18;;;9276:61;9354:18;;4541:69:49;9023:355:62;4541:69:49;4691:6;;-1:-1:-1;;;;;4691:6:49;4679:35;4736:10;4768:13;4803:10;4835:9;4866;4691:6;4866:12;;;;4900:9;4910:1;4900:12;;;;4934:9;4944:1;4934:12;;;;4968:15;4984:1;4968:18;;;;;;;;:::i;:::-;;;;;;;5016:4;5043:10;4679:392;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4662:409:49;:13;-1:-1:-1;;;;;4662:409:49;;4637:496;;;;-1:-1:-1;;;4637:496:49;;11252:2:62;4637:496:49;;;11234:21:62;11291:2;11271:18;;;11264:30;11330;11310:18;;;11303:58;11378:18;;4637:496:49;11050:352:62;4637:496:49;-1:-1:-1;5161:13:49;4493:692;5252:9;;5277:405;;;;;;;;5588:4;5277:405;;5595:6;;-1:-1:-1;;;;;5595:6:49;;;5277:405;;;;;;;;;;;5616:17;;;;5277:405;;;;;;5195:17;;5252:9;;;;;5277:405;;5408:10;;5437;;5465:13;;5496:10;;5524:9;;5551;;5277:405;5653:15;;5277:405;;;:::i;:::-;;;;-1:-1:-1;;5277:405:49;;;;;;;;;;;;;;-1:-1:-1;;;;;5277:405:49;-1:-1:-1;;;5277:405:49;;;5215:477;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5703:6:49;:8;;5195:497;;-1:-1:-1;5703:6:49;:8;;;:::i;:::-;;;;-1:-1:-1;;5729:6:49;;;5721:16;;;;:6;:16;;;;;;;;:48;;-1:-1:-1;;;;;;5721:48:49;-1:-1:-1;;;;;5721:48:49;;;;;;;;5811:6;;5779:29;;;:8;:29;;;;;;;:38;;;5833:50;;;;;5721:48;;5863:10;;5833:50;:::i;:::-;;;;;;;;4227:1663;;3896:1994;;;;;;;;;:::o;2321:198:0:-;1334:13;:11;:13::i;:::-;-1:-1:-1;;;;;2409:22:0;::::1;2401:73;;;::::0;-1:-1:-1;;;2401:73:0;;14678:2:62;2401:73:0::1;::::0;::::1;14660:21:62::0;14717:2;14697:18;;;14690:30;14756:34;14736:18;;;14729:62;-1:-1:-1;;;14807:18:62;;;14800:36;14853:19;;2401:73:0::1;14476:402:62::0;2401:73:0::1;2484:28;2503:8;2484:18;:28::i;:::-;2321:198:::0;:::o;6137:261:49:-;1334:13:0;:11;:13::i;:::-;6247:17:49::1;::::0;;-1:-1:-1;;;;;;6274:38:49;::::1;-1:-1:-1::0;;;;;6274:38:49;;::::1;::::0;;::::1;::::0;;;6327:64:::1;::::0;;15141:2:62;15123:21;;;15180:2;15160:18;;;15153:30;-1:-1:-1;;;15214:3:62;15199:19;;15192:48;6247:17:49;;;::::1;15345:4:62::0;15330:20;;15323:45;;;15384:18;;;15377:43;6247:17:49;-1:-1:-1;;;;;;;;;;;6327:64:49;15272:3:62;15257:19;6327:64:49::1;14883:543:62::0;1599:130:0;1513:6;;-1:-1:-1;;;;;1513:6:0;929:10:3;1662:23:0;1654:68;;;;-1:-1:-1;;;1654:68:0;;15633:2:62;1654:68:0;;;15615:21:62;;;15652:18;;;15645:30;15711:34;15691:18;;;15684:62;15763:18;;1654:68:0;15431:356:62;1003:95:0;4910:13:1;;;;;;;4902:69;;;;-1:-1:-1;;;4902:69:1;;;;;;;:::i;:::-;1065:26:0::1;:24;:26::i;2673:187::-:0;2765:6;;;-1:-1:-1;;;;;2781:17:0;;;-1:-1:-1;;;;;;2781:17:0;;;;;;;2813:40;;2765:6;;;2781:17;2765:6;;2813:40;;2746:16;;2813:40;2736:124;2673:187;:::o;1104:111::-;4910:13:1;;;;;;;4902:69;;;;-1:-1:-1;;;4902:69:1;;;;;;;:::i;:::-;1176:32:0::1;929:10:3::0;1176:18:0::1;:32::i;-1:-1:-1:-:0;;;;;;;;:::o;222:131:62:-;-1:-1:-1;;;;;297:31:62;;287:42;;277:70;;343:1;340;333:12;358:134;426:20;;455:31;426:20;455:31;:::i;:::-;358:134;;;:::o;497:247::-;556:6;609:2;597:9;588:7;584:23;580:32;577:52;;;625:1;622;615:12;577:52;664:9;651:23;683:31;708:5;683:31;:::i;:::-;733:5;497:247;-1:-1:-1;;;497:247:62:o;749:813::-;844:6;852;860;868;876;929:3;917:9;908:7;904:23;900:33;897:53;;;946:1;943;936:12;897:53;985:9;972:23;1004:31;1029:5;1004:31;:::i;:::-;1054:5;-1:-1:-1;1111:2:62;1096:18;;1083:32;1124:33;1083:32;1124:33;:::i;:::-;1176:7;-1:-1:-1;1235:2:62;1220:18;;1207:32;1248:33;1207:32;1248:33;:::i;:::-;1300:7;-1:-1:-1;1359:2:62;1344:18;;1331:32;1372:33;1331:32;1372:33;:::i;:::-;1424:7;-1:-1:-1;1483:3:62;1468:19;;1455:33;1497;1455;1497;:::i;:::-;1549:7;1539:17;;;749:813;;;;;;;;:::o;1567:180::-;1626:6;1679:2;1667:9;1658:7;1654:23;1650:32;1647:52;;;1695:1;1692;1685:12;1647:52;-1:-1:-1;1718:23:62;;1567:180;-1:-1:-1;1567:180:62:o;2384:127::-;2445:10;2440:3;2436:20;2433:1;2426:31;2476:4;2473:1;2466:15;2500:4;2497:1;2490:15;2516:275;2587:2;2581:9;2652:2;2633:13;;-1:-1:-1;;2629:27:62;2617:40;;2687:18;2672:34;;2708:22;;;2669:62;2666:88;;;2734:18;;:::i;:::-;2770:2;2763:22;2516:275;;-1:-1:-1;2516:275:62:o;2796:531::-;2839:5;2892:3;2885:4;2877:6;2873:17;2869:27;2859:55;;2910:1;2907;2900:12;2859:55;2946:6;2933:20;2972:18;2968:2;2965:26;2962:52;;;2994:18;;:::i;:::-;3038:55;3081:2;3062:13;;-1:-1:-1;;3058:27:62;3087:4;3054:38;3038:55;:::i;:::-;3118:2;3109:7;3102:19;3164:3;3157:4;3152:2;3144:6;3140:15;3136:26;3133:35;3130:55;;;3181:1;3178;3171:12;3130:55;3246:2;3239:4;3231:6;3227:17;3220:4;3211:7;3207:18;3194:55;3294:1;3269:16;;;3287:4;3265:27;3258:38;;;;3273:7;2796:531;-1:-1:-1;;;2796:531:62:o;3332:160::-;3397:20;;3453:13;;3446:21;3436:32;;3426:60;;3482:1;3479;3472:12;3497:646;3547:5;3600:3;3593:4;3585:6;3581:17;3577:27;3567:55;;3618:1;3615;3608:12;3567:55;3651:2;3645:9;3693:2;3685:6;3681:15;3762:6;3750:10;3747:22;3726:18;3714:10;3711:34;3708:62;3705:88;;;3773:18;;:::i;:::-;3809:2;3802:22;3844:6;3885:2;3873:15;;3900;;;3897:35;;;3928:1;3925;3918:12;3897:35;3952:6;3967:146;3983:6;3978:3;3975:15;3967:146;;;4051:17;;4039:30;;4098:4;4089:14;;;;4000;3967:146;;;-1:-1:-1;4131:6:62;;3497:646;-1:-1:-1;;;;;3497:646:62:o;4148:787::-;4202:5;4255:3;4248:4;4240:6;4236:17;4232:27;4222:55;;4273:1;4270;4263:12;4222:55;4309:6;4296:20;4335:4;4358:18;4354:2;4351:26;4348:52;;;4380:18;;:::i;:::-;4426:2;4423:1;4419:10;4449:28;4473:2;4469;4465:11;4449:28;:::i;:::-;4511:15;;;4581;;;4577:24;;;4542:12;;;;4613:15;;;4610:35;;;4641:1;4638;4631:12;4610:35;4677:2;4669:6;4665:15;4654:26;;4689:217;4705:6;4700:3;4697:15;4689:217;;;4785:3;4772:17;4802:31;4827:5;4802:31;:::i;:::-;4846:18;;4722:12;;;;4884;;;;4689:217;;;4924:5;4148:787;-1:-1:-1;;;;;;;4148:787:62:o;4940:1238::-;5132:6;5140;5148;5156;5164;5172;5180;5188;5196;5249:3;5237:9;5228:7;5224:23;5220:33;5217:53;;;5266:1;5263;5256:12;5217:53;5306:9;5293:23;5335:18;5376:2;5368:6;5365:14;5362:34;;;5392:1;5389;5382:12;5362:34;5415:50;5457:7;5448:6;5437:9;5433:22;5415:50;:::i;:::-;5405:60;;5484:35;5515:2;5504:9;5500:18;5484:35;:::i;:::-;5474:45;;5538:35;5569:2;5558:9;5554:18;5538:35;:::i;:::-;5528:45;;5620:2;5609:9;5605:18;5592:32;5582:42;;5643:54;5689:7;5683:3;5672:9;5668:19;5643:54;:::i;:::-;5633:64;;5750:3;5739:9;5735:19;5722:33;5706:49;;5780:2;5770:8;5767:16;5764:36;;;5796:1;5793;5786:12;5764:36;5819:63;5874:7;5863:8;5852:9;5848:24;5819:63;:::i;:::-;5809:73;;5901:39;5935:3;5924:9;5920:19;5901:39;:::i;:::-;5891:49;;5959:39;5993:3;5982:9;5978:19;5959:39;:::i;:::-;5949:49;;6051:3;6040:9;6036:19;6023:33;6007:49;;6081:2;6071:8;6068:16;6065:36;;;6097:1;6094;6087:12;6065:36;;6120:52;6164:7;6153:8;6142:9;6138:24;6120:52;:::i;:::-;6110:62;;;4940:1238;;;;;;;;;;;:::o;7323:251::-;7393:6;7446:2;7434:9;7425:7;7421:23;7417:32;7414:52;;;7462:1;7459;7452:12;7414:52;7494:9;7488:16;7513:31;7538:5;7513:31;:::i;9383:127::-;9444:10;9439:3;9435:20;9432:1;9425:31;9475:4;9472:1;9465:15;9499:4;9496:1;9489:15;9515:472;9557:3;9595:5;9589:12;9622:6;9617:3;9610:19;9647:1;9657:162;9671:6;9668:1;9665:13;9657:162;;;9733:4;9789:13;;;9785:22;;9779:29;9761:11;;;9757:20;;9750:59;9686:12;9657:162;;;9837:6;9834:1;9831:13;9828:87;;;9903:1;9896:4;9887:6;9882:3;9878:16;9874:27;9867:38;9828:87;-1:-1:-1;9969:2:62;9948:15;-1:-1:-1;;9944:29:62;9935:39;;;;9976:4;9931:50;;9515:472;-1:-1:-1;;9515:472:62:o;9992:1053::-;10362:4;10391:3;10421:2;10410:9;10403:21;10447:45;10488:2;10477:9;10473:18;10465:6;10447:45;:::i;:::-;10535:14;;10528:22;10523:2;10508:18;;10501:50;10594:14;;10587:22;10582:2;10567:18;;10560:50;10641:2;10626:18;;10619:34;;;10684:3;10669:19;;10662:35;;;10728:3;10713:19;;10706:35;;;10772:3;10757:19;;10750:35;;;-1:-1:-1;;;;;10860:15:62;;;10854:3;10839:19;;10832:44;10913:15;;10907:3;10892:19;;10885:44;10966:22;;;10960:3;10945:19;;10938:51;10433:59;-1:-1:-1;11006:33:62;10433:59;11024:6;11006:33;:::i;:::-;10998:41;9992:1053;-1:-1:-1;;;;;;;;;;;;;9992:1053:62:o;11407:352::-;11500:5;11523:1;11533:220;11547:4;11544:1;11541:11;11533:220;;;11610:13;;-1:-1:-1;;;;;11606:39:62;11594:52;;11669:4;11693:12;;;;11728:15;;;;11642:1;11560:9;11533:220;;;11537:3;;11407:352;;:::o;11764:461::-;11817:3;11855:5;11849:12;11882:6;11877:3;11870:19;11908:4;11937:2;11932:3;11928:12;11921:19;;11974:2;11967:5;11963:14;11995:1;12005:195;12019:6;12016:1;12013:13;12005:195;;;12084:13;;-1:-1:-1;;;;;12080:39:62;12068:52;;12140:12;;;;12175:15;;;;12116:1;12034:9;12005:195;;;-1:-1:-1;12216:3:62;;11764:461;-1:-1:-1;;;;;11764:461:62:o;12230:1291::-;-1:-1:-1;;;;;12727:32:62;;12709:51;;12697:3;12779:2;12797:18;;;12790:30;;;12668:4;;12697:3;12843:45;12869:18;;;12861:6;12843:45;:::i;:::-;12829:59;;12938:6;12931:14;12924:22;12919:2;12908:9;12904:18;12897:50;12997:6;12990:14;12983:22;12978:2;12967:9;12963:18;12956:50;13043:6;13037:3;13026:9;13022:19;13015:35;13085:3;13074:9;13070:19;13131:6;13155:1;13165:167;13179:4;13176:1;13173:11;13165:167;;;13238:13;;13226:26;;13272:12;;;;13307:15;;;;13199:1;13192:9;13165:167;;;13169:3;;;;13341:53;13389:3;13378:9;13374:19;13366:6;13341:53;:::i;:::-;13443:9;13435:6;13431:22;13425:3;13414:9;13410:19;13403:51;13471:44;13508:6;13500;13471:44;:::i;:::-;13463:52;12230:1291;-1:-1:-1;;;;;;;;;;;12230:1291:62:o;13526:315::-;-1:-1:-1;;;;;13701:32:62;;13683:51;;13770:2;13765;13750:18;;13743:30;;;-1:-1:-1;;13790:45:62;;13816:18;;13808:6;13790:45;:::i;:::-;13782:53;13526:315;-1:-1:-1;;;;13526:315:62:o;13846:232::-;13885:3;-1:-1:-1;;13906:17:62;;13903:140;;;13965:10;13960:3;13956:20;13953:1;13946:31;14000:4;13997:1;13990:15;14028:4;14025:1;14018:15;13903:140;-1:-1:-1;14070:1:62;14059:13;;13846:232::o;14083:388::-;-1:-1:-1;;;;;14288:32:62;;14270:51;;14357:2;14352;14337:18;;14330:30;;;-1:-1:-1;;14377:45:62;;14403:18;;14395:6;14377:45;:::i;:::-;14369:53;;14458:6;14453:2;14442:9;14438:18;14431:34;14083:388;;;;;;:::o;15792:407::-;15994:2;15976:21;;;16033:2;16013:18;;;16006:30;16072:34;16067:2;16052:18;;16045:62;-1:-1:-1;;;16138:2:62;16123:18;;16116:41;16189:3;16174:19;;15792:407::o",
  "language": "Solidity",
  "natspec": {
    "author": "Leonardo Urrego",
    "details": "This contract is the standard way to create CLH",
    "events": {
      "evtNewCLH(address,string,uint256)": {
        "params": {
          "houseAddr": "Address of the created house",
          "houseId": "Id of CLH of the created house",
          "houseName": "Name of the created house"
        }
      },
      "evtUpdateCLC(string,address,address)": {
        "params": {
          "CLCName": "Name of contract var",
          "newAddress": "New Address value of the var",
          "oldAddress": "Old Address value of the var"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "CLHAPI()": {
        "notice": "Contract CLHouse API"
      },
      "CLLConstructorCLH()": {
        "notice": "Contract with the CLH Constructor logic"
      },
      "CLLGovernance()": {
        "notice": "Contract with the functions for Governance"
      },
      "CLLUserManagement()": {
        "notice": "Contract with the functions for user management"
      },
      "CreateCLH(string,bool,bool,bytes32,uint256[3],address[],address,address,bytes)": {
        "details": "Some parameters wil be ignored depending on the governance model",
        "notice": "Deploy a new CLHouse",
        "params": {
          "_ManagerWallets": "Whitelist of address for invitate as managers",
          "_gnosisSafe": "Contract address of SAFE",
          "_govModel": "keccak256 hash of the governance model, see the __GOV_* constans",
          "_govRules": "Array for goverment rules see `enum gRule`",
          "_houseName": "Name of the CLH",
          "_houseOpen": "If is set to 1, the CLH is set to open",
          "_housePrivate": "If is set to 1, the CLH is set to private",
          "_signature": "Signature for validate OffChain Tx",
          "_signerWallet": "Wallet address of the signer for OffChain Tx"
        }
      },
      "Init(address,address,address,address,address)": {
        "details": "The constructor create a default CLH with the houseId #0",
        "notice": "Config the CLFactory with the CL Logic Contracts",
        "params": {
          "_CLHAPI": "Address of CLHAPI Contract",
          "_CLLConstructorCLH": "Address Contract with the Constructor logic",
          "_CLLGovernance": "Address Contract Logic for governance",
          "_CLLUserManagement": "Address Contract Logic for user management",
          "_beacon": "Address Beacon Contract"
        }
      },
      "UpdateCLHAPI(address)": {
        "notice": "Update the CLHAPI contract Address"
      },
      "UpdateCLLConstructorCLH(address)": {
        "notice": "Update the CLLConstructorCLH contract Address"
      },
      "UpdateCLLGovernance(address)": {
        "notice": "Update the CLLGovernance contract Address"
      },
      "UpdateCLLUserManagement(address)": {
        "notice": "Update the CLLUserManagement contract Address"
      },
      "beaconCLH()": {
        "notice": "Contract Object of the beacon (store the add)"
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getCLHImplementation()": {
        "notice": "Get the address of the CLH contract logic"
      },
      "mapCLH(uint256)": {
        "notice": "Mapping to store all the created houses"
      },
      "mapIdCLH(address)": {
        "notice": "Relation houseAddr with houseId"
      },
      "numCLH()": {
        "notice": "Store the number of houses created"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "notice": "Create and config CLHouses",
    "stateVariables": {
      "beaconCLH": {
        "details": "The beacon store the updated address of CLH"
      }
    },
    "title": "Crypto League House Factory",
    "version": 1
  },
  "offset": [
    496,
    7267
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH3 0x12D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA327AB69 GT PUSH3 0xAF JUMPI DUP1 PUSH4 0xD742063C GT PUSH3 0x7A JUMPI DUP1 PUSH4 0xD742063C EQ PUSH3 0x27E JUMPI DUP1 PUSH4 0xED0717FE EQ PUSH3 0x295 JUMPI DUP1 PUSH4 0xEE7A7D1B EQ PUSH3 0x2AC JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH3 0x2B6 JUMPI DUP1 PUSH4 0xF6F7A1B3 EQ PUSH3 0x2CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA327AB69 EQ PUSH3 0x235 JUMPI DUP1 PUSH4 0xA6B6ED3A EQ PUSH3 0x249 JUMPI DUP1 PUSH4 0xC0828F63 EQ PUSH3 0x253 JUMPI DUP1 PUSH4 0xC1E45428 EQ PUSH3 0x267 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x60B323C3 GT PUSH3 0xFC JUMPI DUP1 PUSH4 0x60B323C3 EQ PUSH3 0x1A4 JUMPI DUP1 PUSH4 0x624D8774 EQ PUSH3 0x1BB JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH3 0x1E7 JUMPI DUP1 PUSH4 0x86BDFCAC EQ PUSH3 0x1F1 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH3 0x223 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x10790717 EQ PUSH3 0x132 JUMPI DUP1 PUSH4 0x4BC3959F EQ PUSH3 0x163 JUMPI DUP1 PUSH4 0x529382D5 EQ PUSH3 0x17C JUMPI DUP1 PUSH4 0x594034E3 EQ PUSH3 0x190 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x73 SLOAD PUSH3 0x146 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH3 0x17A PUSH3 0x174 CALLDATASIZE PUSH1 0x4 PUSH3 0xC71 JUMP JUMPDEST PUSH3 0x2E4 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x71 SLOAD PUSH3 0x146 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x70 SLOAD PUSH3 0x146 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH3 0x17A PUSH3 0x1B5 CALLDATASIZE PUSH1 0x4 PUSH3 0xC98 JUMP JUMPDEST PUSH3 0x35D JUMP JUMPDEST PUSH3 0x146 PUSH3 0x1CC CALLDATASIZE PUSH1 0x4 PUSH3 0xD14 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH3 0x17A PUSH3 0x4FE JUMP JUMPDEST PUSH3 0x214 PUSH3 0x202 CALLDATASIZE PUSH1 0x4 PUSH3 0xC71 JUMP JUMPDEST PUSH1 0x7F PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x15A JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x146 JUMP JUMPDEST PUSH1 0x72 SLOAD PUSH3 0x146 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH3 0x146 PUSH3 0x516 JUMP JUMPDEST PUSH1 0x7E SLOAD PUSH3 0x146 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH3 0x17A PUSH3 0x278 CALLDATASIZE PUSH1 0x4 PUSH3 0xC71 JUMP JUMPDEST PUSH3 0x58C JUMP JUMPDEST PUSH3 0x17A PUSH3 0x28F CALLDATASIZE PUSH1 0x4 PUSH3 0xC71 JUMP JUMPDEST PUSH3 0x609 JUMP JUMPDEST PUSH3 0x17A PUSH3 0x2A6 CALLDATASIZE PUSH1 0x4 PUSH3 0xF09 JUMP JUMPDEST PUSH3 0x682 JUMP JUMPDEST PUSH3 0x214 PUSH1 0x65 SLOAD DUP2 JUMP JUMPDEST PUSH3 0x17A PUSH3 0x2C7 CALLDATASIZE PUSH1 0x4 PUSH3 0xC71 JUMP JUMPDEST PUSH3 0xA28 JUMP JUMPDEST PUSH3 0x17A PUSH3 0x2DE CALLDATASIZE PUSH1 0x4 PUSH3 0xC71 JUMP JUMPDEST PUSH3 0xAA7 JUMP JUMPDEST PUSH3 0x2EE PUSH3 0xB24 JUMP JUMPDEST PUSH1 0x73 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 MSTORE PUSH1 0x6 SWAP1 DUP3 ADD MSTORE PUSH6 0x434C48415049 PUSH1 0xD0 SHL PUSH1 0x80 DUP3 ADD MSTORE SWAP4 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD DUP2 SWAP1 MSTORE SWAP2 DUP4 ADD MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x1C0D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0xA0 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH3 0x380 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF DUP1 DUP4 AND SWAP2 AND LT JUMPDEST PUSH3 0x3E9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0xFFFF NOT AND PUSH1 0xFF DUP4 AND OR PUSH2 0x100 OR DUP2 SSTORE PUSH1 0x7E DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 0x71 DUP1 SLOAD DUP11 DUP5 AND SWAP1 DUP4 AND OR SWAP1 SSTORE PUSH1 0x72 DUP1 SLOAD DUP10 DUP5 AND SWAP1 DUP4 AND OR SWAP1 SSTORE PUSH1 0x70 DUP1 SLOAD DUP9 DUP5 AND SWAP1 DUP4 AND OR SWAP1 SSTORE PUSH1 0x73 DUP1 SLOAD SWAP3 DUP8 AND SWAP3 DUP3 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE PUSH1 0x65 DUP3 SWAP1 SSTORE DUP2 DUP1 MSTORE PUSH32 0xAE0C3F803428DD501929F276001A4B5FD1D262991BBB98E97B4B7D918A5AF6DC DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 0x7F PUSH1 0x20 MSTORE PUSH32 0x18B3A2798575D3A428C1F52E616A74B071539854E037E7D7C535365D474F4033 SSTORE PUSH3 0x4B5 PUSH3 0xB80 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0xFF DUP3 AND DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH3 0x508 PUSH3 0xB24 JUMP JUMPDEST PUSH3 0x514 PUSH1 0x0 PUSH3 0xBB4 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x7E SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x5C60DA1B PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x5C60DA1B SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x561 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x587 SWAP2 SWAP1 PUSH3 0x1006 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH3 0x596 PUSH3 0xB24 JUMP JUMPDEST PUSH1 0x71 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x10D313155CD95C93585B9859D95B595B9D PUSH1 0x7A SHL PUSH1 0x80 DUP3 ADD MSTORE SWAP4 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD DUP2 SWAP1 MSTORE SWAP2 DUP4 ADD MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x1C0D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0xA0 ADD PUSH3 0x351 JUMP JUMPDEST PUSH3 0x613 PUSH3 0xB24 JUMP JUMPDEST PUSH1 0x72 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 MSTORE PUSH1 0xD SWAP1 DUP3 ADD MSTORE PUSH13 0x434C4C476F7665726E616E6365 PUSH1 0x98 SHL PUSH1 0x80 DUP3 ADD MSTORE SWAP4 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD DUP2 SWAP1 MSTORE SWAP2 DUP4 ADD MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x1C0D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0xA0 ADD PUSH3 0x351 JUMP JUMPDEST CALLER PUSH32 0xB93889D934070956C00846F50F9A10A747BD194BBA2F2E78A86D0C02386FDB1 DUP8 EQ DUP1 PUSH3 0x6D1 JUMPI POP DUP7 PUSH32 0x16591A696FEE5867425B3DEE9FC0160A6C1BAEF77835BC3D204314106D639298 EQ JUMPDEST DUP1 PUSH3 0x6FC JUMPI POP DUP7 PUSH32 0xA0786F6450D5FB3298B8425105C1B75E6E01A1FF86CDABEA29909CDB0B4C83A7 EQ JUMPDEST PUSH3 0x74A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696420476F7665726E616E63652054797065000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x3E0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH3 0x8CA JUMPI DUP2 MLOAD PUSH1 0x41 EQ PUSH3 0x7AD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x437265617465434C483A20426164207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x3E0 JUMP JUMPDEST PUSH1 0x73 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xE78FC36B DUP12 DUP12 DUP12 DUP12 DUP12 PUSH1 0x0 PUSH1 0x20 MUL ADD MLOAD DUP13 PUSH1 0x1 PUSH1 0x20 MUL ADD MLOAD DUP14 PUSH1 0x2 PUSH1 0x20 MUL ADD MLOAD DUP14 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH3 0x7F0 JUMPI PUSH3 0x7F0 PUSH3 0x1026 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD ADDRESS DUP13 PUSH1 0x40 MLOAD DUP12 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x821 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x108C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x83F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x865 SWAP2 SWAP1 PUSH3 0x1006 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH3 0x8C7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x437265617465434C483A20496E76616C6964205369676E617475726500000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x3E0 JUMP JUMPDEST POP DUP2 JUMPDEST PUSH1 0x7E SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE ADDRESS DUP2 MSTORE PUSH1 0x73 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP8 DUP2 AND DUP3 DUP5 ADD MSTORE PUSH1 0x70 SLOAD DUP2 AND PUSH1 0x60 DUP4 ADD MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP4 SWAP3 SWAP1 SWAP3 AND SWAP2 PUSH3 0x925 SWAP2 DUP6 SWAP2 DUP16 SWAP2 DUP16 SWAP2 DUP16 SWAP2 DUP16 SWAP2 DUP16 SWAP2 SWAP1 DUP16 SWAP1 PUSH1 0x24 ADD PUSH3 0x1188 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x7E66495D PUSH1 0xE0 SHL OR SWAP1 MSTORE MLOAD PUSH3 0x95B SWAP1 PUSH3 0xC3B JUMP JUMPDEST PUSH3 0x968 SWAP3 SWAP2 SWAP1 PUSH3 0x1228 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x985 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x65 DUP1 SLOAD SWAP2 SWAP3 POP PUSH1 0x0 PUSH3 0x99A DUP4 PUSH3 0x1256 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x65 DUP1 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP4 SLOAD SWAP4 DUP4 MSTORE PUSH1 0x7F SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP3 SWAP1 SSTORE MLOAD PUSH32 0x6510209152E59FEB0A7445A97B24BC79BFCB456CA1D8BFF1E4980536C4E8CABB SWAP2 PUSH3 0xA13 SWAP2 DUP5 SWAP2 DUP16 SWAP2 PUSH3 0x1280 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH3 0xA32 PUSH3 0xB24 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0xA99 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x3E0 JUMP JUMPDEST PUSH3 0xAA4 DUP2 PUSH3 0xBB4 JUMP JUMPDEST POP JUMP JUMPDEST PUSH3 0xAB1 PUSH3 0xB24 JUMP JUMPDEST PUSH1 0x70 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x86989886DEDCE6E8E4EAC6E8DEE486989 PUSH1 0x7B SHL PUSH1 0x80 DUP3 ADD MSTORE SWAP4 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD DUP2 SWAP1 MSTORE SWAP2 DUP4 ADD MSTORE SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x1C0D DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0xA0 ADD PUSH3 0x351 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH3 0x514 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x3E0 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH3 0xBAA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x3E0 SWAP1 PUSH3 0x12B6 JUMP JUMPDEST PUSH3 0x514 PUSH3 0xC06 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH3 0xC30 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x3E0 SWAP1 PUSH3 0x12B6 JUMP JUMPDEST PUSH3 0x514 CALLER PUSH3 0xBB4 JUMP JUMPDEST PUSH2 0x90B DUP1 PUSH3 0x1302 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0xAA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH3 0xC6C DUP2 PUSH3 0xC49 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0xC84 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH3 0xC91 DUP2 PUSH3 0xC49 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH3 0xCB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH3 0xCBE DUP2 PUSH3 0xC49 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH3 0xCD0 DUP2 PUSH3 0xC49 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH3 0xCE2 DUP2 PUSH3 0xC49 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH3 0xCF4 DUP2 PUSH3 0xC49 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH3 0xD06 DUP2 PUSH3 0xC49 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0xD27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0xD70 JUMPI PUSH3 0xD70 PUSH3 0xD2E JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0xD8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0xDA7 JUMPI PUSH3 0xDA7 PUSH3 0xD2E JUMP JUMPDEST PUSH3 0xDBC PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH3 0xD44 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH3 0xDD2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH3 0xC6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0xE12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0xE38 JUMPI PUSH3 0xE38 PUSH3 0xD2E JUMP JUMPDEST PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP5 ADD DUP6 DUP2 GT ISZERO PUSH3 0xE4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0xE6A JUMPI DUP1 CALLDATALOAD DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH3 0xE50 JUMP JUMPDEST POP SWAP2 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0xE87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0xEA6 JUMPI PUSH3 0xEA6 PUSH3 0xD2E JUMP JUMPDEST DUP2 PUSH1 0x5 SHL PUSH3 0xEB7 DUP3 DUP3 ADD PUSH3 0xD44 JUMP JUMPDEST SWAP3 DUP4 MSTORE DUP5 DUP2 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP1 DUP8 DUP6 GT ISZERO PUSH3 0xED2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP8 ADD SWAP3 POP JUMPDEST DUP5 DUP4 LT ISZERO PUSH3 0xEFE JUMPI DUP3 CALLDATALOAD PUSH3 0xEEE DUP2 PUSH3 0xC49 JUMP JUMPDEST DUP3 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH3 0xED8 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x160 DUP11 DUP13 SUB SLT ISZERO PUSH3 0xF29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH3 0xF42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0xF50 DUP14 DUP4 DUP15 ADD PUSH3 0xD78 JUMP JUMPDEST SWAP11 POP PUSH3 0xF60 PUSH1 0x20 DUP14 ADD PUSH3 0xDEF JUMP JUMPDEST SWAP10 POP PUSH3 0xF70 PUSH1 0x40 DUP14 ADD PUSH3 0xDEF JUMP JUMPDEST SWAP9 POP PUSH1 0x60 DUP13 ADD CALLDATALOAD SWAP8 POP PUSH3 0xF88 DUP14 PUSH1 0x80 DUP15 ADD PUSH3 0xE00 JUMP JUMPDEST SWAP7 POP PUSH1 0xE0 DUP13 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0xF9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0xFAD DUP14 DUP4 DUP15 ADD PUSH3 0xE75 JUMP JUMPDEST SWAP6 POP PUSH3 0xFBE PUSH2 0x100 DUP14 ADD PUSH3 0xC5F JUMP JUMPDEST SWAP5 POP PUSH3 0xFCF PUSH2 0x120 DUP14 ADD PUSH3 0xC5F JUMP JUMPDEST SWAP4 POP PUSH2 0x140 DUP13 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0xFE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0xFF6 DUP13 DUP3 DUP14 ADD PUSH3 0xD78 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1019 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH3 0xC91 DUP2 PUSH3 0xC49 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x1064 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH3 0x1046 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH3 0x1077 JUMPI PUSH1 0x0 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x140 DUP1 DUP4 MSTORE PUSH3 0x10A2 DUP2 DUP5 ADD DUP15 PUSH3 0x103C JUMP JUMPDEST DUP13 ISZERO ISZERO PUSH1 0x20 DUP6 ADD MSTORE DUP12 ISZERO ISZERO PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD DUP12 SWAP1 MSTORE PUSH1 0x80 DUP5 ADD DUP11 SWAP1 MSTORE PUSH1 0xA0 DUP5 ADD DUP10 SWAP1 MSTORE PUSH1 0xC0 DUP5 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND PUSH1 0xE0 DUP7 ADD MSTORE DUP7 AND PUSH2 0x100 DUP6 ADD MSTORE DUP4 DUP2 SUB PUSH2 0x120 DUP6 ADD MSTORE SWAP1 POP PUSH3 0x10FD DUP2 DUP6 PUSH3 0x103C JUMP JUMPDEST SWAP14 SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST PUSH1 0x4 DUP2 LT ISZERO PUSH3 0x113C JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0x1112 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x117D JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0x1156 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP2 MSTORE PUSH2 0x1A0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH3 0x11B1 DUP5 DUP4 ADD DUP13 PUSH3 0x103C JUMP JUMPDEST SWAP2 POP DUP10 ISZERO ISZERO PUSH1 0x40 DUP6 ADD MSTORE DUP9 ISZERO ISZERO PUSH1 0x60 DUP6 ADD MSTORE DUP8 PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD DUP8 PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH3 0x11F0 JUMPI DUP2 MLOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0x11D1 JUMP JUMPDEST POP POP POP POP PUSH3 0x1204 PUSH2 0x100 DUP5 ADD DUP7 PUSH3 0x110E JUMP JUMPDEST DUP3 DUP2 SUB PUSH2 0x180 DUP5 ADD MSTORE PUSH3 0x1219 DUP2 DUP6 PUSH3 0x1142 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH3 0x124E SWAP1 DUP4 ADD DUP5 PUSH3 0x103C JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH3 0x1279 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH3 0x12A6 SWAP1 DUP4 ADD DUP6 PUSH3 0x103C JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x90B CODESIZE SUB DUP1 PUSH2 0x90B DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x467 JUMP JUMPDEST DUP2 DUP2 PUSH2 0x3D DUP3 DUP3 PUSH1 0x0 PUSH2 0x46 JUMP JUMPDEST POP POP POP POP PUSH2 0x591 JUMP JUMPDEST PUSH2 0x4F DUP4 PUSH2 0x111 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH32 0x1CF3B03A6CF19FA2BABA4DF148E9DCABEDEA7F8A5C07840E207E5C089BE95D3E SWAP1 PUSH1 0x0 SWAP1 LOG2 PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x90 JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0x10C JUMPI PUSH2 0x10A DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5C60DA1B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFA SWAP2 SWAP1 PUSH2 0x527 JUMP JUMPDEST DUP4 PUSH2 0x2B4 PUSH1 0x20 SHL PUSH2 0x29 OR PUSH1 0x20 SHR JUMP JUMPDEST POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x124 DUP2 PUSH2 0x2E0 PUSH1 0x20 SHL PUSH2 0x55 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x183 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A206E657720626561636F6E206973206E6F74206120636F6E PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x1D1C9858DD PUSH1 0xDA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1F7 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5C60DA1B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1C4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E8 SWAP2 SWAP1 PUSH2 0x527 JUMP JUMPDEST PUSH2 0x2E0 PUSH1 0x20 SHL PUSH2 0x55 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x25C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313936373A20626561636F6E20696D706C656D656E746174696F6E2069 PUSH1 0x44 DUP3 ADD MSTORE PUSH16 0x1CC81B9BDD08184818DBDB9D1C9858DD PUSH1 0x82 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x17A JUMP JUMPDEST DUP1 PUSH2 0x293 PUSH32 0xA3F0AD74E5423AEBFD80D3EF4346578335A9A72AEAEE59FF6CB3582B35133D50 PUSH1 0x0 SHL PUSH2 0x2EF PUSH1 0x20 SHL PUSH2 0x64 OR PUSH1 0x20 SHR JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2D9 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8E4 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x2F2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE PUSH2 0x35A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x17A JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x375 SWAP2 SWAP1 PUSH2 0x542 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3B0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3B5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x3C6 DUP3 DUP3 DUP7 PUSH2 0x3D0 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x3DF JUMPI POP DUP2 PUSH2 0x2D9 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x3EF JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17A SWAP2 SWAP1 PUSH2 0x55E JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x420 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x456 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x43E JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x10A JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x47A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x483 DUP4 PUSH2 0x409 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x4A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x4B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x4C6 JUMPI PUSH2 0x4C6 PUSH2 0x425 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x4EE JUMPI PUSH2 0x4EE PUSH2 0x425 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x507 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x518 DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x43B JUMP JUMPDEST DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x539 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2D9 DUP3 PUSH2 0x409 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x554 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x43B JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x57D DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x43B JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x344 DUP1 PUSH2 0x5A0 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE PUSH2 0x13 JUMPI PUSH2 0x11 PUSH2 0x17 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x11 JUMPDEST PUSH2 0x27 PUSH2 0x22 PUSH2 0x67 JUMP JUMPDEST PUSH2 0x100 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4E DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2E8 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x124 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9A PUSH32 0xA3F0AD74E5423AEBFD80D3EF4346578335A9A72AEAEE59FF6CB3582B35133D50 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5C60DA1B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x23F JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 DUP1 ISZERO PUSH2 0x11F JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE PUSH2 0x191 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2064656C65676174652063616C6C20746F206E6F6E2D636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x1AC SWAP2 SWAP1 PUSH2 0x298 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1E7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1EC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1FC DUP3 DUP3 DUP7 PUSH2 0x206 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x215 JUMPI POP DUP2 PUSH2 0x4E JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x225 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x188 SWAP2 SWAP1 PUSH2 0x2B4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x251 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x283 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x26B JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x292 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x2AA DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x268 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2D3 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x268 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x70667358221220D04C33 PUSH12 0xF1D5EE0F5699FA74B9ED40E9 CALLDATASIZE CHAINID SWAP15 MLOAD 0xD6 SWAP8 GASPRICE PUSH19 0xD8AAB6B3C84DE87264736F6C634300080C0033 COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C65648068 LOG2 0x23 0xBC CODESIZE MSTORE SWAP9 PUSH5 0x701ED6F372 0x29 PUSH14 0x3ECB2AA9AFFE6C91CF94E2AE6DD5 PUSH24 0xC8A2646970667358221220F8441F72719D89ED511197399E PUSH4 0xCD9E5608 SWAP9 0xF 0xE1 0xD3 REVERT DUP3 PC CHAINID 0xD8 SDIV POP COINBASE 0x2C DUP5 PUSH5 0x736F6C6343 STOP ADDMOD 0xC STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        496,
        7267
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "5": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "CALLVALUE",
      "path": "49"
    },
    "6": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "DUP1",
      "path": "49"
    },
    "7": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "8": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x11"
    },
    "12": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "13": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "15": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "DUP1",
      "path": "49"
    },
    "16": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "REVERT",
      "path": "49"
    },
    "17": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "18": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "POP",
      "path": "49"
    },
    "19": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "21": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "CALLDATASIZE",
      "path": "49"
    },
    "22": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "LT",
      "path": "49"
    },
    "23": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x12D"
    },
    "27": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "28": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "30": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "CALLDATALOAD",
      "path": "49"
    },
    "31": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0xE0"
    },
    "33": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "SHR",
      "path": "49"
    },
    "34": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "DUP1",
      "path": "49"
    },
    "35": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0xA327AB69"
    },
    "40": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "GT",
      "path": "49"
    },
    "41": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0xAF"
    },
    "45": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "46": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "DUP1",
      "path": "49"
    },
    "47": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0xD742063C"
    },
    "52": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "GT",
      "path": "49"
    },
    "53": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x7A"
    },
    "57": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "58": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "DUP1",
      "path": "49"
    },
    "59": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0xD742063C"
    },
    "64": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "EQ",
      "path": "49"
    },
    "65": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x27E"
    },
    "69": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "70": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "DUP1",
      "path": "49"
    },
    "71": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0xED0717FE"
    },
    "76": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "EQ",
      "path": "49"
    },
    "77": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x295"
    },
    "81": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "82": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "DUP1",
      "path": "49"
    },
    "83": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0xEE7A7D1B"
    },
    "88": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "EQ",
      "path": "49"
    },
    "89": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x2AC"
    },
    "93": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "94": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "DUP1",
      "path": "49"
    },
    "95": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0xF2FDE38B"
    },
    "100": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "EQ",
      "path": "49"
    },
    "101": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x2B6"
    },
    "105": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "106": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "DUP1",
      "path": "49"
    },
    "107": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0xF6F7A1B3"
    },
    "112": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "EQ",
      "path": "49"
    },
    "113": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x2CD"
    },
    "117": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "118": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "120": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "DUP1",
      "path": "49"
    },
    "121": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "REVERT",
      "path": "49"
    },
    "122": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "123": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "DUP1",
      "path": "49"
    },
    "124": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0xA327AB69"
    },
    "129": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "EQ",
      "path": "49"
    },
    "130": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x235"
    },
    "134": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "135": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "DUP1",
      "path": "49"
    },
    "136": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0xA6B6ED3A"
    },
    "141": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "EQ",
      "path": "49"
    },
    "142": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x249"
    },
    "146": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "147": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "DUP1",
      "path": "49"
    },
    "148": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0xC0828F63"
    },
    "153": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "EQ",
      "path": "49"
    },
    "154": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x253"
    },
    "158": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "159": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "DUP1",
      "path": "49"
    },
    "160": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0xC1E45428"
    },
    "165": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "EQ",
      "path": "49"
    },
    "166": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x267"
    },
    "170": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "171": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "173": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "DUP1",
      "path": "49"
    },
    "174": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "REVERT",
      "path": "49"
    },
    "175": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "176": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "DUP1",
      "path": "49"
    },
    "177": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x60B323C3"
    },
    "182": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "GT",
      "path": "49"
    },
    "183": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0xFC"
    },
    "187": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "188": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "DUP1",
      "path": "49"
    },
    "189": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x60B323C3"
    },
    "194": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "EQ",
      "path": "49"
    },
    "195": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x1A4"
    },
    "199": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "200": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "DUP1",
      "path": "49"
    },
    "201": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x624D8774"
    },
    "206": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "EQ",
      "path": "49"
    },
    "207": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x1BB"
    },
    "211": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "212": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "DUP1",
      "path": "49"
    },
    "213": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x715018A6"
    },
    "218": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "EQ",
      "path": "49"
    },
    "219": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x1E7"
    },
    "223": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "224": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "DUP1",
      "path": "49"
    },
    "225": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x86BDFCAC"
    },
    "230": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "EQ",
      "path": "49"
    },
    "231": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x1F1"
    },
    "235": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "236": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "DUP1",
      "path": "49"
    },
    "237": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x8DA5CB5B"
    },
    "242": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "EQ",
      "path": "49"
    },
    "243": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x223"
    },
    "247": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "248": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "250": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "DUP1",
      "path": "49"
    },
    "251": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "REVERT",
      "path": "49"
    },
    "252": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "253": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "DUP1",
      "path": "49"
    },
    "254": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x10790717"
    },
    "259": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "EQ",
      "path": "49"
    },
    "260": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x132"
    },
    "264": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "265": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "DUP1",
      "path": "49"
    },
    "266": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x4BC3959F"
    },
    "271": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "EQ",
      "path": "49"
    },
    "272": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x163"
    },
    "276": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "277": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "DUP1",
      "path": "49"
    },
    "278": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x529382D5"
    },
    "283": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "EQ",
      "path": "49"
    },
    "284": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x17C"
    },
    "288": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "289": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "DUP1",
      "path": "49"
    },
    "290": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x594034E3"
    },
    "295": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "EQ",
      "path": "49"
    },
    "296": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x190"
    },
    "300": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "301": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "302": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "304": {
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "DUP1",
      "path": "49"
    },
    "305": {
      "first_revert": true,
      "fn": null,
      "offset": [
        496,
        7267
      ],
      "op": "REVERT",
      "path": "49"
    },
    "306": {
      "offset": [
        1009,
        1030
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "307": {
      "fn": null,
      "offset": [
        1009,
        1030
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x73"
    },
    "309": {
      "fn": null,
      "offset": [
        1009,
        1030
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "310": {
      "fn": null,
      "offset": [
        1009,
        1030
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x146"
    },
    "314": {
      "fn": null,
      "offset": [
        1009,
        1030
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "315": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "317": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "319": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "321": {
      "op": "SHL"
    },
    "322": {
      "op": "SUB"
    },
    "323": {
      "offset": [
        1009,
        1030
      ],
      "op": "AND",
      "path": "49"
    },
    "324": {
      "fn": null,
      "offset": [
        1009,
        1030
      ],
      "op": "DUP2",
      "path": "49"
    },
    "325": {
      "fn": null,
      "offset": [
        1009,
        1030
      ],
      "op": "JUMP",
      "path": "49"
    },
    "326": {
      "fn": null,
      "offset": [
        1009,
        1030
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "327": {
      "fn": null,
      "offset": [
        1009,
        1030
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "329": {
      "fn": null,
      "offset": [
        1009,
        1030
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "330": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "332": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "334": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "336": {
      "op": "SHL"
    },
    "337": {
      "op": "SUB"
    },
    "338": {
      "op": "SWAP1"
    },
    "339": {
      "op": "SWAP2"
    },
    "340": {
      "op": "AND"
    },
    "341": {
      "op": "DUP2"
    },
    "342": {
      "op": "MSTORE"
    },
    "343": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "345": {
      "op": "ADD"
    },
    "346": {
      "offset": [
        1009,
        1030
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "347": {
      "fn": null,
      "offset": [
        1009,
        1030
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "349": {
      "fn": null,
      "offset": [
        1009,
        1030
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "350": {
      "fn": null,
      "offset": [
        1009,
        1030
      ],
      "op": "DUP1",
      "path": "49"
    },
    "351": {
      "fn": null,
      "offset": [
        1009,
        1030
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "352": {
      "fn": null,
      "offset": [
        1009,
        1030
      ],
      "op": "SUB",
      "path": "49"
    },
    "353": {
      "fn": null,
      "offset": [
        1009,
        1030
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "354": {
      "fn": null,
      "offset": [
        1009,
        1030
      ],
      "op": "RETURN",
      "path": "49"
    },
    "355": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7081,
        7265
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "356": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7081,
        7265
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x17A"
    },
    "360": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7081,
        7265
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x174"
    },
    "364": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7081,
        7265
      ],
      "op": "CALLDATASIZE",
      "path": "49"
    },
    "365": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7081,
        7265
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "367": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7081,
        7265
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0xC71"
    },
    "371": {
      "fn": "CLFactory.UpdateCLHAPI",
      "jump": "i",
      "offset": [
        7081,
        7265
      ],
      "op": "JUMP",
      "path": "49"
    },
    "372": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7081,
        7265
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "373": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7081,
        7265
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x2E4"
    },
    "377": {
      "fn": "CLFactory.UpdateCLHAPI",
      "jump": "i",
      "offset": [
        7081,
        7265
      ],
      "op": "JUMP",
      "path": "49"
    },
    "378": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7081,
        7265
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "379": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7081,
        7265
      ],
      "op": "STOP",
      "path": "49"
    },
    "380": {
      "offset": [
        839,
        871
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "381": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        839,
        871
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x71"
    },
    "383": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        839,
        871
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "384": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        839,
        871
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x146"
    },
    "388": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        839,
        871
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "389": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "391": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "393": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "395": {
      "op": "SHL"
    },
    "396": {
      "op": "SUB"
    },
    "397": {
      "offset": [
        839,
        871
      ],
      "op": "AND",
      "path": "49"
    },
    "398": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        839,
        871
      ],
      "op": "DUP2",
      "path": "49"
    },
    "399": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        839,
        871
      ],
      "op": "JUMP",
      "path": "49"
    },
    "400": {
      "offset": [
        736,
        768
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "401": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        736,
        768
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x70"
    },
    "403": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        736,
        768
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "404": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        736,
        768
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x146"
    },
    "408": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        736,
        768
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "409": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "411": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "413": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "415": {
      "op": "SHL"
    },
    "416": {
      "op": "SUB"
    },
    "417": {
      "offset": [
        736,
        768
      ],
      "op": "AND",
      "path": "49"
    },
    "418": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        736,
        768
      ],
      "op": "DUP2",
      "path": "49"
    },
    "419": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        736,
        768
      ],
      "op": "JUMP",
      "path": "49"
    },
    "420": {
      "fn": "CLFactory.Init",
      "offset": [
        2577,
        3174
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "421": {
      "fn": "CLFactory.Init",
      "offset": [
        2577,
        3174
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x17A"
    },
    "425": {
      "fn": "CLFactory.Init",
      "offset": [
        2577,
        3174
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x1B5"
    },
    "429": {
      "fn": "CLFactory.Init",
      "offset": [
        2577,
        3174
      ],
      "op": "CALLDATASIZE",
      "path": "49"
    },
    "430": {
      "fn": "CLFactory.Init",
      "offset": [
        2577,
        3174
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "432": {
      "fn": "CLFactory.Init",
      "offset": [
        2577,
        3174
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0xC98"
    },
    "436": {
      "fn": "CLFactory.Init",
      "jump": "i",
      "offset": [
        2577,
        3174
      ],
      "op": "JUMP",
      "path": "49"
    },
    "437": {
      "fn": "CLFactory.Init",
      "offset": [
        2577,
        3174
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "438": {
      "fn": "CLFactory.Init",
      "offset": [
        2577,
        3174
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x35D"
    },
    "442": {
      "fn": "CLFactory.Init",
      "jump": "i",
      "offset": [
        2577,
        3174
      ],
      "op": "JUMP",
      "path": "49"
    },
    "443": {
      "offset": [
        1383,
        1425
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "444": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x146"
    },
    "448": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x1CC"
    },
    "452": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "CALLDATASIZE",
      "path": "49"
    },
    "453": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "455": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0xD14"
    },
    "459": {
      "fn": "CLFactory.Init",
      "jump": "i",
      "offset": [
        1383,
        1425
      ],
      "op": "JUMP",
      "path": "49"
    },
    "460": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "461": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x80"
    },
    "463": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x20"
    },
    "465": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "466": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "468": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "469": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "DUP2",
      "path": "49"
    },
    "470": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "471": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "473": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "474": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "KECCAK256",
      "path": "49"
    },
    "475": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "476": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "478": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "480": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "482": {
      "op": "SHL"
    },
    "483": {
      "op": "SUB"
    },
    "484": {
      "offset": [
        1383,
        1425
      ],
      "op": "AND",
      "path": "49"
    },
    "485": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "DUP2",
      "path": "49"
    },
    "486": {
      "fn": "CLFactory.Init",
      "offset": [
        1383,
        1425
      ],
      "op": "JUMP",
      "path": "49"
    },
    "487": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        2071,
        2172
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "488": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        2071,
        2172
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0x17A"
    },
    "492": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        2071,
        2172
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0x4FE"
    },
    "496": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "jump": "i",
      "offset": [
        2071,
        2172
      ],
      "op": "JUMP",
      "path": "0"
    },
    "497": {
      "offset": [
        1271,
        1316
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "498": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x214"
    },
    "502": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x202"
    },
    "506": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "CALLDATASIZE",
      "path": "49"
    },
    "507": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "509": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0xC71"
    },
    "513": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "jump": "i",
      "offset": [
        1271,
        1316
      ],
      "op": "JUMP",
      "path": "49"
    },
    "514": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "515": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x7F"
    },
    "517": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x20"
    },
    "519": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "520": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "522": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "523": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "DUP2",
      "path": "49"
    },
    "524": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "525": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "527": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "528": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "KECCAK256",
      "path": "49"
    },
    "529": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "530": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "DUP2",
      "path": "49"
    },
    "531": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "JUMP",
      "path": "49"
    },
    "532": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "533": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "535": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1271,
        1316
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "536": {
      "op": "SWAP1"
    },
    "537": {
      "op": "DUP2"
    },
    "538": {
      "op": "MSTORE"
    },
    "539": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "541": {
      "op": "ADD"
    },
    "542": {
      "offset": [
        1271,
        1316
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x15A"
    },
    "546": {
      "op": "JUMP"
    },
    "547": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1441,
        1526
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "548": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1513,
        1519
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 0,
      "value": "0x33"
    },
    "550": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1513,
        1519
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "551": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "553": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "555": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "557": {
      "op": "SHL"
    },
    "558": {
      "op": "SUB"
    },
    "559": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1513,
        1519
      ],
      "op": "AND",
      "path": "0"
    },
    "560": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1441,
        1526
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0x146"
    },
    "564": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1441,
        1526
      ],
      "op": "JUMP",
      "path": "0"
    },
    "565": {
      "offset": [
        937,
        965
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "566": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        937,
        965
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x72"
    },
    "568": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        937,
        965
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "569": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        937,
        965
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x146"
    },
    "573": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        937,
        965
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "574": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "576": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "578": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "580": {
      "op": "SHL"
    },
    "581": {
      "op": "SUB"
    },
    "582": {
      "offset": [
        937,
        965
      ],
      "op": "AND",
      "path": "49"
    },
    "583": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        937,
        965
      ],
      "op": "DUP2",
      "path": "49"
    },
    "584": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        937,
        965
      ],
      "op": "JUMP",
      "path": "49"
    },
    "585": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        5955,
        6069
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "586": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        5955,
        6069
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x146"
    },
    "590": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        5955,
        6069
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x516"
    },
    "594": {
      "fn": "CLFactory.getCLHImplementation",
      "jump": "i",
      "offset": [
        5955,
        6069
      ],
      "op": "JUMP",
      "path": "49"
    },
    "595": {
      "offset": [
        1187,
        1212
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "596": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        1187,
        1212
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x7E"
    },
    "598": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        1187,
        1212
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "599": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        1187,
        1212
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x146"
    },
    "603": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        1187,
        1212
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "604": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "606": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "608": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "610": {
      "op": "SHL"
    },
    "611": {
      "op": "SUB"
    },
    "612": {
      "offset": [
        1187,
        1212
      ],
      "op": "AND",
      "path": "49"
    },
    "613": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        1187,
        1212
      ],
      "op": "DUP2",
      "path": "49"
    },
    "614": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        1187,
        1212
      ],
      "op": "JUMP",
      "path": "49"
    },
    "615": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6466,
        6727
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "616": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6466,
        6727
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x17A"
    },
    "620": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6466,
        6727
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x278"
    },
    "624": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6466,
        6727
      ],
      "op": "CALLDATASIZE",
      "path": "49"
    },
    "625": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6466,
        6727
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "627": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6466,
        6727
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0xC71"
    },
    "631": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "jump": "i",
      "offset": [
        6466,
        6727
      ],
      "op": "JUMP",
      "path": "49"
    },
    "632": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6466,
        6727
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "633": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6466,
        6727
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x58C"
    },
    "637": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "jump": "i",
      "offset": [
        6466,
        6727
      ],
      "op": "JUMP",
      "path": "49"
    },
    "638": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6791,
        7024
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "639": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6791,
        7024
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x17A"
    },
    "643": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6791,
        7024
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x28F"
    },
    "647": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6791,
        7024
      ],
      "op": "CALLDATASIZE",
      "path": "49"
    },
    "648": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6791,
        7024
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "650": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6791,
        7024
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0xC71"
    },
    "654": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "jump": "i",
      "offset": [
        6791,
        7024
      ],
      "op": "JUMP",
      "path": "49"
    },
    "655": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6791,
        7024
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "656": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6791,
        7024
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x609"
    },
    "660": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "jump": "i",
      "offset": [
        6791,
        7024
      ],
      "op": "JUMP",
      "path": "49"
    },
    "661": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5890
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "662": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5890
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x17A"
    },
    "666": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5890
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x2A6"
    },
    "670": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5890
      ],
      "op": "CALLDATASIZE",
      "path": "49"
    },
    "671": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5890
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "673": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5890
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0xF09"
    },
    "677": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        3896,
        5890
      ],
      "op": "JUMP",
      "path": "49"
    },
    "678": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5890
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "679": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5890
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x682"
    },
    "683": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        3896,
        5890
      ],
      "op": "JUMP",
      "path": "49"
    },
    "684": {
      "offset": [
        621,
        642
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "685": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        621,
        642
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x214"
    },
    "689": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        621,
        642
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x65"
    },
    "691": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        621,
        642
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "692": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        621,
        642
      ],
      "op": "DUP2",
      "path": "49"
    },
    "693": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        621,
        642
      ],
      "op": "JUMP",
      "path": "49"
    },
    "694": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2321,
        2519
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "695": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2321,
        2519
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0x17A"
    },
    "699": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2321,
        2519
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0x2C7"
    },
    "703": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2321,
        2519
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "704": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2321,
        2519
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "706": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2321,
        2519
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0xC71"
    },
    "710": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "jump": "i",
      "offset": [
        2321,
        2519
      ],
      "op": "JUMP",
      "path": "0"
    },
    "711": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2321,
        2519
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "712": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2321,
        2519
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0xA28"
    },
    "716": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "jump": "i",
      "offset": [
        2321,
        2519
      ],
      "op": "JUMP",
      "path": "0"
    },
    "717": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6137,
        6398
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "718": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6137,
        6398
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x17A"
    },
    "722": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6137,
        6398
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x2DE"
    },
    "726": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6137,
        6398
      ],
      "op": "CALLDATASIZE",
      "path": "49"
    },
    "727": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6137,
        6398
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "729": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6137,
        6398
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0xC71"
    },
    "733": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "jump": "i",
      "offset": [
        6137,
        6398
      ],
      "op": "JUMP",
      "path": "49"
    },
    "734": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6137,
        6398
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "735": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6137,
        6398
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0xAA7"
    },
    "739": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "jump": "i",
      "offset": [
        6137,
        6398
      ],
      "op": "JUMP",
      "path": "49"
    },
    "740": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7081,
        7265
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "741": {
      "offset": [
        1334,
        1347
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0x2EE"
    },
    "745": {
      "offset": [
        1334,
        1345
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0xB24"
    },
    "749": {
      "jump": "i",
      "offset": [
        1334,
        1347
      ],
      "op": "JUMP",
      "path": "0"
    },
    "750": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        1334,
        1347
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "751": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7169,
        7175
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x73"
    },
    "753": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7169,
        7175
      ],
      "op": "DUP1",
      "path": "49"
    },
    "754": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7169,
        7175
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "755": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "757": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "759": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "761": {
      "op": "SHL"
    },
    "762": {
      "op": "SUB"
    },
    "763": {
      "op": "NOT"
    },
    "764": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7185,
        7201
      ],
      "op": "DUP2",
      "path": "49",
      "statement": 1
    },
    "765": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7185,
        7201
      ],
      "op": "AND",
      "path": "49"
    },
    "766": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "768": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "770": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "772": {
      "op": "SHL"
    },
    "773": {
      "op": "SUB"
    },
    "774": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7185,
        7201
      ],
      "op": "DUP5",
      "path": "49"
    },
    "775": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7185,
        7201
      ],
      "op": "DUP2",
      "path": "49"
    },
    "776": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7185,
        7201
      ],
      "op": "AND",
      "path": "49"
    },
    "777": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7185,
        7201
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "778": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7185,
        7201
      ],
      "op": "DUP3",
      "path": "49"
    },
    "779": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7185,
        7201
      ],
      "op": "OR",
      "path": "49"
    },
    "780": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7185,
        7201
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "781": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7185,
        7201
      ],
      "op": "SWAP4",
      "path": "49"
    },
    "782": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7185,
        7201
      ],
      "op": "SSTORE",
      "path": "49"
    },
    "783": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7216,
        7258
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 2,
      "value": "0x40"
    },
    "785": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7216,
        7258
      ],
      "op": "DUP1",
      "path": "49"
    },
    "786": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7216,
        7258
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "787": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "789": {
      "op": "DUP1"
    },
    "790": {
      "op": "DUP3"
    },
    "791": {
      "op": "MSTORE"
    },
    "792": {
      "op": "PUSH1",
      "value": "0x6"
    },
    "794": {
      "op": "SWAP1"
    },
    "795": {
      "op": "DUP3"
    },
    "796": {
      "op": "ADD"
    },
    "797": {
      "op": "MSTORE"
    },
    "798": {
      "op": "PUSH6",
      "value": "0x434C48415049"
    },
    "805": {
      "op": "PUSH1",
      "value": "0xD0"
    },
    "807": {
      "op": "SHL"
    },
    "808": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "810": {
      "op": "DUP3"
    },
    "811": {
      "op": "ADD"
    },
    "812": {
      "op": "MSTORE"
    },
    "813": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7169,
        7175
      ],
      "op": "SWAP4",
      "path": "49"
    },
    "814": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7169,
        7175
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "815": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7169,
        7175
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "816": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7169,
        7175
      ],
      "op": "AND",
      "path": "49"
    },
    "817": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "819": {
      "op": "DUP5"
    },
    "820": {
      "op": "ADD"
    },
    "821": {
      "op": "DUP2"
    },
    "822": {
      "op": "SWAP1"
    },
    "823": {
      "op": "MSTORE"
    },
    "824": {
      "op": "SWAP2"
    },
    "825": {
      "op": "DUP4"
    },
    "826": {
      "op": "ADD"
    },
    "827": {
      "op": "MSTORE"
    },
    "828": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7169,
        7175
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "829": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "831": {
      "op": "DUP1"
    },
    "832": {
      "op": "MLOAD"
    },
    "833": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "835": {
      "op": "PUSH3",
      "value": "0x1C0D"
    },
    "839": {
      "op": "DUP4"
    },
    "840": {
      "op": "CODECOPY"
    },
    "841": {
      "op": "DUP2"
    },
    "842": {
      "op": "MLOAD"
    },
    "843": {
      "op": "SWAP2"
    },
    "844": {
      "op": "MSTORE"
    },
    "845": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7216,
        7258
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "846": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "848": {
      "op": "ADD"
    },
    "849": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7216,
        7258
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "850": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7216,
        7258
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "852": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7216,
        7258
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "853": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7216,
        7258
      ],
      "op": "DUP1",
      "path": "49"
    },
    "854": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7216,
        7258
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "855": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7216,
        7258
      ],
      "op": "SUB",
      "path": "49"
    },
    "856": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7216,
        7258
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "857": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7216,
        7258
      ],
      "op": "LOG1",
      "path": "49"
    },
    "858": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7141,
        7265
      ],
      "op": "POP",
      "path": "49"
    },
    "859": {
      "fn": "CLFactory.UpdateCLHAPI",
      "offset": [
        7081,
        7265
      ],
      "op": "POP",
      "path": "49"
    },
    "860": {
      "fn": "CLFactory.UpdateCLHAPI",
      "jump": "o",
      "offset": [
        7081,
        7265
      ],
      "op": "JUMP",
      "path": "49"
    },
    "861": {
      "fn": "CLFactory.Init",
      "offset": [
        2577,
        3174
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "862": {
      "offset": [
        4418,
        4431
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "864": {
      "fn": "CLFactory.Init",
      "offset": [
        4418,
        4431
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "865": {
      "offset": [
        295,
        296
      ],
      "op": "PUSH1",
      "path": "48",
      "value": "0x1"
    },
    "867": {
      "fn": "CLFactory.Init",
      "offset": [
        295,
        296
      ],
      "op": "SWAP1",
      "path": "48"
    },
    "868": {
      "offset": [
        4418,
        4431
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x100"
    },
    "871": {
      "fn": "CLFactory.Init",
      "offset": [
        4418,
        4431
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "872": {
      "fn": "CLFactory.Init",
      "offset": [
        4418,
        4431
      ],
      "op": "DIV",
      "path": "1"
    },
    "873": {
      "fn": "CLFactory.Init",
      "offset": [
        4418,
        4431
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "875": {
      "branch": 42,
      "fn": "CLFactory.Init",
      "offset": [
        4418,
        4431
      ],
      "op": "AND",
      "path": "1"
    },
    "876": {
      "offset": [
        4417,
        4431
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "877": {
      "offset": [
        4417,
        4457
      ],
      "op": "DUP1",
      "path": "1"
    },
    "878": {
      "fn": "CLFactory.Init",
      "offset": [
        4417,
        4457
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "879": {
      "fn": "CLFactory.Init",
      "offset": [
        4417,
        4457
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0x380"
    },
    "883": {
      "branch": 42,
      "offset": [
        4417,
        4457
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "884": {
      "op": "POP"
    },
    "885": {
      "offset": [
        4435,
        4447
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "887": {
      "fn": "CLFactory.Init",
      "offset": [
        4435,
        4447
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "888": {
      "offset": [
        4435,
        4457
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "890": {
      "fn": "CLFactory.Init",
      "offset": [
        4435,
        4457
      ],
      "op": "DUP1",
      "path": "1"
    },
    "891": {
      "fn": "CLFactory.Init",
      "offset": [
        4435,
        4457
      ],
      "op": "DUP4",
      "path": "1"
    },
    "892": {
      "fn": "CLFactory.Init",
      "offset": [
        4435,
        4457
      ],
      "op": "AND",
      "path": "1"
    },
    "893": {
      "offset": [
        4435,
        4447
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "894": {
      "fn": "CLFactory.Init",
      "offset": [
        4435,
        4447
      ],
      "op": "AND",
      "path": "1"
    },
    "895": {
      "offset": [
        4435,
        4457
      ],
      "op": "LT",
      "path": "1"
    },
    "896": {
      "offset": [
        4417,
        4457
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "897": {
      "offset": [
        4409,
        4508
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0x3E9"
    },
    "901": {
      "offset": [
        4409,
        4508
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "902": {
      "fn": "CLFactory.Init",
      "offset": [
        4409,
        4508
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "904": {
      "fn": "CLFactory.Init",
      "offset": [
        4409,
        4508
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "905": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "909": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "911": {
      "op": "SHL"
    },
    "912": {
      "offset": [
        4409,
        4508
      ],
      "op": "DUP2",
      "path": "1"
    },
    "913": {
      "fn": "CLFactory.Init",
      "offset": [
        4409,
        4508
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "914": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "916": {
      "offset": [
        4409,
        4508
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "918": {
      "fn": "CLFactory.Init",
      "offset": [
        4409,
        4508
      ],
      "op": "DUP3",
      "path": "1"
    },
    "919": {
      "fn": "CLFactory.Init",
      "offset": [
        4409,
        4508
      ],
      "op": "ADD",
      "path": "1"
    },
    "920": {
      "op": "MSTORE"
    },
    "921": {
      "op": "PUSH1",
      "value": "0x2E"
    },
    "923": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "925": {
      "op": "DUP3"
    },
    "926": {
      "op": "ADD"
    },
    "927": {
      "op": "MSTORE"
    },
    "928": {
      "op": "PUSH32",
      "value": "0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561"
    },
    "961": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "963": {
      "op": "DUP3"
    },
    "964": {
      "op": "ADD"
    },
    "965": {
      "op": "MSTORE"
    },
    "966": {
      "op": "PUSH14",
      "value": "0x191E481A5B9A5D1A585B1A5E9959"
    },
    "981": {
      "op": "PUSH1",
      "value": "0x92"
    },
    "983": {
      "op": "SHL"
    },
    "984": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "986": {
      "op": "DUP3"
    },
    "987": {
      "op": "ADD"
    },
    "988": {
      "op": "MSTORE"
    },
    "989": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "991": {
      "op": "ADD"
    },
    "992": {
      "offset": [
        4409,
        4508
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "993": {
      "fn": "CLFactory.Init",
      "offset": [
        4409,
        4508
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "995": {
      "fn": "CLFactory.Init",
      "offset": [
        4409,
        4508
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "996": {
      "fn": "CLFactory.Init",
      "offset": [
        4409,
        4508
      ],
      "op": "DUP1",
      "path": "1"
    },
    "997": {
      "fn": "CLFactory.Init",
      "offset": [
        4409,
        4508
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "998": {
      "fn": "CLFactory.Init",
      "offset": [
        4409,
        4508
      ],
      "op": "SUB",
      "path": "1"
    },
    "999": {
      "fn": "CLFactory.Init",
      "offset": [
        4409,
        4508
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1000": {
      "fn": "CLFactory.Init",
      "offset": [
        4409,
        4508
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "1"
    },
    "1001": {
      "fn": "CLFactory.Init",
      "offset": [
        4409,
        4508
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1002": {
      "offset": [
        4518,
        4530
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1004": {
      "offset": [
        4518,
        4540
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1005": {
      "fn": "CLFactory.Init",
      "offset": [
        4518,
        4540
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1006": {
      "op": "PUSH2",
      "value": "0xFFFF"
    },
    "1009": {
      "op": "NOT"
    },
    "1010": {
      "offset": [
        4550,
        4570
      ],
      "op": "AND",
      "path": "1"
    },
    "1011": {
      "offset": [
        4518,
        4540
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "1013": {
      "fn": "CLFactory.Init",
      "offset": [
        4518,
        4540
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1014": {
      "fn": "CLFactory.Init",
      "offset": [
        4518,
        4540
      ],
      "op": "AND",
      "path": "1"
    },
    "1015": {
      "offset": [
        4550,
        4570
      ],
      "op": "OR",
      "path": "1"
    },
    "1016": {
      "offset": [
        4518,
        4540
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x100"
    },
    "1019": {
      "offset": [
        4550,
        4570
      ],
      "op": "OR",
      "path": "1"
    },
    "1020": {
      "fn": "CLFactory.Init",
      "offset": [
        4550,
        4570
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1021": {
      "fn": "CLFactory.Init",
      "offset": [
        4550,
        4570
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "1022": {
      "fn": "CLFactory.Init",
      "offset": [
        2833,
        2842
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 3,
      "value": "0x7E"
    },
    "1024": {
      "fn": "CLFactory.Init",
      "offset": [
        2833,
        2864
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1025": {
      "fn": "CLFactory.Init",
      "offset": [
        2833,
        2864
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "1026": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1028": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1030": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1032": {
      "op": "SHL"
    },
    "1033": {
      "op": "SUB"
    },
    "1034": {
      "fn": "CLFactory.Init",
      "offset": [
        2833,
        2864
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1035": {
      "fn": "CLFactory.Init",
      "offset": [
        2833,
        2864
      ],
      "op": "DUP7",
      "path": "49"
    },
    "1036": {
      "fn": "CLFactory.Init",
      "offset": [
        2833,
        2864
      ],
      "op": "AND",
      "path": "49"
    },
    "1037": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1039": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1041": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1043": {
      "op": "SHL"
    },
    "1044": {
      "op": "SUB"
    },
    "1045": {
      "op": "NOT"
    },
    "1046": {
      "fn": "CLFactory.Init",
      "offset": [
        2833,
        2864
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "1047": {
      "fn": "CLFactory.Init",
      "offset": [
        2833,
        2864
      ],
      "op": "DUP4",
      "path": "49"
    },
    "1048": {
      "fn": "CLFactory.Init",
      "offset": [
        2833,
        2864
      ],
      "op": "AND",
      "path": "49"
    },
    "1049": {
      "fn": "CLFactory.Init",
      "offset": [
        2833,
        2864
      ],
      "op": "OR",
      "path": "49"
    },
    "1050": {
      "fn": "CLFactory.Init",
      "offset": [
        2833,
        2864
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1051": {
      "fn": "CLFactory.Init",
      "offset": [
        2833,
        2864
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "1052": {
      "fn": "CLFactory.Init",
      "offset": [
        2833,
        2864
      ],
      "op": "SSTORE",
      "path": "49"
    },
    "1053": {
      "fn": "CLFactory.Init",
      "offset": [
        2875,
        2892
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 4,
      "value": "0x71"
    },
    "1055": {
      "fn": "CLFactory.Init",
      "offset": [
        2875,
        2913
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1056": {
      "fn": "CLFactory.Init",
      "offset": [
        2875,
        2913
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "1057": {
      "fn": "CLFactory.Init",
      "offset": [
        2875,
        2913
      ],
      "op": "DUP11",
      "path": "49"
    },
    "1058": {
      "fn": "CLFactory.Init",
      "offset": [
        2875,
        2913
      ],
      "op": "DUP5",
      "path": "49"
    },
    "1059": {
      "fn": "CLFactory.Init",
      "offset": [
        2875,
        2913
      ],
      "op": "AND",
      "path": "49"
    },
    "1060": {
      "fn": "CLFactory.Init",
      "offset": [
        2875,
        2913
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1061": {
      "fn": "CLFactory.Init",
      "offset": [
        2875,
        2913
      ],
      "op": "DUP4",
      "path": "49"
    },
    "1062": {
      "fn": "CLFactory.Init",
      "offset": [
        2875,
        2913
      ],
      "op": "AND",
      "path": "49"
    },
    "1063": {
      "fn": "CLFactory.Init",
      "offset": [
        2875,
        2913
      ],
      "op": "OR",
      "path": "49"
    },
    "1064": {
      "fn": "CLFactory.Init",
      "offset": [
        2875,
        2913
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1065": {
      "fn": "CLFactory.Init",
      "offset": [
        2875,
        2913
      ],
      "op": "SSTORE",
      "path": "49"
    },
    "1066": {
      "fn": "CLFactory.Init",
      "offset": [
        2923,
        2936
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 5,
      "value": "0x72"
    },
    "1068": {
      "fn": "CLFactory.Init",
      "offset": [
        2923,
        2953
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1069": {
      "fn": "CLFactory.Init",
      "offset": [
        2923,
        2953
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "1070": {
      "fn": "CLFactory.Init",
      "offset": [
        2923,
        2953
      ],
      "op": "DUP10",
      "path": "49"
    },
    "1071": {
      "fn": "CLFactory.Init",
      "offset": [
        2923,
        2953
      ],
      "op": "DUP5",
      "path": "49"
    },
    "1072": {
      "fn": "CLFactory.Init",
      "offset": [
        2923,
        2953
      ],
      "op": "AND",
      "path": "49"
    },
    "1073": {
      "fn": "CLFactory.Init",
      "offset": [
        2923,
        2953
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1074": {
      "fn": "CLFactory.Init",
      "offset": [
        2923,
        2953
      ],
      "op": "DUP4",
      "path": "49"
    },
    "1075": {
      "fn": "CLFactory.Init",
      "offset": [
        2923,
        2953
      ],
      "op": "AND",
      "path": "49"
    },
    "1076": {
      "fn": "CLFactory.Init",
      "offset": [
        2923,
        2953
      ],
      "op": "OR",
      "path": "49"
    },
    "1077": {
      "fn": "CLFactory.Init",
      "offset": [
        2923,
        2953
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1078": {
      "fn": "CLFactory.Init",
      "offset": [
        2923,
        2953
      ],
      "op": "SSTORE",
      "path": "49"
    },
    "1079": {
      "fn": "CLFactory.Init",
      "offset": [
        2963,
        2980
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 6,
      "value": "0x70"
    },
    "1081": {
      "fn": "CLFactory.Init",
      "offset": [
        2963,
        3001
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1082": {
      "fn": "CLFactory.Init",
      "offset": [
        2963,
        3001
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "1083": {
      "fn": "CLFactory.Init",
      "offset": [
        2963,
        3001
      ],
      "op": "DUP9",
      "path": "49"
    },
    "1084": {
      "fn": "CLFactory.Init",
      "offset": [
        2963,
        3001
      ],
      "op": "DUP5",
      "path": "49"
    },
    "1085": {
      "fn": "CLFactory.Init",
      "offset": [
        2963,
        3001
      ],
      "op": "AND",
      "path": "49"
    },
    "1086": {
      "fn": "CLFactory.Init",
      "offset": [
        2963,
        3001
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1087": {
      "fn": "CLFactory.Init",
      "offset": [
        2963,
        3001
      ],
      "op": "DUP4",
      "path": "49"
    },
    "1088": {
      "fn": "CLFactory.Init",
      "offset": [
        2963,
        3001
      ],
      "op": "AND",
      "path": "49"
    },
    "1089": {
      "fn": "CLFactory.Init",
      "offset": [
        2963,
        3001
      ],
      "op": "OR",
      "path": "49"
    },
    "1090": {
      "fn": "CLFactory.Init",
      "offset": [
        2963,
        3001
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1091": {
      "fn": "CLFactory.Init",
      "offset": [
        2963,
        3001
      ],
      "op": "SSTORE",
      "path": "49"
    },
    "1092": {
      "fn": "CLFactory.Init",
      "offset": [
        3011,
        3017
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 7,
      "value": "0x73"
    },
    "1094": {
      "fn": "CLFactory.Init",
      "offset": [
        3011,
        3027
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1095": {
      "fn": "CLFactory.Init",
      "offset": [
        3011,
        3027
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "1096": {
      "fn": "CLFactory.Init",
      "offset": [
        3011,
        3027
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "1097": {
      "fn": "CLFactory.Init",
      "offset": [
        3011,
        3027
      ],
      "op": "DUP8",
      "path": "49"
    },
    "1098": {
      "fn": "CLFactory.Init",
      "offset": [
        3011,
        3027
      ],
      "op": "AND",
      "path": "49"
    },
    "1099": {
      "fn": "CLFactory.Init",
      "offset": [
        3011,
        3027
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "1100": {
      "fn": "CLFactory.Init",
      "offset": [
        3011,
        3027
      ],
      "op": "DUP3",
      "path": "49"
    },
    "1101": {
      "fn": "CLFactory.Init",
      "offset": [
        3011,
        3027
      ],
      "op": "AND",
      "path": "49"
    },
    "1102": {
      "fn": "CLFactory.Init",
      "offset": [
        3011,
        3027
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "1103": {
      "fn": "CLFactory.Init",
      "offset": [
        3011,
        3027
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1104": {
      "fn": "CLFactory.Init",
      "offset": [
        3011,
        3027
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "1105": {
      "fn": "CLFactory.Init",
      "offset": [
        3011,
        3027
      ],
      "op": "OR",
      "path": "49"
    },
    "1106": {
      "fn": "CLFactory.Init",
      "offset": [
        3011,
        3027
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1107": {
      "fn": "CLFactory.Init",
      "offset": [
        3011,
        3027
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "1108": {
      "fn": "CLFactory.Init",
      "offset": [
        3011,
        3027
      ],
      "op": "SSTORE",
      "path": "49"
    },
    "1109": {
      "fn": "CLFactory.Init",
      "offset": [
        3038,
        3044
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 8,
      "value": "0x65"
    },
    "1111": {
      "fn": "CLFactory.Init",
      "offset": [
        3038,
        3048
      ],
      "op": "DUP3",
      "path": "49"
    },
    "1112": {
      "fn": "CLFactory.Init",
      "offset": [
        3038,
        3048
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1113": {
      "fn": "CLFactory.Init",
      "offset": [
        3038,
        3048
      ],
      "op": "SSTORE",
      "path": "49"
    },
    "1114": {
      "fn": "CLFactory.Init",
      "offset": [
        3058,
        3074
      ],
      "op": "DUP2",
      "path": "49",
      "statement": 9
    },
    "1115": {
      "fn": "CLFactory.Init",
      "offset": [
        3058,
        3074
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1116": {
      "fn": "CLFactory.Init",
      "offset": [
        3058,
        3074
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "1117": {
      "fn": "CLFactory.Init",
      "offset": [
        3058,
        3074
      ],
      "op": "PUSH32",
      "path": "49",
      "value": "0xAE0C3F803428DD501929F276001A4B5FD1D262991BBB98E97B4B7D918A5AF6DC"
    },
    "1150": {
      "fn": "CLFactory.Init",
      "offset": [
        3058,
        3099
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1151": {
      "fn": "CLFactory.Init",
      "offset": [
        3058,
        3099
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "1152": {
      "fn": "CLFactory.Init",
      "offset": [
        3058,
        3099
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1153": {
      "fn": "CLFactory.Init",
      "offset": [
        3058,
        3099
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "1154": {
      "fn": "CLFactory.Init",
      "offset": [
        3058,
        3099
      ],
      "op": "AND",
      "path": "49"
    },
    "1155": {
      "fn": "CLFactory.Init",
      "offset": [
        3058,
        3099
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1156": {
      "fn": "CLFactory.Init",
      "offset": [
        3058,
        3099
      ],
      "op": "SSTORE",
      "path": "49"
    },
    "1157": {
      "fn": "CLFactory.Init",
      "offset": [
        3109,
        3117
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 10,
      "value": "0x7F"
    },
    "1159": {
      "fn": "CLFactory.Init",
      "offset": [
        3058,
        3074
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x20"
    },
    "1161": {
      "fn": "CLFactory.Init",
      "offset": [
        3109,
        3131
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "1162": {
      "fn": "CLFactory.Init",
      "offset": [
        3109,
        3131
      ],
      "op": "PUSH32",
      "path": "49",
      "value": "0x18B3A2798575D3A428C1F52E616A74B071539854E037E7D7C535365D474F4033"
    },
    "1195": {
      "fn": "CLFactory.Init",
      "offset": [
        3109,
        3140
      ],
      "op": "SSTORE",
      "path": "49"
    },
    "1196": {
      "fn": "CLFactory.Init",
      "offset": [
        3151,
        3167
      ],
      "op": "PUSH3",
      "path": "49",
      "statement": 11,
      "value": "0x4B5"
    },
    "1200": {
      "fn": "CLFactory.Init",
      "offset": [
        3151,
        3165
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0xB80"
    },
    "1204": {
      "fn": "CLFactory.Init",
      "jump": "i",
      "offset": [
        3151,
        3167
      ],
      "op": "JUMP",
      "path": "49"
    },
    "1205": {
      "fn": "CLFactory.Init",
      "offset": [
        3151,
        3167
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1206": {
      "offset": [
        4607,
        4612
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1208": {
      "offset": [
        4591,
        4612
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1209": {
      "fn": "CLFactory.Init",
      "offset": [
        4591,
        4612
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1210": {
      "op": "PUSH2",
      "value": "0xFF00"
    },
    "1213": {
      "op": "NOT"
    },
    "1214": {
      "offset": [
        4591,
        4612
      ],
      "op": "AND",
      "path": "1"
    },
    "1215": {
      "fn": "CLFactory.Init",
      "offset": [
        4591,
        4612
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1216": {
      "fn": "CLFactory.Init",
      "offset": [
        4591,
        4612
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "1217": {
      "offset": [
        4627,
        4647
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1219": {
      "fn": "CLFactory.Init",
      "offset": [
        4627,
        4647
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1220": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1222": {
      "op": "DUP3"
    },
    "1223": {
      "op": "AND"
    },
    "1224": {
      "op": "DUP2"
    },
    "1225": {
      "op": "MSTORE"
    },
    "1226": {
      "offset": [
        4627,
        4647
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498"
    },
    "1259": {
      "fn": "CLFactory.Init",
      "offset": [
        4627,
        4647
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1260": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1262": {
      "op": "ADD"
    },
    "1263": {
      "offset": [
        4627,
        4647
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1265": {
      "fn": "CLFactory.Init",
      "offset": [
        4627,
        4647
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1266": {
      "fn": "CLFactory.Init",
      "offset": [
        4627,
        4647
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1267": {
      "fn": "CLFactory.Init",
      "offset": [
        4627,
        4647
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1268": {
      "fn": "CLFactory.Init",
      "offset": [
        4627,
        4647
      ],
      "op": "SUB",
      "path": "1"
    },
    "1269": {
      "fn": "CLFactory.Init",
      "offset": [
        4627,
        4647
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1270": {
      "fn": "CLFactory.Init",
      "offset": [
        4627,
        4647
      ],
      "op": "LOG1",
      "path": "1"
    },
    "1271": {
      "fn": "CLFactory.Init",
      "offset": [
        2577,
        3174
      ],
      "op": "POP",
      "path": "49"
    },
    "1272": {
      "fn": "CLFactory.Init",
      "offset": [
        2577,
        3174
      ],
      "op": "POP",
      "path": "49"
    },
    "1273": {
      "fn": "CLFactory.Init",
      "offset": [
        2577,
        3174
      ],
      "op": "POP",
      "path": "49"
    },
    "1274": {
      "fn": "CLFactory.Init",
      "offset": [
        2577,
        3174
      ],
      "op": "POP",
      "path": "49"
    },
    "1275": {
      "fn": "CLFactory.Init",
      "offset": [
        2577,
        3174
      ],
      "op": "POP",
      "path": "49"
    },
    "1276": {
      "fn": "CLFactory.Init",
      "offset": [
        2577,
        3174
      ],
      "op": "POP",
      "path": "49"
    },
    "1277": {
      "fn": "CLFactory.Init",
      "jump": "o",
      "offset": [
        2577,
        3174
      ],
      "op": "JUMP",
      "path": "49"
    },
    "1278": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        2071,
        2172
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1279": {
      "offset": [
        1334,
        1347
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0x508"
    },
    "1283": {
      "offset": [
        1334,
        1345
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0xB24"
    },
    "1287": {
      "jump": "i",
      "offset": [
        1334,
        1347
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1288": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        1334,
        1347
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1289": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        2135,
        2165
      ],
      "op": "PUSH3",
      "path": "0",
      "statement": 12,
      "value": "0x514"
    },
    "1293": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        2162,
        2163
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1295": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        2135,
        2153
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0xBB4"
    },
    "1299": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "jump": "i",
      "offset": [
        2135,
        2165
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1300": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "offset": [
        2135,
        2165
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1301": {
      "fn": "OwnableUpgradeable.renounceOwnership",
      "jump": "o",
      "offset": [
        2071,
        2172
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1302": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        5955,
        6069
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1303": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6045
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 13,
      "value": "0x7E"
    },
    "1305": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6045
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "1306": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "1308": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1309": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1310": {
      "op": "PUSH4",
      "value": "0x5C60DA1B"
    },
    "1315": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1317": {
      "op": "SHL"
    },
    "1318": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1319": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "1320": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1321": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1322": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6010,
        6017
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1324": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6010,
        6017
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "1325": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1327": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1329": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1331": {
      "op": "SHL"
    },
    "1332": {
      "op": "SUB"
    },
    "1333": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6045
      ],
      "op": "AND",
      "path": "49"
    },
    "1334": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6045
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "1335": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6060
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0x5C60DA1B"
    },
    "1340": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6060
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "1341": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "1343": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1344": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "DUP4",
      "path": "49"
    },
    "1345": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "ADD",
      "path": "49"
    },
    "1346": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "1347": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x20"
    },
    "1349": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "1350": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "1351": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1352": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "DUP3",
      "path": "49"
    },
    "1353": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1354": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "SUB",
      "path": "49"
    },
    "1355": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "ADD",
      "path": "49"
    },
    "1356": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1357": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6045
      ],
      "op": "DUP7",
      "path": "49"
    },
    "1358": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "GAS",
      "path": "49"
    },
    "1359": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "STATICCALL",
      "path": "49"
    },
    "1360": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "1361": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1362": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "1363": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x561"
    },
    "1367": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "1368": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "RETURNDATASIZE",
      "path": "49"
    },
    "1369": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1371": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1372": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "RETURNDATACOPY",
      "path": "49"
    },
    "1373": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "RETURNDATASIZE",
      "path": "49"
    },
    "1374": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1376": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "REVERT",
      "path": "49"
    },
    "1377": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1378": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "POP",
      "path": "49"
    },
    "1379": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "POP",
      "path": "49"
    },
    "1380": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "POP",
      "path": "49"
    },
    "1381": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "POP",
      "path": "49"
    },
    "1382": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "1384": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1385": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "RETURNDATASIZE",
      "path": "49"
    },
    "1386": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x1F"
    },
    "1388": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "NOT",
      "path": "49"
    },
    "1389": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x1F"
    },
    "1391": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "DUP3",
      "path": "49"
    },
    "1392": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "ADD",
      "path": "49"
    },
    "1393": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "AND",
      "path": "49"
    },
    "1394": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "DUP3",
      "path": "49"
    },
    "1395": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "ADD",
      "path": "49"
    },
    "1396": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1397": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "1399": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "1400": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "POP",
      "path": "49"
    },
    "1401": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1402": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "ADD",
      "path": "49"
    },
    "1403": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1404": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x587"
    },
    "1408": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "1409": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1410": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x1006"
    },
    "1414": {
      "fn": "CLFactory.getCLHImplementation",
      "jump": "i",
      "offset": [
        6036,
        6062
      ],
      "op": "JUMP",
      "path": "49"
    },
    "1415": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6036,
        6062
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1416": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6029,
        6062
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1417": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        6029,
        6062
      ],
      "op": "POP",
      "path": "49"
    },
    "1418": {
      "fn": "CLFactory.getCLHImplementation",
      "offset": [
        5955,
        6069
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1419": {
      "fn": "CLFactory.getCLHImplementation",
      "jump": "o",
      "offset": [
        5955,
        6069
      ],
      "op": "JUMP",
      "path": "49"
    },
    "1420": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6466,
        6727
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1421": {
      "offset": [
        1334,
        1347
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0x596"
    },
    "1425": {
      "offset": [
        1334,
        1345
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0xB24"
    },
    "1429": {
      "jump": "i",
      "offset": [
        1334,
        1347
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1430": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        1334,
        1347
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1431": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6576,
        6593
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x71"
    },
    "1433": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6576,
        6593
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1434": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6576,
        6593
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "1435": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1437": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1439": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1441": {
      "op": "SHL"
    },
    "1442": {
      "op": "SUB"
    },
    "1443": {
      "op": "NOT"
    },
    "1444": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6603,
        6641
      ],
      "op": "DUP2",
      "path": "49",
      "statement": 14
    },
    "1445": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6603,
        6641
      ],
      "op": "AND",
      "path": "49"
    },
    "1446": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1448": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1450": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1452": {
      "op": "SHL"
    },
    "1453": {
      "op": "SUB"
    },
    "1454": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6603,
        6641
      ],
      "op": "DUP5",
      "path": "49"
    },
    "1455": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6603,
        6641
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1456": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6603,
        6641
      ],
      "op": "AND",
      "path": "49"
    },
    "1457": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6603,
        6641
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "1458": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6603,
        6641
      ],
      "op": "DUP3",
      "path": "49"
    },
    "1459": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6603,
        6641
      ],
      "op": "OR",
      "path": "49"
    },
    "1460": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6603,
        6641
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1461": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6603,
        6641
      ],
      "op": "SWAP4",
      "path": "49"
    },
    "1462": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6603,
        6641
      ],
      "op": "SSTORE",
      "path": "49"
    },
    "1463": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6656,
        6720
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 15,
      "value": "0x40"
    },
    "1465": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6656,
        6720
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1466": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6656,
        6720
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1467": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1469": {
      "op": "DUP1"
    },
    "1470": {
      "op": "DUP3"
    },
    "1471": {
      "op": "MSTORE"
    },
    "1472": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "1474": {
      "op": "SWAP1"
    },
    "1475": {
      "op": "DUP3"
    },
    "1476": {
      "op": "ADD"
    },
    "1477": {
      "op": "MSTORE"
    },
    "1478": {
      "op": "PUSH17",
      "value": "0x10D313155CD95C93585B9859D95B595B9D"
    },
    "1496": {
      "op": "PUSH1",
      "value": "0x7A"
    },
    "1498": {
      "op": "SHL"
    },
    "1499": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "1501": {
      "op": "DUP3"
    },
    "1502": {
      "op": "ADD"
    },
    "1503": {
      "op": "MSTORE"
    },
    "1504": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6576,
        6593
      ],
      "op": "SWAP4",
      "path": "49"
    },
    "1505": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6576,
        6593
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1506": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6576,
        6593
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "1507": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6576,
        6593
      ],
      "op": "AND",
      "path": "49"
    },
    "1508": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1510": {
      "op": "DUP5"
    },
    "1511": {
      "op": "ADD"
    },
    "1512": {
      "op": "DUP2"
    },
    "1513": {
      "op": "SWAP1"
    },
    "1514": {
      "op": "MSTORE"
    },
    "1515": {
      "op": "SWAP2"
    },
    "1516": {
      "op": "DUP4"
    },
    "1517": {
      "op": "ADD"
    },
    "1518": {
      "op": "MSTORE"
    },
    "1519": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6576,
        6593
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1520": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1522": {
      "op": "DUP1"
    },
    "1523": {
      "op": "MLOAD"
    },
    "1524": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1526": {
      "op": "PUSH3",
      "value": "0x1C0D"
    },
    "1530": {
      "op": "DUP4"
    },
    "1531": {
      "op": "CODECOPY"
    },
    "1532": {
      "op": "DUP2"
    },
    "1533": {
      "op": "MLOAD"
    },
    "1534": {
      "op": "SWAP2"
    },
    "1535": {
      "op": "MSTORE"
    },
    "1536": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6656,
        6720
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1537": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1539": {
      "op": "ADD"
    },
    "1540": {
      "fn": "CLFactory.UpdateCLLUserManagement",
      "offset": [
        6656,
        6720
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x351"
    },
    "1544": {
      "op": "JUMP"
    },
    "1545": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6791,
        7024
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1546": {
      "offset": [
        1334,
        1347
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0x613"
    },
    "1550": {
      "offset": [
        1334,
        1345
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0xB24"
    },
    "1554": {
      "jump": "i",
      "offset": [
        1334,
        1347
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1555": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        1334,
        1347
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1556": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6893,
        6906
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x72"
    },
    "1558": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6893,
        6906
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1559": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6893,
        6906
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "1560": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1562": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1564": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1566": {
      "op": "SHL"
    },
    "1567": {
      "op": "SUB"
    },
    "1568": {
      "op": "NOT"
    },
    "1569": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6916,
        6946
      ],
      "op": "DUP2",
      "path": "49",
      "statement": 16
    },
    "1570": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6916,
        6946
      ],
      "op": "AND",
      "path": "49"
    },
    "1571": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1573": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1575": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1577": {
      "op": "SHL"
    },
    "1578": {
      "op": "SUB"
    },
    "1579": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6916,
        6946
      ],
      "op": "DUP5",
      "path": "49"
    },
    "1580": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6916,
        6946
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1581": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6916,
        6946
      ],
      "op": "AND",
      "path": "49"
    },
    "1582": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6916,
        6946
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "1583": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6916,
        6946
      ],
      "op": "DUP3",
      "path": "49"
    },
    "1584": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6916,
        6946
      ],
      "op": "OR",
      "path": "49"
    },
    "1585": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6916,
        6946
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1586": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6916,
        6946
      ],
      "op": "SWAP4",
      "path": "49"
    },
    "1587": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6916,
        6946
      ],
      "op": "SSTORE",
      "path": "49"
    },
    "1588": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6961,
        7017
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 17,
      "value": "0x40"
    },
    "1590": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6961,
        7017
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1591": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6961,
        7017
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1592": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1594": {
      "op": "DUP1"
    },
    "1595": {
      "op": "DUP3"
    },
    "1596": {
      "op": "MSTORE"
    },
    "1597": {
      "op": "PUSH1",
      "value": "0xD"
    },
    "1599": {
      "op": "SWAP1"
    },
    "1600": {
      "op": "DUP3"
    },
    "1601": {
      "op": "ADD"
    },
    "1602": {
      "op": "MSTORE"
    },
    "1603": {
      "op": "PUSH13",
      "value": "0x434C4C476F7665726E616E6365"
    },
    "1617": {
      "op": "PUSH1",
      "value": "0x98"
    },
    "1619": {
      "op": "SHL"
    },
    "1620": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "1622": {
      "op": "DUP3"
    },
    "1623": {
      "op": "ADD"
    },
    "1624": {
      "op": "MSTORE"
    },
    "1625": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6893,
        6906
      ],
      "op": "SWAP4",
      "path": "49"
    },
    "1626": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6893,
        6906
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1627": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6893,
        6906
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "1628": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6893,
        6906
      ],
      "op": "AND",
      "path": "49"
    },
    "1629": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1631": {
      "op": "DUP5"
    },
    "1632": {
      "op": "ADD"
    },
    "1633": {
      "op": "DUP2"
    },
    "1634": {
      "op": "SWAP1"
    },
    "1635": {
      "op": "MSTORE"
    },
    "1636": {
      "op": "SWAP2"
    },
    "1637": {
      "op": "DUP4"
    },
    "1638": {
      "op": "ADD"
    },
    "1639": {
      "op": "MSTORE"
    },
    "1640": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6893,
        6906
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1641": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1643": {
      "op": "DUP1"
    },
    "1644": {
      "op": "MLOAD"
    },
    "1645": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1647": {
      "op": "PUSH3",
      "value": "0x1C0D"
    },
    "1651": {
      "op": "DUP4"
    },
    "1652": {
      "op": "CODECOPY"
    },
    "1653": {
      "op": "DUP2"
    },
    "1654": {
      "op": "MLOAD"
    },
    "1655": {
      "op": "SWAP2"
    },
    "1656": {
      "op": "MSTORE"
    },
    "1657": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6961,
        7017
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "1658": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1660": {
      "op": "ADD"
    },
    "1661": {
      "fn": "CLFactory.UpdateCLLGovernance",
      "offset": [
        6961,
        7017
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x351"
    },
    "1665": {
      "op": "JUMP"
    },
    "1666": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5890
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1667": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4258,
        4268
      ],
      "op": "CALLER",
      "path": "49"
    },
    "1668": {
      "offset": [
        339,
        372
      ],
      "op": "PUSH32",
      "path": "48",
      "value": "0xB93889D934070956C00846F50F9A10A747BD194BBA2F2E78A86D0C02386FDB1"
    },
    "1701": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4301,
        4334
      ],
      "op": "DUP8",
      "path": "49",
      "statement": 18
    },
    "1702": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4301,
        4334
      ],
      "op": "EQ",
      "path": "49"
    },
    "1703": {
      "branch": 36,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4301,
        4334
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1704": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4301,
        4380
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x6D1"
    },
    "1708": {
      "branch": 36,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4301,
        4380
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "1709": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4301,
        4380
      ],
      "op": "POP",
      "path": "49"
    },
    "1710": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4371,
        4380
      ],
      "op": "DUP7",
      "path": "49"
    },
    "1711": {
      "offset": [
        411,
        441
      ],
      "op": "PUSH32",
      "path": "48",
      "value": "0x16591A696FEE5867425B3DEE9FC0160A6C1BAEF77835BC3D204314106D639298"
    },
    "1744": {
      "branch": 37,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4350,
        4380
      ],
      "op": "EQ",
      "path": "49"
    },
    "1745": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4301,
        4380
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1746": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4301,
        4432
      ],
      "op": "DUP1",
      "path": "49"
    },
    "1747": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4301,
        4432
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x6FC"
    },
    "1751": {
      "branch": 37,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4301,
        4432
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "1752": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4301,
        4432
      ],
      "op": "POP",
      "path": "49"
    },
    "1753": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4423,
        4432
      ],
      "op": "DUP7",
      "path": "49"
    },
    "1754": {
      "offset": [
        486,
        522
      ],
      "op": "PUSH32",
      "path": "48",
      "value": "0xA0786F6450D5FB3298B8425105C1B75E6E01A1FF86CDABEA29909CDB0B4C83A7"
    },
    "1787": {
      "branch": 38,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4396,
        4432
      ],
      "op": "EQ",
      "path": "49"
    },
    "1788": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4301,
        4432
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1789": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4279,
        4482
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x74A"
    },
    "1793": {
      "branch": 38,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4279,
        4482
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "1794": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4279,
        4482
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "1796": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4279,
        4482
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1797": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1801": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1803": {
      "op": "SHL"
    },
    "1804": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4279,
        4482
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1805": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4279,
        4482
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "1806": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1808": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4279,
        4482
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "1810": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4279,
        4482
      ],
      "op": "DUP3",
      "path": "49"
    },
    "1811": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4279,
        4482
      ],
      "op": "ADD",
      "path": "49"
    },
    "1812": {
      "op": "MSTORE"
    },
    "1813": {
      "op": "PUSH1",
      "value": "0x17"
    },
    "1815": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1817": {
      "op": "DUP3"
    },
    "1818": {
      "op": "ADD"
    },
    "1819": {
      "op": "MSTORE"
    },
    "1820": {
      "op": "PUSH32",
      "value": "0x496E76616C696420476F7665726E616E63652054797065000000000000000000"
    },
    "1853": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1855": {
      "op": "DUP3"
    },
    "1856": {
      "op": "ADD"
    },
    "1857": {
      "op": "MSTORE"
    },
    "1858": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1860": {
      "op": "ADD"
    },
    "1861": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4279,
        4482
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x3E0"
    },
    "1865": {
      "op": "JUMP"
    },
    "1866": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4279,
        4482
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1867": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1869": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1871": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1873": {
      "op": "SHL"
    },
    "1874": {
      "op": "SUB"
    },
    "1875": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4497,
        4524
      ],
      "op": "DUP4",
      "path": "49"
    },
    "1876": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4497,
        4524
      ],
      "op": "AND",
      "path": "49"
    },
    "1877": {
      "branch": 39,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4497,
        4524
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "1878": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4493,
        5185
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x8CA"
    },
    "1882": {
      "branch": 39,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4493,
        5185
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "1883": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4550,
        4560
      ],
      "op": "DUP2",
      "path": "49",
      "statement": 19
    },
    "1884": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4550,
        4567
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1885": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4571,
        4573
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x41"
    },
    "1887": {
      "branch": 40,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4550,
        4573
      ],
      "op": "EQ",
      "path": "49"
    },
    "1888": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4541,
        4610
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x7AD"
    },
    "1892": {
      "branch": 40,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4541,
        4610
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "1893": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4541,
        4610
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "1895": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4541,
        4610
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1896": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1900": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1902": {
      "op": "SHL"
    },
    "1903": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4541,
        4610
      ],
      "op": "DUP2",
      "path": "49"
    },
    "1904": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4541,
        4610
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "1905": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1907": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4541,
        4610
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "1909": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4541,
        4610
      ],
      "op": "DUP3",
      "path": "49"
    },
    "1910": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4541,
        4610
      ],
      "op": "ADD",
      "path": "49"
    },
    "1911": {
      "op": "MSTORE"
    },
    "1912": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1914": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1916": {
      "op": "DUP3"
    },
    "1917": {
      "op": "ADD"
    },
    "1918": {
      "op": "MSTORE"
    },
    "1919": {
      "op": "PUSH32",
      "value": "0x437265617465434C483A20426164207369676E6174757265206C656E67746800"
    },
    "1952": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1954": {
      "op": "DUP3"
    },
    "1955": {
      "op": "ADD"
    },
    "1956": {
      "op": "MSTORE"
    },
    "1957": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1959": {
      "op": "ADD"
    },
    "1960": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4541,
        4610
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x3E0"
    },
    "1964": {
      "op": "JUMP"
    },
    "1965": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4541,
        4610
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "1966": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4691,
        4697
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 20,
      "value": "0x73"
    },
    "1968": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4691,
        4697
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "1969": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1971": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1973": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1975": {
      "op": "SHL"
    },
    "1976": {
      "op": "SUB"
    },
    "1977": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4691,
        4697
      ],
      "op": "AND",
      "path": "49"
    },
    "1978": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        4714
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0xE78FC36B"
    },
    "1983": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4736,
        4746
      ],
      "op": "DUP12",
      "path": "49"
    },
    "1984": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4768,
        4781
      ],
      "op": "DUP12",
      "path": "49"
    },
    "1985": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4803,
        4813
      ],
      "op": "DUP12",
      "path": "49"
    },
    "1986": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4835,
        4844
      ],
      "op": "DUP12",
      "path": "49"
    },
    "1987": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4866,
        4875
      ],
      "op": "DUP12",
      "path": "49"
    },
    "1988": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4691,
        4697
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "1990": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4866,
        4878
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x20"
    },
    "1992": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4866,
        4878
      ],
      "op": "MUL",
      "path": "49"
    },
    "1993": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4866,
        4878
      ],
      "op": "ADD",
      "path": "49"
    },
    "1994": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4866,
        4878
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "1995": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4900,
        4909
      ],
      "op": "DUP13",
      "path": "49"
    },
    "1996": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4910,
        4911
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x1"
    },
    "1998": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4900,
        4912
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x20"
    },
    "2000": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4900,
        4912
      ],
      "op": "MUL",
      "path": "49"
    },
    "2001": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4900,
        4912
      ],
      "op": "ADD",
      "path": "49"
    },
    "2002": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4900,
        4912
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "2003": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4934,
        4943
      ],
      "op": "DUP14",
      "path": "49"
    },
    "2004": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4944,
        4945
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x2"
    },
    "2006": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4934,
        4946
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x20"
    },
    "2008": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4934,
        4946
      ],
      "op": "MUL",
      "path": "49"
    },
    "2009": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4934,
        4946
      ],
      "op": "ADD",
      "path": "49"
    },
    "2010": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4934,
        4946
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "2011": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4968,
        4983
      ],
      "op": "DUP14",
      "path": "49"
    },
    "2012": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4984,
        4985
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "2014": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4968,
        4986
      ],
      "op": "DUP2",
      "path": "49"
    },
    "2015": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4968,
        4986
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "2016": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4968,
        4986
      ],
      "op": "DUP2",
      "path": "49"
    },
    "2017": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4968,
        4986
      ],
      "op": "LT",
      "path": "49"
    },
    "2018": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4968,
        4986
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x7F0"
    },
    "2022": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4968,
        4986
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "2023": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4968,
        4986
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x7F0"
    },
    "2027": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4968,
        4986
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x1026"
    },
    "2031": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        4968,
        4986
      ],
      "op": "JUMP",
      "path": "49"
    },
    "2032": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4968,
        4986
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "2033": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4968,
        4986
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x20"
    },
    "2035": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4968,
        4986
      ],
      "op": "MUL",
      "path": "49"
    },
    "2036": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4968,
        4986
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x20"
    },
    "2038": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4968,
        4986
      ],
      "op": "ADD",
      "path": "49"
    },
    "2039": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4968,
        4986
      ],
      "op": "ADD",
      "path": "49"
    },
    "2040": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4968,
        4986
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "2041": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5016,
        5020
      ],
      "op": "ADDRESS",
      "path": "49"
    },
    "2042": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5043,
        5053
      ],
      "op": "DUP13",
      "path": "49"
    },
    "2043": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "2045": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "2046": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "DUP12",
      "path": "49"
    },
    "2047": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "PUSH4",
      "path": "49",
      "value": "0xFFFFFFFF"
    },
    "2052": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "AND",
      "path": "49"
    },
    "2053": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0xE0"
    },
    "2055": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "SHL",
      "path": "49"
    },
    "2056": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "DUP2",
      "path": "49"
    },
    "2057": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "2058": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "2060": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "ADD",
      "path": "49"
    },
    "2061": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x821"
    },
    "2065": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "SWAP11",
      "path": "49"
    },
    "2066": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "SWAP10",
      "path": "49"
    },
    "2067": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "SWAP9",
      "path": "49"
    },
    "2068": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "SWAP8",
      "path": "49"
    },
    "2069": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "SWAP7",
      "path": "49"
    },
    "2070": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "SWAP6",
      "path": "49"
    },
    "2071": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "SWAP5",
      "path": "49"
    },
    "2072": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "SWAP4",
      "path": "49"
    },
    "2073": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "2074": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "2075": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2076": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x108C"
    },
    "2080": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        4679,
        5071
      ],
      "op": "JUMP",
      "path": "49"
    },
    "2081": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "2082": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x20"
    },
    "2084": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "2086": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "2087": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2088": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "DUP4",
      "path": "49"
    },
    "2089": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "SUB",
      "path": "49"
    },
    "2090": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "DUP2",
      "path": "49"
    },
    "2091": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "DUP7",
      "path": "49"
    },
    "2092": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "GAS",
      "path": "49"
    },
    "2093": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "STATICCALL",
      "path": "49"
    },
    "2094": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "2095": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2096": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "2097": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x83F"
    },
    "2101": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "2102": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "RETURNDATASIZE",
      "path": "49"
    },
    "2103": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "2105": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2106": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "RETURNDATACOPY",
      "path": "49"
    },
    "2107": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "RETURNDATASIZE",
      "path": "49"
    },
    "2108": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "2110": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "REVERT",
      "path": "49"
    },
    "2111": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "2112": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "POP",
      "path": "49"
    },
    "2113": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "POP",
      "path": "49"
    },
    "2114": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "POP",
      "path": "49"
    },
    "2115": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "POP",
      "path": "49"
    },
    "2116": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "2118": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "2119": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "RETURNDATASIZE",
      "path": "49"
    },
    "2120": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x1F"
    },
    "2122": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "NOT",
      "path": "49"
    },
    "2123": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x1F"
    },
    "2125": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "DUP3",
      "path": "49"
    },
    "2126": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "ADD",
      "path": "49"
    },
    "2127": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "AND",
      "path": "49"
    },
    "2128": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "DUP3",
      "path": "49"
    },
    "2129": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "ADD",
      "path": "49"
    },
    "2130": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2131": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "2133": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "2134": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "POP",
      "path": "49"
    },
    "2135": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "DUP2",
      "path": "49"
    },
    "2136": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "ADD",
      "path": "49"
    },
    "2137": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2138": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x865"
    },
    "2142": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "2143": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2144": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x1006"
    },
    "2148": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        4679,
        5071
      ],
      "op": "JUMP",
      "path": "49"
    },
    "2149": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4679,
        5071
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "2150": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2152": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2154": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2156": {
      "op": "SHL"
    },
    "2157": {
      "op": "SUB"
    },
    "2158": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4662,
        5071
      ],
      "op": "AND",
      "path": "49"
    },
    "2159": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4662,
        4675
      ],
      "op": "DUP4",
      "path": "49"
    },
    "2160": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2162": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2164": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2166": {
      "op": "SHL"
    },
    "2167": {
      "op": "SUB"
    },
    "2168": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4662,
        5071
      ],
      "op": "AND",
      "path": "49"
    },
    "2169": {
      "branch": 41,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4662,
        5071
      ],
      "op": "EQ",
      "path": "49"
    },
    "2170": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4637,
        5133
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x8C7"
    },
    "2174": {
      "branch": 41,
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4637,
        5133
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "2175": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4637,
        5133
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "2177": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4637,
        5133
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "2178": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2182": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2184": {
      "op": "SHL"
    },
    "2185": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4637,
        5133
      ],
      "op": "DUP2",
      "path": "49"
    },
    "2186": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4637,
        5133
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "2187": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2189": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4637,
        5133
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x4"
    },
    "2191": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4637,
        5133
      ],
      "op": "DUP3",
      "path": "49"
    },
    "2192": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4637,
        5133
      ],
      "op": "ADD",
      "path": "49"
    },
    "2193": {
      "op": "MSTORE"
    },
    "2194": {
      "op": "PUSH1",
      "value": "0x1C"
    },
    "2196": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2198": {
      "op": "DUP3"
    },
    "2199": {
      "op": "ADD"
    },
    "2200": {
      "op": "MSTORE"
    },
    "2201": {
      "op": "PUSH32",
      "value": "0x437265617465434C483A20496E76616C6964205369676E617475726500000000"
    },
    "2234": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2236": {
      "op": "DUP3"
    },
    "2237": {
      "op": "ADD"
    },
    "2238": {
      "op": "MSTORE"
    },
    "2239": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2241": {
      "op": "ADD"
    },
    "2242": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4637,
        5133
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x3E0"
    },
    "2246": {
      "op": "JUMP"
    },
    "2247": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4637,
        5133
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "2248": {
      "op": "POP"
    },
    "2249": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5161,
        5174
      ],
      "op": "DUP2",
      "path": "49",
      "statement": 21
    },
    "2250": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4493,
        5185
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "2251": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5252,
        5261
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x7E"
    },
    "2253": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5252,
        5261
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "2254": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "2256": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2257": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "2258": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x80"
    },
    "2260": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "DUP2",
      "path": "49"
    },
    "2261": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "ADD",
      "path": "49"
    },
    "2262": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "DUP3",
      "path": "49"
    },
    "2263": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "2264": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5588,
        5592
      ],
      "op": "ADDRESS",
      "path": "49"
    },
    "2265": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "DUP2",
      "path": "49"
    },
    "2266": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "2267": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5595,
        5601
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x73"
    },
    "2269": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5595,
        5601
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "2270": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2272": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2274": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2276": {
      "op": "SHL"
    },
    "2277": {
      "op": "SUB"
    },
    "2278": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5595,
        5601
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2279": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5595,
        5601
      ],
      "op": "DUP2",
      "path": "49"
    },
    "2280": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5595,
        5601
      ],
      "op": "AND",
      "path": "49"
    },
    "2281": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x20"
    },
    "2283": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "DUP4",
      "path": "49"
    },
    "2284": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "ADD",
      "path": "49"
    },
    "2285": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "2286": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "DUP8",
      "path": "49"
    },
    "2287": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "DUP2",
      "path": "49"
    },
    "2288": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "AND",
      "path": "49"
    },
    "2289": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "DUP3",
      "path": "49"
    },
    "2290": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "DUP5",
      "path": "49"
    },
    "2291": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "ADD",
      "path": "49"
    },
    "2292": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "2293": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5616,
        5633
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x70"
    },
    "2295": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5616,
        5633
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "2296": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5616,
        5633
      ],
      "op": "DUP2",
      "path": "49"
    },
    "2297": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5616,
        5633
      ],
      "op": "AND",
      "path": "49"
    },
    "2298": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x60"
    },
    "2300": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "DUP4",
      "path": "49"
    },
    "2301": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "ADD",
      "path": "49"
    },
    "2302": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "2303": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "2304": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "2305": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5195,
        5212
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "2307": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5195,
        5212
      ],
      "op": "SWAP4",
      "path": "49"
    },
    "2308": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5252,
        5261
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "2309": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5252,
        5261
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2310": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5252,
        5261
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "2311": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5252,
        5261
      ],
      "op": "AND",
      "path": "49"
    },
    "2312": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5252,
        5261
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "2313": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x925"
    },
    "2317": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "2318": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5408,
        5418
      ],
      "op": "DUP6",
      "path": "49"
    },
    "2319": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5408,
        5418
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "2320": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5437,
        5447
      ],
      "op": "DUP16",
      "path": "49"
    },
    "2321": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5437,
        5447
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "2322": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5478
      ],
      "op": "DUP16",
      "path": "49"
    },
    "2323": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5465,
        5478
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "2324": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5496,
        5506
      ],
      "op": "DUP16",
      "path": "49"
    },
    "2325": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5496,
        5506
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "2326": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5524,
        5533
      ],
      "op": "DUP16",
      "path": "49"
    },
    "2327": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5524,
        5533
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "2328": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5551,
        5560
      ],
      "op": "DUP16",
      "path": "49"
    },
    "2329": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5551,
        5560
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "2330": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2331": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5653,
        5668
      ],
      "op": "DUP16",
      "path": "49"
    },
    "2332": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5653,
        5668
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2333": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x24"
    },
    "2335": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "ADD",
      "path": "49"
    },
    "2336": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x1188"
    },
    "2340": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        5277,
        5682
      ],
      "op": "JUMP",
      "path": "49"
    },
    "2341": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "2342": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "2344": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2345": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "2346": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2348": {
      "op": "NOT"
    },
    "2349": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "DUP2",
      "path": "49"
    },
    "2350": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "DUP5",
      "path": "49"
    },
    "2351": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "SUB",
      "path": "49"
    },
    "2352": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "ADD",
      "path": "49"
    },
    "2353": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "DUP2",
      "path": "49"
    },
    "2354": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "2355": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "2356": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "DUP2",
      "path": "49"
    },
    "2357": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "2358": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x20"
    },
    "2360": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "DUP3",
      "path": "49"
    },
    "2361": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "ADD",
      "path": "49"
    },
    "2362": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2363": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "2364": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2366": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2368": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2370": {
      "op": "SHL"
    },
    "2371": {
      "op": "SUB"
    },
    "2372": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "AND",
      "path": "49"
    },
    "2373": {
      "op": "PUSH4",
      "value": "0x7E66495D"
    },
    "2378": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2380": {
      "op": "SHL"
    },
    "2381": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "OR",
      "path": "49"
    },
    "2382": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2383": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5277,
        5682
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "2384": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5215,
        5692
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "2385": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5215,
        5692
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x95B"
    },
    "2389": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5215,
        5692
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2390": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5215,
        5692
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0xC3B"
    },
    "2394": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        5215,
        5692
      ],
      "op": "JUMP",
      "path": "49"
    },
    "2395": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5215,
        5692
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "2396": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5215,
        5692
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x968"
    },
    "2400": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5215,
        5692
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "2401": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5215,
        5692
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "2402": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5215,
        5692
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2403": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5215,
        5692
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x1228"
    },
    "2407": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        5215,
        5692
      ],
      "op": "JUMP",
      "path": "49"
    },
    "2408": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5215,
        5692
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "2409": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5215,
        5692
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "2411": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5215,
        5692
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "2412": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5215,
        5692
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2413": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5215,
        5692
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "2414": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5215,
        5692
      ],
      "op": "SUB",
      "path": "49"
    },
    "2415": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5215,
        5692
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2416": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5215,
        5692
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "2418": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5215,
        5692
      ],
      "op": "CREATE",
      "path": "49"
    },
    "2419": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5215,
        5692
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2420": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5215,
        5692
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "2421": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5215,
        5692
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2422": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5215,
        5692
      ],
      "op": "ISZERO",
      "path": "49"
    },
    "2423": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5215,
        5692
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x985"
    },
    "2427": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5215,
        5692
      ],
      "op": "JUMPI",
      "path": "49"
    },
    "2428": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5215,
        5692
      ],
      "op": "RETURNDATASIZE",
      "path": "49"
    },
    "2429": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5215,
        5692
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "2431": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5215,
        5692
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2432": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5215,
        5692
      ],
      "op": "RETURNDATACOPY",
      "path": "49"
    },
    "2433": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5215,
        5692
      ],
      "op": "RETURNDATASIZE",
      "path": "49"
    },
    "2434": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5215,
        5692
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "2436": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5215,
        5692
      ],
      "op": "REVERT",
      "path": "49"
    },
    "2437": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5215,
        5692
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "2438": {
      "op": "POP"
    },
    "2439": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5703,
        5709
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 22,
      "value": "0x65"
    },
    "2441": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5703,
        5711
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2442": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5703,
        5711
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "2443": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5195,
        5692
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "2444": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5195,
        5692
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "2445": {
      "op": "POP"
    },
    "2446": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5703,
        5709
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "2448": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5703,
        5711
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x99A"
    },
    "2452": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5703,
        5711
      ],
      "op": "DUP4",
      "path": "49"
    },
    "2453": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5703,
        5711
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x1256"
    },
    "2457": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        5703,
        5711
      ],
      "op": "JUMP",
      "path": "49"
    },
    "2458": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5703,
        5711
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "2459": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5703,
        5711
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2460": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5703,
        5711
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "2461": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5703,
        5711
      ],
      "op": "SSTORE",
      "path": "49"
    },
    "2462": {
      "op": "POP"
    },
    "2463": {
      "op": "POP"
    },
    "2464": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5729,
        5735
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 23,
      "value": "0x65"
    },
    "2466": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5729,
        5735
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2467": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5729,
        5735
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "2468": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5721,
        5737
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x0"
    },
    "2470": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5721,
        5737
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2471": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5721,
        5737
      ],
      "op": "DUP2",
      "path": "49"
    },
    "2472": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5721,
        5737
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "2473": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5721,
        5727
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x80"
    },
    "2475": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5721,
        5737
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x20"
    },
    "2477": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5721,
        5737
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2478": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5721,
        5737
      ],
      "op": "DUP2",
      "path": "49"
    },
    "2479": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5721,
        5737
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "2480": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5721,
        5737
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "2482": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5721,
        5737
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2483": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5721,
        5737
      ],
      "op": "DUP4",
      "path": "49"
    },
    "2484": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5721,
        5737
      ],
      "op": "KECCAK256",
      "path": "49"
    },
    "2485": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5721,
        5769
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2486": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5721,
        5769
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "2487": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2489": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2491": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2493": {
      "op": "SHL"
    },
    "2494": {
      "op": "SUB"
    },
    "2495": {
      "op": "NOT"
    },
    "2496": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5721,
        5769
      ],
      "op": "AND",
      "path": "49"
    },
    "2497": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2499": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2501": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2503": {
      "op": "SHL"
    },
    "2504": {
      "op": "SUB"
    },
    "2505": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5721,
        5769
      ],
      "op": "DUP8",
      "path": "49"
    },
    "2506": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5721,
        5769
      ],
      "op": "AND",
      "path": "49"
    },
    "2507": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5721,
        5769
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2508": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5721,
        5769
      ],
      "op": "DUP2",
      "path": "49"
    },
    "2509": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5721,
        5769
      ],
      "op": "OR",
      "path": "49"
    },
    "2510": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5721,
        5769
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2511": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5721,
        5769
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "2512": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5721,
        5769
      ],
      "op": "SSTORE",
      "path": "49"
    },
    "2513": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5811,
        5817
      ],
      "op": "SWAP4",
      "path": "49",
      "statement": 24
    },
    "2514": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5811,
        5817
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "2515": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5779,
        5808
      ],
      "op": "SWAP4",
      "path": "49"
    },
    "2516": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5779,
        5808
      ],
      "op": "DUP4",
      "path": "49"
    },
    "2517": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5779,
        5808
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "2518": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5779,
        5787
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x7F"
    },
    "2520": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5779,
        5808
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2521": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5779,
        5808
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "2522": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5779,
        5808
      ],
      "op": "MSTORE",
      "path": "49"
    },
    "2523": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5779,
        5808
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2524": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5779,
        5808
      ],
      "op": "DUP2",
      "path": "49"
    },
    "2525": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5779,
        5808
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2526": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5779,
        5808
      ],
      "op": "KECCAK256",
      "path": "49"
    },
    "2527": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5779,
        5817
      ],
      "op": "DUP3",
      "path": "49"
    },
    "2528": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5779,
        5817
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2529": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5779,
        5817
      ],
      "op": "SSTORE",
      "path": "49"
    },
    "2530": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5833,
        5883
      ],
      "op": "MLOAD",
      "path": "49",
      "statement": 25
    },
    "2531": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5833,
        5883
      ],
      "op": "PUSH32",
      "path": "49",
      "value": "0x6510209152E59FEB0A7445A97B24BC79BFCB456CA1D8BFF1E4980536C4E8CABB"
    },
    "2564": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5833,
        5883
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "2565": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5833,
        5883
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0xA13"
    },
    "2569": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5833,
        5883
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "2570": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5721,
        5769
      ],
      "op": "DUP5",
      "path": "49"
    },
    "2571": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5721,
        5769
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "2572": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5863,
        5873
      ],
      "op": "DUP16",
      "path": "49"
    },
    "2573": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5863,
        5873
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "2574": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5833,
        5883
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x1280"
    },
    "2578": {
      "fn": "CLFactory.CreateCLH",
      "jump": "i",
      "offset": [
        5833,
        5883
      ],
      "op": "JUMP",
      "path": "49"
    },
    "2579": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5833,
        5883
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "2580": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5833,
        5883
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x40"
    },
    "2582": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5833,
        5883
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "2583": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5833,
        5883
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2584": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5833,
        5883
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "2585": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5833,
        5883
      ],
      "op": "SUB",
      "path": "49"
    },
    "2586": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5833,
        5883
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2587": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        5833,
        5883
      ],
      "op": "LOG1",
      "path": "49"
    },
    "2588": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4227,
        5890
      ],
      "op": "POP",
      "path": "49"
    },
    "2589": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        4227,
        5890
      ],
      "op": "POP",
      "path": "49"
    },
    "2590": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5890
      ],
      "op": "POP",
      "path": "49"
    },
    "2591": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5890
      ],
      "op": "POP",
      "path": "49"
    },
    "2592": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5890
      ],
      "op": "POP",
      "path": "49"
    },
    "2593": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5890
      ],
      "op": "POP",
      "path": "49"
    },
    "2594": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5890
      ],
      "op": "POP",
      "path": "49"
    },
    "2595": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5890
      ],
      "op": "POP",
      "path": "49"
    },
    "2596": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5890
      ],
      "op": "POP",
      "path": "49"
    },
    "2597": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5890
      ],
      "op": "POP",
      "path": "49"
    },
    "2598": {
      "fn": "CLFactory.CreateCLH",
      "offset": [
        3896,
        5890
      ],
      "op": "POP",
      "path": "49"
    },
    "2599": {
      "fn": "CLFactory.CreateCLH",
      "jump": "o",
      "offset": [
        3896,
        5890
      ],
      "op": "JUMP",
      "path": "49"
    },
    "2600": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2321,
        2519
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2601": {
      "offset": [
        1334,
        1347
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0xA32"
    },
    "2605": {
      "offset": [
        1334,
        1345
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0xB24"
    },
    "2609": {
      "jump": "i",
      "offset": [
        1334,
        1347
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2610": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        1334,
        1347
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2611": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2613": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2615": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2617": {
      "op": "SHL"
    },
    "2618": {
      "op": "SUB"
    },
    "2619": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2409,
        2431
      ],
      "op": "DUP2",
      "path": "0",
      "statement": 26
    },
    "2620": {
      "branch": 44,
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2409,
        2431
      ],
      "op": "AND",
      "path": "0"
    },
    "2621": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2401,
        2474
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0xA99"
    },
    "2625": {
      "branch": 44,
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2401,
        2474
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2626": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2401,
        2474
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2628": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2401,
        2474
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2629": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2633": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2635": {
      "op": "SHL"
    },
    "2636": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2401,
        2474
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2637": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2401,
        2474
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2638": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2640": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2401,
        2474
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2642": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2401,
        2474
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2643": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2401,
        2474
      ],
      "op": "ADD",
      "path": "0"
    },
    "2644": {
      "op": "MSTORE"
    },
    "2645": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "2647": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2649": {
      "op": "DUP3"
    },
    "2650": {
      "op": "ADD"
    },
    "2651": {
      "op": "MSTORE"
    },
    "2652": {
      "op": "PUSH32",
      "value": "0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
    },
    "2685": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2687": {
      "op": "DUP3"
    },
    "2688": {
      "op": "ADD"
    },
    "2689": {
      "op": "MSTORE"
    },
    "2690": {
      "op": "PUSH6",
      "value": "0x646472657373"
    },
    "2697": {
      "op": "PUSH1",
      "value": "0xD0"
    },
    "2699": {
      "op": "SHL"
    },
    "2700": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2702": {
      "op": "DUP3"
    },
    "2703": {
      "op": "ADD"
    },
    "2704": {
      "op": "MSTORE"
    },
    "2705": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2707": {
      "op": "ADD"
    },
    "2708": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2401,
        2474
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0x3E0"
    },
    "2712": {
      "op": "JUMP"
    },
    "2713": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2401,
        2474
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2714": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2484,
        2512
      ],
      "op": "PUSH3",
      "path": "0",
      "statement": 27,
      "value": "0xAA4"
    },
    "2718": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2503,
        2511
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2719": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2484,
        2502
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0xBB4"
    },
    "2723": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "jump": "i",
      "offset": [
        2484,
        2512
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2724": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2484,
        2512
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2725": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "offset": [
        2321,
        2519
      ],
      "op": "POP",
      "path": "0"
    },
    "2726": {
      "fn": "OwnableUpgradeable.transferOwnership",
      "jump": "o",
      "offset": [
        2321,
        2519
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2727": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6137,
        6398
      ],
      "op": "JUMPDEST",
      "path": "49"
    },
    "2728": {
      "offset": [
        1334,
        1347
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0xAB1"
    },
    "2732": {
      "offset": [
        1334,
        1345
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0xB24"
    },
    "2736": {
      "jump": "i",
      "offset": [
        1334,
        1347
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2737": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        1334,
        1347
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2738": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6247,
        6264
      ],
      "op": "PUSH1",
      "path": "49",
      "value": "0x70"
    },
    "2740": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6247,
        6264
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2741": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6247,
        6264
      ],
      "op": "SLOAD",
      "path": "49"
    },
    "2742": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2744": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2746": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2748": {
      "op": "SHL"
    },
    "2749": {
      "op": "SUB"
    },
    "2750": {
      "op": "NOT"
    },
    "2751": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6274,
        6312
      ],
      "op": "DUP2",
      "path": "49",
      "statement": 28
    },
    "2752": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6274,
        6312
      ],
      "op": "AND",
      "path": "49"
    },
    "2753": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2755": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2757": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2759": {
      "op": "SHL"
    },
    "2760": {
      "op": "SUB"
    },
    "2761": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6274,
        6312
      ],
      "op": "DUP5",
      "path": "49"
    },
    "2762": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6274,
        6312
      ],
      "op": "DUP2",
      "path": "49"
    },
    "2763": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6274,
        6312
      ],
      "op": "AND",
      "path": "49"
    },
    "2764": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6274,
        6312
      ],
      "op": "SWAP2",
      "path": "49"
    },
    "2765": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6274,
        6312
      ],
      "op": "DUP3",
      "path": "49"
    },
    "2766": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6274,
        6312
      ],
      "op": "OR",
      "path": "49"
    },
    "2767": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6274,
        6312
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2768": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6274,
        6312
      ],
      "op": "SWAP4",
      "path": "49"
    },
    "2769": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6274,
        6312
      ],
      "op": "SSTORE",
      "path": "49"
    },
    "2770": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6327,
        6391
      ],
      "op": "PUSH1",
      "path": "49",
      "statement": 29,
      "value": "0x40"
    },
    "2772": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6327,
        6391
      ],
      "op": "DUP1",
      "path": "49"
    },
    "2773": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6327,
        6391
      ],
      "op": "MLOAD",
      "path": "49"
    },
    "2774": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2776": {
      "op": "DUP1"
    },
    "2777": {
      "op": "DUP3"
    },
    "2778": {
      "op": "MSTORE"
    },
    "2779": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "2781": {
      "op": "SWAP1"
    },
    "2782": {
      "op": "DUP3"
    },
    "2783": {
      "op": "ADD"
    },
    "2784": {
      "op": "MSTORE"
    },
    "2785": {
      "op": "PUSH17",
      "value": "0x86989886DEDCE6E8E4EAC6E8DEE486989"
    },
    "2803": {
      "op": "PUSH1",
      "value": "0x7B"
    },
    "2805": {
      "op": "SHL"
    },
    "2806": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2808": {
      "op": "DUP3"
    },
    "2809": {
      "op": "ADD"
    },
    "2810": {
      "op": "MSTORE"
    },
    "2811": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6247,
        6264
      ],
      "op": "SWAP4",
      "path": "49"
    },
    "2812": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6247,
        6264
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2813": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6247,
        6264
      ],
      "op": "SWAP3",
      "path": "49"
    },
    "2814": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6247,
        6264
      ],
      "op": "AND",
      "path": "49"
    },
    "2815": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2817": {
      "op": "DUP5"
    },
    "2818": {
      "op": "ADD"
    },
    "2819": {
      "op": "DUP2"
    },
    "2820": {
      "op": "SWAP1"
    },
    "2821": {
      "op": "MSTORE"
    },
    "2822": {
      "op": "SWAP2"
    },
    "2823": {
      "op": "DUP4"
    },
    "2824": {
      "op": "ADD"
    },
    "2825": {
      "op": "MSTORE"
    },
    "2826": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6247,
        6264
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2827": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2829": {
      "op": "DUP1"
    },
    "2830": {
      "op": "MLOAD"
    },
    "2831": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2833": {
      "op": "PUSH3",
      "value": "0x1C0D"
    },
    "2837": {
      "op": "DUP4"
    },
    "2838": {
      "op": "CODECOPY"
    },
    "2839": {
      "op": "DUP2"
    },
    "2840": {
      "op": "MLOAD"
    },
    "2841": {
      "op": "SWAP2"
    },
    "2842": {
      "op": "MSTORE"
    },
    "2843": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6327,
        6391
      ],
      "op": "SWAP1",
      "path": "49"
    },
    "2844": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2846": {
      "op": "ADD"
    },
    "2847": {
      "fn": "CLFactory.UpdateCLLConstructorCLH",
      "offset": [
        6327,
        6391
      ],
      "op": "PUSH3",
      "path": "49",
      "value": "0x351"
    },
    "2851": {
      "op": "JUMP"
    },
    "2852": {
      "fn": "OwnableUpgradeable._checkOwner",
      "offset": [
        1599,
        1729
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2853": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1513,
        1519
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x33"
    },
    "2855": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1513,
        1519
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "2856": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2858": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2860": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2862": {
      "op": "SHL"
    },
    "2863": {
      "op": "SUB"
    },
    "2864": {
      "fn": "OwnableUpgradeable.owner",
      "offset": [
        1513,
        1519
      ],
      "op": "AND",
      "path": "0"
    },
    "2865": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        929,
        939
      ],
      "op": "CALLER",
      "path": "3",
      "statement": 30
    },
    "2866": {
      "branch": 45,
      "fn": "OwnableUpgradeable._checkOwner",
      "offset": [
        1662,
        1685
      ],
      "op": "EQ",
      "path": "0",
      "statement": 31
    },
    "2867": {
      "fn": "OwnableUpgradeable._checkOwner",
      "offset": [
        1654,
        1722
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0x514"
    },
    "2871": {
      "branch": 45,
      "fn": "OwnableUpgradeable._checkOwner",
      "offset": [
        1654,
        1722
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "2872": {
      "fn": "OwnableUpgradeable._checkOwner",
      "offset": [
        1654,
        1722
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "2874": {
      "fn": "OwnableUpgradeable._checkOwner",
      "offset": [
        1654,
        1722
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "2875": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2879": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2881": {
      "op": "SHL"
    },
    "2882": {
      "fn": "OwnableUpgradeable._checkOwner",
      "offset": [
        1654,
        1722
      ],
      "op": "DUP2",
      "path": "0"
    },
    "2883": {
      "fn": "OwnableUpgradeable._checkOwner",
      "offset": [
        1654,
        1722
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "2884": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2886": {
      "fn": "OwnableUpgradeable._checkOwner",
      "offset": [
        1654,
        1722
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "2888": {
      "fn": "OwnableUpgradeable._checkOwner",
      "offset": [
        1654,
        1722
      ],
      "op": "DUP3",
      "path": "0"
    },
    "2889": {
      "fn": "OwnableUpgradeable._checkOwner",
      "offset": [
        1654,
        1722
      ],
      "op": "ADD",
      "path": "0"
    },
    "2890": {
      "op": "DUP2"
    },
    "2891": {
      "op": "SWAP1"
    },
    "2892": {
      "op": "MSTORE"
    },
    "2893": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2895": {
      "op": "DUP3"
    },
    "2896": {
      "op": "ADD"
    },
    "2897": {
      "op": "MSTORE"
    },
    "2898": {
      "op": "PUSH32",
      "value": "0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
    },
    "2931": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2933": {
      "op": "DUP3"
    },
    "2934": {
      "op": "ADD"
    },
    "2935": {
      "op": "MSTORE"
    },
    "2936": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2938": {
      "op": "ADD"
    },
    "2939": {
      "fn": "OwnableUpgradeable._checkOwner",
      "offset": [
        1654,
        1722
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0x3E0"
    },
    "2943": {
      "op": "JUMP"
    },
    "2944": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        1003,
        1098
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2945": {
      "offset": [
        4910,
        4923
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2947": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4910,
        4923
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "2948": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4910,
        4923
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x100"
    },
    "2951": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4910,
        4923
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2952": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4910,
        4923
      ],
      "op": "DIV",
      "path": "1"
    },
    "2953": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4910,
        4923
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "2955": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4910,
        4923
      ],
      "op": "AND",
      "path": "1"
    },
    "2956": {
      "offset": [
        4902,
        4971
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0xBAA"
    },
    "2960": {
      "offset": [
        4902,
        4971
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "2961": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4902,
        4971
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2963": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4902,
        4971
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2964": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2968": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2970": {
      "op": "SHL"
    },
    "2971": {
      "offset": [
        4902,
        4971
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2972": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4902,
        4971
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2973": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4902,
        4971
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "2975": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4902,
        4971
      ],
      "op": "ADD",
      "path": "1"
    },
    "2976": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4902,
        4971
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0x3E0"
    },
    "2980": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4902,
        4971
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2981": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4902,
        4971
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0x12B6"
    },
    "2985": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "jump": "i",
      "offset": [
        4902,
        4971
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2986": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        4902,
        4971
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2987": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        1065,
        1091
      ],
      "op": "PUSH3",
      "path": "0",
      "statement": 32,
      "value": "0x514"
    },
    "2991": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "offset": [
        1065,
        1089
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0xC06"
    },
    "2995": {
      "fn": "OwnableUpgradeable.__Ownable_init",
      "jump": "i",
      "offset": [
        1065,
        1091
      ],
      "op": "JUMP",
      "path": "0"
    },
    "2996": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2673,
        2860
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "2997": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2765,
        2771
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x33"
    },
    "2999": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2765,
        2771
      ],
      "op": "DUP1",
      "path": "0"
    },
    "3000": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2765,
        2771
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "3001": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3003": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3005": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3007": {
      "op": "SHL"
    },
    "3008": {
      "op": "SUB"
    },
    "3009": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2781,
        2798
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 33
    },
    "3010": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2781,
        2798
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3011": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2781,
        2798
      ],
      "op": "AND",
      "path": "0"
    },
    "3012": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3014": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3016": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3018": {
      "op": "SHL"
    },
    "3019": {
      "op": "SUB"
    },
    "3020": {
      "op": "NOT"
    },
    "3021": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2781,
        2798
      ],
      "op": "DUP4",
      "path": "0"
    },
    "3022": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2781,
        2798
      ],
      "op": "AND",
      "path": "0"
    },
    "3023": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2781,
        2798
      ],
      "op": "DUP2",
      "path": "0"
    },
    "3024": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2781,
        2798
      ],
      "op": "OR",
      "path": "0"
    },
    "3025": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2781,
        2798
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3026": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2781,
        2798
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "3027": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2781,
        2798
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "3028": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2813,
        2853
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 34,
      "value": "0x40"
    },
    "3030": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2813,
        2853
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "3031": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2765,
        2771
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3032": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2765,
        2771
      ],
      "op": "AND",
      "path": "0"
    },
    "3033": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2765,
        2771
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "3034": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2781,
        2798
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3035": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2765,
        2771
      ],
      "op": "DUP3",
      "path": "0"
    },
    "3036": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2765,
        2771
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3037": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2813,
        2853
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
    },
    "3070": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2813,
        2853
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3071": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2746,
        2762
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "3073": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2746,
        2762
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "3074": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2813,
        2853
      ],
      "op": "LOG3",
      "path": "0"
    },
    "3075": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2736,
        2860
      ],
      "op": "POP",
      "path": "0"
    },
    "3076": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "offset": [
        2673,
        2860
      ],
      "op": "POP",
      "path": "0"
    },
    "3077": {
      "fn": "OwnableUpgradeable._transferOwnership",
      "jump": "o",
      "offset": [
        2673,
        2860
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3078": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        1104,
        1215
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "3079": {
      "offset": [
        4910,
        4923
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3081": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4910,
        4923
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "3082": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4910,
        4923
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x100"
    },
    "3085": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4910,
        4923
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3086": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4910,
        4923
      ],
      "op": "DIV",
      "path": "1"
    },
    "3087": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4910,
        4923
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "3089": {
      "branch": 43,
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4910,
        4923
      ],
      "op": "AND",
      "path": "1"
    },
    "3090": {
      "offset": [
        4902,
        4971
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0xC30"
    },
    "3094": {
      "branch": 43,
      "offset": [
        4902,
        4971
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "3095": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4902,
        4971
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3097": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4902,
        4971
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3098": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3102": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3104": {
      "op": "SHL"
    },
    "3105": {
      "offset": [
        4902,
        4971
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3106": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4902,
        4971
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3107": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4902,
        4971
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "3109": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4902,
        4971
      ],
      "op": "ADD",
      "path": "1"
    },
    "3110": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4902,
        4971
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0x3E0"
    },
    "3114": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4902,
        4971
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3115": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4902,
        4971
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0x12B6"
    },
    "3119": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "jump": "i",
      "offset": [
        4902,
        4971
      ],
      "op": "JUMP",
      "path": "1"
    },
    "3120": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        4902,
        4971
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3121": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        1176,
        1208
      ],
      "op": "PUSH3",
      "path": "0",
      "statement": 35,
      "value": "0x514"
    },
    "3125": {
      "fn": "ContextUpgradeable._msgSender",
      "offset": [
        929,
        939
      ],
      "op": "CALLER",
      "path": "3"
    },
    "3126": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "offset": [
        1176,
        1194
      ],
      "op": "PUSH3",
      "path": "0",
      "value": "0xBB4"
    },
    "3130": {
      "fn": "OwnableUpgradeable.__Ownable_init_unchained",
      "jump": "i",
      "offset": [
        1176,
        1208
      ],
      "op": "JUMP",
      "path": "0"
    },
    "3131": {
      "op": "JUMPDEST"
    },
    "3132": {
      "op": "PUSH2",
      "value": "0x90B"
    },
    "3135": {
      "op": "DUP1"
    },
    "3136": {
      "op": "PUSH3",
      "value": "0x1302"
    },
    "3140": {
      "op": "DUP4"
    },
    "3141": {
      "op": "CODECOPY"
    },
    "3142": {
      "op": "ADD"
    },
    "3143": {
      "op": "SWAP1"
    },
    "3144": {
      "jump": "o",
      "op": "JUMP"
    },
    "3145": {
      "op": "JUMPDEST"
    },
    "3146": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3148": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3150": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3152": {
      "op": "SHL"
    },
    "3153": {
      "op": "SUB"
    },
    "3154": {
      "op": "DUP2"
    },
    "3155": {
      "op": "AND"
    },
    "3156": {
      "op": "DUP2"
    },
    "3157": {
      "op": "EQ"
    },
    "3158": {
      "op": "PUSH3",
      "value": "0xAA4"
    },
    "3162": {
      "op": "JUMPI"
    },
    "3163": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3165": {
      "op": "DUP1"
    },
    "3166": {
      "op": "REVERT"
    },
    "3167": {
      "op": "JUMPDEST"
    },
    "3168": {
      "op": "DUP1"
    },
    "3169": {
      "op": "CALLDATALOAD"
    },
    "3170": {
      "op": "PUSH3",
      "value": "0xC6C"
    },
    "3174": {
      "op": "DUP2"
    },
    "3175": {
      "op": "PUSH3",
      "value": "0xC49"
    },
    "3179": {
      "jump": "i",
      "op": "JUMP"
    },
    "3180": {
      "op": "JUMPDEST"
    },
    "3181": {
      "op": "SWAP2"
    },
    "3182": {
      "op": "SWAP1"
    },
    "3183": {
      "op": "POP"
    },
    "3184": {
      "jump": "o",
      "op": "JUMP"
    },
    "3185": {
      "op": "JUMPDEST"
    },
    "3186": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3188": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3190": {
      "op": "DUP3"
    },
    "3191": {
      "op": "DUP5"
    },
    "3192": {
      "op": "SUB"
    },
    "3193": {
      "op": "SLT"
    },
    "3194": {
      "op": "ISZERO"
    },
    "3195": {
      "op": "PUSH3",
      "value": "0xC84"
    },
    "3199": {
      "op": "JUMPI"
    },
    "3200": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3202": {
      "op": "DUP1"
    },
    "3203": {
      "op": "REVERT"
    },
    "3204": {
      "op": "JUMPDEST"
    },
    "3205": {
      "op": "DUP2"
    },
    "3206": {
      "op": "CALLDATALOAD"
    },
    "3207": {
      "op": "PUSH3",
      "value": "0xC91"
    },
    "3211": {
      "op": "DUP2"
    },
    "3212": {
      "op": "PUSH3",
      "value": "0xC49"
    },
    "3216": {
      "jump": "i",
      "op": "JUMP"
    },
    "3217": {
      "op": "JUMPDEST"
    },
    "3218": {
      "op": "SWAP4"
    },
    "3219": {
      "op": "SWAP3"
    },
    "3220": {
      "op": "POP"
    },
    "3221": {
      "op": "POP"
    },
    "3222": {
      "op": "POP"
    },
    "3223": {
      "jump": "o",
      "op": "JUMP"
    },
    "3224": {
      "op": "JUMPDEST"
    },
    "3225": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3227": {
      "op": "DUP1"
    },
    "3228": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3230": {
      "op": "DUP1"
    },
    "3231": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3233": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3235": {
      "op": "DUP7"
    },
    "3236": {
      "op": "DUP9"
    },
    "3237": {
      "op": "SUB"
    },
    "3238": {
      "op": "SLT"
    },
    "3239": {
      "op": "ISZERO"
    },
    "3240": {
      "op": "PUSH3",
      "value": "0xCB1"
    },
    "3244": {
      "op": "JUMPI"
    },
    "3245": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3247": {
      "op": "DUP1"
    },
    "3248": {
      "op": "REVERT"
    },
    "3249": {
      "op": "JUMPDEST"
    },
    "3250": {
      "op": "DUP6"
    },
    "3251": {
      "op": "CALLDATALOAD"
    },
    "3252": {
      "op": "PUSH3",
      "value": "0xCBE"
    },
    "3256": {
      "op": "DUP2"
    },
    "3257": {
      "op": "PUSH3",
      "value": "0xC49"
    },
    "3261": {
      "jump": "i",
      "op": "JUMP"
    },
    "3262": {
      "op": "JUMPDEST"
    },
    "3263": {
      "op": "SWAP5"
    },
    "3264": {
      "op": "POP"
    },
    "3265": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3267": {
      "op": "DUP7"
    },
    "3268": {
      "op": "ADD"
    },
    "3269": {
      "op": "CALLDATALOAD"
    },
    "3270": {
      "op": "PUSH3",
      "value": "0xCD0"
    },
    "3274": {
      "op": "DUP2"
    },
    "3275": {
      "op": "PUSH3",
      "value": "0xC49"
    },
    "3279": {
      "jump": "i",
      "op": "JUMP"
    },
    "3280": {
      "op": "JUMPDEST"
    },
    "3281": {
      "op": "SWAP4"
    },
    "3282": {
      "op": "POP"
    },
    "3283": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3285": {
      "op": "DUP7"
    },
    "3286": {
      "op": "ADD"
    },
    "3287": {
      "op": "CALLDATALOAD"
    },
    "3288": {
      "op": "PUSH3",
      "value": "0xCE2"
    },
    "3292": {
      "op": "DUP2"
    },
    "3293": {
      "op": "PUSH3",
      "value": "0xC49"
    },
    "3297": {
      "jump": "i",
      "op": "JUMP"
    },
    "3298": {
      "op": "JUMPDEST"
    },
    "3299": {
      "op": "SWAP3"
    },
    "3300": {
      "op": "POP"
    },
    "3301": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3303": {
      "op": "DUP7"
    },
    "3304": {
      "op": "ADD"
    },
    "3305": {
      "op": "CALLDATALOAD"
    },
    "3306": {
      "op": "PUSH3",
      "value": "0xCF4"
    },
    "3310": {
      "op": "DUP2"
    },
    "3311": {
      "op": "PUSH3",
      "value": "0xC49"
    },
    "3315": {
      "jump": "i",
      "op": "JUMP"
    },
    "3316": {
      "op": "JUMPDEST"
    },
    "3317": {
      "op": "SWAP2"
    },
    "3318": {
      "op": "POP"
    },
    "3319": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3321": {
      "op": "DUP7"
    },
    "3322": {
      "op": "ADD"
    },
    "3323": {
      "op": "CALLDATALOAD"
    },
    "3324": {
      "op": "PUSH3",
      "value": "0xD06"
    },
    "3328": {
      "op": "DUP2"
    },
    "3329": {
      "op": "PUSH3",
      "value": "0xC49"
    },
    "3333": {
      "jump": "i",
      "op": "JUMP"
    },
    "3334": {
      "op": "JUMPDEST"
    },
    "3335": {
      "op": "DUP1"
    },
    "3336": {
      "op": "SWAP2"
    },
    "3337": {
      "op": "POP"
    },
    "3338": {
      "op": "POP"
    },
    "3339": {
      "op": "SWAP3"
    },
    "3340": {
      "op": "SWAP6"
    },
    "3341": {
      "op": "POP"
    },
    "3342": {
      "op": "SWAP3"
    },
    "3343": {
      "op": "SWAP6"
    },
    "3344": {
      "op": "SWAP1"
    },
    "3345": {
      "op": "SWAP4"
    },
    "3346": {
      "op": "POP"
    },
    "3347": {
      "jump": "o",
      "op": "JUMP"
    },
    "3348": {
      "op": "JUMPDEST"
    },
    "3349": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3351": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3353": {
      "op": "DUP3"
    },
    "3354": {
      "op": "DUP5"
    },
    "3355": {
      "op": "SUB"
    },
    "3356": {
      "op": "SLT"
    },
    "3357": {
      "op": "ISZERO"
    },
    "3358": {
      "op": "PUSH3",
      "value": "0xD27"
    },
    "3362": {
      "op": "JUMPI"
    },
    "3363": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3365": {
      "op": "DUP1"
    },
    "3366": {
      "op": "REVERT"
    },
    "3367": {
      "op": "JUMPDEST"
    },
    "3368": {
      "op": "POP"
    },
    "3369": {
      "op": "CALLDATALOAD"
    },
    "3370": {
      "op": "SWAP2"
    },
    "3371": {
      "op": "SWAP1"
    },
    "3372": {
      "op": "POP"
    },
    "3373": {
      "jump": "o",
      "op": "JUMP"
    },
    "3374": {
      "op": "JUMPDEST"
    },
    "3375": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "3380": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3382": {
      "op": "SHL"
    },
    "3383": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3385": {
      "op": "MSTORE"
    },
    "3386": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "3388": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "3390": {
      "op": "MSTORE"
    },
    "3391": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3393": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3395": {
      "op": "REVERT"
    },
    "3396": {
      "op": "JUMPDEST"
    },
    "3397": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3399": {
      "op": "MLOAD"
    },
    "3400": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3402": {
      "op": "DUP3"
    },
    "3403": {
      "op": "ADD"
    },
    "3404": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3406": {
      "op": "NOT"
    },
    "3407": {
      "op": "AND"
    },
    "3408": {
      "op": "DUP2"
    },
    "3409": {
      "op": "ADD"
    },
    "3410": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "3419": {
      "op": "DUP2"
    },
    "3420": {
      "op": "GT"
    },
    "3421": {
      "op": "DUP3"
    },
    "3422": {
      "op": "DUP3"
    },
    "3423": {
      "op": "LT"
    },
    "3424": {
      "op": "OR"
    },
    "3425": {
      "op": "ISZERO"
    },
    "3426": {
      "op": "PUSH3",
      "value": "0xD70"
    },
    "3430": {
      "op": "JUMPI"
    },
    "3431": {
      "op": "PUSH3",
      "value": "0xD70"
    },
    "3435": {
      "op": "PUSH3",
      "value": "0xD2E"
    },
    "3439": {
      "jump": "i",
      "op": "JUMP"
    },
    "3440": {
      "op": "JUMPDEST"
    },
    "3441": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3443": {
      "op": "MSTORE"
    },
    "3444": {
      "op": "SWAP2"
    },
    "3445": {
      "op": "SWAP1"
    },
    "3446": {
      "op": "POP"
    },
    "3447": {
      "jump": "o",
      "op": "JUMP"
    },
    "3448": {
      "op": "JUMPDEST"
    },
    "3449": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3451": {
      "op": "DUP3"
    },
    "3452": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3454": {
      "op": "DUP4"
    },
    "3455": {
      "op": "ADD"
    },
    "3456": {
      "op": "SLT"
    },
    "3457": {
      "op": "PUSH3",
      "value": "0xD8A"
    },
    "3461": {
      "op": "JUMPI"
    },
    "3462": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3464": {
      "op": "DUP1"
    },
    "3465": {
      "op": "REVERT"
    },
    "3466": {
      "op": "JUMPDEST"
    },
    "3467": {
      "op": "DUP2"
    },
    "3468": {
      "op": "CALLDATALOAD"
    },
    "3469": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "3478": {
      "op": "DUP2"
    },
    "3479": {
      "op": "GT"
    },
    "3480": {
      "op": "ISZERO"
    },
    "3481": {
      "op": "PUSH3",
      "value": "0xDA7"
    },
    "3485": {
      "op": "JUMPI"
    },
    "3486": {
      "op": "PUSH3",
      "value": "0xDA7"
    },
    "3490": {
      "op": "PUSH3",
      "value": "0xD2E"
    },
    "3494": {
      "jump": "i",
      "op": "JUMP"
    },
    "3495": {
      "op": "JUMPDEST"
    },
    "3496": {
      "op": "PUSH3",
      "value": "0xDBC"
    },
    "3500": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3502": {
      "op": "DUP3"
    },
    "3503": {
      "op": "ADD"
    },
    "3504": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3506": {
      "op": "NOT"
    },
    "3507": {
      "op": "AND"
    },
    "3508": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3510": {
      "op": "ADD"
    },
    "3511": {
      "op": "PUSH3",
      "value": "0xD44"
    },
    "3515": {
      "jump": "i",
      "op": "JUMP"
    },
    "3516": {
      "op": "JUMPDEST"
    },
    "3517": {
      "op": "DUP2"
    },
    "3518": {
      "op": "DUP2"
    },
    "3519": {
      "op": "MSTORE"
    },
    "3520": {
      "op": "DUP5"
    },
    "3521": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3523": {
      "op": "DUP4"
    },
    "3524": {
      "op": "DUP7"
    },
    "3525": {
      "op": "ADD"
    },
    "3526": {
      "op": "ADD"
    },
    "3527": {
      "op": "GT"
    },
    "3528": {
      "op": "ISZERO"
    },
    "3529": {
      "op": "PUSH3",
      "value": "0xDD2"
    },
    "3533": {
      "op": "JUMPI"
    },
    "3534": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3536": {
      "op": "DUP1"
    },
    "3537": {
      "op": "REVERT"
    },
    "3538": {
      "op": "JUMPDEST"
    },
    "3539": {
      "op": "DUP2"
    },
    "3540": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3542": {
      "op": "DUP6"
    },
    "3543": {
      "op": "ADD"
    },
    "3544": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3546": {
      "op": "DUP4"
    },
    "3547": {
      "op": "ADD"
    },
    "3548": {
      "op": "CALLDATACOPY"
    },
    "3549": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3551": {
      "op": "SWAP2"
    },
    "3552": {
      "op": "DUP2"
    },
    "3553": {
      "op": "ADD"
    },
    "3554": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3556": {
      "op": "ADD"
    },
    "3557": {
      "op": "SWAP2"
    },
    "3558": {
      "op": "SWAP1"
    },
    "3559": {
      "op": "SWAP2"
    },
    "3560": {
      "op": "MSTORE"
    },
    "3561": {
      "op": "SWAP4"
    },
    "3562": {
      "op": "SWAP3"
    },
    "3563": {
      "op": "POP"
    },
    "3564": {
      "op": "POP"
    },
    "3565": {
      "op": "POP"
    },
    "3566": {
      "jump": "o",
      "op": "JUMP"
    },
    "3567": {
      "op": "JUMPDEST"
    },
    "3568": {
      "op": "DUP1"
    },
    "3569": {
      "op": "CALLDATALOAD"
    },
    "3570": {
      "op": "DUP1"
    },
    "3571": {
      "op": "ISZERO"
    },
    "3572": {
      "op": "ISZERO"
    },
    "3573": {
      "op": "DUP2"
    },
    "3574": {
      "op": "EQ"
    },
    "3575": {
      "op": "PUSH3",
      "value": "0xC6C"
    },
    "3579": {
      "op": "JUMPI"
    },
    "3580": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3582": {
      "op": "DUP1"
    },
    "3583": {
      "op": "REVERT"
    },
    "3584": {
      "op": "JUMPDEST"
    },
    "3585": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3587": {
      "op": "DUP3"
    },
    "3588": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3590": {
      "op": "DUP4"
    },
    "3591": {
      "op": "ADD"
    },
    "3592": {
      "op": "SLT"
    },
    "3593": {
      "op": "PUSH3",
      "value": "0xE12"
    },
    "3597": {
      "op": "JUMPI"
    },
    "3598": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3600": {
      "op": "DUP1"
    },
    "3601": {
      "op": "REVERT"
    },
    "3602": {
      "op": "JUMPDEST"
    },
    "3603": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3605": {
      "op": "MLOAD"
    },
    "3606": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3608": {
      "op": "DUP2"
    },
    "3609": {
      "op": "ADD"
    },
    "3610": {
      "op": "DUP2"
    },
    "3611": {
      "op": "DUP2"
    },
    "3612": {
      "op": "LT"
    },
    "3613": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "3622": {
      "op": "DUP3"
    },
    "3623": {
      "op": "GT"
    },
    "3624": {
      "op": "OR"
    },
    "3625": {
      "op": "ISZERO"
    },
    "3626": {
      "op": "PUSH3",
      "value": "0xE38"
    },
    "3630": {
      "op": "JUMPI"
    },
    "3631": {
      "op": "PUSH3",
      "value": "0xE38"
    },
    "3635": {
      "op": "PUSH3",
      "value": "0xD2E"
    },
    "3639": {
      "jump": "i",
      "op": "JUMP"
    },
    "3640": {
      "op": "JUMPDEST"
    },
    "3641": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3643": {
      "op": "MSTORE"
    },
    "3644": {
      "op": "DUP1"
    },
    "3645": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3647": {
      "op": "DUP5"
    },
    "3648": {
      "op": "ADD"
    },
    "3649": {
      "op": "DUP6"
    },
    "3650": {
      "op": "DUP2"
    },
    "3651": {
      "op": "GT"
    },
    "3652": {
      "op": "ISZERO"
    },
    "3653": {
      "op": "PUSH3",
      "value": "0xE4E"
    },
    "3657": {
      "op": "JUMPI"
    },
    "3658": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3660": {
      "op": "DUP1"
    },
    "3661": {
      "op": "REVERT"
    },
    "3662": {
      "op": "JUMPDEST"
    },
    "3663": {
      "op": "DUP5"
    },
    "3664": {
      "op": "JUMPDEST"
    },
    "3665": {
      "op": "DUP2"
    },
    "3666": {
      "op": "DUP2"
    },
    "3667": {
      "op": "LT"
    },
    "3668": {
      "op": "ISZERO"
    },
    "3669": {
      "op": "PUSH3",
      "value": "0xE6A"
    },
    "3673": {
      "op": "JUMPI"
    },
    "3674": {
      "op": "DUP1"
    },
    "3675": {
      "op": "CALLDATALOAD"
    },
    "3676": {
      "op": "DUP4"
    },
    "3677": {
      "op": "MSTORE"
    },
    "3678": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3680": {
      "op": "SWAP3"
    },
    "3681": {
      "op": "DUP4"
    },
    "3682": {
      "op": "ADD"
    },
    "3683": {
      "op": "SWAP3"
    },
    "3684": {
      "op": "ADD"
    },
    "3685": {
      "op": "PUSH3",
      "value": "0xE50"
    },
    "3689": {
      "op": "JUMP"
    },
    "3690": {
      "op": "JUMPDEST"
    },
    "3691": {
      "op": "POP"
    },
    "3692": {
      "op": "SWAP2"
    },
    "3693": {
      "op": "SWAP6"
    },
    "3694": {
      "op": "SWAP5"
    },
    "3695": {
      "op": "POP"
    },
    "3696": {
      "op": "POP"
    },
    "3697": {
      "op": "POP"
    },
    "3698": {
      "op": "POP"
    },
    "3699": {
      "op": "POP"
    },
    "3700": {
      "jump": "o",
      "op": "JUMP"
    },
    "3701": {
      "op": "JUMPDEST"
    },
    "3702": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3704": {
      "op": "DUP3"
    },
    "3705": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3707": {
      "op": "DUP4"
    },
    "3708": {
      "op": "ADD"
    },
    "3709": {
      "op": "SLT"
    },
    "3710": {
      "op": "PUSH3",
      "value": "0xE87"
    },
    "3714": {
      "op": "JUMPI"
    },
    "3715": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3717": {
      "op": "DUP1"
    },
    "3718": {
      "op": "REVERT"
    },
    "3719": {
      "op": "JUMPDEST"
    },
    "3720": {
      "op": "DUP2"
    },
    "3721": {
      "op": "CALLDATALOAD"
    },
    "3722": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3724": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "3733": {
      "op": "DUP3"
    },
    "3734": {
      "op": "GT"
    },
    "3735": {
      "op": "ISZERO"
    },
    "3736": {
      "op": "PUSH3",
      "value": "0xEA6"
    },
    "3740": {
      "op": "JUMPI"
    },
    "3741": {
      "op": "PUSH3",
      "value": "0xEA6"
    },
    "3745": {
      "op": "PUSH3",
      "value": "0xD2E"
    },
    "3749": {
      "jump": "i",
      "op": "JUMP"
    },
    "3750": {
      "op": "JUMPDEST"
    },
    "3751": {
      "op": "DUP2"
    },
    "3752": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "3754": {
      "op": "SHL"
    },
    "3755": {
      "op": "PUSH3",
      "value": "0xEB7"
    },
    "3759": {
      "op": "DUP3"
    },
    "3760": {
      "op": "DUP3"
    },
    "3761": {
      "op": "ADD"
    },
    "3762": {
      "op": "PUSH3",
      "value": "0xD44"
    },
    "3766": {
      "jump": "i",
      "op": "JUMP"
    },
    "3767": {
      "op": "JUMPDEST"
    },
    "3768": {
      "op": "SWAP3"
    },
    "3769": {
      "op": "DUP4"
    },
    "3770": {
      "op": "MSTORE"
    },
    "3771": {
      "op": "DUP5"
    },
    "3772": {
      "op": "DUP2"
    },
    "3773": {
      "op": "ADD"
    },
    "3774": {
      "op": "DUP3"
    },
    "3775": {
      "op": "ADD"
    },
    "3776": {
      "op": "SWAP3"
    },
    "3777": {
      "op": "DUP3"
    },
    "3778": {
      "op": "DUP2"
    },
    "3779": {
      "op": "ADD"
    },
    "3780": {
      "op": "SWAP1"
    },
    "3781": {
      "op": "DUP8"
    },
    "3782": {
      "op": "DUP6"
    },
    "3783": {
      "op": "GT"
    },
    "3784": {
      "op": "ISZERO"
    },
    "3785": {
      "op": "PUSH3",
      "value": "0xED2"
    },
    "3789": {
      "op": "JUMPI"
    },
    "3790": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3792": {
      "op": "DUP1"
    },
    "3793": {
      "op": "REVERT"
    },
    "3794": {
      "op": "JUMPDEST"
    },
    "3795": {
      "op": "DUP4"
    },
    "3796": {
      "op": "DUP8"
    },
    "3797": {
      "op": "ADD"
    },
    "3798": {
      "op": "SWAP3"
    },
    "3799": {
      "op": "POP"
    },
    "3800": {
      "op": "JUMPDEST"
    },
    "3801": {
      "op": "DUP5"
    },
    "3802": {
      "op": "DUP4"
    },
    "3803": {
      "op": "LT"
    },
    "3804": {
      "op": "ISZERO"
    },
    "3805": {
      "op": "PUSH3",
      "value": "0xEFE"
    },
    "3809": {
      "op": "JUMPI"
    },
    "3810": {
      "op": "DUP3"
    },
    "3811": {
      "op": "CALLDATALOAD"
    },
    "3812": {
      "op": "PUSH3",
      "value": "0xEEE"
    },
    "3816": {
      "op": "DUP2"
    },
    "3817": {
      "op": "PUSH3",
      "value": "0xC49"
    },
    "3821": {
      "jump": "i",
      "op": "JUMP"
    },
    "3822": {
      "op": "JUMPDEST"
    },
    "3823": {
      "op": "DUP3"
    },
    "3824": {
      "op": "MSTORE"
    },
    "3825": {
      "op": "SWAP2"
    },
    "3826": {
      "op": "DUP4"
    },
    "3827": {
      "op": "ADD"
    },
    "3828": {
      "op": "SWAP2"
    },
    "3829": {
      "op": "SWAP1"
    },
    "3830": {
      "op": "DUP4"
    },
    "3831": {
      "op": "ADD"
    },
    "3832": {
      "op": "SWAP1"
    },
    "3833": {
      "op": "PUSH3",
      "value": "0xED8"
    },
    "3837": {
      "op": "JUMP"
    },
    "3838": {
      "op": "JUMPDEST"
    },
    "3839": {
      "op": "SWAP8"
    },
    "3840": {
      "op": "SWAP7"
    },
    "3841": {
      "op": "POP"
    },
    "3842": {
      "op": "POP"
    },
    "3843": {
      "op": "POP"
    },
    "3844": {
      "op": "POP"
    },
    "3845": {
      "op": "POP"
    },
    "3846": {
      "op": "POP"
    },
    "3847": {
      "op": "POP"
    },
    "3848": {
      "jump": "o",
      "op": "JUMP"
    },
    "3849": {
      "op": "JUMPDEST"
    },
    "3850": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3852": {
      "op": "DUP1"
    },
    "3853": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3855": {
      "op": "DUP1"
    },
    "3856": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3858": {
      "op": "DUP1"
    },
    "3859": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3861": {
      "op": "DUP1"
    },
    "3862": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3864": {
      "op": "PUSH2",
      "value": "0x160"
    },
    "3867": {
      "op": "DUP11"
    },
    "3868": {
      "op": "DUP13"
    },
    "3869": {
      "op": "SUB"
    },
    "3870": {
      "op": "SLT"
    },
    "3871": {
      "op": "ISZERO"
    },
    "3872": {
      "op": "PUSH3",
      "value": "0xF29"
    },
    "3876": {
      "op": "JUMPI"
    },
    "3877": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3879": {
      "op": "DUP1"
    },
    "3880": {
      "op": "REVERT"
    },
    "3881": {
      "op": "JUMPDEST"
    },
    "3882": {
      "op": "DUP10"
    },
    "3883": {
      "op": "CALLDATALOAD"
    },
    "3884": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "3893": {
      "op": "DUP1"
    },
    "3894": {
      "op": "DUP3"
    },
    "3895": {
      "op": "GT"
    },
    "3896": {
      "op": "ISZERO"
    },
    "3897": {
      "op": "PUSH3",
      "value": "0xF42"
    },
    "3901": {
      "op": "JUMPI"
    },
    "3902": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3904": {
      "op": "DUP1"
    },
    "3905": {
      "op": "REVERT"
    },
    "3906": {
      "op": "JUMPDEST"
    },
    "3907": {
      "op": "PUSH3",
      "value": "0xF50"
    },
    "3911": {
      "op": "DUP14"
    },
    "3912": {
      "op": "DUP4"
    },
    "3913": {
      "op": "DUP15"
    },
    "3914": {
      "op": "ADD"
    },
    "3915": {
      "op": "PUSH3",
      "value": "0xD78"
    },
    "3919": {
      "jump": "i",
      "op": "JUMP"
    },
    "3920": {
      "op": "JUMPDEST"
    },
    "3921": {
      "op": "SWAP11"
    },
    "3922": {
      "op": "POP"
    },
    "3923": {
      "op": "PUSH3",
      "value": "0xF60"
    },
    "3927": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3929": {
      "op": "DUP14"
    },
    "3930": {
      "op": "ADD"
    },
    "3931": {
      "op": "PUSH3",
      "value": "0xDEF"
    },
    "3935": {
      "jump": "i",
      "op": "JUMP"
    },
    "3936": {
      "op": "JUMPDEST"
    },
    "3937": {
      "op": "SWAP10"
    },
    "3938": {
      "op": "POP"
    },
    "3939": {
      "op": "PUSH3",
      "value": "0xF70"
    },
    "3943": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3945": {
      "op": "DUP14"
    },
    "3946": {
      "op": "ADD"
    },
    "3947": {
      "op": "PUSH3",
      "value": "0xDEF"
    },
    "3951": {
      "jump": "i",
      "op": "JUMP"
    },
    "3952": {
      "op": "JUMPDEST"
    },
    "3953": {
      "op": "SWAP9"
    },
    "3954": {
      "op": "POP"
    },
    "3955": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3957": {
      "op": "DUP13"
    },
    "3958": {
      "op": "ADD"
    },
    "3959": {
      "op": "CALLDATALOAD"
    },
    "3960": {
      "op": "SWAP8"
    },
    "3961": {
      "op": "POP"
    },
    "3962": {
      "op": "PUSH3",
      "value": "0xF88"
    },
    "3966": {
      "op": "DUP14"
    },
    "3967": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3969": {
      "op": "DUP15"
    },
    "3970": {
      "op": "ADD"
    },
    "3971": {
      "op": "PUSH3",
      "value": "0xE00"
    },
    "3975": {
      "jump": "i",
      "op": "JUMP"
    },
    "3976": {
      "op": "JUMPDEST"
    },
    "3977": {
      "op": "SWAP7"
    },
    "3978": {
      "op": "POP"
    },
    "3979": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3981": {
      "op": "DUP13"
    },
    "3982": {
      "op": "ADD"
    },
    "3983": {
      "op": "CALLDATALOAD"
    },
    "3984": {
      "op": "SWAP2"
    },
    "3985": {
      "op": "POP"
    },
    "3986": {
      "op": "DUP1"
    },
    "3987": {
      "op": "DUP3"
    },
    "3988": {
      "op": "GT"
    },
    "3989": {
      "op": "ISZERO"
    },
    "3990": {
      "op": "PUSH3",
      "value": "0xF9F"
    },
    "3994": {
      "op": "JUMPI"
    },
    "3995": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3997": {
      "op": "DUP1"
    },
    "3998": {
      "op": "REVERT"
    },
    "3999": {
      "op": "JUMPDEST"
    },
    "4000": {
      "op": "PUSH3",
      "value": "0xFAD"
    },
    "4004": {
      "op": "DUP14"
    },
    "4005": {
      "op": "DUP4"
    },
    "4006": {
      "op": "DUP15"
    },
    "4007": {
      "op": "ADD"
    },
    "4008": {
      "op": "PUSH3",
      "value": "0xE75"
    },
    "4012": {
      "jump": "i",
      "op": "JUMP"
    },
    "4013": {
      "op": "JUMPDEST"
    },
    "4014": {
      "op": "SWAP6"
    },
    "4015": {
      "op": "POP"
    },
    "4016": {
      "op": "PUSH3",
      "value": "0xFBE"
    },
    "4020": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "4023": {
      "op": "DUP14"
    },
    "4024": {
      "op": "ADD"
    },
    "4025": {
      "op": "PUSH3",
      "value": "0xC5F"
    },
    "4029": {
      "jump": "i",
      "op": "JUMP"
    },
    "4030": {
      "op": "JUMPDEST"
    },
    "4031": {
      "op": "SWAP5"
    },
    "4032": {
      "op": "POP"
    },
    "4033": {
      "op": "PUSH3",
      "value": "0xFCF"
    },
    "4037": {
      "op": "PUSH2",
      "value": "0x120"
    },
    "4040": {
      "op": "DUP14"
    },
    "4041": {
      "op": "ADD"
    },
    "4042": {
      "op": "PUSH3",
      "value": "0xC5F"
    },
    "4046": {
      "jump": "i",
      "op": "JUMP"
    },
    "4047": {
      "op": "JUMPDEST"
    },
    "4048": {
      "op": "SWAP4"
    },
    "4049": {
      "op": "POP"
    },
    "4050": {
      "op": "PUSH2",
      "value": "0x140"
    },
    "4053": {
      "op": "DUP13"
    },
    "4054": {
      "op": "ADD"
    },
    "4055": {
      "op": "CALLDATALOAD"
    },
    "4056": {
      "op": "SWAP2"
    },
    "4057": {
      "op": "POP"
    },
    "4058": {
      "op": "DUP1"
    },
    "4059": {
      "op": "DUP3"
    },
    "4060": {
      "op": "GT"
    },
    "4061": {
      "op": "ISZERO"
    },
    "4062": {
      "op": "PUSH3",
      "value": "0xFE7"
    },
    "4066": {
      "op": "JUMPI"
    },
    "4067": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4069": {
      "op": "DUP1"
    },
    "4070": {
      "op": "REVERT"
    },
    "4071": {
      "op": "JUMPDEST"
    },
    "4072": {
      "op": "POP"
    },
    "4073": {
      "op": "PUSH3",
      "value": "0xFF6"
    },
    "4077": {
      "op": "DUP13"
    },
    "4078": {
      "op": "DUP3"
    },
    "4079": {
      "op": "DUP14"
    },
    "4080": {
      "op": "ADD"
    },
    "4081": {
      "op": "PUSH3",
      "value": "0xD78"
    },
    "4085": {
      "jump": "i",
      "op": "JUMP"
    },
    "4086": {
      "op": "JUMPDEST"
    },
    "4087": {
      "op": "SWAP2"
    },
    "4088": {
      "op": "POP"
    },
    "4089": {
      "op": "POP"
    },
    "4090": {
      "op": "SWAP3"
    },
    "4091": {
      "op": "SWAP6"
    },
    "4092": {
      "op": "SWAP9"
    },
    "4093": {
      "op": "POP"
    },
    "4094": {
      "op": "SWAP3"
    },
    "4095": {
      "op": "SWAP6"
    },
    "4096": {
      "op": "SWAP9"
    },
    "4097": {
      "op": "POP"
    },
    "4098": {
      "op": "SWAP3"
    },
    "4099": {
      "op": "SWAP6"
    },
    "4100": {
      "op": "SWAP9"
    },
    "4101": {
      "jump": "o",
      "op": "JUMP"
    },
    "4102": {
      "op": "JUMPDEST"
    },
    "4103": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4105": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4107": {
      "op": "DUP3"
    },
    "4108": {
      "op": "DUP5"
    },
    "4109": {
      "op": "SUB"
    },
    "4110": {
      "op": "SLT"
    },
    "4111": {
      "op": "ISZERO"
    },
    "4112": {
      "op": "PUSH3",
      "value": "0x1019"
    },
    "4116": {
      "op": "JUMPI"
    },
    "4117": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4119": {
      "op": "DUP1"
    },
    "4120": {
      "op": "REVERT"
    },
    "4121": {
      "op": "JUMPDEST"
    },
    "4122": {
      "op": "DUP2"
    },
    "4123": {
      "op": "MLOAD"
    },
    "4124": {
      "op": "PUSH3",
      "value": "0xC91"
    },
    "4128": {
      "op": "DUP2"
    },
    "4129": {
      "op": "PUSH3",
      "value": "0xC49"
    },
    "4133": {
      "jump": "i",
      "op": "JUMP"
    },
    "4134": {
      "op": "JUMPDEST"
    },
    "4135": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4140": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4142": {
      "op": "SHL"
    },
    "4143": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4145": {
      "op": "MSTORE"
    },
    "4146": {
      "op": "PUSH1",
      "value": "0x32"
    },
    "4148": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4150": {
      "op": "MSTORE"
    },
    "4151": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4153": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4155": {
      "op": "REVERT"
    },
    "4156": {
      "op": "JUMPDEST"
    },
    "4157": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4159": {
      "op": "DUP2"
    },
    "4160": {
      "op": "MLOAD"
    },
    "4161": {
      "op": "DUP1"
    },
    "4162": {
      "op": "DUP5"
    },
    "4163": {
      "op": "MSTORE"
    },
    "4164": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4166": {
      "op": "JUMPDEST"
    },
    "4167": {
      "op": "DUP2"
    },
    "4168": {
      "op": "DUP2"
    },
    "4169": {
      "op": "LT"
    },
    "4170": {
      "op": "ISZERO"
    },
    "4171": {
      "op": "PUSH3",
      "value": "0x1064"
    },
    "4175": {
      "op": "JUMPI"
    },
    "4176": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4178": {
      "op": "DUP2"
    },
    "4179": {
      "op": "DUP6"
    },
    "4180": {
      "op": "ADD"
    },
    "4181": {
      "op": "DUP2"
    },
    "4182": {
      "op": "ADD"
    },
    "4183": {
      "op": "MLOAD"
    },
    "4184": {
      "op": "DUP7"
    },
    "4185": {
      "op": "DUP4"
    },
    "4186": {
      "op": "ADD"
    },
    "4187": {
      "op": "DUP3"
    },
    "4188": {
      "op": "ADD"
    },
    "4189": {
      "op": "MSTORE"
    },
    "4190": {
      "op": "ADD"
    },
    "4191": {
      "op": "PUSH3",
      "value": "0x1046"
    },
    "4195": {
      "op": "JUMP"
    },
    "4196": {
      "op": "JUMPDEST"
    },
    "4197": {
      "op": "DUP2"
    },
    "4198": {
      "op": "DUP2"
    },
    "4199": {
      "op": "GT"
    },
    "4200": {
      "op": "ISZERO"
    },
    "4201": {
      "op": "PUSH3",
      "value": "0x1077"
    },
    "4205": {
      "op": "JUMPI"
    },
    "4206": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4208": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4210": {
      "op": "DUP4"
    },
    "4211": {
      "op": "DUP8"
    },
    "4212": {
      "op": "ADD"
    },
    "4213": {
      "op": "ADD"
    },
    "4214": {
      "op": "MSTORE"
    },
    "4215": {
      "op": "JUMPDEST"
    },
    "4216": {
      "op": "POP"
    },
    "4217": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4219": {
      "op": "ADD"
    },
    "4220": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4222": {
      "op": "NOT"
    },
    "4223": {
      "op": "AND"
    },
    "4224": {
      "op": "SWAP3"
    },
    "4225": {
      "op": "SWAP1"
    },
    "4226": {
      "op": "SWAP3"
    },
    "4227": {
      "op": "ADD"
    },
    "4228": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4230": {
      "op": "ADD"
    },
    "4231": {
      "op": "SWAP3"
    },
    "4232": {
      "op": "SWAP2"
    },
    "4233": {
      "op": "POP"
    },
    "4234": {
      "op": "POP"
    },
    "4235": {
      "jump": "o",
      "op": "JUMP"
    },
    "4236": {
      "op": "JUMPDEST"
    },
    "4237": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4239": {
      "op": "PUSH2",
      "value": "0x140"
    },
    "4242": {
      "op": "DUP1"
    },
    "4243": {
      "op": "DUP4"
    },
    "4244": {
      "op": "MSTORE"
    },
    "4245": {
      "op": "PUSH3",
      "value": "0x10A2"
    },
    "4249": {
      "op": "DUP2"
    },
    "4250": {
      "op": "DUP5"
    },
    "4251": {
      "op": "ADD"
    },
    "4252": {
      "op": "DUP15"
    },
    "4253": {
      "op": "PUSH3",
      "value": "0x103C"
    },
    "4257": {
      "jump": "i",
      "op": "JUMP"
    },
    "4258": {
      "op": "JUMPDEST"
    },
    "4259": {
      "op": "DUP13"
    },
    "4260": {
      "op": "ISZERO"
    },
    "4261": {
      "op": "ISZERO"
    },
    "4262": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4264": {
      "op": "DUP6"
    },
    "4265": {
      "op": "ADD"
    },
    "4266": {
      "op": "MSTORE"
    },
    "4267": {
      "op": "DUP12"
    },
    "4268": {
      "op": "ISZERO"
    },
    "4269": {
      "op": "ISZERO"
    },
    "4270": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4272": {
      "op": "DUP6"
    },
    "4273": {
      "op": "ADD"
    },
    "4274": {
      "op": "MSTORE"
    },
    "4275": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4277": {
      "op": "DUP5"
    },
    "4278": {
      "op": "ADD"
    },
    "4279": {
      "op": "DUP12"
    },
    "4280": {
      "op": "SWAP1"
    },
    "4281": {
      "op": "MSTORE"
    },
    "4282": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4284": {
      "op": "DUP5"
    },
    "4285": {
      "op": "ADD"
    },
    "4286": {
      "op": "DUP11"
    },
    "4287": {
      "op": "SWAP1"
    },
    "4288": {
      "op": "MSTORE"
    },
    "4289": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4291": {
      "op": "DUP5"
    },
    "4292": {
      "op": "ADD"
    },
    "4293": {
      "op": "DUP10"
    },
    "4294": {
      "op": "SWAP1"
    },
    "4295": {
      "op": "MSTORE"
    },
    "4296": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "4298": {
      "op": "DUP5"
    },
    "4299": {
      "op": "ADD"
    },
    "4300": {
      "op": "DUP9"
    },
    "4301": {
      "op": "SWAP1"
    },
    "4302": {
      "op": "MSTORE"
    },
    "4303": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4305": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4307": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4309": {
      "op": "SHL"
    },
    "4310": {
      "op": "SUB"
    },
    "4311": {
      "op": "DUP8"
    },
    "4312": {
      "op": "DUP2"
    },
    "4313": {
      "op": "AND"
    },
    "4314": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4316": {
      "op": "DUP7"
    },
    "4317": {
      "op": "ADD"
    },
    "4318": {
      "op": "MSTORE"
    },
    "4319": {
      "op": "DUP7"
    },
    "4320": {
      "op": "AND"
    },
    "4321": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "4324": {
      "op": "DUP6"
    },
    "4325": {
      "op": "ADD"
    },
    "4326": {
      "op": "MSTORE"
    },
    "4327": {
      "op": "DUP4"
    },
    "4328": {
      "op": "DUP2"
    },
    "4329": {
      "op": "SUB"
    },
    "4330": {
      "op": "PUSH2",
      "value": "0x120"
    },
    "4333": {
      "op": "DUP6"
    },
    "4334": {
      "op": "ADD"
    },
    "4335": {
      "op": "MSTORE"
    },
    "4336": {
      "op": "SWAP1"
    },
    "4337": {
      "op": "POP"
    },
    "4338": {
      "op": "PUSH3",
      "value": "0x10FD"
    },
    "4342": {
      "op": "DUP2"
    },
    "4343": {
      "op": "DUP6"
    },
    "4344": {
      "op": "PUSH3",
      "value": "0x103C"
    },
    "4348": {
      "jump": "i",
      "op": "JUMP"
    },
    "4349": {
      "op": "JUMPDEST"
    },
    "4350": {
      "op": "SWAP14"
    },
    "4351": {
      "op": "SWAP13"
    },
    "4352": {
      "op": "POP"
    },
    "4353": {
      "op": "POP"
    },
    "4354": {
      "op": "POP"
    },
    "4355": {
      "op": "POP"
    },
    "4356": {
      "op": "POP"
    },
    "4357": {
      "op": "POP"
    },
    "4358": {
      "op": "POP"
    },
    "4359": {
      "op": "POP"
    },
    "4360": {
      "op": "POP"
    },
    "4361": {
      "op": "POP"
    },
    "4362": {
      "op": "POP"
    },
    "4363": {
      "op": "POP"
    },
    "4364": {
      "op": "POP"
    },
    "4365": {
      "jump": "o",
      "op": "JUMP"
    },
    "4366": {
      "op": "JUMPDEST"
    },
    "4367": {
      "op": "DUP1"
    },
    "4368": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4370": {
      "op": "JUMPDEST"
    },
    "4371": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4373": {
      "op": "DUP2"
    },
    "4374": {
      "op": "LT"
    },
    "4375": {
      "op": "ISZERO"
    },
    "4376": {
      "op": "PUSH3",
      "value": "0x113C"
    },
    "4380": {
      "op": "JUMPI"
    },
    "4381": {
      "op": "DUP2"
    },
    "4382": {
      "op": "MLOAD"
    },
    "4383": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4385": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4387": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4389": {
      "op": "SHL"
    },
    "4390": {
      "op": "SUB"
    },
    "4391": {
      "op": "AND"
    },
    "4392": {
      "op": "DUP5"
    },
    "4393": {
      "op": "MSTORE"
    },
    "4394": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4396": {
      "op": "SWAP4"
    },
    "4397": {
      "op": "DUP5"
    },
    "4398": {
      "op": "ADD"
    },
    "4399": {
      "op": "SWAP4"
    },
    "4400": {
      "op": "SWAP1"
    },
    "4401": {
      "op": "SWAP2"
    },
    "4402": {
      "op": "ADD"
    },
    "4403": {
      "op": "SWAP1"
    },
    "4404": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4406": {
      "op": "ADD"
    },
    "4407": {
      "op": "PUSH3",
      "value": "0x1112"
    },
    "4411": {
      "op": "JUMP"
    },
    "4412": {
      "op": "JUMPDEST"
    },
    "4413": {
      "op": "POP"
    },
    "4414": {
      "op": "POP"
    },
    "4415": {
      "op": "POP"
    },
    "4416": {
      "op": "POP"
    },
    "4417": {
      "jump": "o",
      "op": "JUMP"
    },
    "4418": {
      "op": "JUMPDEST"
    },
    "4419": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4421": {
      "op": "DUP2"
    },
    "4422": {
      "op": "MLOAD"
    },
    "4423": {
      "op": "DUP1"
    },
    "4424": {
      "op": "DUP5"
    },
    "4425": {
      "op": "MSTORE"
    },
    "4426": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4428": {
      "op": "DUP1"
    },
    "4429": {
      "op": "DUP6"
    },
    "4430": {
      "op": "ADD"
    },
    "4431": {
      "op": "SWAP5"
    },
    "4432": {
      "op": "POP"
    },
    "4433": {
      "op": "DUP1"
    },
    "4434": {
      "op": "DUP5"
    },
    "4435": {
      "op": "ADD"
    },
    "4436": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4438": {
      "op": "JUMPDEST"
    },
    "4439": {
      "op": "DUP4"
    },
    "4440": {
      "op": "DUP2"
    },
    "4441": {
      "op": "LT"
    },
    "4442": {
      "op": "ISZERO"
    },
    "4443": {
      "op": "PUSH3",
      "value": "0x117D"
    },
    "4447": {
      "op": "JUMPI"
    },
    "4448": {
      "op": "DUP2"
    },
    "4449": {
      "op": "MLOAD"
    },
    "4450": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4452": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4454": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4456": {
      "op": "SHL"
    },
    "4457": {
      "op": "SUB"
    },
    "4458": {
      "op": "AND"
    },
    "4459": {
      "op": "DUP8"
    },
    "4460": {
      "op": "MSTORE"
    },
    "4461": {
      "op": "SWAP6"
    },
    "4462": {
      "op": "DUP3"
    },
    "4463": {
      "op": "ADD"
    },
    "4464": {
      "op": "SWAP6"
    },
    "4465": {
      "op": "SWAP1"
    },
    "4466": {
      "op": "DUP3"
    },
    "4467": {
      "op": "ADD"
    },
    "4468": {
      "op": "SWAP1"
    },
    "4469": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4471": {
      "op": "ADD"
    },
    "4472": {
      "op": "PUSH3",
      "value": "0x1156"
    },
    "4476": {
      "op": "JUMP"
    },
    "4477": {
      "op": "JUMPDEST"
    },
    "4478": {
      "op": "POP"
    },
    "4479": {
      "op": "SWAP5"
    },
    "4480": {
      "op": "SWAP6"
    },
    "4481": {
      "op": "SWAP5"
    },
    "4482": {
      "op": "POP"
    },
    "4483": {
      "op": "POP"
    },
    "4484": {
      "op": "POP"
    },
    "4485": {
      "op": "POP"
    },
    "4486": {
      "op": "POP"
    },
    "4487": {
      "jump": "o",
      "op": "JUMP"
    },
    "4488": {
      "op": "JUMPDEST"
    },
    "4489": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4491": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4493": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4495": {
      "op": "SHL"
    },
    "4496": {
      "op": "SUB"
    },
    "4497": {
      "op": "DUP10"
    },
    "4498": {
      "op": "AND"
    },
    "4499": {
      "op": "DUP2"
    },
    "4500": {
      "op": "MSTORE"
    },
    "4501": {
      "op": "PUSH2",
      "value": "0x1A0"
    },
    "4504": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4506": {
      "op": "DUP1"
    },
    "4507": {
      "op": "DUP4"
    },
    "4508": {
      "op": "ADD"
    },
    "4509": {
      "op": "DUP3"
    },
    "4510": {
      "op": "SWAP1"
    },
    "4511": {
      "op": "MSTORE"
    },
    "4512": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4514": {
      "op": "SWAP2"
    },
    "4515": {
      "op": "SWAP1"
    },
    "4516": {
      "op": "PUSH3",
      "value": "0x11B1"
    },
    "4520": {
      "op": "DUP5"
    },
    "4521": {
      "op": "DUP4"
    },
    "4522": {
      "op": "ADD"
    },
    "4523": {
      "op": "DUP13"
    },
    "4524": {
      "op": "PUSH3",
      "value": "0x103C"
    },
    "4528": {
      "jump": "i",
      "op": "JUMP"
    },
    "4529": {
      "op": "JUMPDEST"
    },
    "4530": {
      "op": "SWAP2"
    },
    "4531": {
      "op": "POP"
    },
    "4532": {
      "op": "DUP10"
    },
    "4533": {
      "op": "ISZERO"
    },
    "4534": {
      "op": "ISZERO"
    },
    "4535": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4537": {
      "op": "DUP6"
    },
    "4538": {
      "op": "ADD"
    },
    "4539": {
      "op": "MSTORE"
    },
    "4540": {
      "op": "DUP9"
    },
    "4541": {
      "op": "ISZERO"
    },
    "4542": {
      "op": "ISZERO"
    },
    "4543": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4545": {
      "op": "DUP6"
    },
    "4546": {
      "op": "ADD"
    },
    "4547": {
      "op": "MSTORE"
    },
    "4548": {
      "op": "DUP8"
    },
    "4549": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4551": {
      "op": "DUP6"
    },
    "4552": {
      "op": "ADD"
    },
    "4553": {
      "op": "MSTORE"
    },
    "4554": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4556": {
      "op": "DUP5"
    },
    "4557": {
      "op": "ADD"
    },
    "4558": {
      "op": "DUP8"
    },
    "4559": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4561": {
      "op": "JUMPDEST"
    },
    "4562": {
      "op": "PUSH1",
      "value": "0x3"
    },
    "4564": {
      "op": "DUP2"
    },
    "4565": {
      "op": "LT"
    },
    "4566": {
      "op": "ISZERO"
    },
    "4567": {
      "op": "PUSH3",
      "value": "0x11F0"
    },
    "4571": {
      "op": "JUMPI"
    },
    "4572": {
      "op": "DUP2"
    },
    "4573": {
      "op": "MLOAD"
    },
    "4574": {
      "op": "DUP4"
    },
    "4575": {
      "op": "MSTORE"
    },
    "4576": {
      "op": "SWAP2"
    },
    "4577": {
      "op": "DUP4"
    },
    "4578": {
      "op": "ADD"
    },
    "4579": {
      "op": "SWAP2"
    },
    "4580": {
      "op": "SWAP1"
    },
    "4581": {
      "op": "DUP4"
    },
    "4582": {
      "op": "ADD"
    },
    "4583": {
      "op": "SWAP1"
    },
    "4584": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4586": {
      "op": "ADD"
    },
    "4587": {
      "op": "PUSH3",
      "value": "0x11D1"
    },
    "4591": {
      "op": "JUMP"
    },
    "4592": {
      "op": "JUMPDEST"
    },
    "4593": {
      "op": "POP"
    },
    "4594": {
      "op": "POP"
    },
    "4595": {
      "op": "POP"
    },
    "4596": {
      "op": "POP"
    },
    "4597": {
      "op": "PUSH3",
      "value": "0x1204"
    },
    "4601": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "4604": {
      "op": "DUP5"
    },
    "4605": {
      "op": "ADD"
    },
    "4606": {
      "op": "DUP7"
    },
    "4607": {
      "op": "PUSH3",
      "value": "0x110E"
    },
    "4611": {
      "jump": "i",
      "op": "JUMP"
    },
    "4612": {
      "op": "JUMPDEST"
    },
    "4613": {
      "op": "DUP3"
    },
    "4614": {
      "op": "DUP2"
    },
    "4615": {
      "op": "SUB"
    },
    "4616": {
      "op": "PUSH2",
      "value": "0x180"
    },
    "4619": {
      "op": "DUP5"
    },
    "4620": {
      "op": "ADD"
    },
    "4621": {
      "op": "MSTORE"
    },
    "4622": {
      "op": "PUSH3",
      "value": "0x1219"
    },
    "4626": {
      "op": "DUP2"
    },
    "4627": {
      "op": "DUP6"
    },
    "4628": {
      "op": "PUSH3",
      "value": "0x1142"
    },
    "4632": {
      "jump": "i",
      "op": "JUMP"
    },
    "4633": {
      "op": "JUMPDEST"
    },
    "4634": {
      "op": "SWAP12"
    },
    "4635": {
      "op": "SWAP11"
    },
    "4636": {
      "op": "POP"
    },
    "4637": {
      "op": "POP"
    },
    "4638": {
      "op": "POP"
    },
    "4639": {
      "op": "POP"
    },
    "4640": {
      "op": "POP"
    },
    "4641": {
      "op": "POP"
    },
    "4642": {
      "op": "POP"
    },
    "4643": {
      "op": "POP"
    },
    "4644": {
      "op": "POP"
    },
    "4645": {
      "op": "POP"
    },
    "4646": {
      "op": "POP"
    },
    "4647": {
      "jump": "o",
      "op": "JUMP"
    },
    "4648": {
      "op": "JUMPDEST"
    },
    "4649": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4651": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4653": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4655": {
      "op": "SHL"
    },
    "4656": {
      "op": "SUB"
    },
    "4657": {
      "op": "DUP4"
    },
    "4658": {
      "op": "AND"
    },
    "4659": {
      "op": "DUP2"
    },
    "4660": {
      "op": "MSTORE"
    },
    "4661": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4663": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4665": {
      "op": "DUP3"
    },
    "4666": {
      "op": "ADD"
    },
    "4667": {
      "op": "DUP2"
    },
    "4668": {
      "op": "SWAP1"
    },
    "4669": {
      "op": "MSTORE"
    },
    "4670": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4672": {
      "op": "SWAP1"
    },
    "4673": {
      "op": "PUSH3",
      "value": "0x124E"
    },
    "4677": {
      "op": "SWAP1"
    },
    "4678": {
      "op": "DUP4"
    },
    "4679": {
      "op": "ADD"
    },
    "4680": {
      "op": "DUP5"
    },
    "4681": {
      "op": "PUSH3",
      "value": "0x103C"
    },
    "4685": {
      "jump": "i",
      "op": "JUMP"
    },
    "4686": {
      "op": "JUMPDEST"
    },
    "4687": {
      "op": "SWAP5"
    },
    "4688": {
      "op": "SWAP4"
    },
    "4689": {
      "op": "POP"
    },
    "4690": {
      "op": "POP"
    },
    "4691": {
      "op": "POP"
    },
    "4692": {
      "op": "POP"
    },
    "4693": {
      "jump": "o",
      "op": "JUMP"
    },
    "4694": {
      "op": "JUMPDEST"
    },
    "4695": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4697": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4699": {
      "op": "NOT"
    },
    "4700": {
      "op": "DUP3"
    },
    "4701": {
      "op": "EQ"
    },
    "4702": {
      "op": "ISZERO"
    },
    "4703": {
      "op": "PUSH3",
      "value": "0x1279"
    },
    "4707": {
      "op": "JUMPI"
    },
    "4708": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4713": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4715": {
      "op": "SHL"
    },
    "4716": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4718": {
      "op": "MSTORE"
    },
    "4719": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "4721": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4723": {
      "op": "MSTORE"
    },
    "4724": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4726": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4728": {
      "op": "REVERT"
    },
    "4729": {
      "op": "JUMPDEST"
    },
    "4730": {
      "op": "POP"
    },
    "4731": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4733": {
      "op": "ADD"
    },
    "4734": {
      "op": "SWAP1"
    },
    "4735": {
      "jump": "o",
      "op": "JUMP"
    },
    "4736": {
      "op": "JUMPDEST"
    },
    "4737": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4739": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4741": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4743": {
      "op": "SHL"
    },
    "4744": {
      "op": "SUB"
    },
    "4745": {
      "op": "DUP5"
    },
    "4746": {
      "op": "AND"
    },
    "4747": {
      "op": "DUP2"
    },
    "4748": {
      "op": "MSTORE"
    },
    "4749": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4751": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4753": {
      "op": "DUP3"
    },
    "4754": {
      "op": "ADD"
    },
    "4755": {
      "op": "DUP2"
    },
    "4756": {
      "op": "SWAP1"
    },
    "4757": {
      "op": "MSTORE"
    },
    "4758": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4760": {
      "op": "SWAP1"
    },
    "4761": {
      "op": "PUSH3",
      "value": "0x12A6"
    },
    "4765": {
      "op": "SWAP1"
    },
    "4766": {
      "op": "DUP4"
    },
    "4767": {
      "op": "ADD"
    },
    "4768": {
      "op": "DUP6"
    },
    "4769": {
      "op": "PUSH3",
      "value": "0x103C"
    },
    "4773": {
      "jump": "i",
      "op": "JUMP"
    },
    "4774": {
      "op": "JUMPDEST"
    },
    "4775": {
      "op": "SWAP1"
    },
    "4776": {
      "op": "POP"
    },
    "4777": {
      "op": "DUP3"
    },
    "4778": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4780": {
      "op": "DUP4"
    },
    "4781": {
      "op": "ADD"
    },
    "4782": {
      "op": "MSTORE"
    },
    "4783": {
      "op": "SWAP5"
    },
    "4784": {
      "op": "SWAP4"
    },
    "4785": {
      "op": "POP"
    },
    "4786": {
      "op": "POP"
    },
    "4787": {
      "op": "POP"
    },
    "4788": {
      "op": "POP"
    },
    "4789": {
      "jump": "o",
      "op": "JUMP"
    },
    "4790": {
      "op": "JUMPDEST"
    },
    "4791": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4793": {
      "op": "DUP1"
    },
    "4794": {
      "op": "DUP3"
    },
    "4795": {
      "op": "MSTORE"
    },
    "4796": {
      "op": "PUSH1",
      "value": "0x2B"
    },
    "4798": {
      "op": "SWAP1"
    },
    "4799": {
      "op": "DUP3"
    },
    "4800": {
      "op": "ADD"
    },
    "4801": {
      "op": "MSTORE"
    },
    "4802": {
      "op": "PUSH32",
      "value": "0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069"
    },
    "4835": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4837": {
      "op": "DUP3"
    },
    "4838": {
      "op": "ADD"
    },
    "4839": {
      "op": "MSTORE"
    },
    "4840": {
      "op": "PUSH11",
      "value": "0x6E697469616C697A696E67"
    },
    "4852": {
      "op": "PUSH1",
      "value": "0xA8"
    },
    "4854": {
      "op": "SHL"
    },
    "4855": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4857": {
      "op": "DUP3"
    },
    "4858": {
      "op": "ADD"
    },
    "4859": {
      "op": "MSTORE"
    },
    "4860": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4862": {
      "op": "ADD"
    },
    "4863": {
      "op": "SWAP1"
    },
    "4864": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "972720e2b8f66b71228bd73543d9887577d68141",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.11;\n\nimport \"@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\";\nimport \"../../interfaces/ICLHouse.sol\";\nimport \"../../interfaces/ICLFactory.sol\";\nimport \"../CLProxy/CLBeacon.sol\";\nimport \"../CLProxy/CLProxyCLH.sol\";\nimport \"../APICLH/CLHouseApi.sol\";\n\n\n/// @title Crypto League House Factory\n/// @notice Create and config CLHouses\n/// @dev This contract is the standard way to create CLH\n/// @author Leonardo Urrego\ncontract CLFactory is ICLFactory, Initializable, OwnableUpgradeable {\n    /// @notice Store the number of houses created\n    uint256 public numCLH;\n\n    uint256[10] __gapUint256;\n\n    /// @notice Contract with the CLH Constructor logic\n    address public CLLConstructorCLH;\n\n    /// @notice Contract with the functions for user management\n    address public CLLUserManagement;\n\n    /// @notice Contract with the functions for Governance\n    address public CLLGovernance;\n\n    /// @notice Contract CLHouse API\n    address public CLHAPI;\n\n    address[10] __gapAddress;\n\n    /// @notice Contract Object of the beacon (store the add)\n    /// @dev The beacon store the updated address of CLH\n    CLBeacon public beaconCLH;\n    \n    /// @notice Relation houseAddr with houseId\n    mapping( address => uint256 ) public mapIdCLH;\n    \n    /// @notice Mapping to store all the created houses\n    mapping(uint256 => ICLHouse) public mapCLH;\n\n    /// @notice Event when house is created\n    /// @param houseAddr Address of the created house\n    /// @param houseName Name of the created house\n    /// @param houseId Id of CLH of the created house\n    event evtNewCLH( address houseAddr, string houseName, uint256 houseId );\n\n    /// @notice Event when a CL Contract address is updated\n    /// @param CLCName Name of contract var\n    /// @param oldAddress Old Address value of the var\n    /// @param newAddress New Address value of the var\n    event evtUpdateCLC( string CLCName, address oldAddress, address newAddress );\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    /// @notice Config the CLFactory with the CL Logic Contracts\n    /// @param _CLLUserManagement Address Contract Logic for user management\n    /// @param _CLLGovernance Address Contract Logic for governance\n    /// @param _CLLConstructorCLH Address Contract with the Constructor logic\n    /// @param _CLHAPI Address of CLHAPI Contract\n    /// @param _beacon Address Beacon Contract\n    /// @dev The constructor create a default CLH with the houseId #0\n    function Init(\n        address _CLLUserManagement,\n        address _CLLGovernance,\n        address _CLLConstructorCLH,\n        address _CLHAPI,\n        address _beacon\n    )\n        public\n        reinitializer( __UPGRADEABLE_CLF_VERSION__ )\n    {\n        beaconCLH = CLBeacon( _beacon );\n\n        CLLUserManagement = _CLLUserManagement;\n        CLLGovernance = _CLLGovernance;\n        CLLConstructorCLH = _CLLConstructorCLH;\n        CLHAPI = _CLHAPI;\n\n        numCLH = 0;\n        mapCLH[ numCLH ] = ICLHouse( address(0) );\n        mapIdCLH[ address(0) ] = numCLH;\n\n        __Ownable_init();\n    }\n\n\n    /// @notice Deploy a new CLHouse\n    /// @param _houseName Name of the CLH\n    /// @param _housePrivate If is set to 1, the CLH is set to private\n    /// @param _houseOpen If is set to 1, the CLH is set to open\n    /// @param _govModel keccak256 hash of the governance model, see the __GOV_* constans\n    /// @param _govRules Array for goverment rules see `enum gRule`\n    /// @param _ManagerWallets Whitelist of address for invitate as managers\n    /// @param _gnosisSafe Contract address of SAFE\n    /// @param _signerWallet Wallet address of the signer for OffChain Tx\n    /// @param _signature Signature for validate OffChain Tx\n    /// @dev Some parameters wil be ignored depending on the governance model\n    function CreateCLH(\n        string memory _houseName,\n        bool _housePrivate,\n        bool _houseOpen,\n        bytes32 _govModel,\n        uint256[3] memory _govRules,\n        address[] memory _ManagerWallets,\n        address _gnosisSafe,\n        address _signerWallet,\n        bytes memory _signature\n    ) \n        public\n    {\n        address houseOwner = msg.sender;\n\n        require( \n            __GOV_DICTATORSHIP__ == _govModel ||\n            __GOV_COMMITTEE__ == _govModel ||\n            __GOV_SIMPLE_MAJORITY__ == _govModel ,\n            \"Invalid Governance Type\"\n        );\n\n        if( _signerWallet != address(0) ) {\n            require( _signature.length == 65, \"CreateCLH: Bad signature length\" );\n            \n            require(\n                _signerWallet == CLHouseApi( CLHAPI ).SignerOCNewCLH(\n                    _houseName,\n                    _housePrivate,\n                    _houseOpen,\n                    _govModel,\n                    _govRules[0],\n                    _govRules[1],\n                    _govRules[2],\n                    _ManagerWallets[0],\n                    address(this),\n                    _signature\n                ),\n                \"CreateCLH: Invalid Signature\"\n            );\n\n            houseOwner = _signerWallet;\n        }\n\n        CLProxyCLH pxyCLH = new CLProxyCLH(\n            address( beaconCLH ),\n            abi.encodeWithSignature(\n                \"Init(address,string,bool,bool,bytes32,uint256[3],address[4],address[])\",\n                houseOwner, \n                _houseName,\n                _housePrivate,\n                _houseOpen,\n                _govModel,\n                _govRules,\n                [ address(this), CLHAPI, _gnosisSafe, CLLConstructorCLH ],\n                _ManagerWallets\n            )\n        );\n\n        numCLH++;\n        mapCLH[ numCLH ] = ICLHouse( address( pxyCLH ) );\n        mapIdCLH[ address( pxyCLH ) ] = numCLH;\n\n        emit evtNewCLH( address( pxyCLH ), _houseName, numCLH );\n    }\n\n\n    /// @notice Get the address of the CLH contract logic\n    function getCLHImplementation() external view returns (address) {\n        return beaconCLH.implementation();\n    }\n\n    /// @notice Update the CLLConstructorCLH contract Address\n    function UpdateCLLConstructorCLH( address _CLLConstructorCLH ) external onlyOwner {\n        address oldAddr = CLLConstructorCLH;\n        CLLConstructorCLH = _CLLConstructorCLH;\n        emit evtUpdateCLC( \"CLLConstructorCLH\", oldAddr, _CLLConstructorCLH );\n    }\n\n    /// @notice Update the CLLUserManagement contract Address\n    function UpdateCLLUserManagement( address _CLLUserManagement ) external onlyOwner {\n        address oldAddr = CLLUserManagement;\n        CLLUserManagement = _CLLUserManagement;\n        emit evtUpdateCLC( \"CLLUserManagement\", oldAddr, _CLLUserManagement );\n    }\n\n    /// @notice Update the CLLGovernance contract Address\n    function UpdateCLLGovernance( address _CLLGovernance ) external onlyOwner {\n        address oldAddr = CLLGovernance;\n        CLLGovernance = _CLLGovernance;\n        emit evtUpdateCLC( \"CLLGovernance\", oldAddr, _CLLGovernance );\n    }\n\n    /// @notice Update the CLHAPI contract Address\n    function UpdateCLHAPI( address _CLHAPI ) external onlyOwner {\n        address oldAddr = CLHAPI;\n        CLHAPI = _CLHAPI;\n        emit evtUpdateCLC( \"CLHAPI\", oldAddr, _CLHAPI );\n    }\n}",
  "sourceMap": "496:6771:49:-:0;;;2063:53;;;;;;;;;-1:-1:-1;2087:22:49;:20;:22::i;:::-;496:6771;;5388:279:1;5456:13;;;;;;;5455:14;5447:66;;;;-1:-1:-1;;;5447:66:1;;216:2:62;5447:66:1;;;198:21:62;255:2;235:18;;;228:30;294:34;274:18;;;267:62;-1:-1:-1;;;345:18:62;;;338:37;392:19;;5447:66:1;;;;;;;;5527:12;;5542:15;5527:12;;;:30;5523:138;;;5573:12;:30;;-1:-1:-1;;5573:30:1;5588:15;5573:30;;;;;;5622:28;;564:36:62;;;5622:28:1;;552:2:62;537:18;5622:28:1;;;;;;;5523:138;5388:279::o;422:184:62:-;496:6771:49;;;;;;",
  "sourcePath": "contracts/CLFactory/CLFactory.sol",
  "type": "contract"
}